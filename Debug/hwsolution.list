
hwsolution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026bb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a74  08026d50  08026d50  00036d50  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080297c4  080297c4  0004045c  2**0
                  CONTENTS
  4 .ARM          00000008  080297c4  080297c4  000397c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080297cc  080297cc  0004045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080297cc  080297cc  000397cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080297d4  080297d4  000397d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000045c  20000000  080297d8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0004045c  2**0
                  CONTENTS
 10 .bss          000022f8  2000045c  2000045c  0004045c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002754  20002754  0004045c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004045c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0010efbc  00000000  00000000  0004048c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00011570  00000000  00000000  0014f448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004f30  00000000  00000000  001609b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004cd0  00000000  00000000  001658e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033da4  00000000  00000000  0016a5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005820b  00000000  00000000  0019e35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018e25a  00000000  00000000  001f6567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  003847c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00018220  00000000  00000000  00384814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000045c 	.word	0x2000045c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08026d30 	.word	0x08026d30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000460 	.word	0x20000460
 80001cc:	08026d30 	.word	0x08026d30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_ldivmod>:
 8000c9c:	b97b      	cbnz	r3, 8000cbe <__aeabi_ldivmod+0x22>
 8000c9e:	b972      	cbnz	r2, 8000cbe <__aeabi_ldivmod+0x22>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bfbe      	ittt	lt
 8000ca4:	2000      	movlt	r0, #0
 8000ca6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000caa:	e006      	blt.n	8000cba <__aeabi_ldivmod+0x1e>
 8000cac:	bf08      	it	eq
 8000cae:	2800      	cmpeq	r0, #0
 8000cb0:	bf1c      	itt	ne
 8000cb2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb6:	f04f 30ff 	movne.w	r0, #4294967295
 8000cba:	f000 b9f5 	b.w	80010a8 <__aeabi_idiv0>
 8000cbe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	db09      	blt.n	8000cde <__aeabi_ldivmod+0x42>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db1a      	blt.n	8000d04 <__aeabi_ldivmod+0x68>
 8000cce:	f000 f883 	bl	8000dd8 <__udivmoddi4>
 8000cd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cda:	b004      	add	sp, #16
 8000cdc:	4770      	bx	lr
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db1b      	blt.n	8000d20 <__aeabi_ldivmod+0x84>
 8000ce8:	f000 f876 	bl	8000dd8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d02:	4770      	bx	lr
 8000d04:	4252      	negs	r2, r2
 8000d06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0a:	f000 f865 	bl	8000dd8 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4240      	negs	r0, r0
 8000d1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f857 	bl	8000dd8 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4252      	negs	r2, r2
 8000d36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_uldivmod>:
 8000d3c:	b953      	cbnz	r3, 8000d54 <__aeabi_uldivmod+0x18>
 8000d3e:	b94a      	cbnz	r2, 8000d54 <__aeabi_uldivmod+0x18>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bf08      	it	eq
 8000d44:	2800      	cmpeq	r0, #0
 8000d46:	bf1c      	itt	ne
 8000d48:	f04f 31ff 	movne.w	r1, #4294967295
 8000d4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d50:	f000 b9aa 	b.w	80010a8 <__aeabi_idiv0>
 8000d54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d5c:	f000 f83c 	bl	8000dd8 <__udivmoddi4>
 8000d60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_d2lz>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2300      	movs	r3, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	460d      	mov	r5, r1
 8000d76:	f7ff febb 	bl	8000af0 <__aeabi_dcmplt>
 8000d7a:	b928      	cbnz	r0, 8000d88 <__aeabi_d2lz+0x1c>
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	4629      	mov	r1, r5
 8000d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d84:	f000 b80a 	b.w	8000d9c <__aeabi_d2ulz>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8e:	f000 f805 	bl	8000d9c <__aeabi_d2ulz>
 8000d92:	4240      	negs	r0, r0
 8000d94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d98:	bd38      	pop	{r3, r4, r5, pc}
 8000d9a:	bf00      	nop

08000d9c <__aeabi_d2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__aeabi_d2ulz+0x34>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4606      	mov	r6, r0
 8000da4:	460f      	mov	r7, r1
 8000da6:	f7ff fc31 	bl	800060c <__aeabi_dmul>
 8000daa:	f7ff ff07 	bl	8000bbc <__aeabi_d2uiz>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff fbb2 	bl	8000518 <__aeabi_ui2d>
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__aeabi_d2ulz+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff fc28 	bl	800060c <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	f7ff fa6a 	bl	800029c <__aeabi_dsub>
 8000dc8:	f7ff fef8 	bl	8000bbc <__aeabi_d2uiz>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd0:	3df00000 	.word	0x3df00000
 8000dd4:	41f00000 	.word	0x41f00000

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	4604      	mov	r4, r0
 8000de0:	468e      	mov	lr, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d14d      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de6:	428a      	cmp	r2, r1
 8000de8:	4694      	mov	ip, r2
 8000dea:	d969      	bls.n	8000ec0 <__udivmoddi4+0xe8>
 8000dec:	fab2 f282 	clz	r2, r2
 8000df0:	b152      	cbz	r2, 8000e08 <__udivmoddi4+0x30>
 8000df2:	fa01 f302 	lsl.w	r3, r1, r2
 8000df6:	f1c2 0120 	rsb	r1, r2, #32
 8000dfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e02:	ea41 0e03 	orr.w	lr, r1, r3
 8000e06:	4094      	lsls	r4, r2
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	0c21      	lsrs	r1, r4, #16
 8000e0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e12:	fa1f f78c 	uxth.w	r7, ip
 8000e16:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1e:	fb06 f107 	mul.w	r1, r6, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 811f 	bcs.w	8001070 <__udivmoddi4+0x298>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 811c 	bls.w	8001070 <__udivmoddi4+0x298>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x92>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 810a 	bcs.w	8001074 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8107 	bls.w	8001074 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6e:	1be4      	subs	r4, r4, r7
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa4>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d909      	bls.n	8000e9a <__udivmoddi4+0xc2>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	f000 80ef 	beq.w	800106a <__udivmoddi4+0x292>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e92:	4630      	mov	r0, r6
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	fab3 f683 	clz	r6, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d14a      	bne.n	8000f38 <__udivmoddi4+0x160>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xd4>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 80f9 	bhi.w	800109e <__udivmoddi4+0x2c6>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e0      	beq.n	8000e7c <__udivmoddi4+0xa4>
 8000eba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ebe:	e7dd      	b.n	8000e7c <__udivmoddi4+0xa4>
 8000ec0:	b902      	cbnz	r2, 8000ec4 <__udivmoddi4+0xec>
 8000ec2:	deff      	udf	#255	; 0xff
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	f040 8092 	bne.w	8000ff2 <__udivmoddi4+0x21a>
 8000ece:	eba1 010c 	sub.w	r1, r1, ip
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f fe8c 	uxth.w	lr, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	0c20      	lsrs	r0, r4, #16
 8000ede:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eea:	fb0e f003 	mul.w	r0, lr, r3
 8000eee:	4288      	cmp	r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x12c>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x12a>
 8000efc:	4288      	cmp	r0, r1
 8000efe:	f200 80cb 	bhi.w	8001098 <__udivmoddi4+0x2c0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f14:	fb0e fe00 	mul.w	lr, lr, r0
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x156>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f24:	d202      	bcs.n	8000f2c <__udivmoddi4+0x154>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	f200 80bb 	bhi.w	80010a2 <__udivmoddi4+0x2ca>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	eba4 040e 	sub.w	r4, r4, lr
 8000f32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x9a>
 8000f38:	f1c6 0720 	rsb	r7, r6, #32
 8000f3c:	40b3      	lsls	r3, r6
 8000f3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f46:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	40f9      	lsrs	r1, r7
 8000f52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f56:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5e:	0c20      	lsrs	r0, r4, #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fb09 1118 	mls	r1, r9, r8, r1
 8000f68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f70:	4288      	cmp	r0, r1
 8000f72:	fa02 f206 	lsl.w	r2, r2, r6
 8000f76:	d90b      	bls.n	8000f90 <__udivmoddi4+0x1b8>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f80:	f080 8088 	bcs.w	8001094 <__udivmoddi4+0x2bc>
 8000f84:	4288      	cmp	r0, r1
 8000f86:	f240 8085 	bls.w	8001094 <__udivmoddi4+0x2bc>
 8000f8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f98:	fb09 1110 	mls	r1, r9, r0, r1
 8000f9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa4:	458e      	cmp	lr, r1
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x1e2>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb0:	d26c      	bcs.n	800108c <__udivmoddi4+0x2b4>
 8000fb2:	458e      	cmp	lr, r1
 8000fb4:	d96a      	bls.n	800108c <__udivmoddi4+0x2b4>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4461      	add	r1, ip
 8000fba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc2:	eba1 010e 	sub.w	r1, r1, lr
 8000fc6:	42a1      	cmp	r1, r4
 8000fc8:	46c8      	mov	r8, r9
 8000fca:	46a6      	mov	lr, r4
 8000fcc:	d356      	bcc.n	800107c <__udivmoddi4+0x2a4>
 8000fce:	d053      	beq.n	8001078 <__udivmoddi4+0x2a0>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x212>
 8000fd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fda:	fa01 f707 	lsl.w	r7, r1, r7
 8000fde:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe2:	40f1      	lsrs	r1, r6
 8000fe4:	431f      	orrs	r7, r3
 8000fe6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	f1c2 0320 	rsb	r3, r2, #32
 8000ff6:	40d8      	lsrs	r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	fa21 f303 	lsr.w	r3, r1, r3
 8001000:	4091      	lsls	r1, r2
 8001002:	4301      	orrs	r1, r0
 8001004:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001008:	fa1f fe8c 	uxth.w	lr, ip
 800100c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001010:	fb07 3610 	mls	r6, r7, r0, r3
 8001014:	0c0b      	lsrs	r3, r1, #16
 8001016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101a:	fb00 f60e 	mul.w	r6, r0, lr
 800101e:	429e      	cmp	r6, r3
 8001020:	fa04 f402 	lsl.w	r4, r4, r2
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x260>
 8001026:	eb1c 0303 	adds.w	r3, ip, r3
 800102a:	f100 38ff 	add.w	r8, r0, #4294967295
 800102e:	d22f      	bcs.n	8001090 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d92d      	bls.n	8001090 <__udivmoddi4+0x2b8>
 8001034:	3802      	subs	r0, #2
 8001036:	4463      	add	r3, ip
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	b289      	uxth	r1, r1
 800103c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001040:	fb07 3316 	mls	r3, r7, r6, r3
 8001044:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001048:	fb06 f30e 	mul.w	r3, r6, lr
 800104c:	428b      	cmp	r3, r1
 800104e:	d908      	bls.n	8001062 <__udivmoddi4+0x28a>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f106 38ff 	add.w	r8, r6, #4294967295
 8001058:	d216      	bcs.n	8001088 <__udivmoddi4+0x2b0>
 800105a:	428b      	cmp	r3, r1
 800105c:	d914      	bls.n	8001088 <__udivmoddi4+0x2b0>
 800105e:	3e02      	subs	r6, #2
 8001060:	4461      	add	r1, ip
 8001062:	1ac9      	subs	r1, r1, r3
 8001064:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001068:	e738      	b.n	8000edc <__udivmoddi4+0x104>
 800106a:	462e      	mov	r6, r5
 800106c:	4628      	mov	r0, r5
 800106e:	e705      	b.n	8000e7c <__udivmoddi4+0xa4>
 8001070:	4606      	mov	r6, r0
 8001072:	e6e3      	b.n	8000e3c <__udivmoddi4+0x64>
 8001074:	4618      	mov	r0, r3
 8001076:	e6f8      	b.n	8000e6a <__udivmoddi4+0x92>
 8001078:	454b      	cmp	r3, r9
 800107a:	d2a9      	bcs.n	8000fd0 <__udivmoddi4+0x1f8>
 800107c:	ebb9 0802 	subs.w	r8, r9, r2
 8001080:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001084:	3801      	subs	r0, #1
 8001086:	e7a3      	b.n	8000fd0 <__udivmoddi4+0x1f8>
 8001088:	4646      	mov	r6, r8
 800108a:	e7ea      	b.n	8001062 <__udivmoddi4+0x28a>
 800108c:	4620      	mov	r0, r4
 800108e:	e794      	b.n	8000fba <__udivmoddi4+0x1e2>
 8001090:	4640      	mov	r0, r8
 8001092:	e7d1      	b.n	8001038 <__udivmoddi4+0x260>
 8001094:	46d0      	mov	r8, sl
 8001096:	e77b      	b.n	8000f90 <__udivmoddi4+0x1b8>
 8001098:	3b02      	subs	r3, #2
 800109a:	4461      	add	r1, ip
 800109c:	e732      	b.n	8000f04 <__udivmoddi4+0x12c>
 800109e:	4630      	mov	r0, r6
 80010a0:	e709      	b.n	8000eb6 <__udivmoddi4+0xde>
 80010a2:	4464      	add	r4, ip
 80010a4:	3802      	subs	r0, #2
 80010a6:	e742      	b.n	8000f2e <__udivmoddi4+0x156>

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <_Z15LIS3DSH_WriteIOhPhh>:
static float __Z_Scale = 1.0f;
//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 80010c0:	2200      	movs	r2, #0
 80010c2:	2108      	movs	r1, #8
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010c6:	f008 fa1b 	bl	8009500 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 80010ca:	f107 010f 	add.w	r1, r7, #15
 80010ce:	230a      	movs	r3, #10
 80010d0:	2201      	movs	r2, #1
 80010d2:	480a      	ldr	r0, [pc, #40]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010d4:	f00a f9a3 	bl	800b41e <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	230a      	movs	r3, #10
 80010de:	6839      	ldr	r1, [r7, #0]
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010e2:	f00a f99c 	bl	800b41e <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 80010e6:	2201      	movs	r2, #1
 80010e8:	2108      	movs	r1, #8
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010ec:	f008 fa08 	bl	8009500 <HAL_GPIO_WritePin>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	20000478 	.word	0x20000478

08001100 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>:
		dataR[i] = spiBuf[i];
	}
}
//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	73fb      	strb	r3, [r7, #15]

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 800110e:	2258      	movs	r2, #88	; 0x58
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	4855      	ldr	r0, [pc, #340]	; (8001268 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x168>)
 8001114:	f021 fc74 	bl	8022a00 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	78db      	ldrb	r3, [r3, #3]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	b2da      	uxtb	r2, r3
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	4313      	orrs	r3, r2
 8001126:	b2db      	uxtb	r3, r3
 8001128:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	f023 030f 	bic.w	r3, r3, #15
 8001132:	b2da      	uxtb	r2, r3
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	4313      	orrs	r3, r2
 8001138:	b2db      	uxtb	r3, r3
 800113a:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 800113c:	f107 030f 	add.w	r3, r7, #15
 8001140:	2201      	movs	r2, #1
 8001142:	4619      	mov	r1, r3
 8001144:	2020      	movs	r0, #32
 8001146:	f7ff ffb1 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>

	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	789b      	ldrb	r3, [r3, #2]
 8001152:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001156:	b2da      	uxtb	r2, r3
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	4313      	orrs	r3, r2
 800115c:	b2db      	uxtb	r3, r3
 800115e:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	785b      	ldrb	r3, [r3, #1]
 8001164:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001168:	b2da      	uxtb	r2, r3
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	4313      	orrs	r3, r2
 800116e:	b2db      	uxtb	r3, r3
 8001170:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 8001172:	f107 030f 	add.w	r3, r7, #15
 8001176:	2201      	movs	r2, #1
 8001178:	4619      	mov	r1, r3
 800117a:	2024      	movs	r0, #36	; 0x24
 800117c:	f7ff ff96 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>

	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	791b      	ldrb	r3, [r3, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d008      	beq.n	800119a <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x9a>
	{
		spiData = 0x88;
 8001188:	2388      	movs	r3, #136	; 0x88
 800118a:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 800118c:	f107 030f 	add.w	r3, r7, #15
 8001190:	2201      	movs	r2, #1
 8001192:	4619      	mov	r1, r3
 8001194:	2023      	movs	r0, #35	; 0x23
 8001196:	f7ff ff89 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>
	}

	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	785b      	ldrb	r3, [r3, #1]
 800119e:	2b20      	cmp	r3, #32
 80011a0:	d858      	bhi.n	8001254 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>
 80011a2:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0xa8>)
 80011a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a8:	0800122d 	.word	0x0800122d
 80011ac:	08001255 	.word	0x08001255
 80011b0:	08001255 	.word	0x08001255
 80011b4:	08001255 	.word	0x08001255
 80011b8:	08001255 	.word	0x08001255
 80011bc:	08001255 	.word	0x08001255
 80011c0:	08001255 	.word	0x08001255
 80011c4:	08001255 	.word	0x08001255
 80011c8:	08001235 	.word	0x08001235
 80011cc:	08001255 	.word	0x08001255
 80011d0:	08001255 	.word	0x08001255
 80011d4:	08001255 	.word	0x08001255
 80011d8:	08001255 	.word	0x08001255
 80011dc:	08001255 	.word	0x08001255
 80011e0:	08001255 	.word	0x08001255
 80011e4:	08001255 	.word	0x08001255
 80011e8:	0800123d 	.word	0x0800123d
 80011ec:	08001255 	.word	0x08001255
 80011f0:	08001255 	.word	0x08001255
 80011f4:	08001255 	.word	0x08001255
 80011f8:	08001255 	.word	0x08001255
 80011fc:	08001255 	.word	0x08001255
 8001200:	08001255 	.word	0x08001255
 8001204:	08001255 	.word	0x08001255
 8001208:	08001245 	.word	0x08001245
 800120c:	08001255 	.word	0x08001255
 8001210:	08001255 	.word	0x08001255
 8001214:	08001255 	.word	0x08001255
 8001218:	08001255 	.word	0x08001255
 800121c:	08001255 	.word	0x08001255
 8001220:	08001255 	.word	0x08001255
 8001224:	08001255 	.word	0x08001255
 8001228:	0800124d 	.word	0x0800124d
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 800122e:	4a10      	ldr	r2, [pc, #64]	; (8001270 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x170>)
 8001230:	601a      	str	r2, [r3, #0]
			break;
 8001232:	e00f      	b.n	8001254 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 8001236:	4a0f      	ldr	r2, [pc, #60]	; (8001274 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x174>)
 8001238:	601a      	str	r2, [r3, #0]
			break;
 800123a:	e00b      	b.n	8001254 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 800123e:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x178>)
 8001240:	601a      	str	r2, [r3, #0]
			break;
 8001242:	e007      	b.n	8001254 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 8001246:	4a0d      	ldr	r2, [pc, #52]	; (800127c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x17c>)
 8001248:	601a      	str	r2, [r3, #0]
			break;
 800124a:	e003      	b.n	8001254 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 800124e:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x180>)
 8001250:	601a      	str	r2, [r3, #0]
			break;
 8001252:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 8001254:	2201      	movs	r2, #1
 8001256:	2108      	movs	r1, #8
 8001258:	480a      	ldr	r0, [pc, #40]	; (8001284 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x184>)
 800125a:	f008 f951 	bl	8009500 <HAL_GPIO_WritePin>
}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000478 	.word	0x20000478
 800126c:	20000000 	.word	0x20000000
 8001270:	3d75c28f 	.word	0x3d75c28f
 8001274:	3df5c28f 	.word	0x3df5c28f
 8001278:	3e3851ec 	.word	0x3e3851ec
 800127c:	3e75c28f 	.word	0x3e75c28f
 8001280:	3f3ae148 	.word	0x3f3ae148
 8001284:	40021000 	.word	0x40021000

08001288 <_Z19LIS3DSH_X_calibrateff>:

}
//** Calibration functions **//
//1. Set X-Axis calibrate
void LIS3DSH_X_calibrate(float x_min, float x_max)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001292:	edc7 0a00 	vstr	s1, [r7]
	__X_Bias = (x_max+x_min)/2.0f;
 8001296:	ed97 7a00 	vldr	s14, [r7]
 800129a:	edd7 7a01 	vldr	s15, [r7, #4]
 800129e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012a2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <_Z19LIS3DSH_X_calibrateff+0x50>)
 80012ac:	edc3 7a00 	vstr	s15, [r3]
	__X_Scale = (2*1000)/(x_max - x_min);
 80012b0:	ed97 7a00 	vldr	s14, [r7]
 80012b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012bc:	eddf 6a07 	vldr	s13, [pc, #28]	; 80012dc <_Z19LIS3DSH_X_calibrateff+0x54>
 80012c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <_Z19LIS3DSH_X_calibrateff+0x58>)
 80012c6:	edc3 7a00 	vstr	s15, [r3]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	200004d0 	.word	0x200004d0
 80012dc:	44fa0000 	.word	0x44fa0000
 80012e0:	20000004 	.word	0x20000004

080012e4 <_Z19LIS3DSH_Y_calibrateff>:
//2. Set Y-Axis calibrate
void LIS3DSH_Y_calibrate(float y_min, float y_max)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80012ee:	edc7 0a00 	vstr	s1, [r7]
	__Y_Bias = (y_max+y_min)/2.0f;
 80012f2:	ed97 7a00 	vldr	s14, [r7]
 80012f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012fe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001302:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <_Z19LIS3DSH_Y_calibrateff+0x50>)
 8001308:	edc3 7a00 	vstr	s15, [r3]
	__Y_Scale = (2*1000)/(y_max - y_min);
 800130c:	ed97 7a00 	vldr	s14, [r7]
 8001310:	edd7 7a01 	vldr	s15, [r7, #4]
 8001314:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001318:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001338 <_Z19LIS3DSH_Y_calibrateff+0x54>
 800131c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <_Z19LIS3DSH_Y_calibrateff+0x58>)
 8001322:	edc3 7a00 	vstr	s15, [r3]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	200004d4 	.word	0x200004d4
 8001338:	44fa0000 	.word	0x44fa0000
 800133c:	20000008 	.word	0x20000008

08001340 <_Z19LIS3DSH_Z_calibrateff>:
//3. Set Z-Axis calibrate
void LIS3DSH_Z_calibrate(float z_min, float z_max)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	ed87 0a01 	vstr	s0, [r7, #4]
 800134a:	edc7 0a00 	vstr	s1, [r7]
	__Z_Bias = (z_max+z_min)/2.0f;
 800134e:	ed97 7a00 	vldr	s14, [r7]
 8001352:	edd7 7a01 	vldr	s15, [r7, #4]
 8001356:	ee37 7a27 	vadd.f32	s14, s14, s15
 800135a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800135e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <_Z19LIS3DSH_Z_calibrateff+0x50>)
 8001364:	edc3 7a00 	vstr	s15, [r3]
	__Z_Scale = (2*1000)/(z_max - z_min);
 8001368:	ed97 7a00 	vldr	s14, [r7]
 800136c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001370:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001374:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001394 <_Z19LIS3DSH_Z_calibrateff+0x54>
 8001378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <_Z19LIS3DSH_Z_calibrateff+0x58>)
 800137e:	edc3 7a00 	vstr	s15, [r3]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	200004d8 	.word	0x200004d8
 8001394:	44fa0000 	.word	0x44fa0000
 8001398:	2000000c 	.word	0x2000000c

0800139c <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80013a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013aa:	eef0 7ae7 	vabs.f32	s15, s15
 80013ae:	eeb0 0a67 	vmov.f32	s0, s15
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	fab3 f383 	clz	r3, r3
 80013ca:	f1c3 031f 	rsb	r3, r3, #31
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	6039      	str	r1, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	1e5a      	subs	r2, r3, #1
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d005      	beq.n	800141a <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 8001410:	4a17      	ldr	r2, [pc, #92]	; (8001470 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 8001412:	2137      	movs	r1, #55	; 0x37
 8001414:	4817      	ldr	r0, [pc, #92]	; (8001474 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 8001416:	f021 fa79 	bl	802290c <__assert_func>

	if(align && size)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d01f      	beq.n	8001460 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d01c      	beq.n	8001460 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3301      	adds	r3, #1
 800142a:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4413      	add	r3, r2
 8001432:	2101      	movs	r1, #1
 8001434:	4618      	mov	r0, r3
 8001436:	f018 fe3b 	bl	801a0b0 <_Z9ei_callocjj>
 800143a:	60f8      	str	r0, [r7, #12]

		if(p)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00e      	beq.n	8001460 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4413      	add	r3, r2
 8001448:	1c5a      	adds	r2, r3, #1
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	425b      	negs	r3, r3
 800144e:	4013      	ands	r3, r2
 8001450:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	1ad2      	subs	r2, r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	3b02      	subs	r3, #2
 800145c:	b292      	uxth	r2, r2
 800145e:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 8001460:	697b      	ldr	r3, [r7, #20]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	08026d7c 	.word	0x08026d7c
 8001470:	08026d98 	.word	0x08026d98
 8001474:	08026dd0 	.word	0x08026dd0

08001478 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	assert(ptr);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d105      	bne.n	8001492 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 8001488:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 800148a:	215a      	movs	r1, #90	; 0x5a
 800148c:	480b      	ldr	r0, [pc, #44]	; (80014bc <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 800148e:	f021 fa3d 	bl	802290c <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8001498:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 800149a:	89fb      	ldrh	r3, [r7, #14]
 800149c:	425b      	negs	r3, r3
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 80014a4:	68b8      	ldr	r0, [r7, #8]
 80014a6:	f018 fe11 	bl	801a0cc <_Z7ei_freePv>
}
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	08026e54 	.word	0x08026e54
 80014b8:	08026e58 	.word	0x08026e58
 80014bc:	08026dd0 	.word	0x08026dd0

080014c0 <_ZNSt14_Bit_referenceC1EPmm>:
  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_mask(__y) { }
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4618      	mov	r0, r3
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <_ZNKSt14_Bit_referencecvbEv>:

#if __cplusplus >= 201103L
    _Bit_reference(const _Bit_reference&) = default;
#endif

    operator bool() const _GLIBCXX_NOEXCEPT
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
    { return !!(*_M_p & _M_mask); }
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	bf14      	ite	ne
 80014fe:	2301      	movne	r3, #1
 8001500:	2300      	moveq	r3, #0
 8001502:	b2db      	uxtb	r3, r3
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <_ZNSt14_Bit_referenceaSEb>:

    _Bit_reference&
    operator=(bool __x) _GLIBCXX_NOEXCEPT
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]
    {
      if (__x)
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d009      	beq.n	8001536 <_ZNSt14_Bit_referenceaSEb+0x26>
	*_M_p |= _M_mask;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6819      	ldr	r1, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	e009      	b.n	800154a <_ZNSt14_Bit_referenceaSEb+0x3a>
      else
	*_M_p &= ~_M_mask;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6819      	ldr	r1, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	43da      	mvns	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	400a      	ands	r2, r1
 8001548:	601a      	str	r2, [r3, #0]
      return *this;
 800154a:	687b      	ldr	r3, [r7, #4]
    }
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_ZNSt18_Bit_iterator_baseC1EPmj>:
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_offset(__y) { }
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <_ZNSt18_Bit_iterator_base7_M_incrEi>:
	  --_M_p;
	}
    }

    void
    _M_incr(ptrdiff_t __i)
 800157e:	b480      	push	{r7}
 8001580:	b085      	sub	sp, #20
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
    {
      difference_type __n = __i + _M_offset;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
      _M_p += __n / int(_S_word_bit);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	da00      	bge.n	800159e <_ZNSt18_Bit_iterator_base7_M_incrEi+0x20>
 800159c:	331f      	adds	r3, #31
 800159e:	115b      	asrs	r3, r3, #5
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	441a      	add	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	601a      	str	r2, [r3, #0]
      __n = __n % int(_S_word_bit);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	425a      	negs	r2, r3
 80015ac:	f003 031f 	and.w	r3, r3, #31
 80015b0:	f002 021f 	and.w	r2, r2, #31
 80015b4:	bf58      	it	pl
 80015b6:	4253      	negpl	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
      if (__n < 0)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	da07      	bge.n	80015d0 <_ZNSt18_Bit_iterator_base7_M_incrEi+0x52>
	{
	  __n += int(_S_word_bit);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3320      	adds	r3, #32
 80015c4:	60fb      	str	r3, [r7, #12]
	  --_M_p;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	1f1a      	subs	r2, r3, #4
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	601a      	str	r2, [r3, #0]
	}
      _M_offset = static_cast<unsigned int>(__n);
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	605a      	str	r2, [r3, #4]
    }
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <_ZNSt13_Bit_iteratorC1Ev>:
#else
    typedef _Bit_reference* pointer;
#endif
    typedef _Bit_iterator   iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ffb1 	bl	8001558 <_ZNSt18_Bit_iterator_baseC1EPmj>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <_ZNSt13_Bit_iteratorC1EPmj>:

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ffa0 	bl	8001558 <_ZNSt18_Bit_iterator_baseC1EPmj>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <_ZNKSt13_Bit_iteratordeEv>:
    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
    { return reference(_M_p, 1UL << _M_offset); }
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	6819      	ldr	r1, [r3, #0]
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	461a      	mov	r2, r3
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff3f 	bl	80014c0 <_ZNSt14_Bit_referenceC1EPmm>
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <_ZNSt13_Bit_iteratorpLEi>:
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	6039      	str	r1, [r7, #0]
    {
      _M_incr(__i);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6839      	ldr	r1, [r7, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff90 	bl	800157e <_ZNSt18_Bit_iterator_base7_M_incrEi>
      return *this;
 800165e:	687b      	ldr	r3, [r7, #4]
    }
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <_ZStplRKSt13_Bit_iteratori>:
    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }

    friend iterator
    operator+(const iterator& __x, difference_type __n)
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
    {
      iterator __tmp = __x;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	e892 0003 	ldmia.w	r2, {r0, r1}
 800167c:	e883 0003 	stmia.w	r3, {r0, r1}
      __tmp += __n;
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f7ff ffe1 	bl	800164a <_ZNSt13_Bit_iteratorpLEi>
      return __tmp;
 8001688:	bf00      	nop
    }
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d005      	beq.n	80016f6 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	2203      	movs	r2, #3
 80016f4:	4798      	blx	r3
    }
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf0c      	ite	eq
 8001710:	2301      	moveq	r3, #1
 8001712:	2300      	movne	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d006      	beq.n	8001744 <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2200      	movs	r2, #0
 8001740:	731a      	strb	r2, [r3, #12]
 8001742:	e00e      	b.n	8001762 <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	fb02 f303 	mul.w	r3, r2, r3
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	2101      	movs	r1, #1
 8001750:	4618      	mov	r0, r3
 8001752:	f018 fcad 	bl	801a0b0 <_Z9ei_callocjj>
 8001756:	4602      	mov	r2, r0
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2201      	movs	r2, #1
 8001760:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <_ZN2ei9ei_matrixD1Ev+0x22>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7b1b      	ldrb	r3, [r3, #12]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d004      	beq.n	800179a <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f018 fc99 	bl	801a0cc <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <_ZN2ei9ei_matrix11get_row_ptrEj>:
     * @brief Get a pointer to the buffer advanced by n rows
     *
     * @param row Numer of rows to advance the returned buffer pointer
     * @return float* Pointer to the buffer at the start of row n
     */
    float *get_row_ptr(size_t row)
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
    {
        return buffer + row * cols;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	6839      	ldr	r1, [r7, #0]
 80017b8:	fb01 f303 	mul.w	r3, r1, r3
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
    }
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <_ZN2ei12ei_matrix_i8C1EmmPa>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix_i8(
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d006      	beq.n	80017ee <_ZN2ei12ei_matrix_i8C1EmmPa+0x22>
            buffer = a_buffer;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	731a      	strb	r2, [r3, #12]
 80017ec:	e00d      	b.n	800180a <_ZN2ei12ei_matrix_i8C1EmmPa+0x3e>
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	fb02 f303 	mul.w	r3, r2, r3
 80017f6:	2101      	movs	r1, #1
 80017f8:	4618      	mov	r0, r3
 80017fa:	f018 fc59 	bl	801a0b0 <_Z9ei_callocjj>
 80017fe:	4602      	mov	r2, r0
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2201      	movs	r2, #1
 8001808:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_ZN2ei12ei_matrix_i8D1Ev>:

    ~ei_matrix_i8() {
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d008      	beq.n	8001842 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7b1b      	ldrb	r3, [r3, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d004      	beq.n	8001842 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
            ei_free(buffer);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f018 fc45 	bl	801a0cc <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
 8001850:	e7fe      	b.n	8001850 <_ZSt25__throw_bad_function_callv+0x4>

08001852 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	ed87 0a01 	vstr	s0, [r7, #4]
 800185c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001860:	f01e fdd8 	bl	8020414 <expf>
 8001864:	eef0 7a40 	vmov.f32	s15, s0
 8001868:	eeb0 0a67 	vmov.f32	s0, s15
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	ed87 0a01 	vstr	s0, [r7, #4]
 800187c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001880:	f01e fd08 	bl	8020294 <roundf>
 8001884:	eef0 7a40 	vmov.f32	s15, s0
 8001888:	eeb0 0a67 	vmov.f32	s0, s15
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <_ZN2ei5numpy4sqrtEf>:
// clang-format on

class numpy {
public:

    static float sqrt(float x) {
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	ed87 0a01 	vstr	s0, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80018a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80018aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b2:	db09      	blt.n	80018c8 <_ZN2ei5numpy4sqrtEf+0x36>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80018b4:	ed97 0a05 	vldr	s0, [r7, #20]
 80018b8:	f01e fe10 	bl	80204dc <sqrtf>
 80018bc:	eef0 7a40 	vmov.f32	s15, s0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 80018c6:	e004      	b.n	80018d2 <_ZN2ei5numpy4sqrtEf+0x40>
    }
    else
    {
      *pOut = 0.0f;
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80018d0:	bf00      	nop
#if EIDSP_USE_CMSIS_DSP
        float temp;
        arm_sqrt_f32(x, &temp);
        return temp;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	ee07 3a90 	vmov	s15, r3
#else
        return sqrtf(x);
#endif
    }
 80018d8:	eeb0 0a67 	vmov.f32	s0, s15
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>:
        }

        return EIDSP_OK;
    }

    static void transpose_in_place(matrix_t *matrix) {
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b096      	sub	sp, #88	; 0x58
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
        size_t size = matrix->cols * matrix->rows - 1;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6852      	ldr	r2, [r2, #4]
 80018f2:	fb02 f303 	mul.w	r3, r2, r3
 80018f6:	3b01      	subs	r3, #1
 80018f8:	64bb      	str	r3, [r7, #72]	; 0x48
        float temp; // temp for swap
        size_t next; // next item to swap
        size_t cycleBegin; // index of start of cycle
        size_t i; // location in matrix
        size_t all_done_mark = 1;
 80018fa:	2301      	movs	r3, #1
 80018fc:	64fb      	str	r3, [r7, #76]	; 0x4c
        ei_vector<bool> done(size+1,false);
 80018fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001900:	1c59      	adds	r1, r3, #1
 8001902:	2300      	movs	r3, #0
 8001904:	77fb      	strb	r3, [r7, #31]
 8001906:	f107 0320 	add.w	r3, r7, #32
 800190a:	f107 021f 	add.w	r2, r7, #31
 800190e:	f107 0008 	add.w	r0, r7, #8
 8001912:	f004 fc16 	bl	8006142 <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>

        i = 1; // Note that matrix[0] and last element of matrix won't move
 8001916:	2301      	movs	r3, #1
 8001918:	653b      	str	r3, [r7, #80]	; 0x50
        while (1)
        {
            cycleBegin = i;
 800191a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800191c:	647b      	str	r3, [r7, #68]	; 0x44
            temp = matrix->buffer[i];
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	657b      	str	r3, [r7, #84]	; 0x54
            do
            {
                size_t col = i % matrix->cols;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001932:	fbb3 f1f2 	udiv	r1, r3, r2
 8001936:	fb01 f202 	mul.w	r2, r1, r2
 800193a:	1a9b      	subs	r3, r3, r2
 800193c:	643b      	str	r3, [r7, #64]	; 0x40
                size_t row = i / matrix->cols;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001944:	fbb2 f3f3 	udiv	r3, r2, r3
 8001948:	63fb      	str	r3, [r7, #60]	; 0x3c
                // swap row and col to make new idx, b/c we want to know where in the transposed matrix
                next = col*matrix->rows + row;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001950:	fb02 f303 	mul.w	r3, r2, r3
 8001954:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001956:	4413      	add	r3, r2
 8001958:	63bb      	str	r3, [r7, #56]	; 0x38
                float temp2 = matrix->buffer[next];
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
                matrix->buffer[next] = temp;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001974:	601a      	str	r2, [r3, #0]
                temp = temp2;
 8001976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001978:	657b      	str	r3, [r7, #84]	; 0x54
                done[next] = true;
 800197a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197e:	f107 0108 	add.w	r1, r7, #8
 8001982:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001984:	4618      	mov	r0, r3
 8001986:	f004 fc04 	bl	8006192 <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>
 800198a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198e:	2101      	movs	r1, #1
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff fdbd 	bl	8001510 <_ZNSt14_Bit_referenceaSEb>
                i = next;
 8001996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001998:	653b      	str	r3, [r7, #80]	; 0x50
            }
            while (i != cycleBegin);
 800199a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800199c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800199e:	429a      	cmp	r2, r3
 80019a0:	d000      	beq.n	80019a4 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xc2>
            do
 80019a2:	e7c3      	b.n	800192c <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x4a>

            // start next cycle by find next not done
            for (i = all_done_mark; done[i]; i++) {
 80019a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019a6:	653b      	str	r3, [r7, #80]	; 0x50
 80019a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ac:	f107 0108 	add.w	r1, r7, #8
 80019b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80019b2:	4618      	mov	r0, r3
 80019b4:	f004 fbed 	bl	8006192 <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>
 80019b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fd92 	bl	80014e6 <_ZNKSt14_Bit_referencecvbEv>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0a8      	beq.n	800191a <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x38>
                all_done_mark++; // move the high water mark so we don't look again
 80019c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ca:	3301      	adds	r3, #1
 80019cc:	64fb      	str	r3, [r7, #76]	; 0x4c
                if(i>=size) { goto LOOP_END; }
 80019ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80019d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d203      	bcs.n	80019de <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xfc>
            for (i = all_done_mark; done[i]; i++) {
 80019d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019d8:	3301      	adds	r3, #1
 80019da:	653b      	str	r3, [r7, #80]	; 0x50
 80019dc:	e7e4      	b.n	80019a8 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xc6>
                if(i>=size) { goto LOOP_END; }
 80019de:	bf00      	nop
            }
        }
        LOOP_END:
        // finally, swap the row and column dimensions
        std::swap(matrix->rows, matrix->cols);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	1d1a      	adds	r2, r3, #4
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3308      	adds	r3, #8
 80019e8:	4619      	mov	r1, r3
 80019ea:	4610      	mov	r0, r2
 80019ec:	f004 fbfc 	bl	80061e8 <_ZSt4swapImENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
        ei_vector<bool> done(size+1,false);
 80019f0:	f107 0308 	add.w	r3, r7, #8
 80019f4:	4618      	mov	r0, r3
 80019f6:	f004 fbbf 	bl	8006178 <_ZNSt6vectorIbN2ei7EiAllocIbEEED1Ev>
    }
 80019fa:	bf00      	nop
 80019fc:	3758      	adds	r7, #88	; 0x58
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(matrix_t *matrix) {
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b084      	sub	sp, #16
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	4619      	mov	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	f000 f817 	bl	8001a4c <_ZN2ei5numpy9transposeEPfii>
 8001a1e:	60f8      	str	r0, [r7, #12]
        if (r != 0) {
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x28>
            return r;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	e00c      	b.n	8001a44 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x42>
        }

        uint16_t old_rows = matrix->rows;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	817b      	strh	r3, [r7, #10]
        uint16_t old_cols = matrix->cols;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	813b      	strh	r3, [r7, #8]

        matrix->rows = old_cols;
 8001a36:	893a      	ldrh	r2, [r7, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	605a      	str	r2, [r3, #4]
        matrix->cols = old_rows;
 8001a3c:	897a      	ldrh	r2, [r7, #10]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 8001a42:	2300      	movs	r3, #0
    }
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_ZN2ei5numpy9transposeEPfii>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(float *matrix, int rows, int columns) {
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b08f      	sub	sp, #60	; 0x3c
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001a60:	2300      	movs	r3, #0
 8001a62:	f7ff fe5e 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <_ZN2ei5numpy9transposeEPfii+0x24>
 8001a6c:	4c23      	ldr	r4, [pc, #140]	; (8001afc <_ZN2ei5numpy9transposeEPfii+0xb0>)
 8001a6e:	e03b      	b.n	8001ae8 <_ZN2ei5numpy9transposeEPfii+0x9c>
        if (!temp_matrix.buffer) {
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <_ZN2ei5numpy9transposeEPfii+0x2e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001a76:	4c21      	ldr	r4, [pc, #132]	; (8001afc <_ZN2ei5numpy9transposeEPfii+0xb0>)
 8001a78:	e036      	b.n	8001ae8 <_ZN2ei5numpy9transposeEPfii+0x9c>
        }

#if EIDSP_USE_CMSIS_DSP
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a80:	da03      	bge.n	8001a8a <_ZN2ei5numpy9transposeEPfii+0x3e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a88:	db01      	blt.n	8001a8e <_ZN2ei5numpy9transposeEPfii+0x42>
            return EIDSP_NARROWING;
 8001a8a:	4c1d      	ldr	r4, [pc, #116]	; (8001b00 <_ZN2ei5numpy9transposeEPfii+0xb4>)
 8001a8c:	e02c      	b.n	8001ae8 <_ZN2ei5numpy9transposeEPfii+0x9c>

        const arm_matrix_instance_f32 i_m = {
            static_cast<uint16_t>(columns),
            static_cast<uint16_t>(rows),
            matrix
        };
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	83bb      	strh	r3, [r7, #28]
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	83fb      	strh	r3, [r7, #30]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 o_m = {
            static_cast<uint16_t>(rows),
            static_cast<uint16_t>(columns),
            temp_matrix.buffer
        };
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	82bb      	strh	r3, [r7, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	82fb      	strh	r3, [r7, #22]
            temp_matrix.buffer
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        };
 8001aac:	61bb      	str	r3, [r7, #24]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 8001aae:	f107 0214 	add.w	r2, r7, #20
 8001ab2:	f107 031c 	add.w	r3, r7, #28
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f00d fb03 	bl	800f0c4 <arm_mat_trans_f32>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (status != ARM_MATH_SUCCESS) {
 8001ac4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <_ZN2ei5numpy9transposeEPfii+0x86>
            return status;
 8001acc:	f997 4037 	ldrsb.w	r4, [r7, #55]	; 0x37
 8001ad0:	e00a      	b.n	8001ae8 <_ZN2ei5numpy9transposeEPfii+0x9c>
                temp_matrix.buffer[j * columns + i] = matrix[i * rows + j];
            }
        }
#endif

        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 8001ad2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	fb02 f303 	mul.w	r3, r2, r3
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	461a      	mov	r2, r3
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f020 ff8d 	bl	8022a00 <memcpy>

        return EIDSP_OK;
 8001ae6:	2400      	movs	r4, #0
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 8001ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fe43 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
    }
 8001af2:	4623      	mov	r3, r4
 8001af4:	4618      	mov	r0, r3
 8001af6:	373c      	adds	r7, #60	; 0x3c
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd90      	pop	{r4, r7, pc}
 8001afc:	fffffc16 	.word	0xfffffc16
 8001b00:	fffffc0c 	.word	0xfffffc0c

08001b04 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 8001b10:	edd7 7a00 	vldr	s15, [r7]
 8001b14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b18:	eef4 7a47 	vcmp.f32	s15, s14
 8001b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b20:	d101      	bne.n	8001b26 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 8001b22:	2300      	movs	r3, #0
 8001b24:	e033      	b.n	8001b8e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2e:	d204      	bcs.n	8001b3a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b38:	d301      	bcc.n	8001b3e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 8001b3a:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 8001b3c:	e027      	b.n	8001b8e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	82bb      	strh	r3, [r7, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	82fb      	strh	r3, [r7, #22]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	81bb      	strh	r3, [r7, #12]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	81fb      	strh	r3, [r7, #14]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 8001b6a:	f107 020c 	add.w	r2, r7, #12
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4611      	mov	r1, r2
 8001b74:	ed97 0a00 	vldr	s0, [r7]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f00d fa6d 	bl	800f058 <arm_mat_scale_f32>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	e000      	b.n	8001b8e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 8001b8c:	2300      	movs	r3, #0
    }
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3720      	adds	r7, #32
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	fffffc0c 	.word	0xfffffc0c

08001b9c <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
     * Subtract from matrix in place
     * @param matrix
     * @param subtraction
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, float subtraction) {
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	ed87 0a00 	vstr	s0, [r7]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6892      	ldr	r2, [r2, #8]
 8001bb4:	fb02 f303 	mul.w	r3, r2, r3
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d215      	bcs.n	8001bea <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x4e>
            matrix->buffer[ix] -= subtraction;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	ed93 7a00 	vldr	s14, [r3]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	edd7 7a00 	vldr	s15, [r7]
 8001bda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bde:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	3301      	adds	r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	e7e0      	b.n	8001bac <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x10>
        }
        return EIDSP_OK;
 8001bea:	2300      	movs	r3, #0
    }
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>:
     * Add on a matrix in place, per row
     * @param matrix Input matrix (MxN)
     * @param add Scale matrix (Mx1)
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
        if (matrix->rows != subtract_matrix->rows) {
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d001      	beq.n	8001c12 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001c0e:	4c26      	ldr	r4, [pc, #152]	; (8001ca8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 8001c10:	e045      	b.n	8001c9e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        if (subtract_matrix->cols != 1) {
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d001      	beq.n	8001c1e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001c1a:	4c23      	ldr	r4, [pc, #140]	; (8001ca8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 8001c1c:	e03f      	b.n	8001c9e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d237      	bcs.n	8001c9c <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa4>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689d      	ldr	r5, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	69f9      	ldr	r1, [r7, #28]
 8001c3a:	fb01 f303 	mul.w	r3, r1, r3
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	f107 0008 	add.w	r0, r7, #8
 8001c46:	462a      	mov	r2, r5
 8001c48:	2101      	movs	r1, #1
 8001c4a:	f7ff fd6a 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x62>
 8001c54:	4c15      	ldr	r4, [pc, #84]	; (8001cac <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb4>)
 8001c56:	2500      	movs	r5, #0
 8001c58:	e015      	b.n	8001c86 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8e>
            int ret = subtract(&temp, subtract_matrix->buffer[row]);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	f107 0308 	add.w	r3, r7, #8
 8001c6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff93 	bl	8001b9c <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
 8001c76:	61b8      	str	r0, [r7, #24]
            if (ret != EIDSP_OK) {
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8c>
                EIDSP_ERR(ret);
 8001c7e:	69bc      	ldr	r4, [r7, #24]
 8001c80:	2500      	movs	r5, #0
 8001c82:	e000      	b.n	8001c86 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8e>
 8001c84:	2501      	movs	r5, #1
 8001c86:	f107 0308 	add.w	r3, r7, #8
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fd74 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
 8001c90:	2d01      	cmp	r5, #1
 8001c92:	d104      	bne.n	8001c9e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        for (size_t row = 0; row < matrix->rows; row++) {
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	3301      	adds	r3, #1
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	e7c2      	b.n	8001c22 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x2a>
            }
        }

        return EIDSP_OK;
 8001c9c:	2400      	movs	r4, #0
    }
 8001c9e:	4623      	mov	r3, r4
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3720      	adds	r7, #32
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca8:	fffffc14 	.word	0xfffffc14
 8001cac:	fffffc16 	.word	0xfffffc16

08001cb0 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>:
     * Calculate the root mean square of a matrix, one per row
     * @param matrix Matrix of size (MxN)
     * @param output_matrix Matrix of size (Mx1)
     * @returns 0 if OK
     */
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
        if (matrix->rows != output_matrix->rows) {
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d001      	beq.n	8001cca <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001cc6:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001cc8:	e028      	b.n	8001d1c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        if (output_matrix->cols != 1) {
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d001      	beq.n	8001cd6 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001cd4:	e022      	b.n	8001d1c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d21a      	bcs.n	8001d1a <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float rms_result;
            arm_rms_f32(matrix->buffer + (row * matrix->cols), matrix->cols, &rms_result);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	68f9      	ldr	r1, [r7, #12]
 8001cee:	fb01 f303 	mul.w	r3, r1, r3
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	18d0      	adds	r0, r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f107 0208 	add.w	r2, r7, #8
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f00d fa50 	bl	800f1a4 <arm_rms_f32>
            output_matrix->buffer[row] = rms_result;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < matrix->rows; row++) {
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	3301      	adds	r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	e7df      	b.n	8001cda <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x2a>
            }
            output_matrix->buffer[row] = sqrt(sum / static_cast<float>(matrix->cols));
#endif
        }

        return EIDSP_OK;
 8001d1a:	2300      	movs	r3, #0
    }
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	fffffc14 	.word	0xfffffc14

08001d28 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>:
    /**
     * Calculate the mean over a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d001      	beq.n	8001d42 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001d3e:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001d40:	e028      	b.n	8001d94 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }
        if (output_matrix->cols != 1) {
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d001      	beq.n	8001d4e <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001d4c:	e022      	b.n	8001d94 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d21a      	bcs.n	8001d92 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	68f9      	ldr	r1, [r7, #12]
 8001d66:	fb01 f303 	mul.w	r3, r1, r3
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	18d0      	adds	r0, r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f107 0208 	add.w	r2, r7, #8
 8001d76:	4619      	mov	r1, r3
 8001d78:	f00d f9e5 	bl	800f146 <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	e7df      	b.n	8001d52 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        return EIDSP_OK;
 8001d92:	2300      	movs	r3, #0
    }
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	fffffc14 	.word	0xfffffc14

08001da0 <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 8001da0:	b5b0      	push	{r4, r5, r7, lr}
 8001da2:	b098      	sub	sp, #96	; 0x60
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001dae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001db0:	085b      	lsrs	r3, r3, #1
 8001db2:	3301      	adds	r3, #1
 8001db4:	657b      	str	r3, [r7, #84]	; 0x54
        if (output_size != n_fft_out_features) {
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d001      	beq.n	8001dc2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001dbe:	4c65      	ldr	r4, [pc, #404]	; (8001f54 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b4>)
 8001dc0:	e0c2      	b.n	8001f48 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1a8>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d901      	bls.n	8001dce <_ZN2ei5numpy4rfftEPKfjPfjj+0x2e>
            src_size = n_fft;
 8001dca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dcc:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001dce:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	f7ff fca3 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
 8001ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x46>
 8001de2:	4c5d      	ldr	r4, [pc, #372]	; (8001f58 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001de4:	e0ab      	b.n	8001f3e <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        if (!fft_input.buffer) {
 8001de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x50>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001dec:	4c5a      	ldr	r4, [pc, #360]	; (8001f58 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001dee:	e0a6      	b.n	8001f3e <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001df0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	461a      	mov	r2, r3
 8001df8:	68f9      	ldr	r1, [r7, #12]
 8001dfa:	f020 fe01 	bl	8022a00 <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 8001dfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	18d0      	adds	r0, r2, r3
 8001e06:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	461a      	mov	r2, r3
 8001e10:	2100      	movs	r1, #0
 8001e12:	f020 fe1d 	bl	8022a50 <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	d025      	beq.n	8001e68 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001e1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e1e:	2b40      	cmp	r3, #64	; 0x40
 8001e20:	d022      	beq.n	8001e68 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001e22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e24:	2b80      	cmp	r3, #128	; 0x80
 8001e26:	d01f      	beq.n	8001e68 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001e28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e2e:	d01b      	beq.n	8001e68 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001e30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e36:	d017      	beq.n	8001e68 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8001e38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e3e:	d013      	beq.n	8001e68 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001e40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e46:	d00f      	beq.n	8001e68 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001e48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e4e:	d00b      	beq.n	8001e68 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 8001e50:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e54:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	f000 fa4e 	bl	80022f8 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 8001e5c:	6538      	str	r0, [r7, #80]	; 0x50
            if (ret != EIDSP_OK) {
 8001e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d068      	beq.n	8001f36 <_ZN2ei5numpy4rfftEPKfjPfjj+0x196>
                EIDSP_ERR(ret);
 8001e64:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001e66:	e06a      	b.n	8001f3e <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8001e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e6c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 fada 	bl	8002428 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8001e74:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (status != ARM_MATH_SUCCESS) {
 8001e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <_ZN2ei5numpy4rfftEPKfjPfjj+0xe0>
                return status;
 8001e7c:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8001e7e:	e05d      	b.n	8001f3c <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001e80:	f107 0014 	add.w	r0, r7, #20
 8001e84:	2300      	movs	r3, #0
 8001e86:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001e88:	2101      	movs	r1, #1
 8001e8a:	f7ff fc4a 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d102      	bne.n	8001e9a <_ZN2ei5numpy4rfftEPKfjPfjj+0xfa>
 8001e94:	4c30      	ldr	r4, [pc, #192]	; (8001f58 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001e96:	2500      	movs	r5, #0
 8001e98:	e045      	b.n	8001f26 <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            if (!fft_output.buffer) {
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d102      	bne.n	8001ea6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x106>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001ea0:	4c2d      	ldr	r4, [pc, #180]	; (8001f58 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001ea2:	2500      	movs	r5, #0
 8001ea4:	e03f      	b.n	8001f26 <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8001ea6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f00f fca6 	bl	8011800 <arm_rfft_fast_f32>

            output[0] = fft_output.buffer[0];
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	440b      	add	r3, r1
 8001ecc:	6852      	ldr	r2, [r2, #4]
 8001ece:	601a      	str	r2, [r3, #0]

            size_t fft_output_buffer_ix = 2;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eda:	3b01      	subs	r3, #1
 8001edc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d220      	bcs.n	8001f24 <_ZN2ei5numpy4rfftEPKfjPfjj+0x184>
                float rms_result;
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	f107 0210 	add.w	r2, r7, #16
 8001eee:	2102      	movs	r1, #2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f00d f957 	bl	800f1a4 <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 8001ef6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001efa:	f7ff fcca 	bl	8001892 <_ZN2ei5numpy4sqrtEf>
 8001efe:	eeb0 7a40 	vmov.f32	s14, s0
 8001f02:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f12:	edc3 7a00 	vstr	s15, [r3]

                fft_output_buffer_ix += 2;
 8001f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f18:	3302      	adds	r3, #2
 8001f1a:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001f1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f1e:	3301      	adds	r3, #1
 8001f20:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f22:	e7d9      	b.n	8001ed8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x138>
 8001f24:	2501      	movs	r5, #1
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fc24 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
 8001f30:	2d01      	cmp	r5, #1
 8001f32:	d103      	bne.n	8001f3c <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
 8001f34:	e000      	b.n	8001f38 <_ZN2ei5numpy4rfftEPKfjPfjj+0x198>
            }
 8001f36:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8001f38:	2400      	movs	r4, #0
 8001f3a:	e000      	b.n	8001f3e <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
                return status;
 8001f3c:	bf00      	nop
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001f3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fc18 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
    }
 8001f48:	4623      	mov	r3, r4
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3760      	adds	r7, #96	; 0x60
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bdb0      	pop	{r4, r5, r7, pc}
 8001f52:	bf00      	nop
 8001f54:	fffffc11 	.word	0xfffffc11
 8001f58:	fffffc16 	.word	0xfffffc16

08001f5c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
 8001f5c:	b5b0      	push	{r4, r5, r7, lr}
 8001f5e:	b098      	sub	sp, #96	; 0x60
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f6c:	085b      	lsrs	r3, r3, #1
 8001f6e:	3301      	adds	r3, #1
 8001f70:	653b      	str	r3, [r7, #80]	; 0x50
        if (output_size != n_fft_out_features) {
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d001      	beq.n	8001f7e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001f7a:	4c6f      	ldr	r4, [pc, #444]	; (8002138 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1dc>)
 8001f7c:	e0d6      	b.n	800212c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d0>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d901      	bls.n	8001f8a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x2e>
            src_size = n_fft;
 8001f86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f88:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        float *fft_input_buffer = NULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (src_size == n_fft) {
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d101      	bne.n	8001f9a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x3e>
            fft_input_buffer = (float*)src;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 8001f9a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fa0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	f7ff fbbd 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
 8001fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x56>
 8001fae:	4c63      	ldr	r4, [pc, #396]	; (800213c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8001fb0:	e0b7      	b.n	8002122 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        if (!fft_input.buffer) {
 8001fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x60>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001fb8:	4c60      	ldr	r4, [pc, #384]	; (800213c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8001fba:	e0b2      	b.n	8002122 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        }

        if (!fft_input_buffer) {
 8001fbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d112      	bne.n	8001fe8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x8c>
            // copy from src to fft_input
            memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001fc2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68f9      	ldr	r1, [r7, #12]
 8001fcc:	f020 fd18 	bl	8022a00 <memcpy>
            // pad to the rigth with zeros
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
 8001fd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	18d0      	adds	r0, r2, r3
 8001fd8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	f020 fd34 	bl	8022a50 <memset>
        }

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001fe8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	d025      	beq.n	800203a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001fee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ff0:	2b40      	cmp	r3, #64	; 0x40
 8001ff2:	d022      	beq.n	800203a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001ff4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ff6:	2b80      	cmp	r3, #128	; 0x80
 8001ff8:	d01f      	beq.n	800203a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001ffa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002000:	d01b      	beq.n	800203a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8002002:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002008:	d017      	beq.n	800203a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 800200a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800200c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002010:	d013      	beq.n	800203a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8002012:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002018:	d00f      	beq.n	800203a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 800201a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800201c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002020:	d00b      	beq.n	800203a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 8002022:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002026:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	f000 f9d7 	bl	80023dc <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>
 800202e:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (ret != EIDSP_OK) {
 8002030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002032:	2b00      	cmp	r3, #0
 8002034:	d071      	beq.n	800211a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1be>
                EIDSP_ERR(ret);
 8002036:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002038:	e073      	b.n	8002122 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 800203a:	f107 0320 	add.w	r3, r7, #32
 800203e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002040:	4618      	mov	r0, r3
 8002042:	f000 f9f1 	bl	8002428 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8002046:	64b8      	str	r0, [r7, #72]	; 0x48
            if (status != ARM_MATH_SUCCESS) {
 8002048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xf6>
                return status;
 800204e:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8002050:	e066      	b.n	8002120 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8002052:	f107 0010 	add.w	r0, r7, #16
 8002056:	2300      	movs	r3, #0
 8002058:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800205a:	2101      	movs	r1, #1
 800205c:	f7ff fb61 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x110>
 8002066:	4c35      	ldr	r4, [pc, #212]	; (800213c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8002068:	2500      	movs	r5, #0
 800206a:	e04e      	b.n	800210a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            if (!fft_output.buffer) {
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d102      	bne.n	8002078 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x11c>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002072:	4c32      	ldr	r4, [pc, #200]	; (800213c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8002074:	2500      	movs	r5, #0
 8002076:	e048      	b.n	800210a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8002078:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	f107 0020 	add.w	r0, r7, #32
 8002080:	2300      	movs	r3, #0
 8002082:	f00f fbbd 	bl	8011800 <arm_rfft_fast_f32>

            output[0].r = fft_output.buffer[0];
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	601a      	str	r2, [r3, #0]
            output[0].i = 0.0f;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	605a      	str	r2, [r3, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800209a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800209e:	3b01      	subs	r3, #1
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	440b      	add	r3, r1
 80020a6:	6852      	ldr	r2, [r2, #4]
 80020a8:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1].i = 0.0f;
 80020aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020ac:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80020b0:	3b01      	subs	r3, #1
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	4413      	add	r3, r2
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	605a      	str	r2, [r3, #4]

            size_t fft_output_buffer_ix = 2;
 80020be:	2302      	movs	r3, #2
 80020c0:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80020c2:	2301      	movs	r3, #1
 80020c4:	657b      	str	r3, [r7, #84]	; 0x54
 80020c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020c8:	3b01      	subs	r3, #1
 80020ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d21b      	bcs.n	8002108 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ac>
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	441a      	add	r2, r3
 80020d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	440b      	add	r3, r1
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	601a      	str	r2, [r3, #0]
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020e8:	3301      	adds	r3, #1
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	441a      	add	r2, r3
 80020ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	440b      	add	r3, r1
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	605a      	str	r2, [r3, #4]

                fft_output_buffer_ix += 2;
 80020fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020fc:	3302      	adds	r3, #2
 80020fe:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8002100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002102:	3301      	adds	r3, #1
 8002104:	657b      	str	r3, [r7, #84]	; 0x54
 8002106:	e7de      	b.n	80020c6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x16a>
 8002108:	2501      	movs	r5, #1
 800210a:	f107 0310 	add.w	r3, r7, #16
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fb32 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
 8002114:	2d01      	cmp	r5, #1
 8002116:	d103      	bne.n	8002120 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
 8002118:	e000      	b.n	800211c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c0>
            }
 800211a:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 800211c:	2400      	movs	r4, #0
 800211e:	e000      	b.n	8002122 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
                return status;
 8002120:	bf00      	nop
        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 8002122:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fb26 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
    }
 800212c:	4623      	mov	r3, r4
 800212e:	4618      	mov	r0, r3
 8002130:	3760      	adds	r7, #96	; 0x60
 8002132:	46bd      	mov	sp, r7
 8002134:	bdb0      	pop	{r4, r5, r7, pc}
 8002136:	bf00      	nop
 8002138:	fffffc11 	.word	0xfffffc11
 800213c:	fffffc16 	.word	0xfffffc16

08002140 <_ZN2ei5numpy8linspaceEffmPf>:
     * @param stop The end value of the sequence.
     * @param number Number of samples to generate.
     * @param out Out array, with size `number`
     * @returns 0 if OK
     */
    static int linspace(float start, float stop, uint32_t number, float *out)
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	ed87 0a03 	vstr	s0, [r7, #12]
 800214a:	edc7 0a02 	vstr	s1, [r7, #8]
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
    {
        if (number < 1 || !out) {
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <_ZN2ei5numpy8linspaceEffmPf+0x1e>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <_ZN2ei5numpy8linspaceEffmPf+0x22>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 800215e:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <_ZN2ei5numpy8linspaceEffmPf+0xb0>)
 8002160:	e03f      	b.n	80021e2 <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        if (number == 1) {
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d104      	bne.n	8002172 <_ZN2ei5numpy8linspaceEffmPf+0x32>
            out[0] = start;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	601a      	str	r2, [r3, #0]
            return EIDSP_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e037      	b.n	80021e2 <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        // step size
        float step = (stop - start) / (number - 1);
 8002172:	ed97 7a02 	vldr	s14, [r7, #8]
 8002176:	edd7 7a03 	vldr	s15, [r7, #12]
 800217a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3b01      	subs	r3, #1
 8002182:	ee07 3a90 	vmov	s15, r3
 8002186:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800218a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800218e:	edc7 7a04 	vstr	s15, [r7, #16]

        // do steps
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3b01      	subs	r3, #1
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	429a      	cmp	r2, r3
 800219e:	d216      	bcs.n	80021ce <_ZN2ei5numpy8linspaceEffmPf+0x8e>
            out[ix] = start + ix * step;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80021ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	4413      	add	r3, r2
 80021ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80021be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c2:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3301      	adds	r3, #1
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	e7e3      	b.n	8002196 <_ZN2ei5numpy8linspaceEffmPf+0x56>
        }

        // last entry always stop
        out[number - 1] = stop;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021d4:	3b01      	subs	r3, #1
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	4413      	add	r3, r2
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	601a      	str	r2, [r3, #0]

        return EIDSP_OK;
 80021e0:	2300      	movs	r3, #0
    }
 80021e2:	4618      	mov	r0, r3
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	fffffc10 	.word	0xfffffc10

080021f4 <_ZN2ei5numpy5log10EPNS_9ei_matrixE>:
    /**
     * Calculate the log10 of a matrix. Does an in-place replacement.
     * @param matrix Matrix (MxN)
     * @returns 0 if OK
     */
    static int log10(matrix_t *matrix)
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6892      	ldr	r2, [r2, #8]
 8002208:	fb02 f303 	mul.w	r3, r2, r3
 800220c:	69fa      	ldr	r2, [r7, #28]
 800220e:	429a      	cmp	r2, r3
 8002210:	d263      	bcs.n	80022da <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xe6>
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6811      	ldr	r1, [r2, #0]
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	0092      	lsls	r2, r2, #2
 8002226:	188c      	adds	r4, r1, r2
 8002228:	61bb      	str	r3, [r7, #24]
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	617b      	str	r3, [r7, #20]
        float f = frexpf(fabsf(a), &e);
 800222e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002232:	eef0 7ae7 	vabs.f32	s15, s15
 8002236:	f107 0308 	add.w	r3, r7, #8
 800223a:	4618      	mov	r0, r3
 800223c:	eeb0 0a67 	vmov.f32	s0, s15
 8002240:	f01e f802 	bl	8020248 <frexpf>
 8002244:	ed87 0a04 	vstr	s0, [r7, #16]
        float y = 1.23149591368684f;
 8002248:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf0>)
 800224a:	60fb      	str	r3, [r7, #12]
        y *= f;
 800224c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002250:	edd7 7a04 	vldr	s15, [r7, #16]
 8002254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002258:	edc7 7a03 	vstr	s15, [r7, #12]
        y += -4.11852516267426f;
 800225c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002260:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80022e8 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf4>
 8002264:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002268:	edc7 7a03 	vstr	s15, [r7, #12]
        y *= f;
 800226c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002270:	edd7 7a04 	vldr	s15, [r7, #16]
 8002274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002278:	edc7 7a03 	vstr	s15, [r7, #12]
        y += 6.02197014179219f;
 800227c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002280:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80022ec <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf8>
 8002284:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002288:	edc7 7a03 	vstr	s15, [r7, #12]
        y *= f;
 800228c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002290:	edd7 7a04 	vldr	s15, [r7, #16]
 8002294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002298:	edc7 7a03 	vstr	s15, [r7, #12]
        y += -3.13396450166353f;
 800229c:	edd7 7a03 	vldr	s15, [r7, #12]
 80022a0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80022f0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xfc>
 80022a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022a8:	edc7 7a03 	vstr	s15, [r7, #12]
        y += e;
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	ee07 3a90 	vmov	s15, r3
 80022b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80022ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022be:	edc7 7a03 	vstr	s15, [r7, #12]
        return y;
 80022c2:	edd7 7a03 	vldr	s15, [r7, #12]
        return numpy::log2(a) * 0.3010299956639812f;
 80022c6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80022f4 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0x100>
 80022ca:	ee67 7a87 	vmul.f32	s15, s15, s14
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 80022ce:	edc4 7a00 	vstr	s15, [r4]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3301      	adds	r3, #1
 80022d6:	61fb      	str	r3, [r7, #28]
 80022d8:	e792      	b.n	8002200 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xc>
        }

        return EIDSP_OK;
 80022da:	2300      	movs	r3, #0
    }
 80022dc:	4618      	mov	r0, r3
 80022de:	3724      	adds	r7, #36	; 0x24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd90      	pop	{r4, r7, pc}
 80022e4:	3f9da1a8 	.word	0x3f9da1a8
 80022e8:	4083caf5 	.word	0x4083caf5
 80022ec:	40c0b3fb 	.word	0x40c0b3fb
 80022f0:	404892e0 	.word	0x404892e0
 80022f4:	3e9a209b 	.word	0x3e9a209b

080022f8 <_ZN2ei5numpy13software_rfftEPfS1_jj>:
        }

        return EIDSP_OK;
    }

    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 80022f8:	b5b0      	push	{r4, r5, r7, lr}
 80022fa:	b08a      	sub	sp, #40	; 0x28
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
 8002304:	603b      	str	r3, [r7, #0]
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4618      	mov	r0, r3
 800230c:	f017 fec4 	bl	801a098 <_Z9ei_mallocj>
 8002310:	61b8      	str	r0, [r7, #24]
        if (!fft_output) {
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x24>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002318:	4b2f      	ldr	r3, [pc, #188]	; (80023d8 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 800231a:	e058      	b.n	80023ce <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f107 0310 	add.w	r3, r7, #16
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	2300      	movs	r3, #0
 8002326:	2200      	movs	r2, #0
 8002328:	2100      	movs	r1, #0
 800232a:	f017 fb0d 	bl	8019948 <kiss_fftr_alloc>
 800232e:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d104      	bne.n	8002340 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x48>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8002336:	69b8      	ldr	r0, [r7, #24]
 8002338:	f017 fec8 	bl	801a0cc <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800233c:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 800233e:	e046      	b.n	80023ce <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	68f9      	ldr	r1, [r7, #12]
 8002344:	6978      	ldr	r0, [r7, #20]
 8002346:	f017 fc1f 	bl	8019b88 <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d234      	bcs.n	80023c0 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xc8>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4413      	add	r3, r2
 800235e:	edd3 7a00 	vldr	s15, [r3]
 8002362:	2002      	movs	r0, #2
 8002364:	eeb0 0a67 	vmov.f32	s0, s15
 8002368:	f003 ff5d 	bl	8006226 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800236c:	ec55 4b10 	vmov	r4, r5, d0
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4413      	add	r3, r2
 8002378:	edd3 7a01 	vldr	s15, [r3, #4]
 800237c:	2002      	movs	r0, #2
 800237e:	eeb0 0a67 	vmov.f32	s0, s15
 8002382:	f003 ff50 	bl	8006226 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002386:	ec53 2b10 	vmov	r2, r3, d0
 800238a:	4620      	mov	r0, r4
 800238c:	4629      	mov	r1, r5
 800238e:	f7fd ff87 	bl	80002a0 <__adddf3>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4610      	mov	r0, r2
 8002398:	4619      	mov	r1, r3
 800239a:	f7fe fc2f 	bl	8000bfc <__aeabi_d2f>
 800239e:	4601      	mov	r1, r0
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	18d4      	adds	r4, r2, r3
 80023a8:	ee00 1a10 	vmov	s0, r1
 80023ac:	f7ff fa71 	bl	8001892 <_ZN2ei5numpy4sqrtEf>
 80023b0:	eef0 7a40 	vmov.f32	s15, s0
 80023b4:	edc4 7a00 	vstr	s15, [r4]
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	3301      	adds	r3, #1
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e7c6      	b.n	800234e <_ZN2ei5numpy13software_rfftEPfS1_jj+0x56>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 80023c0:	6978      	ldr	r0, [r7, #20]
 80023c2:	f017 fe83 	bl	801a0cc <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 80023c6:	69b8      	ldr	r0, [r7, #24]
 80023c8:	f017 fe80 	bl	801a0cc <_Z7ei_freePv>

        return EIDSP_OK;
 80023cc:	2300      	movs	r3, #0
    }
 80023ce:	4618      	mov	r0, r3
 80023d0:	3720      	adds	r7, #32
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bdb0      	pop	{r4, r5, r7, pc}
 80023d6:	bf00      	nop
 80023d8:	fffffc16 	.word	0xfffffc16

080023dc <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>:

    static int software_rfft(float *fft_input, fft_complex_t *output, size_t n_fft, size_t n_fft_out_features)
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	603b      	str	r3, [r7, #0]
    {
        // create fftr context
        size_t kiss_fftr_mem_length;

        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f107 0310 	add.w	r3, r7, #16
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	2300      	movs	r3, #0
 80023f4:	2200      	movs	r2, #0
 80023f6:	2100      	movs	r1, #0
 80023f8:	f017 faa6 	bl	8019948 <kiss_fftr_alloc>
 80023fc:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x2c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002404:	4b07      	ldr	r3, [pc, #28]	; (8002424 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x48>)
 8002406:	e008      	b.n	800241a <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x3e>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	68f9      	ldr	r1, [r7, #12]
 800240c:	6978      	ldr	r0, [r7, #20]
 800240e:	f017 fbbb 	bl	8019b88 <kiss_fftr>

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 8002412:	6978      	ldr	r0, [r7, #20]
 8002414:	f017 fe5a 	bl	801a0cc <_Z7ei_freePv>

        return EIDSP_OK;
 8002418:	2300      	movs	r3, #0
    }
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	fffffc16 	.word	0xfffffc16

08002428 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>:
    /**
     * Initialize a CMSIS-DSP fast rfft structure
     * We do it this way as this means we can compile out fast_init calls which hints the compiler
     * to which tables can be removed
     */
    static int cmsis_rfft_init_f32(arm_rfft_fast_instance_f32 *rfft_instance, const size_t n_fft)
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
                status = ARM_MATH_SUCCESS;
                break;
            }
#endif
            default:
                return EIDSP_FFT_TABLE_NOT_LOADED;
 8002432:	4b03      	ldr	r3, [pc, #12]	; (8002440 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x18>)

        return status;
#else
        return arm_rfft_fast_init_f32(rfft_instance, n_fft);
#endif
    }
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	fffffc08 	.word	0xfffffc08

08002444 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>:
     * @param out_buffer Out buffer, size should be fft_points
     * @param out_buffer_size Buffer size
     * @param fft_points (int): The length of FFT. If fft_length is greater than frame_len, the frames will be zero-padded.
     * @returns EIDSP_OK if OK
     */
    static int power_spectrum(
 8002444:	b5b0      	push	{r4, r5, r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af02      	add	r7, sp, #8
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
        size_t frame_size,
        float *out_buffer,
        size_t out_buffer_size,
        uint16_t fft_points)
    {
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
 8002452:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002454:	085b      	lsrs	r3, r3, #1
 8002456:	b29b      	uxth	r3, r3
 8002458:	3301      	adds	r3, #1
 800245a:	461a      	mov	r2, r3
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	4293      	cmp	r3, r2
 8002460:	d001      	beq.n	8002466 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002462:	4b2b      	ldr	r3, [pc, #172]	; (8002510 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xcc>)
 8002464:	e050      	b.n	8002508 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
 8002466:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f7ff fc95 	bl	8001da0 <_ZN2ei5numpy4rfftEPKfjPfjj>
 8002476:	6138      	str	r0, [r7, #16]
        if (r != EIDSP_OK) {
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x3e>
            return r;
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	e042      	b.n	8002508 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d23b      	bcs.n	8002506 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc2>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 800248e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002490:	ee07 3a90 	vmov	s15, r3
 8002494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002498:	ee17 0a90 	vmov	r0, s15
 800249c:	f7fe f85e 	bl	800055c <__aeabi_f2d>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	f04f 0000 	mov.w	r0, #0
 80024a8:	491a      	ldr	r1, [pc, #104]	; (8002514 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xd0>)
 80024aa:	f7fe f9d9 	bl	8000860 <__aeabi_ddiv>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4614      	mov	r4, r2
 80024b4:	461d      	mov	r5, r3
                (out_buffer[ix] * out_buffer[ix]);
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	ed93 7a00 	vldr	s14, [r3]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	edd3 7a00 	vldr	s15, [r3]
 80024ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d2:	ee17 0a90 	vmov	r0, s15
 80024d6:	f7fe f841 	bl	800055c <__aeabi_f2d>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 80024de:	4620      	mov	r0, r4
 80024e0:	4629      	mov	r1, r5
 80024e2:	f7fe f893 	bl	800060c <__aeabi_dmul>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4610      	mov	r0, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	18d4      	adds	r4, r2, r3
 80024f6:	f7fe fb81 	bl	8000bfc <__aeabi_d2f>
 80024fa:	4603      	mov	r3, r0
 80024fc:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	3301      	adds	r3, #1
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	e7bf      	b.n	8002486 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x42>
        }

        return EIDSP_OK;
 8002506:	2300      	movs	r3, #0
    }
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bdb0      	pop	{r4, r5, r7, pc}
 8002510:	fffffc14 	.word	0xfffffc14
 8002514:	3ff00000 	.word	0x3ff00000

08002518 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>:

    static int welch_max_hold(
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b093      	sub	sp, #76	; 0x4c
 800251c:	af02      	add	r7, sp, #8
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	603b      	str	r3, [r7, #0]
        size_t stop_bin,
        size_t fft_points,
        bool do_overlap)
    {
        // save off one point to put back, b/c we're going to calculate in place
        float saved_point = 0;
 8002526:	f04f 0300 	mov.w	r3, #0
 800252a:	63fb      	str	r3, [r7, #60]	; 0x3c
        bool do_saved_point = false;
 800252c:	2300      	movs	r3, #0
 800252e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        size_t fft_out_size = fft_points / 2 + 1;
 8002532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002534:	085b      	lsrs	r3, r3, #1
 8002536:	3301      	adds	r3, #1
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
        float *fft_out;
        ei_unique_ptr_t p_fft_out(nullptr, ei_free);
 800253a:	4b4f      	ldr	r3, [pc, #316]	; (8002678 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x160>)
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	f107 0218 	add.w	r2, r7, #24
 8002542:	f107 0310 	add.w	r3, r7, #16
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f003 fe9e 	bl	800628a <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>
        if (input_size < fft_points) {
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002552:	429a      	cmp	r2, r3
 8002554:	d20b      	bcs.n	800256e <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x56>
            fft_out = (float *)ei_calloc(fft_out_size, sizeof(float));
 8002556:	2104      	movs	r1, #4
 8002558:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800255a:	f017 fda9 	bl	801a0b0 <_Z9ei_callocjj>
 800255e:	6378      	str	r0, [r7, #52]	; 0x34
            p_fft_out.reset(fft_out);
 8002560:	f107 0310 	add.w	r3, r7, #16
 8002564:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002566:	4618      	mov	r0, r3
 8002568:	f003 fec5 	bl	80062f6 <_ZNSt10unique_ptrIvPFvPvEE5resetES0_>
 800256c:	e00b      	b.n	8002586 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x6e>
        }
        else {
            // set input as output for in place operation
            fft_out = input;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	637b      	str	r3, [r7, #52]	; 0x34
            // save off one point to put back, b/c we're going to calculate in place
            saved_point = input[fft_points / 2];
 8002572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002574:	085b      	lsrs	r3, r3, #1
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4413      	add	r3, r2
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	63fb      	str	r3, [r7, #60]	; 0x3c
            do_saved_point = true;
 8002580:	2301      	movs	r3, #1
 8002582:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        }

        // init the output to zeros
        memset(output, 0, sizeof(float) * (stop_bin - start_bin));
 8002586:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	461a      	mov	r2, r3
 8002590:	2100      	movs	r1, #0
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f020 fa5c 	bl	8022a50 <memset>
        int input_ix = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	633b      	str	r3, [r7, #48]	; 0x30
        while (input_ix < (int)input_size) {
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025a0:	429a      	cmp	r2, r3
 80025a2:	da5e      	bge.n	8002662 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x14a>
            // Figure out if we need any zero padding
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 80025a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a8:	4413      	add	r3, r2
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d203      	bcs.n	80025b8 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xa0>
                                                                        : input_size - input_ix;
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	e000      	b.n	80025ba <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xa2>
 80025b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ba:	623b      	str	r3, [r7, #32]
            EI_TRY(power_spectrum(
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	18d0      	adds	r0, r2, r3
 80025c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c6:	085b      	lsrs	r3, r3, #1
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	4613      	mov	r3, r2
 80025d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025d4:	6a39      	ldr	r1, [r7, #32]
 80025d6:	f7ff ff35 	bl	8002444 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
 80025da:	61f8      	str	r0, [r7, #28]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xce>
 80025e2:	69fc      	ldr	r4, [r7, #28]
 80025e4:	e03e      	b.n	8002664 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x14c>
                input + input_ix,
                n_input_points,
                fft_out,
                fft_points / 2 + 1,
                fft_points));
            int j = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	62fb      	str	r3, [r7, #44]	; 0x2c
            // keep the max of the last frame and everything before
            for (size_t i = start_bin; i < stop_bin; i++) {
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d218      	bcs.n	8002628 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x110>
                output[j] = std::max(output[j], fft_out[i]);
 80025f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	18d0      	adds	r0, r2, r3
 80025fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002604:	4413      	add	r3, r2
 8002606:	4619      	mov	r1, r3
 8002608:	f003 fe89 	bl	800631e <_ZSt3maxIfERKT_S2_S2_>
 800260c:	4601      	mov	r1, r0
 800260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	680a      	ldr	r2, [r1, #0]
 8002618:	601a      	str	r2, [r3, #0]
                j++;
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	3301      	adds	r3, #1
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (size_t i = start_bin; i < stop_bin; i++) {
 8002620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002622:	3301      	adds	r3, #1
 8002624:	62bb      	str	r3, [r7, #40]	; 0x28
 8002626:	e7e2      	b.n	80025ee <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xd6>
            }
            if (do_overlap) {
 8002628:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800262c:	2b00      	cmp	r3, #0
 800262e:	d013      	beq.n	8002658 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x140>
                if (do_saved_point) {
 8002630:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002634:	2b00      	cmp	r3, #0
 8002636:	d009      	beq.n	800264c <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x134>
                    // This step only matters first time through
                    input[fft_points / 2] = saved_point;
 8002638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263a:	085b      	lsrs	r3, r3, #1
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4413      	add	r3, r2
 8002642:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002644:	601a      	str	r2, [r3, #0]
                    do_saved_point = false;
 8002646:	2300      	movs	r3, #0
 8002648:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                }
                input_ix += fft_points / 2;
 800264c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800264e:	085a      	lsrs	r2, r3, #1
 8002650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002652:	4413      	add	r3, r2
 8002654:	633b      	str	r3, [r7, #48]	; 0x30
 8002656:	e7a1      	b.n	800259c <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x84>
            }
            else {
                input_ix += fft_points;
 8002658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800265a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265c:	4413      	add	r3, r2
 800265e:	633b      	str	r3, [r7, #48]	; 0x30
        while (input_ix < (int)input_size) {
 8002660:	e79c      	b.n	800259c <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x84>
            }
        }

        return EIDSP_OK;
 8002662:	2400      	movs	r4, #0
        ei_unique_ptr_t p_fft_out(nullptr, ei_free);
 8002664:	f107 0310 	add.w	r3, r7, #16
 8002668:	4618      	mov	r0, r3
 800266a:	f003 fe23 	bl	80062b4 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    }
 800266e:	4623      	mov	r3, r4
 8002670:	4618      	mov	r0, r3
 8002672:	3744      	adds	r7, #68	; 0x44
 8002674:	46bd      	mov	sp, r7
 8002676:	bd90      	pop	{r4, r7, pc}
 8002678:	0801a0cd 	.word	0x0801a0cd

0800267c <_ZN2ei5numpy13zero_handlingEPfj>:
     * to become an argument for any log function.
     * @param input Array
     * @param input_size Size of array
     * @returns void
     */
    static void zero_handling(float *input, size_t input_size)
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
    {
        for (size_t ix = 0; ix < input_size; ix++) {
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d214      	bcs.n	80026bc <_ZN2ei5numpy13zero_handlingEPfj+0x40>
            if (input[ix] == 0) {
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	edd3 7a00 	vldr	s15, [r3]
 800269e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80026a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a6:	d105      	bne.n	80026b4 <_ZN2ei5numpy13zero_handlingEPfj+0x38>
                input[ix] = 1e-10;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	4413      	add	r3, r2
 80026b0:	4a05      	ldr	r2, [pc, #20]	; (80026c8 <_ZN2ei5numpy13zero_handlingEPfj+0x4c>)
 80026b2:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	3301      	adds	r3, #1
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	e7e6      	b.n	800268a <_ZN2ei5numpy13zero_handlingEPfj+0xe>
            }
        }
    }
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	2edbe6ff 	.word	0x2edbe6ff
 80026cc:	00000000 	.word	0x00000000

080026d0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 80026d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026d4:	b095      	sub	sp, #84	; 0x54
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6178      	str	r0, [r7, #20]
 80026da:	ed87 0a04 	vstr	s0, [r7, #16]
 80026de:	edc7 0a03 	vstr	s1, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	0fda      	lsrs	r2, r3, #31
 80026ec:	4413      	add	r3, r2
 80026ee:	105b      	asrs	r3, r3, #1
 80026f0:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f7fd ff32 	bl	800055c <__aeabi_f2d>
 80026f8:	a3f5      	add	r3, pc, #980	; (adr r3, 8002ad0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x400>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	f7fd ff85 	bl	800060c <__aeabi_dmul>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4690      	mov	r8, r2
 8002708:	4699      	mov	r9, r3
 800270a:	6938      	ldr	r0, [r7, #16]
 800270c:	f7fd ff26 	bl	800055c <__aeabi_f2d>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4640      	mov	r0, r8
 8002716:	4649      	mov	r1, r9
 8002718:	f7fe f8a2 	bl	8000860 <__aeabi_ddiv>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	ec43 2b17 	vmov	d7, r2, r3
 8002724:	eeb0 0a47 	vmov.f32	s0, s14
 8002728:	eef0 0a67 	vmov.f32	s1, s15
 800272c:	f01d fd58 	bl	80201e0 <tan>
 8002730:	ec53 2b10 	vmov	r2, r3, d0
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	f7fe fa60 	bl	8000bfc <__aeabi_d2f>
 800273c:	4603      	mov	r3, r0
 800273e:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8002740:	2002      	movs	r0, #2
 8002742:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002746:	f003 fd6e 	bl	8006226 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800274a:	ec53 2b10 	vmov	r2, r3, d0
 800274e:	4610      	mov	r0, r2
 8002750:	4619      	mov	r1, r3
 8002752:	f7fe fa53 	bl	8000bfc <__aeabi_d2f>
 8002756:	4603      	mov	r3, r0
 8002758:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 800275a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800275c:	2104      	movs	r1, #4
 800275e:	4618      	mov	r0, r3
 8002760:	f017 fca6 	bl	801a0b0 <_Z9ei_callocjj>
 8002764:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002768:	2104      	movs	r1, #4
 800276a:	4618      	mov	r0, r3
 800276c:	f017 fca0 	bl	801a0b0 <_Z9ei_callocjj>
 8002770:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002774:	2104      	movs	r1, #4
 8002776:	4618      	mov	r0, r3
 8002778:	f017 fc9a 	bl	801a0b0 <_Z9ei_callocjj>
 800277c:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 800277e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002780:	2104      	movs	r1, #4
 8002782:	4618      	mov	r0, r3
 8002784:	f017 fc94 	bl	801a0b0 <_Z9ei_callocjj>
 8002788:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 800278a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800278c:	2104      	movs	r1, #4
 800278e:	4618      	mov	r0, r3
 8002790:	f017 fc8e 	bl	801a0b0 <_Z9ei_callocjj>
 8002794:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002798:	2104      	movs	r1, #4
 800279a:	4618      	mov	r0, r3
 800279c:	f017 fc88 	bl	801a0b0 <_Z9ei_callocjj>
 80027a0:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for(int ix = 0; ix < n_steps; ix++) {
 80027a2:	2300      	movs	r3, #0
 80027a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027aa:	429a      	cmp	r2, r3
 80027ac:	f280 80e5 	bge.w	800297a <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2aa>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 80027b0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80027b2:	f7fd fec1 	bl	8000538 <__aeabi_i2d>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	f7fd fd71 	bl	80002a0 <__adddf3>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	4bc3      	ldr	r3, [pc, #780]	; (8002ad8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 80027cc:	f7fd fd68 	bl	80002a0 <__adddf3>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	a3bd      	add	r3, pc, #756	; (adr r3, 8002ad0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x400>)
 80027da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027de:	f7fd ff15 	bl	800060c <__aeabi_dmul>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4690      	mov	r8, r2
 80027e8:	4699      	mov	r9, r3
 80027ea:	6978      	ldr	r0, [r7, #20]
 80027ec:	f7fd fea4 	bl	8000538 <__aeabi_i2d>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	f7fd fd54 	bl	80002a0 <__adddf3>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4640      	mov	r0, r8
 80027fe:	4649      	mov	r1, r9
 8002800:	f7fe f82e 	bl	8000860 <__aeabi_ddiv>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	ec43 2b17 	vmov	d7, r2, r3
 800280c:	eeb0 0a47 	vmov.f32	s0, s14
 8002810:	eef0 0a67 	vmov.f32	s1, s15
 8002814:	f01d fc8c 	bl	8020130 <sin>
 8002818:	ec53 2b10 	vmov	r2, r3, d0
 800281c:	4610      	mov	r0, r2
 800281e:	4619      	mov	r1, r3
 8002820:	f7fe f9ec 	bl	8000bfc <__aeabi_d2f>
 8002824:	4603      	mov	r3, r0
 8002826:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 8002828:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800282a:	f7fd fe97 	bl	800055c <__aeabi_f2d>
 800282e:	4680      	mov	r8, r0
 8002830:	4689      	mov	r9, r1
 8002832:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002834:	f7fd fe92 	bl	800055c <__aeabi_f2d>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	f7fd fd30 	bl	80002a0 <__adddf3>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4692      	mov	sl, r2
 8002846:	469b      	mov	fp, r3
 8002848:	69f8      	ldr	r0, [r7, #28]
 800284a:	f7fd fe87 	bl	800055c <__aeabi_f2d>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4650      	mov	r0, sl
 8002854:	4659      	mov	r1, fp
 8002856:	f7fd fed9 	bl	800060c <__aeabi_dmul>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4640      	mov	r0, r8
 8002860:	4649      	mov	r1, r9
 8002862:	f7fd fd1d 	bl	80002a0 <__adddf3>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4610      	mov	r0, r2
 800286c:	4619      	mov	r1, r3
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	4b99      	ldr	r3, [pc, #612]	; (8002ad8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 8002874:	f7fd fd14 	bl	80002a0 <__adddf3>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	f7fe f9bc 	bl	8000bfc <__aeabi_d2f>
 8002884:	4603      	mov	r3, r0
 8002886:	613b      	str	r3, [r7, #16]
            A[ix] = a2 / sampling_freq;
 8002888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800288e:	4413      	add	r3, r2
 8002890:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002894:	ed97 7a04 	vldr	s14, [r7, #16]
 8002898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800289c:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 80028a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028a4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80028a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ac:	ee17 0a90 	vmov	r0, s15
 80028b0:	f7fd fe54 	bl	800055c <__aeabi_f2d>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	f7fd fcf2 	bl	80002a0 <__adddf3>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4690      	mov	r8, r2
 80028c2:	4699      	mov	r9, r3
 80028c4:	6938      	ldr	r0, [r7, #16]
 80028c6:	f7fd fe49 	bl	800055c <__aeabi_f2d>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4640      	mov	r0, r8
 80028d0:	4649      	mov	r1, r9
 80028d2:	f7fd ffc5 	bl	8000860 <__aeabi_ddiv>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4610      	mov	r0, r2
 80028dc:	4619      	mov	r1, r3
 80028de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028e4:	18d6      	adds	r6, r2, r3
 80028e6:	f7fe f989 	bl	8000bfc <__aeabi_d2f>
 80028ea:	4603      	mov	r3, r0
 80028ec:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 80028ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80028f0:	f7fd fe34 	bl	800055c <__aeabi_f2d>
 80028f4:	4680      	mov	r8, r0
 80028f6:	4689      	mov	r9, r1
 80028f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80028fa:	f7fd fe2f 	bl	800055c <__aeabi_f2d>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	f7fd fccd 	bl	80002a0 <__adddf3>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4692      	mov	sl, r2
 800290c:	469b      	mov	fp, r3
 800290e:	69f8      	ldr	r0, [r7, #28]
 8002910:	f7fd fe24 	bl	800055c <__aeabi_f2d>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4650      	mov	r0, sl
 800291a:	4659      	mov	r1, fp
 800291c:	f7fd fe76 	bl	800060c <__aeabi_dmul>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4640      	mov	r0, r8
 8002926:	4649      	mov	r1, r9
 8002928:	f7fd fcb8 	bl	800029c <__aeabi_dsub>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4610      	mov	r0, r2
 8002932:	4619      	mov	r1, r3
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	4b67      	ldr	r3, [pc, #412]	; (8002ad8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 800293a:	f7fd fcb1 	bl	80002a0 <__adddf3>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4614      	mov	r4, r2
 8002944:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002948:	6938      	ldr	r0, [r7, #16]
 800294a:	f7fd fe07 	bl	800055c <__aeabi_f2d>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4620      	mov	r0, r4
 8002954:	4629      	mov	r1, r5
 8002956:	f7fd ff83 	bl	8000860 <__aeabi_ddiv>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4610      	mov	r0, r2
 8002960:	4619      	mov	r1, r3
 8002962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002968:	18d6      	adds	r6, r2, r3
 800296a:	f7fe f947 	bl	8000bfc <__aeabi_d2f>
 800296e:	4603      	mov	r3, r0
 8002970:	6033      	str	r3, [r6, #0]
        for(int ix = 0; ix < n_steps; ix++) {
 8002972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002974:	3301      	adds	r3, #1
 8002976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002978:	e715      	b.n	80027a6 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0xd6>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 800297a:	2300      	movs	r3, #0
 800297c:	64bb      	str	r3, [r7, #72]	; 0x48
 800297e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	f080 80aa 	bcs.w	8002adc <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x40c>
            dest[sx] = src[sx];
 8002988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	441a      	add	r2, r3
 8002990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	440b      	add	r3, r1
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 800299c:	2300      	movs	r3, #0
 800299e:	647b      	str	r3, [r7, #68]	; 0x44
 80029a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029a4:	429a      	cmp	r2, r3
 80029a6:	f280 808e 	bge.w	8002ac6 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x3f6>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 80029aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029b0:	4413      	add	r3, r2
 80029b2:	ed93 7a00 	vldr	s14, [r3]
 80029b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029bc:	4413      	add	r3, r2
 80029be:	edd3 7a00 	vldr	s15, [r3]
 80029c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029cc:	4413      	add	r3, r2
 80029ce:	edd3 6a00 	vldr	s13, [r3]
 80029d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	6a3a      	ldr	r2, [r7, #32]
 80029d8:	4413      	add	r3, r2
 80029da:	edd3 7a00 	vldr	s15, [r3]
 80029de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	edd3 7a00 	vldr	s15, [r3]
 80029f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029f8:	4413      	add	r3, r2
 80029fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029fe:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] + (2.0 * w1[i]) + w2[i]);
 8002a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a08:	4413      	add	r3, r2
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fda5 	bl	800055c <__aeabi_f2d>
 8002a12:	4604      	mov	r4, r0
 8002a14:	460d      	mov	r5, r1
 8002a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a1c:	4413      	add	r3, r2
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fd fd9b 	bl	800055c <__aeabi_f2d>
 8002a26:	4680      	mov	r8, r0
 8002a28:	4689      	mov	r9, r1
 8002a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a30:	4413      	add	r3, r2
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fd fd91 	bl	800055c <__aeabi_f2d>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	f7fd fc2f 	bl	80002a0 <__adddf3>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4640      	mov	r0, r8
 8002a48:	4649      	mov	r1, r9
 8002a4a:	f7fd fc29 	bl	80002a0 <__adddf3>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4690      	mov	r8, r2
 8002a54:	4699      	mov	r9, r3
 8002a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	6a3a      	ldr	r2, [r7, #32]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fd fd7b 	bl	800055c <__aeabi_f2d>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4640      	mov	r0, r8
 8002a6c:	4649      	mov	r1, r9
 8002a6e:	f7fd fc17 	bl	80002a0 <__adddf3>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4620      	mov	r0, r4
 8002a78:	4629      	mov	r1, r5
 8002a7a:	f7fd fdc7 	bl	800060c <__aeabi_dmul>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	18d4      	adds	r4, r2, r3
 8002a8e:	f7fe f8b5 	bl	8000bfc <__aeabi_d2f>
 8002a92:	4603      	mov	r3, r0
 8002a94:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 8002a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9c:	441a      	add	r2, r3
 8002a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	6a39      	ldr	r1, [r7, #32]
 8002aa4:	440b      	add	r3, r1
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 8002aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ab0:	441a      	add	r2, r3
 8002ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ab8:	440b      	add	r3, r1
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 8002abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ac4:	e76c      	b.n	80029a0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d0>
        for (size_t sx = 0; sx < size; sx++) {
 8002ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac8:	3301      	adds	r3, #1
 8002aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8002acc:	e757      	b.n	800297e <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2ae>
 8002ace:	bf00      	nop
 8002ad0:	54442d18 	.word	0x54442d18
 8002ad4:	400921fb 	.word	0x400921fb
 8002ad8:	3ff00000 	.word	0x3ff00000
            }
        }

        ei_free(A);
 8002adc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ade:	f017 faf5 	bl	801a0cc <_Z7ei_freePv>
        ei_free(d1);
 8002ae2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ae4:	f017 faf2 	bl	801a0cc <_Z7ei_freePv>
        ei_free(d2);
 8002ae8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002aea:	f017 faef 	bl	801a0cc <_Z7ei_freePv>
        ei_free(w0);
 8002aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002af0:	f017 faec 	bl	801a0cc <_Z7ei_freePv>
        ei_free(w1);
 8002af4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002af6:	f017 fae9 	bl	801a0cc <_Z7ei_freePv>
        ei_free(w2);
 8002afa:	6a38      	ldr	r0, [r7, #32]
 8002afc:	f017 fae6 	bl	801a0cc <_Z7ei_freePv>
    }
 8002b00:	bf00      	nop
 8002b02:	3754      	adds	r7, #84	; 0x54
 8002b04:	46bd      	mov	sp, r7
 8002b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b0a:	bf00      	nop
 8002b0c:	0000      	movs	r0, r0
	...

08002b10 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 8002b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b14:	b095      	sub	sp, #84	; 0x54
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6178      	str	r0, [r7, #20]
 8002b1a:	ed87 0a04 	vstr	s0, [r7, #16]
 8002b1e:	edc7 0a03 	vstr	s1, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
 8002b26:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	0fda      	lsrs	r2, r3, #31
 8002b2c:	4413      	add	r3, r2
 8002b2e:	105b      	asrs	r3, r3, #1
 8002b30:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f7fd fd12 	bl	800055c <__aeabi_f2d>
 8002b38:	a3f5      	add	r3, pc, #980	; (adr r3, 8002f10 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x400>)
 8002b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3e:	f7fd fd65 	bl	800060c <__aeabi_dmul>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4690      	mov	r8, r2
 8002b48:	4699      	mov	r9, r3
 8002b4a:	6938      	ldr	r0, [r7, #16]
 8002b4c:	f7fd fd06 	bl	800055c <__aeabi_f2d>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4640      	mov	r0, r8
 8002b56:	4649      	mov	r1, r9
 8002b58:	f7fd fe82 	bl	8000860 <__aeabi_ddiv>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	ec43 2b17 	vmov	d7, r2, r3
 8002b64:	eeb0 0a47 	vmov.f32	s0, s14
 8002b68:	eef0 0a67 	vmov.f32	s1, s15
 8002b6c:	f01d fb38 	bl	80201e0 <tan>
 8002b70:	ec53 2b10 	vmov	r2, r3, d0
 8002b74:	4610      	mov	r0, r2
 8002b76:	4619      	mov	r1, r3
 8002b78:	f7fe f840 	bl	8000bfc <__aeabi_d2f>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8002b80:	2002      	movs	r0, #2
 8002b82:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002b86:	f003 fb4e 	bl	8006226 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002b8a:	ec53 2b10 	vmov	r2, r3, d0
 8002b8e:	4610      	mov	r0, r2
 8002b90:	4619      	mov	r1, r3
 8002b92:	f7fe f833 	bl	8000bfc <__aeabi_d2f>
 8002b96:	4603      	mov	r3, r0
 8002b98:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 8002b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b9c:	2104      	movs	r1, #4
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f017 fa86 	bl	801a0b0 <_Z9ei_callocjj>
 8002ba4:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ba8:	2104      	movs	r1, #4
 8002baa:	4618      	mov	r0, r3
 8002bac:	f017 fa80 	bl	801a0b0 <_Z9ei_callocjj>
 8002bb0:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb4:	2104      	movs	r1, #4
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f017 fa7a 	bl	801a0b0 <_Z9ei_callocjj>
 8002bbc:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 8002bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc0:	2104      	movs	r1, #4
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f017 fa74 	bl	801a0b0 <_Z9ei_callocjj>
 8002bc8:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bcc:	2104      	movs	r1, #4
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f017 fa6e 	bl	801a0b0 <_Z9ei_callocjj>
 8002bd4:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bd8:	2104      	movs	r1, #4
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f017 fa68 	bl	801a0b0 <_Z9ei_callocjj>
 8002be0:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for (int ix = 0; ix < n_steps; ix++) {
 8002be2:	2300      	movs	r3, #0
 8002be4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002be6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bea:	429a      	cmp	r2, r3
 8002bec:	f280 80e5 	bge.w	8002dba <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2aa>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 8002bf0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002bf2:	f7fd fca1 	bl	8000538 <__aeabi_i2d>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	f7fd fb51 	bl	80002a0 <__adddf3>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4610      	mov	r0, r2
 8002c04:	4619      	mov	r1, r3
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	4bc3      	ldr	r3, [pc, #780]	; (8002f18 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002c0c:	f7fd fb48 	bl	80002a0 <__adddf3>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4610      	mov	r0, r2
 8002c16:	4619      	mov	r1, r3
 8002c18:	a3bd      	add	r3, pc, #756	; (adr r3, 8002f10 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x400>)
 8002c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1e:	f7fd fcf5 	bl	800060c <__aeabi_dmul>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4690      	mov	r8, r2
 8002c28:	4699      	mov	r9, r3
 8002c2a:	6978      	ldr	r0, [r7, #20]
 8002c2c:	f7fd fc84 	bl	8000538 <__aeabi_i2d>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	f7fd fb34 	bl	80002a0 <__adddf3>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4640      	mov	r0, r8
 8002c3e:	4649      	mov	r1, r9
 8002c40:	f7fd fe0e 	bl	8000860 <__aeabi_ddiv>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	ec43 2b17 	vmov	d7, r2, r3
 8002c4c:	eeb0 0a47 	vmov.f32	s0, s14
 8002c50:	eef0 0a67 	vmov.f32	s1, s15
 8002c54:	f01d fa6c 	bl	8020130 <sin>
 8002c58:	ec53 2b10 	vmov	r2, r3, d0
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f7fd ffcc 	bl	8000bfc <__aeabi_d2f>
 8002c64:	4603      	mov	r3, r0
 8002c66:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 8002c68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c6a:	f7fd fc77 	bl	800055c <__aeabi_f2d>
 8002c6e:	4680      	mov	r8, r0
 8002c70:	4689      	mov	r9, r1
 8002c72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c74:	f7fd fc72 	bl	800055c <__aeabi_f2d>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	f7fd fb10 	bl	80002a0 <__adddf3>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4692      	mov	sl, r2
 8002c86:	469b      	mov	fp, r3
 8002c88:	69f8      	ldr	r0, [r7, #28]
 8002c8a:	f7fd fc67 	bl	800055c <__aeabi_f2d>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4650      	mov	r0, sl
 8002c94:	4659      	mov	r1, fp
 8002c96:	f7fd fcb9 	bl	800060c <__aeabi_dmul>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4640      	mov	r0, r8
 8002ca0:	4649      	mov	r1, r9
 8002ca2:	f7fd fafd 	bl	80002a0 <__adddf3>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4610      	mov	r0, r2
 8002cac:	4619      	mov	r1, r3
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	4b99      	ldr	r3, [pc, #612]	; (8002f18 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002cb4:	f7fd faf4 	bl	80002a0 <__adddf3>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	f7fd ff9c 	bl	8000bfc <__aeabi_d2f>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	613b      	str	r3, [r7, #16]
            A[ix] = 1.0f / sampling_freq;
 8002cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cce:	4413      	add	r3, r2
 8002cd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cd4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cdc:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 8002ce0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ce4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002ce8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cec:	ee17 0a90 	vmov	r0, s15
 8002cf0:	f7fd fc34 	bl	800055c <__aeabi_f2d>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	f7fd fad2 	bl	80002a0 <__adddf3>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4690      	mov	r8, r2
 8002d02:	4699      	mov	r9, r3
 8002d04:	6938      	ldr	r0, [r7, #16]
 8002d06:	f7fd fc29 	bl	800055c <__aeabi_f2d>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4640      	mov	r0, r8
 8002d10:	4649      	mov	r1, r9
 8002d12:	f7fd fda5 	bl	8000860 <__aeabi_ddiv>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d24:	18d6      	adds	r6, r2, r3
 8002d26:	f7fd ff69 	bl	8000bfc <__aeabi_d2f>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 8002d2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d30:	f7fd fc14 	bl	800055c <__aeabi_f2d>
 8002d34:	4680      	mov	r8, r0
 8002d36:	4689      	mov	r9, r1
 8002d38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002d3a:	f7fd fc0f 	bl	800055c <__aeabi_f2d>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	f7fd faad 	bl	80002a0 <__adddf3>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4692      	mov	sl, r2
 8002d4c:	469b      	mov	fp, r3
 8002d4e:	69f8      	ldr	r0, [r7, #28]
 8002d50:	f7fd fc04 	bl	800055c <__aeabi_f2d>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4650      	mov	r0, sl
 8002d5a:	4659      	mov	r1, fp
 8002d5c:	f7fd fc56 	bl	800060c <__aeabi_dmul>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4640      	mov	r0, r8
 8002d66:	4649      	mov	r1, r9
 8002d68:	f7fd fa98 	bl	800029c <__aeabi_dsub>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4610      	mov	r0, r2
 8002d72:	4619      	mov	r1, r3
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	4b67      	ldr	r3, [pc, #412]	; (8002f18 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002d7a:	f7fd fa91 	bl	80002a0 <__adddf3>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4614      	mov	r4, r2
 8002d84:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002d88:	6938      	ldr	r0, [r7, #16]
 8002d8a:	f7fd fbe7 	bl	800055c <__aeabi_f2d>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4620      	mov	r0, r4
 8002d94:	4629      	mov	r1, r5
 8002d96:	f7fd fd63 	bl	8000860 <__aeabi_ddiv>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002da8:	18d6      	adds	r6, r2, r3
 8002daa:	f7fd ff27 	bl	8000bfc <__aeabi_d2f>
 8002dae:	4603      	mov	r3, r0
 8002db0:	6033      	str	r3, [r6, #0]
        for (int ix = 0; ix < n_steps; ix++) {
 8002db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db4:	3301      	adds	r3, #1
 8002db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002db8:	e715      	b.n	8002be6 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0xd6>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 8002dba:	2300      	movs	r3, #0
 8002dbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	f080 80aa 	bcs.w	8002f1c <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x40c>
            dest[sx] = src[sx];
 8002dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	441a      	add	r2, r3
 8002dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	440b      	add	r3, r1
 8002dd8:	6812      	ldr	r2, [r2, #0]
 8002dda:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 8002ddc:	2300      	movs	r3, #0
 8002dde:	647b      	str	r3, [r7, #68]	; 0x44
 8002de0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de4:	429a      	cmp	r2, r3
 8002de6:	f280 808e 	bge.w	8002f06 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x3f6>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 8002dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df0:	4413      	add	r3, r2
 8002df2:	ed93 7a00 	vldr	s14, [r3]
 8002df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfc:	4413      	add	r3, r2
 8002dfe:	edd3 7a00 	vldr	s15, [r3]
 8002e02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e0c:	4413      	add	r3, r2
 8002e0e:	edd3 6a00 	vldr	s13, [r3]
 8002e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	6a3a      	ldr	r2, [r7, #32]
 8002e18:	4413      	add	r3, r2
 8002e1a:	edd3 7a00 	vldr	s15, [r3]
 8002e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	edd3 7a00 	vldr	s15, [r3]
 8002e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e38:	4413      	add	r3, r2
 8002e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e3e:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] - (2.0 * w1[i]) + w2[i]);
 8002e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e48:	4413      	add	r3, r2
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fd fb85 	bl	800055c <__aeabi_f2d>
 8002e52:	4604      	mov	r4, r0
 8002e54:	460d      	mov	r5, r1
 8002e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e5c:	4413      	add	r3, r2
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fd fb7b 	bl	800055c <__aeabi_f2d>
 8002e66:	4680      	mov	r8, r0
 8002e68:	4689      	mov	r9, r1
 8002e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e70:	4413      	add	r3, r2
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fd fb71 	bl	800055c <__aeabi_f2d>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	f7fd fa0f 	bl	80002a0 <__adddf3>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4640      	mov	r0, r8
 8002e88:	4649      	mov	r1, r9
 8002e8a:	f7fd fa07 	bl	800029c <__aeabi_dsub>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4690      	mov	r8, r2
 8002e94:	4699      	mov	r9, r3
 8002e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	6a3a      	ldr	r2, [r7, #32]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fd fb5b 	bl	800055c <__aeabi_f2d>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4640      	mov	r0, r8
 8002eac:	4649      	mov	r1, r9
 8002eae:	f7fd f9f7 	bl	80002a0 <__adddf3>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	4629      	mov	r1, r5
 8002eba:	f7fd fba7 	bl	800060c <__aeabi_dmul>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	18d4      	adds	r4, r2, r3
 8002ece:	f7fd fe95 	bl	8000bfc <__aeabi_d2f>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 8002ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002edc:	441a      	add	r2, r3
 8002ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	6a39      	ldr	r1, [r7, #32]
 8002ee4:	440b      	add	r3, r1
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 8002eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ef0:	441a      	add	r2, r3
 8002ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ef8:	440b      	add	r3, r1
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 8002efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f00:	3301      	adds	r3, #1
 8002f02:	647b      	str	r3, [r7, #68]	; 0x44
 8002f04:	e76c      	b.n	8002de0 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d0>
        for (size_t sx = 0; sx < size; sx++) {
 8002f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f08:	3301      	adds	r3, #1
 8002f0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f0c:	e757      	b.n	8002dbe <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2ae>
 8002f0e:	bf00      	nop
 8002f10:	54442d18 	.word	0x54442d18
 8002f14:	400921fb 	.word	0x400921fb
 8002f18:	3ff00000 	.word	0x3ff00000
            }
        }

        ei_free(A);
 8002f1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f1e:	f017 f8d5 	bl	801a0cc <_Z7ei_freePv>
        ei_free(d1);
 8002f22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f24:	f017 f8d2 	bl	801a0cc <_Z7ei_freePv>
        ei_free(d2);
 8002f28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f2a:	f017 f8cf 	bl	801a0cc <_Z7ei_freePv>
        ei_free(w0);
 8002f2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f30:	f017 f8cc 	bl	801a0cc <_Z7ei_freePv>
        ei_free(w1);
 8002f34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f36:	f017 f8c9 	bl	801a0cc <_Z7ei_freePv>
        ei_free(w2);
 8002f3a:	6a38      	ldr	r0, [r7, #32]
 8002f3c:	f017 f8c6 	bl	801a0cc <_Z7ei_freePv>
    }
 8002f40:	bf00      	nop
 8002f42:	3754      	adds	r7, #84	; 0x54
 8002f44:	46bd      	mov	sp, r7
 8002f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f4a:	bf00      	nop

08002f4c <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_lowpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 8002f4c:	b590      	push	{r4, r7, lr}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f58:	edc7 0a01 	vstr	s1, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d21f      	bcs.n	8002fae <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x62>
            filters::butterworth_lowpass(
 8002f6e:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	6979      	ldr	r1, [r7, #20]
 8002f7a:	fb01 f303 	mul.w	r3, r1, r3
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	6979      	ldr	r1, [r7, #20]
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	009b      	lsls	r3, r3, #2
            filters::butterworth_lowpass(
 8002f92:	441a      	add	r2, r3
                matrix->cols);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_lowpass(
 8002f98:	4621      	mov	r1, r4
 8002f9a:	edd7 0a01 	vldr	s1, [r7, #4]
 8002f9e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002fa2:	f7ff fb95 	bl	80026d0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	e7da      	b.n	8002f64 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x18>
        }

        return EIDSP_OK;
 8002fae:	2300      	movs	r3, #0
    }
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	371c      	adds	r7, #28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd90      	pop	{r4, r7, pc}

08002fb8 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_highpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8002fc4:	edc7 0a01 	vstr	s1, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d21f      	bcs.n	800301a <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x62>
            filters::butterworth_highpass(
 8002fda:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	6979      	ldr	r1, [r7, #20]
 8002fe6:	fb01 f303 	mul.w	r3, r1, r3
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	6979      	ldr	r1, [r7, #20]
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	009b      	lsls	r3, r3, #2
            filters::butterworth_highpass(
 8002ffe:	441a      	add	r2, r3
                matrix->cols);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_highpass(
 8003004:	4621      	mov	r1, r4
 8003006:	edd7 0a01 	vldr	s1, [r7, #4]
 800300a:	ed97 0a02 	vldr	s0, [r7, #8]
 800300e:	f7ff fd7f 	bl	8002b10 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	3301      	adds	r3, #1
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	e7da      	b.n	8002fd0 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x18>
        }

        return EIDSP_OK;
 800301a:	2300      	movs	r3, #0
    }
 800301c:	4618      	mov	r0, r3
 800301e:	371c      	adds	r7, #28
 8003020:	46bd      	mov	sp, r7
 8003022:	bd90      	pop	{r4, r7, pc}

08003024 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>:
    static int find_peak_indexes(
        matrix_t *input_matrix,
        matrix_t *output_matrix,
        float threshold,
        uint16_t *peaks_found)
    {
 8003024:	b480      	push	{r7}
 8003026:	b091      	sub	sp, #68	; 0x44
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003032:	603a      	str	r2, [r7, #0]
        if (input_matrix->rows != 1) {
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d001      	beq.n	8003040 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800303c:	4b60      	ldr	r3, [pc, #384]	; (80031c0 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x19c>)
 800303e:	e0b9      	b.n	80031b4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x190>
        }

        if (output_matrix->cols != 1) {
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d001      	beq.n	800304c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x28>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003048:	4b5d      	ldr	r3, [pc, #372]	; (80031c0 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x19c>)
 800304a:	e0b3      	b.n	80031b4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x190>
        }

        uint16_t out_ix = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        size_t in_size = input_matrix->cols;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
        float *in = input_matrix->buffer;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	623b      	str	r3, [r7, #32]
        size_t out_size = output_matrix->rows;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	61fb      	str	r3, [r7, #28]
        float *out = output_matrix->buffer;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	61bb      	str	r3, [r7, #24]

        // for normalized threshold calculation
        float min = FLT_MAX, max = 0.0f;
 8003068:	4b56      	ldr	r3, [pc, #344]	; (80031c4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a0>)
 800306a:	63bb      	str	r3, [r7, #56]	; 0x38
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 8003072:	2300      	movs	r3, #0
 8003074:	633b      	str	r3, [r7, #48]	; 0x30
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	3b01      	subs	r3, #1
 800307a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800307c:	429a      	cmp	r2, r3
 800307e:	d229      	bcs.n	80030d4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xb0>
            if (in[ix] < min) {
 8003080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	6a3a      	ldr	r2, [r7, #32]
 8003086:	4413      	add	r3, r2
 8003088:	edd3 7a00 	vldr	s15, [r3]
 800308c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003098:	dd05      	ble.n	80030a6 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x82>
                min = in[ix];
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	6a3a      	ldr	r2, [r7, #32]
 80030a0:	4413      	add	r3, r2
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            if (in[ix] > max) {
 80030a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	6a3a      	ldr	r2, [r7, #32]
 80030ac:	4413      	add	r3, r2
 80030ae:	edd3 7a00 	vldr	s15, [r3]
 80030b2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80030b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030be:	d505      	bpl.n	80030cc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xa8>
                max = in[ix];
 80030c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	6a3a      	ldr	r2, [r7, #32]
 80030c6:	4413      	add	r3, r2
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 80030cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ce:	3301      	adds	r3, #1
 80030d0:	633b      	str	r3, [r7, #48]	; 0x30
 80030d2:	e7d0      	b.n	8003076 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x52>
            }
        }


        float prev = in[0];
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	62fb      	str	r3, [r7, #44]	; 0x2c

        // so....
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 80030da:	2301      	movs	r3, #1
 80030dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	3b01      	subs	r3, #1
 80030e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d261      	bcs.n	80031ac <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x188>
            // first make sure it's actually a peak...
            if (in[ix] > prev && in[ix] > in[ix+1]) {
 80030e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	6a3a      	ldr	r2, [r7, #32]
 80030ee:	4413      	add	r3, r2
 80030f0:	edd3 7a00 	vldr	s15, [r3]
 80030f4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80030f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003100:	d549      	bpl.n	8003196 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	6a3a      	ldr	r2, [r7, #32]
 8003108:	4413      	add	r3, r2
 800310a:	ed93 7a00 	vldr	s14, [r3]
 800310e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003110:	3301      	adds	r3, #1
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	6a3a      	ldr	r2, [r7, #32]
 8003116:	4413      	add	r3, r2
 8003118:	edd3 7a00 	vldr	s15, [r3]
 800311c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003124:	dd37      	ble.n	8003196 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
                // then make sure the threshold is met (on both?)
                float height = (in[ix] - prev) + (in[ix] - in[ix + 1]);
 8003126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	6a3a      	ldr	r2, [r7, #32]
 800312c:	4413      	add	r3, r2
 800312e:	ed93 7a00 	vldr	s14, [r3]
 8003132:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003136:	ee37 7a67 	vsub.f32	s14, s14, s15
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	6a3a      	ldr	r2, [r7, #32]
 8003140:	4413      	add	r3, r2
 8003142:	edd3 6a00 	vldr	s13, [r3]
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	3301      	adds	r3, #1
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	6a3a      	ldr	r2, [r7, #32]
 800314e:	4413      	add	r3, r2
 8003150:	edd3 7a00 	vldr	s15, [r3]
 8003154:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315c:	edc7 7a05 	vstr	s15, [r7, #20]
                // printf("%d inx: %f height: %f threshold: %f\r\n", ix, in[ix], height, threshold);
                if (height > threshold) {
 8003160:	ed97 7a05 	vldr	s14, [r7, #20]
 8003164:	edd7 7a01 	vldr	s15, [r7, #4]
 8003168:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800316c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003170:	dd11      	ble.n	8003196 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
                    out[out_ix] = ix;
 8003172:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4413      	add	r3, r2
 800317a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800317c:	ee07 2a90 	vmov	s15, r2
 8003180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003184:	edc3 7a00 	vstr	s15, [r3]
                    out_ix++;
 8003188:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800318a:	3301      	adds	r3, #1
 800318c:	87fb      	strh	r3, [r7, #62]	; 0x3e
                    if (out_ix == out_size) break;
 800318e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	429a      	cmp	r2, r3
 8003194:	d009      	beq.n	80031aa <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x186>
                }
            }

            prev = in[ix];
 8003196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	6a3a      	ldr	r2, [r7, #32]
 800319c:	4413      	add	r3, r2
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 80031a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a4:	3301      	adds	r3, #1
 80031a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80031a8:	e799      	b.n	80030de <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xba>
                    if (out_ix == out_size) break;
 80031aa:	bf00      	nop
        }

        *peaks_found = out_ix;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80031b0:	801a      	strh	r2, [r3, #0]

        return EIDSP_OK;
 80031b2:	2300      	movs	r3, #0
    }
 80031b4:	4618      	mov	r0, r3
 80031b6:	3744      	adds	r7, #68	; 0x44
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	fffffc14 	.word	0xfffffc14
 80031c4:	7f7fffff 	.word	0x7f7fffff

080031c8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f003 f8fc 	bl	80063d0 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_Vector_implC1Ev>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ffeb 	bl	80031c8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4618      	mov	r0, r3
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>:
                d.amplitude = 0.0f;
            }
            peaks.push_back(d);
        }
        sort(peaks.begin(), peaks.end(),
            [](const freq_peak_t & a, const freq_peak_t & b) -> bool
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
        {
            return a.amplitude > b.amplitude;
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	ed93 7a01 	vldr	s14, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	edd3 7a01 	vldr	s15, [r3, #4]
 8003214:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321c:	bfcc      	ite	gt
 800321e:	2301      	movgt	r3, #1
 8003220:	2300      	movle	r3, #0
 8003222:	b2db      	uxtb	r3, r3
        });
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>:
    {
 8003230:	b5b0      	push	{r4, r5, r7, lr}
 8003232:	ed2d 8b02 	vpush	{d8}
 8003236:	b09c      	sub	sp, #112	; 0x70
 8003238:	af00      	add	r7, sp, #0
 800323a:	6178      	str	r0, [r7, #20]
 800323c:	6139      	str	r1, [r7, #16]
 800323e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003242:	edc7 0a02 	vstr	s1, [r7, #8]
 8003246:	4613      	mov	r3, r2
 8003248:	80fb      	strh	r3, [r7, #6]
        if (fft_matrix->rows != 1) {
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d001      	beq.n	8003256 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003252:	4c95      	ldr	r4, [pc, #596]	; (80034a8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 8003254:	e120      	b.n	8003498 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        if (output_matrix->cols != 2) {
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d001      	beq.n	8003262 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800325e:	4c92      	ldr	r4, [pc, #584]	; (80034a8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 8003260:	e11a      	b.n	8003498 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        if (output_matrix->rows == 0) {
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x3e>
            return EIDSP_OK;
 800326a:	2400      	movs	r4, #0
 800326c:	e114      	b.n	8003498 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        int N = static_cast<int>(fft_length);
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	663b      	str	r3, [r7, #96]	; 0x60
        float T = 1.0f / sampling_freq;
 8003272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003276:	ed97 7a03 	vldr	s14, [r7, #12]
 800327a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800327e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800328a:	2300      	movs	r3, #0
 800328c:	2101      	movs	r1, #1
 800328e:	f7fe fa48 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
 8003292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x6c>
 8003298:	4c84      	ldr	r4, [pc, #528]	; (80034ac <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 800329a:	e0f8      	b.n	800348e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x25e>
        ret = numpy::linspace(0.0f, 1.0f / (2.0f * T), floor(N / 2), freq_space.buffer);
 800329c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80032a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80032a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032a8:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80032ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032ae:	0fda      	lsrs	r2, r3, #31
 80032b0:	4413      	add	r3, r2
 80032b2:	105b      	asrs	r3, r3, #1
 80032b4:	4618      	mov	r0, r3
 80032b6:	f003 f879 	bl	80063ac <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80032ba:	ec53 2b10 	vmov	r2, r3, d0
 80032be:	4610      	mov	r0, r2
 80032c0:	4619      	mov	r1, r3
 80032c2:	f7fd fc7b 	bl	8000bbc <__aeabi_d2uiz>
 80032c6:	4602      	mov	r2, r0
 80032c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ca:	4619      	mov	r1, r3
 80032cc:	4610      	mov	r0, r2
 80032ce:	eef0 0a48 	vmov.f32	s1, s16
 80032d2:	ed9f 0a77 	vldr	s0, [pc, #476]	; 80034b0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 80032d6:	f7fe ff33 	bl	8002140 <_ZN2ei5numpy8linspaceEffmPf>
 80032da:	65b8      	str	r0, [r7, #88]	; 0x58
        if (ret != EIDSP_OK) {
 80032dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xb6>
            EIDSP_ERR(ret);
 80032e2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80032e4:	e0d3      	b.n	800348e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x25e>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	4619      	mov	r1, r3
 80032f4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80032f8:	2300      	movs	r3, #0
 80032fa:	2201      	movs	r2, #1
 80032fc:	f7fe fa11 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
 8003300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xda>
 8003306:	4c69      	ldr	r4, [pc, #420]	; (80034ac <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 8003308:	e0bc      	b.n	8003484 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x254>
        ret = find_peak_indexes(fft_matrix, &peaks_matrix, 0.0f, &peak_count);
 800330a:	f107 0236 	add.w	r2, r7, #54	; 0x36
 800330e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003312:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80034b0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 8003316:	4619      	mov	r1, r3
 8003318:	6978      	ldr	r0, [r7, #20]
 800331a:	f7ff fe83 	bl	8003024 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>
 800331e:	65b8      	str	r0, [r7, #88]	; 0x58
        if (ret != EIDSP_OK) {
 8003320:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xfa>
            EIDSP_ERR(ret);
 8003326:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003328:	e0ac      	b.n	8003484 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x254>
        ei_vector<freq_peak_t> peaks;
 800332a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff ff57 	bl	80031e2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 8003334:	2300      	movs	r3, #0
 8003336:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800333a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800333e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003340:	4293      	cmp	r3, r2
 8003342:	da3d      	bge.n	80033c0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x190>
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 8003344:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003346:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003348:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	edd3 7a00 	vldr	s15, [r3]
 8003354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003358:	ee17 3a90 	vmov	r3, s15
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	623b      	str	r3, [r7, #32]
            d.amplitude = fft_matrix->buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800336a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	edd3 7a00 	vldr	s15, [r3]
 8003376:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800337a:	ee17 3a90 	vmov	r3, s15
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
            if (d.amplitude < threshold) {
 8003386:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800338a:	ed97 7a02 	vldr	s14, [r7, #8]
 800338e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003396:	dd05      	ble.n	80033a4 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x174>
                d.freq = 0.0f;
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	623b      	str	r3, [r7, #32]
                d.amplitude = 0.0f;
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
            peaks.push_back(d);
 80033a4:	f107 0220 	add.w	r2, r7, #32
 80033a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033ac:	4611      	mov	r1, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f003 f84b 	bl	800644a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 80033b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80033b8:	3301      	adds	r3, #1
 80033ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80033be:	e7bc      	b.n	800333a <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x10a>
        sort(peaks.begin(), peaks.end(),
 80033c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033c4:	4618      	mov	r0, r3
 80033c6:	f003 f866 	bl	8006496 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>
 80033ca:	4604      	mov	r4, r0
 80033cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033d0:	4618      	mov	r0, r3
 80033d2:	f003 f870 	bl	80064b6 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>
 80033d6:	4603      	mov	r3, r0
 80033d8:	462a      	mov	r2, r5
 80033da:	4619      	mov	r1, r3
 80033dc:	4620      	mov	r0, r4
 80033de:	f003 f87b 	bl	80064d8 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESD_fftEUlRKS5_SF_E_EvT_SH_T0_>

        // fill with zeros at the end (if needed)
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 80033e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033e6:	4618      	mov	r0, r3
 80033e8:	f003 f888 	bl	80064fc <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 80033ec:	66b8      	str	r0, [r7, #104]	; 0x68
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d211      	bcs.n	800341c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1ec>
            freq_peak_t d;
            d.freq = 0;
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	61bb      	str	r3, [r7, #24]
            d.amplitude = 0;
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	61fb      	str	r3, [r7, #28]
            peaks.push_back(d);
 8003404:	f107 0218 	add.w	r2, r7, #24
 8003408:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800340c:	4611      	mov	r1, r2
 800340e:	4618      	mov	r0, r3
 8003410:	f003 f81b 	bl	800644a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 8003414:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003416:	3301      	adds	r3, #1
 8003418:	66bb      	str	r3, [r7, #104]	; 0x68
 800341a:	e7e8      	b.n	80033ee <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1be>
        }

        for (size_t row = 0; row < output_matrix->rows; row++) {
 800341c:	2300      	movs	r3, #0
 800341e:	667b      	str	r3, [r7, #100]	; 0x64
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003426:	429a      	cmp	r2, r3
 8003428:	d226      	bcs.n	8003478 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x248>
            // col 0 is freq, col 1 is ampl
            output_matrix->buffer[row * output_matrix->cols + 0] = peaks[row].freq;
 800342a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800342e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003430:	4618      	mov	r0, r3
 8003432:	f003 f873 	bl	800651c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	6802      	ldr	r2, [r0, #0]
 800344a:	601a      	str	r2, [r3, #0]
            output_matrix->buffer[row * output_matrix->cols + 1] = peaks[row].amplitude;
 800344c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003450:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003452:	4618      	mov	r0, r3
 8003454:	f003 f862 	bl	800651c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003462:	fb01 f303 	mul.w	r3, r1, r3
 8003466:	3301      	adds	r3, #1
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	6842      	ldr	r2, [r0, #4]
 800346e:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < output_matrix->rows; row++) {
 8003470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003472:	3301      	adds	r3, #1
 8003474:	667b      	str	r3, [r7, #100]	; 0x64
 8003476:	e7d3      	b.n	8003420 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1f0>
        }

        return EIDSP_OK;
 8003478:	2400      	movs	r4, #0
        ei_vector<freq_peak_t> peaks;
 800347a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800347e:	4618      	mov	r0, r3
 8003480:	f002 ffc8 	bl	8006414 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 8003484:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003488:	4618      	mov	r0, r3
 800348a:	f7fe f975 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 800348e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003492:	4618      	mov	r0, r3
 8003494:	f7fe f970 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
    }
 8003498:	4623      	mov	r3, r4
 800349a:	4618      	mov	r0, r3
 800349c:	3770      	adds	r7, #112	; 0x70
 800349e:	46bd      	mov	sp, r7
 80034a0:	ecbd 8b02 	vpop	{d8}
 80034a4:	bdb0      	pop	{r4, r5, r7, pc}
 80034a6:	bf00      	nop
 80034a8:	fffffc14 	.word	0xfffffc14
 80034ac:	fffffc16 	.word	0xfffffc16
 80034b0:	00000000 	.word	0x00000000

080034b4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
        matrix_t *fft_matrix,
        matrix_t *freq_matrix,
        matrix_t *edges_matrix,
        matrix_t *output_matrix,
        float sampling_freq
    ) {
 80034b4:	b590      	push	{r4, r7, lr}
 80034b6:	b093      	sub	sp, #76	; 0x4c
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6178      	str	r0, [r7, #20]
 80034bc:	6139      	str	r1, [r7, #16]
 80034be:	60fa      	str	r2, [r7, #12]
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	ed87 0a01 	vstr	s0, [r7, #4]
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d103      	bne.n	80034d6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x22>
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d001      	beq.n	80034da <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80034d6:	4c7b      	ldr	r4, [pc, #492]	; (80036c4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80034d8:	e0ef      	b.n	80036ba <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (edges_matrix->cols != 1) {
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d001      	beq.n	80034e6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80034e2:	4c78      	ldr	r4, [pc, #480]	; (80036c4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80034e4:	e0e9      	b.n	80036ba <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (output_matrix->rows != edges_matrix->rows - 1 || output_matrix->cols != edges_matrix->cols) {
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d105      	bne.n	8003500 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x4c>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d001      	beq.n	8003504 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x50>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003500:	4c70      	ldr	r4, [pc, #448]	; (80036c4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8003502:	e0da      	b.n	80036ba <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (fft_matrix->cols != freq_matrix->cols) {
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x60>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003510:	4c6c      	ldr	r4, [pc, #432]	; (80036c4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8003512:	e0d2      	b.n	80036ba <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	1e5a      	subs	r2, r3, #1
 800351a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800351e:	2300      	movs	r3, #0
 8003520:	2101      	movs	r1, #1
 8003522:	f7fe f8fe 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x7c>
 800352c:	4c66      	ldr	r4, [pc, #408]	; (80036c8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 800352e:	e0bf      	b.n	80036b0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1fc>
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	1e5a      	subs	r2, r3, #1
 8003536:	f107 0018 	add.w	r0, r7, #24
 800353a:	2300      	movs	r3, #0
 800353c:	2101      	movs	r1, #1
 800353e:	f7fe f8f0 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x98>
 8003548:	4c5f      	ldr	r4, [pc, #380]	; (80036c8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 800354a:	e0ac      	b.n	80036a6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f2>

        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 800354c:	2300      	movs	r3, #0
 800354e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003552:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	429a      	cmp	r2, r3
 800355c:	d264      	bcs.n	8003628 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x174>
            float t = freq_matrix->buffer[ix];
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	63fb      	str	r3, [r7, #60]	; 0x3c
            float v = fft_matrix->buffer[ix];
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	63bb      	str	r3, [r7, #56]	; 0x38

            // does this fit between any edges?
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 800357e:	2300      	movs	r3, #0
 8003580:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003584:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	3b01      	subs	r3, #1
 800358e:	429a      	cmp	r2, r3
 8003590:	d244      	bcs.n	800361c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
                if (t >= edges_matrix->buffer[ex] && t < edges_matrix->buffer[ex + 1]) {
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	edd3 7a00 	vldr	s15, [r3]
 80035a2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80035a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ae:	db2f      	blt.n	8003610 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15c>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80035b8:	3301      	adds	r3, #1
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	edd3 7a00 	vldr	s15, [r3]
 80035c2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80035c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ce:	d51f      	bpl.n	8003610 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15c>
                    buckets.buffer[ex] += v;
 80035d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	ed93 7a00 	vldr	s14, [r3]
 80035de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80035ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035f0:	edc3 7a00 	vstr	s15, [r3]
                    bucket_count.buffer[ex]++;
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	edd3 7a00 	vldr	s15, [r3]
 8003602:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003606:	ee77 7a87 	vadd.f32	s15, s15, s14
 800360a:	edc3 7a00 	vstr	s15, [r3]
                    break;
 800360e:	e005      	b.n	800361c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003610:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003614:	3301      	adds	r3, #1
 8003616:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800361a:	e7b3      	b.n	8003584 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xd0>
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 800361c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003620:	3301      	adds	r3, #1
 8003622:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003626:	e794      	b.n	8003552 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x9e>
                }
            }
        }

        // average out and push to vector
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003628:	2300      	movs	r3, #0
 800362a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800362e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	3b01      	subs	r3, #1
 8003638:	429a      	cmp	r2, r3
 800363a:	d233      	bcs.n	80036a4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f0>
            if (bucket_count.buffer[ex] == 0.0f) {
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	edd3 7a00 	vldr	s15, [r3]
 800364a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800364e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003652:	d109      	bne.n	8003668 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1b4>
                output_matrix->buffer[ex] = 0.0f;
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	e017      	b.n	8003698 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1e4>
            }
            else {
                output_matrix->buffer[ex] = buckets.buffer[ex] / bucket_count.buffer[ex];
 8003668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800366a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	edd3 6a00 	vldr	s13, [r3]
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	ed93 7a00 	vldr	s14, [r3]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003694:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003698:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800369c:	3301      	adds	r3, #1
 800369e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80036a2:	e7c4      	b.n	800362e <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x17a>
            }
        }

        return EIDSP_OK;
 80036a4:	2400      	movs	r4, #0
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 80036a6:	f107 0318 	add.w	r3, r7, #24
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fe f864 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 80036b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7fe f85f 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
    }
 80036ba:	4623      	mov	r3, r4
 80036bc:	4618      	mov	r0, r3
 80036be:	374c      	adds	r7, #76	; 0x4c
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd90      	pop	{r4, r7, pc}
 80036c4:	fffffc14 	.word	0xfffffc14
 80036c8:	fffffc16 	.word	0xfffffc16

080036cc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>:
     * @param sampling_freq The sampling frequency
     * @param n_fft Number of FFT buckets
     * @returns 0 if OK
     */
    int periodogram(matrix_t *input_matrix, matrix_t *out_fft_matrix, matrix_t *out_freq_matrix, float sampling_freq, uint16_t n_fft)
    {
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	ed2d 8b02 	vpush	{d8}
 80036d2:	b09b      	sub	sp, #108	; 0x6c
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	6178      	str	r0, [r7, #20]
 80036d8:	6139      	str	r1, [r7, #16]
 80036da:	60fa      	str	r2, [r7, #12]
 80036dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80036e0:	80fb      	strh	r3, [r7, #6]
        if (input_matrix->rows != 1) {
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d001      	beq.n	80036ee <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80036ea:	4c80      	ldr	r4, [pc, #512]	; (80038ec <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 80036ec:	e192      	b.n	8003a14 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->rows != 1 || out_fft_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d107      	bne.n	8003706 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3a>
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	88fa      	ldrh	r2, [r7, #6]
 80036fc:	0852      	lsrs	r2, r2, #1
 80036fe:	b292      	uxth	r2, r2
 8003700:	3201      	adds	r2, #1
 8003702:	4293      	cmp	r3, r2
 8003704:	d001      	beq.n	800370a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003706:	4c79      	ldr	r4, [pc, #484]	; (80038ec <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 8003708:	e184      	b.n	8003a14 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->rows != 1 || out_freq_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d107      	bne.n	8003722 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x56>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	88fa      	ldrh	r2, [r7, #6]
 8003718:	0852      	lsrs	r2, r2, #1
 800371a:	b292      	uxth	r2, r2
 800371c:	3201      	adds	r2, #1
 800371e:	4293      	cmp	r3, r2
 8003720:	d001      	beq.n	8003726 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x5a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003722:	4c72      	ldr	r4, [pc, #456]	; (80038ec <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 8003724:	e176      	b.n	8003a14 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (input_matrix->buffer == NULL) {
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x66>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800372e:	4c70      	ldr	r4, [pc, #448]	; (80038f0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003730:	e170      	b.n	8003a14 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->buffer == NULL) {
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x72>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800373a:	4c6d      	ldr	r4, [pc, #436]	; (80038f0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 800373c:	e16a      	b.n	8003a14 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->buffer == NULL) {
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x7e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003746:	4c6a      	ldr	r4, [pc, #424]	; (80038f0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003748:	e164      	b.n	8003a14 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        // map over the input buffer, so we can manipulate the number of columns
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	6859      	ldr	r1, [r3, #4]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800375a:	f7fd ffe2 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
 800375e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x9c>
 8003764:	4c62      	ldr	r4, [pc, #392]	; (80038f0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003766:	e150      	b.n	8003a0a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x33e>

        uint16_t nperseg = n_fft;
 8003768:	88fb      	ldrh	r3, [r7, #6]
 800376a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        if (n_fft > input_matrix->cols) {
 800376e:	88fa      	ldrh	r2, [r7, #6]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	429a      	cmp	r2, r3
 8003776:	d904      	bls.n	8003782 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xb6>
            nperseg = input_matrix->cols;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003780:	e006      	b.n	8003790 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
        }
        // make the column align to nperseg in this case
        else if (n_fft < input_matrix->cols) {
 8003782:	88fa      	ldrh	r2, [r7, #6]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	429a      	cmp	r2, r3
 800378a:	d201      	bcs.n	8003790 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
            welch_matrix.cols = n_fft;
 800378c:	88fb      	ldrh	r3, [r7, #6]
 800378e:	647b      	str	r3, [r7, #68]	; 0x44
        }

        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 8003790:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003794:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003798:	2300      	movs	r3, #0
 800379a:	2101      	movs	r1, #1
 800379c:	f7fd ffc1 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
 80037a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xde>
 80037a6:	4c52      	ldr	r4, [pc, #328]	; (80038f0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 80037a8:	e12a      	b.n	8003a00 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x334>
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 80037aa:	2300      	movs	r3, #0
 80037ac:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80037b0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80037b4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d20d      	bcs.n	80037d8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x10c>
            triage_segments.buffer[ix] = 1.0f;
 80037bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037be:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80037ca:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 80037cc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80037d0:	3301      	adds	r3, #1
 80037d2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80037d6:	e7eb      	b.n	80037b0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xe4>
        }

        float scale = 1.0f / (sampling_freq * nperseg);
 80037d8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80037dc:	ee07 3a90 	vmov	s15, r3
 80037e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80037e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037f4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 80037f8:	2300      	movs	r3, #0
 80037fa:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	085b      	lsrs	r3, r3, #1
 8003802:	b29b      	uxth	r3, r3
 8003804:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8003808:	429a      	cmp	r2, r3
 800380a:	d826      	bhi.n	800385a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x18e>
            out_freq_matrix->buffer[ix] = static_cast<float>(ix) * (1.0f / (n_fft * (1.0f / sampling_freq)));
 800380c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003810:	ee07 3a90 	vmov	s15, r3
 8003814:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003822:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8003826:	ed97 6a02 	vldr	s12, [r7, #8]
 800382a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800382e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003832:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003836:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384a:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 800384e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003852:	3301      	adds	r3, #1
 8003854:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003858:	e7d1      	b.n	80037fe <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x132>
        }

        int ret;

        // now we need to detrend... which is done constant so just subtract the mean
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 800385a:	f107 001c 	add.w	r0, r7, #28
 800385e:	2300      	movs	r3, #0
 8003860:	2201      	movs	r2, #1
 8003862:	2101      	movs	r1, #1
 8003864:	f7fd ff5d 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a6>
 800386e:	4c20      	ldr	r4, [pc, #128]	; (80038f0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003870:	e0c1      	b.n	80039f6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        ret = numpy::mean(&welch_matrix, &mean_matrix);
 8003872:	f107 021c 	add.w	r2, r7, #28
 8003876:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800387a:	4611      	mov	r1, r2
 800387c:	4618      	mov	r0, r3
 800387e:	f7fe fa53 	bl	8001d28 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8003882:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 8003884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1c2>
            EIDSP_ERR(ret);
 800388a:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 800388c:	e0b3      	b.n	80039f6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        ret = numpy::subtract(&welch_matrix, &mean_matrix);
 800388e:	f107 021c 	add.w	r2, r7, #28
 8003892:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003896:	4611      	mov	r1, r2
 8003898:	4618      	mov	r0, r3
 800389a:	f7fe f9ad 	bl	8001bf8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 800389e:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 80038a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1de>
            EIDSP_ERR(ret);
 80038a6:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80038a8:	e0a5      	b.n	80039f6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        fft_complex_t *fft_output = (fft_complex_t*)ei_dsp_calloc((n_fft / 2 + 1) * sizeof(fft_complex_t), 1);
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	085b      	lsrs	r3, r3, #1
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3301      	adds	r3, #1
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	2101      	movs	r1, #1
 80038b6:	4618      	mov	r0, r3
 80038b8:	f016 fbfa 	bl	801a0b0 <_Z9ei_callocjj>
 80038bc:	64f8      	str	r0, [r7, #76]	; 0x4c
        ret = numpy::rfft(welch_matrix.buffer, welch_matrix.cols, fft_output, n_fft / 2 + 1, n_fft);
 80038be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80038c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	085b      	lsrs	r3, r3, #1
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3301      	adds	r3, #1
 80038ca:	461a      	mov	r2, r3
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	4613      	mov	r3, r2
 80038d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038d4:	f7fe fb42 	bl	8001f5c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
 80038d8:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 80038da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d009      	beq.n	80038f4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>
            ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 80038e0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80038e2:	f016 fbf3 	bl	801a0cc <_Z7ei_freePv>
            EIDSP_ERR(ret);
 80038e6:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80038e8:	e085      	b.n	80039f6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
 80038ea:	bf00      	nop
 80038ec:	fffffc14 	.word	0xfffffc14
 80038f0:	fffffc16 	.word	0xfffffc16
        }

        // conjugate and then multiply with itself and scale
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 80038f4:	2300      	movs	r3, #0
 80038f6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80038fa:	88fb      	ldrh	r3, [r7, #6]
 80038fc:	085b      	lsrs	r3, r3, #1
 80038fe:	b29b      	uxth	r3, r3
 8003900:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8003904:	429a      	cmp	r2, r3
 8003906:	d872      	bhi.n	80039ee <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x322>
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 8003908:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003910:	4413      	add	r3, r2
 8003912:	ed93 7a00 	vldr	s14, [r3]
 8003916:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800391e:	4413      	add	r3, r2
 8003920:	edd3 7a00 	vldr	s15, [r3]
 8003924:	ee27 8a27 	vmul.f32	s16, s14, s15
                (abs(fft_output[ix].i * fft_output[ix].i));
 8003928:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003930:	4413      	add	r3, r2
 8003932:	ed93 7a01 	vldr	s14, [r3, #4]
 8003936:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800393e:	4413      	add	r3, r2
 8003940:	edd3 7a01 	vldr	s15, [r3, #4]
 8003944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003948:	eeb0 0a67 	vmov.f32	s0, s15
 800394c:	f7fd fd26 	bl	800139c <_ZSt3absf>
 8003950:	eef0 7a40 	vmov.f32	s15, s0
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 8003954:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800395c:	4413      	add	r3, r2
 800395e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003962:	edc3 7a00 	vstr	s15, [r3]
            fft_output[ix].i = 0.0f;
 8003966:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800396e:	4413      	add	r3, r2
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	605a      	str	r2, [r3, #4]

            fft_output[ix].r *= scale;
 8003976:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800397e:	4413      	add	r3, r2
 8003980:	ed93 7a00 	vldr	s14, [r3]
 8003984:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800398c:	4413      	add	r3, r2
 800398e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003996:	edc3 7a00 	vstr	s15, [r3]

            if (ix != n_fft / 2) {
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	085b      	lsrs	r3, r3, #1
 800399e:	b29b      	uxth	r3, r3
 80039a0:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d00f      	beq.n	80039c8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x2fc>
                fft_output[ix].r *= 2;
 80039a8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039b0:	4413      	add	r3, r2
 80039b2:	edd3 7a00 	vldr	s15, [r3]
 80039b6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039be:	4413      	add	r3, r2
 80039c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80039c4:	edc3 7a00 	vstr	s15, [r3]
            }

            // then multiply by itself...
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
 80039c8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039d0:	441a      	add	r2, r3
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	6819      	ldr	r1, [r3, #0]
 80039d6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	6812      	ldr	r2, [r2, #0]
 80039e0:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 80039e2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80039e6:	3301      	adds	r3, #1
 80039e8:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80039ec:	e785      	b.n	80038fa <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22e>
        }

        ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 80039ee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80039f0:	f016 fb6c 	bl	801a0cc <_Z7ei_freePv>

        return EIDSP_OK;
 80039f4:	2400      	movs	r4, #0
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 80039f6:	f107 031c 	add.w	r3, r7, #28
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fd febc 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 8003a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fd feb7 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 8003a0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fd feb2 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
    }
 8003a14:	4623      	mov	r3, r4
 8003a16:	4618      	mov	r0, r3
 8003a18:	3764      	adds	r7, #100	; 0x64
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	ecbd 8b02 	vpop	{d8}
 8003a20:	bd90      	pop	{r4, r7, pc}
 8003a22:	bf00      	nop

08003a24 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>:

    static int subtract_mean(matrix_t* input_matrix) {
 8003a24:	b590      	push	{r4, r7, lr}
 8003a26:	b089      	sub	sp, #36	; 0x24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
        // calculate the mean
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	f107 000c 	add.w	r0, r7, #12
 8003a34:	2300      	movs	r3, #0
 8003a36:	2201      	movs	r2, #1
 8003a38:	f7fd fe73 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x22>
 8003a42:	4c12      	ldr	r4, [pc, #72]	; (8003a8c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x68>)
 8003a44:	e018      	b.n	8003a78 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        int ret = numpy::mean(input_matrix, &mean_matrix);
 8003a46:	f107 030c 	add.w	r3, r7, #12
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7fe f96b 	bl	8001d28 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8003a52:	61f8      	str	r0, [r7, #28]
        if (ret != EIDSP_OK) {
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x3a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a5a:	4c0d      	ldr	r4, [pc, #52]	; (8003a90 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x6c>)
 8003a5c:	e00c      	b.n	8003a78 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        }

        // scale by the mean
        ret = numpy::subtract(input_matrix, &mean_matrix);
 8003a5e:	f107 030c 	add.w	r3, r7, #12
 8003a62:	4619      	mov	r1, r3
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7fe f8c7 	bl	8001bf8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 8003a6a:	61f8      	str	r0, [r7, #28]
        if (ret != EIDSP_OK) {
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x52>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a72:	4c07      	ldr	r4, [pc, #28]	; (8003a90 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x6c>)
 8003a74:	e000      	b.n	8003a78 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        }

        return EIDSP_OK;
 8003a76:	2400      	movs	r4, #0
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
 8003a78:	f107 030c 	add.w	r3, r7, #12
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fd fe7b 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
    }
 8003a82:	4623      	mov	r3, r4
 8003a84:	4618      	mov	r0, r3
 8003a86:	3724      	adds	r7, #36	; 0x24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd90      	pop	{r4, r7, pc}
 8003a8c:	fffffc16 	.word	0xfffffc16
 8003a90:	fffffc14 	.word	0xfffffc14

08003a94 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>:
     * @param fft_peaks Number of FFT peaks to find
     * @param fft_peaks_threshold Minimum threshold
     * @param edges_matrix Spectral power edges
     * @returns 0 if OK
     */
    static int spectral_analysis(
 8003a94:	b5b0      	push	{r4, r5, r7, lr}
 8003a96:	b0b0      	sub	sp, #192	; 0xc0
 8003a98:	af02      	add	r7, sp, #8
 8003a9a:	6178      	str	r0, [r7, #20]
 8003a9c:	6139      	str	r1, [r7, #16]
 8003a9e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	edc7 0a01 	vstr	s1, [r7, #4]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	ed87 1a00 	vstr	s2, [r7]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	72fb      	strb	r3, [r7, #11]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	72bb      	strb	r3, [r7, #10]
        uint16_t fft_length,
        uint8_t fft_peaks,
        float fft_peaks_threshold,
        matrix_t *edges_matrix_in
    ) {
        if (out_features->rows != input_matrix->rows) {
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d001      	beq.n	8003ac6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003ac2:	4caf      	ldr	r4, [pc, #700]	; (8003d80 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003ac4:	e227      	b.n	8003f16 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	689d      	ldr	r5, [r3, #8]
 8003aca:	f897 10cc 	ldrb.w	r1, [r7, #204]	; 0xcc
 8003ace:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	f000 fa22 	bl	8003f20 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 8003adc:	4603      	mov	r3, r0
 8003ade:	429d      	cmp	r5, r3
 8003ae0:	bf14      	ite	ne
 8003ae2:	2301      	movne	r3, #1
 8003ae4:	2300      	moveq	r3, #0
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x5c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003aec:	4ca4      	ldr	r4, [pc, #656]	; (8003d80 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003aee:	e212      	b.n	8003f16 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        if (edges_matrix_in->cols != 1) {
 8003af0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d001      	beq.n	8003afe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x6a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003afa:	4ca1      	ldr	r4, [pc, #644]	; (8003d80 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003afc:	e20b      	b.n	8003f16 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        int ret;

        size_t axes = input_matrix->rows;
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

        EI_TRY(processing::subtract_mean(input_matrix) );
 8003b06:	6938      	ldr	r0, [r7, #16]
 8003b08:	f7ff ff8c 	bl	8003a24 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 8003b0c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8003b10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x8a>
 8003b18:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003b1c:	e1fb      	b.n	8003f16 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>

        // apply filter
        if (filter_type == filter_lowpass) {
 8003b1e:	7afb      	ldrb	r3, [r7, #11]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d110      	bne.n	8003b46 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xb2>
            ret = spectral::processing::butterworth_lowpass_filter(
 8003b24:	7abb      	ldrb	r3, [r7, #10]
 8003b26:	4619      	mov	r1, r3
 8003b28:	edd7 0a01 	vldr	s1, [r7, #4]
 8003b2c:	ed97 0a03 	vldr	s0, [r7, #12]
 8003b30:	6938      	ldr	r0, [r7, #16]
 8003b32:	f7ff fa0b 	bl	8002f4c <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 8003b36:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 8003b3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d015      	beq.n	8003b6e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003b42:	4c8f      	ldr	r4, [pc, #572]	; (8003d80 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003b44:	e1e7      	b.n	8003f16 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
            }
        }
        else if (filter_type == filter_highpass) {
 8003b46:	7afb      	ldrb	r3, [r7, #11]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d110      	bne.n	8003b6e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
            ret = spectral::processing::butterworth_highpass_filter(
 8003b4c:	7abb      	ldrb	r3, [r7, #10]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	edd7 0a01 	vldr	s1, [r7, #4]
 8003b54:	ed97 0a03 	vldr	s0, [r7, #12]
 8003b58:	6938      	ldr	r0, [r7, #16]
 8003b5a:	f7ff fa2d 	bl	8002fb8 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8003b5e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 8003b62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003b6a:	4c85      	ldr	r4, [pc, #532]	; (8003d80 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003b6c:	e1d3      	b.n	8003f16 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
            }
        }

        // calculate RMS
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 8003b6e:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8003b72:	2300      	movs	r3, #0
 8003b74:	2201      	movs	r2, #1
 8003b76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b7a:	f7fd fdd2 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
 8003b7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xf6>
 8003b86:	4c7f      	ldr	r4, [pc, #508]	; (8003d84 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003b88:	e1c0      	b.n	8003f0c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
        ret = numpy::rms(input_matrix, &rms_matrix);
 8003b8a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6938      	ldr	r0, [r7, #16]
 8003b92:	f7fe f88d 	bl	8001cb0 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 8003b96:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (ret != EIDSP_OK) {
 8003b9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x112>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003ba2:	4c77      	ldr	r4, [pc, #476]	; (8003d80 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003ba4:	e1b2      	b.n	8003f0c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
        }

        // find peaks in FFT
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 8003ba6:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	461a      	mov	r2, r3
 8003bae:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bb8:	f7fd fdb3 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
 8003bbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x132>
 8003bc2:	4c70      	ldr	r4, [pc, #448]	; (8003d84 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003bc4:	e19d      	b.n	8003f02 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46e>

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	f080 8193 	bcs.w	8003f00 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46c>
            // per axis code

            // get a slice of the current axis
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	689d      	ldr	r5, [r3, #8]
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8003bea:	fb01 f303 	mul.w	r3, r1, r3
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003bf6:	462a      	mov	r2, r5
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	f7fd fd92 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
 8003bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d102      	bne.n	8003c0a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x176>
 8003c04:	4c5f      	ldr	r4, [pc, #380]	; (8003d84 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003c06:	2500      	movs	r5, #0
 8003c08:	e16d      	b.n	8003ee6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x452>

            // calculate FFT
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 8003c0a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3301      	adds	r3, #1
 8003c14:	461a      	mov	r2, r3
 8003c16:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	f7fd fd80 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
 8003c22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d102      	bne.n	8003c2e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x19a>
 8003c28:	4c56      	ldr	r4, [pc, #344]	; (8003d84 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003c2a:	2500      	movs	r5, #0
 8003c2c:	e151      	b.n	8003ed2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
            ret = numpy::rfft(axis_matrix.buffer, axis_matrix.cols, fft_matrix.buffer, fft_matrix.cols, fft_length);
 8003c2e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003c30:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003c32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c34:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8003c36:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	462b      	mov	r3, r5
 8003c3e:	f7fe f8af 	bl	8001da0 <_ZN2ei5numpy4rfftEPKfjPfjj>
 8003c42:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            if (ret != EIDSP_OK) {
 8003c46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1c0>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003c4e:	4c4c      	ldr	r4, [pc, #304]	; (8003d80 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003c50:	2500      	movs	r5, #0
 8003c52:	e13e      	b.n	8003ed2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
            }

            // multiply by 2/N
            numpy::scale(&fft_matrix, (2.0f / static_cast<float>(fft_length)));
 8003c54:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003c58:	ee07 3a90 	vmov	s15, r3
 8003c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c60:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003c64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003c6c:	eeb0 0a47 	vmov.f32	s0, s14
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fd ff47 	bl	8001b04 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>

            // we're now using the FFT matrix to calculate peaks etc.
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 8003c76:	f897 10cc 	ldrb.w	r1, [r7, #204]	; 0xcc
 8003c7a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003c7e:	2300      	movs	r3, #0
 8003c80:	2202      	movs	r2, #2
 8003c82:	f7fd fd4e 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
 8003c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d102      	bne.n	8003c92 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1fe>
 8003c8c:	4c3d      	ldr	r4, [pc, #244]	; (8003d84 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003c8e:	2500      	movs	r5, #0
 8003c90:	e115      	b.n	8003ebe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x42a>
            ret = spectral::processing::find_fft_peaks(&fft_matrix, &peaks_matrix,
 8003c92:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8003c96:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003c9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003c9e:	edd7 0a00 	vldr	s1, [r7]
 8003ca2:	ed97 0a03 	vldr	s0, [r7, #12]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff fac2 	bl	8003230 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>
 8003cac:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                sampling_freq, fft_peaks_threshold, fft_length);
            if (ret != EIDSP_OK) {
 8003cb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x22a>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003cb8:	4c31      	ldr	r4, [pc, #196]	; (8003d80 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ec>)
 8003cba:	2500      	movs	r5, #0
 8003cbc:	e0ff      	b.n	8003ebe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x42a>
            }

            // calculate periodogram for spectral power buckets
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 8003cbe:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003cc2:	085b      	lsrs	r3, r3, #1
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	461a      	mov	r2, r3
 8003cca:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003cce:	2300      	movs	r3, #0
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	f7fd fd26 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d102      	bne.n	8003ce2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x24e>
 8003cdc:	4c29      	ldr	r4, [pc, #164]	; (8003d84 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003cde:	2500      	movs	r5, #0
 8003ce0:	e0e3      	b.n	8003eaa <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x416>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 8003ce2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003ce6:	085b      	lsrs	r3, r3, #1
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3301      	adds	r3, #1
 8003cec:	461a      	mov	r2, r3
 8003cee:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	f7fd fd14 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
 8003cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d102      	bne.n	8003d06 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x272>
 8003d00:	4c20      	ldr	r4, [pc, #128]	; (8003d84 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003d02:	2500      	movs	r5, #0
 8003d04:	e0c7      	b.n	8003e96 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x402>
            ret = spectral::processing::periodogram(&axis_matrix,
 8003d06:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8003d0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d0e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003d12:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003d16:	ed97 0a03 	vldr	s0, [r7, #12]
 8003d1a:	f7ff fcd7 	bl	80036cc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>
 8003d1e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                &period_fft_matrix, &period_freq_matrix, sampling_freq, fft_length);
            if (ret != EIDSP_OK) {
 8003d22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x29e>
                EIDSP_ERR(ret);
 8003d2a:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8003d2e:	2500      	movs	r5, #0
 8003d30:	e0b1      	b.n	8003e96 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x402>
            }

            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
 8003d32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	1e59      	subs	r1, r3, #1
 8003d3a:	f107 0018 	add.w	r0, r7, #24
 8003d3e:	2300      	movs	r3, #0
 8003d40:	2201      	movs	r2, #1
 8003d42:	f7fd fcee 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d102      	bne.n	8003d52 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2be>
 8003d4c:	4c0d      	ldr	r4, [pc, #52]	; (8003d84 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 8003d4e:	2500      	movs	r5, #0
 8003d50:	e097      	b.n	8003e82 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3ee>
            ret = spectral::processing::spectral_power_edges(
 8003d52:	f107 0318 	add.w	r3, r7, #24
 8003d56:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003d5a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003d5e:	ed97 0a03 	vldr	s0, [r7, #12]
 8003d62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d66:	f7ff fba5 	bl	80034b4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>
 8003d6a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                &period_fft_matrix,
                &period_freq_matrix,
                edges_matrix_in,
                &edges_matrix_out,
                sampling_freq);
            if (ret != EIDSP_OK) {
 8003d6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d008      	beq.n	8003d88 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f4>
                EIDSP_ERR(ret);
 8003d76:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8003d7a:	2500      	movs	r5, #0
 8003d7c:	e081      	b.n	8003e82 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3ee>
 8003d7e:	bf00      	nop
 8003d80:	fffffc14 	.word	0xfffffc14
 8003d84:	fffffc16 	.word	0xfffffc16
            }

            float *features_row = out_features->buffer + (row * out_features->cols);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8003d94:	fb01 f303 	mul.w	r3, r1, r3
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

            size_t fx = 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

            features_row[fx++] = rms_matrix.buffer[row];
 8003da6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003daa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	441a      	add	r2, r3
 8003db2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003db6:	1c59      	adds	r1, r3, #1
 8003db8:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003dc2:	440b      	add	r3, r1
 8003dc4:	6812      	ldr	r2, [r2, #0]
 8003dc6:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d22c      	bcs.n	8003e32 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x39e>
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 0];
 8003dd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ddc:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	441a      	add	r2, r3
 8003de8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003dec:	1c59      	adds	r1, r3, #1
 8003dee:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003df8:	440b      	add	r3, r1
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	601a      	str	r2, [r3, #0]
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 1];
 8003dfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e02:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003e06:	fb01 f303 	mul.w	r3, r1, r3
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	441a      	add	r2, r3
 8003e10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e14:	1c59      	adds	r1, r3, #1
 8003e16:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003e20:	440b      	add	r3, r1
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 8003e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e30:	e7cd      	b.n	8003dce <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33a>
            }
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 8003e32:	2300      	movs	r3, #0
 8003e34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d21e      	bcs.n	8003e80 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3ec>
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8003e4a:	fb01 f303 	mul.w	r3, r1, r3
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	ed93 7a00 	vldr	s14, [r3]
 8003e56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003e66:	4413      	add	r3, r2
 8003e68:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003e6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e70:	edc3 7a00 	vstr	s15, [r3]
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 8003e74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e78:	3301      	adds	r3, #1
 8003e7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e7e:	e7db      	b.n	8003e38 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3a4>
 8003e80:	2501      	movs	r5, #1
 8003e82:	f107 0318 	add.w	r3, r7, #24
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fd fc76 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
 8003e8c:	2d01      	cmp	r5, #1
 8003e8e:	d001      	beq.n	8003e94 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x400>
 8003e90:	2500      	movs	r5, #0
 8003e92:	e000      	b.n	8003e96 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x402>
 8003e94:	2501      	movs	r5, #1
 8003e96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fd fc6c 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
 8003ea0:	2d01      	cmp	r5, #1
 8003ea2:	d001      	beq.n	8003ea8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x414>
 8003ea4:	2500      	movs	r5, #0
 8003ea6:	e000      	b.n	8003eaa <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x416>
 8003ea8:	2501      	movs	r5, #1
 8003eaa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fd fc62 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
 8003eb4:	2d01      	cmp	r5, #1
 8003eb6:	d001      	beq.n	8003ebc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x428>
 8003eb8:	2500      	movs	r5, #0
 8003eba:	e000      	b.n	8003ebe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x42a>
 8003ebc:	2501      	movs	r5, #1
 8003ebe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fd fc58 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
 8003ec8:	2d01      	cmp	r5, #1
 8003eca:	d001      	beq.n	8003ed0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43c>
 8003ecc:	2500      	movs	r5, #0
 8003ece:	e000      	b.n	8003ed2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
 8003ed0:	2501      	movs	r5, #1
 8003ed2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fd fc4e 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
 8003edc:	2d01      	cmp	r5, #1
 8003ede:	d001      	beq.n	8003ee4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x450>
 8003ee0:	2500      	movs	r5, #0
 8003ee2:	e000      	b.n	8003ee6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x452>
 8003ee4:	2501      	movs	r5, #1
 8003ee6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fd fc44 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
 8003ef0:	2d01      	cmp	r5, #1
 8003ef2:	d106      	bne.n	8003f02 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46e>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8003ef4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ef8:	3301      	adds	r3, #1
 8003efa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003efe:	e665      	b.n	8003bcc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x138>
            }
        }

        return EIDSP_OK;
 8003f00:	2400      	movs	r4, #0
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 8003f02:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fd fc36 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 8003f0c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fd fc31 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
    }
 8003f16:	4623      	mov	r3, r4
 8003f18:	4618      	mov	r0, r3
 8003f1a:	37b8      	adds	r7, #184	; 0xb8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bdb0      	pop	{r4, r5, r7, pc}

08003f20 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>:
     * Calculate the buffer size for Spectral Analysis
     * @param rms: Whether to calculate the RMS as part of the features
     * @param peaks_count: Number of FFT peaks
     * @param spectral_edges_count: Number of spectral edges
     */
    static size_t calculate_spectral_buffer_size(
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	73fb      	strb	r3, [r7, #15]
        bool rms, size_t peaks_count, size_t spectral_edges_count)
    {
        size_t count = 0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
        if (rms) count++;
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x1e>
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	617b      	str	r3, [r7, #20]
        count += (peaks_count * 2);
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4413      	add	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]
        if (spectral_edges_count > 0) {
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d004      	beq.n	8003f58 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x38>
            count += (spectral_edges_count - 1);
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	4413      	add	r3, r2
 8003f54:	3b01      	subs	r3, #1
 8003f56:	617b      	str	r3, [r7, #20]
        }
        return count;
 8003f58:	697b      	ldr	r3, [r7, #20]
    }
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	371c      	adds	r7, #28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v1(
 8003f68:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8003f6c:	b0b3      	sub	sp, #204	; 0xcc
 8003f6e:	af04      	add	r7, sp, #16
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
 8003f76:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config_ptr,
        const float sampling_freq)
    {
        // scale the signal
        int ret = numpy::scale(input_matrix, config_ptr->scale_axes);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f80:	eeb0 0a67 	vmov.f32	s0, s15
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f7fd fdbd 	bl	8001b04 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8003f8a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if (ret != EIDSP_OK) {
 8003f8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x3e>
            ei_printf("ERR: Failed to scale signal (%d)\n", ret);
 8003f96:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8003f9a:	488c      	ldr	r0, [pc, #560]	; (80041cc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x264>)
 8003f9c:	f001 fed3 	bl	8005d46 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 8003fa0:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8003fa4:	e10b      	b.n	80041be <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x256>
        }

        // transpose the matrix so we have one row per axis (nifty!)
        ret = numpy::transpose(input_matrix);
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f7fd fd2b 	bl	8001a02 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 8003fac:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if (ret != EIDSP_OK) {
 8003fb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x60>
            ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
 8003fb8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8003fbc:	4884      	ldr	r0, [pc, #528]	; (80041d0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x268>)
 8003fbe:	f001 fec2 	bl	8005d46 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 8003fc2:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8003fc6:	e0fa      	b.n	80041be <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x256>
        }

        // the spectral edges that we want to calculate
        matrix_t edges_matrix_in(64, 1);
 8003fc8:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8003fcc:	2300      	movs	r3, #0
 8003fce:	2201      	movs	r2, #1
 8003fd0:	2140      	movs	r1, #64	; 0x40
 8003fd2:	f7fd fba6 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
        size_t edge_matrix_ix = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        char spectral_str[128] = { 0 };
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	f107 0318 	add.w	r3, r7, #24
 8003fe4:	227c      	movs	r2, #124	; 0x7c
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f01e fd31 	bl	8022a50 <memset>
        if (strlen(config_ptr->spectral_power_edges) > sizeof(spectral_str) - 1) {
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fc f946 	bl	8000284 <strlen>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8003ffc:	d901      	bls.n	8004002 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x9a>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8003ffe:	4c75      	ldr	r4, [pc, #468]	; (80041d4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x26c>)
 8004000:	e0d8      	b.n	80041b4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }
        memcpy(
            spectral_str,
            config_ptr->spectral_power_edges,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9c      	ldr	r4, [r3, #40]	; 0x28
        memcpy(
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	4618      	mov	r0, r3
 800400c:	f7fc f93a 	bl	8000284 <strlen>
 8004010:	4602      	mov	r2, r0
 8004012:	f107 0314 	add.w	r3, r7, #20
 8004016:	4621      	mov	r1, r4
 8004018:	4618      	mov	r0, r3
 800401a:	f01e fcf1 	bl	8022a00 <memcpy>
            strlen(config_ptr->spectral_power_edges));

        // convert spectral_power_edges (string) into float array
        char *spectral_ptr = spectral_str;
 800401e:	f107 0314 	add.w	r3, r7, #20
 8004022:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        while (spectral_ptr != NULL) {
 8004026:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d03f      	beq.n	80040ae <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x146>
            while ((*spectral_ptr) == ' ') {
 800402e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b20      	cmp	r3, #32
 8004036:	d105      	bne.n	8004044 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xdc>
                spectral_ptr++;
 8004038:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800403c:	3301      	adds	r3, #1
 800403e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            while ((*spectral_ptr) == ' ') {
 8004042:	e7f4      	b.n	800402e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xc6>
            }

            edges_matrix_in.buffer[edge_matrix_ix++] = atof(spectral_ptr);
 8004044:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8004048:	f01e fc7e 	bl	8022948 <atof>
 800404c:	ec59 8b10 	vmov	r8, r9, d0
 8004050:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004054:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004058:	1c59      	adds	r1, r3, #1
 800405a:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	18d4      	adds	r4, r2, r3
 8004062:	4640      	mov	r0, r8
 8004064:	4649      	mov	r1, r9
 8004066:	f7fc fdc9 	bl	8000bfc <__aeabi_d2f>
 800406a:	4603      	mov	r3, r0
 800406c:	6023      	str	r3, [r4, #0]

            // find next (spectral) delimiter (or '\0' character)
            while ((*spectral_ptr != ',')) {
 800406e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b2c      	cmp	r3, #44	; 0x2c
 8004076:	d00b      	beq.n	8004090 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x128>
                spectral_ptr++;
 8004078:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800407c:	3301      	adds	r3, #1
 800407e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                if (*spectral_ptr == '\0')
 8004082:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d000      	beq.n	800408e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x126>
            while ((*spectral_ptr != ',')) {
 800408c:	e7ef      	b.n	800406e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x106>
                    break;
 800408e:	bf00      	nop
            }

            if (*spectral_ptr == '\0') {
 8004090:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d103      	bne.n	80040a2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13a>
                spectral_ptr = NULL;
 800409a:	2300      	movs	r3, #0
 800409c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040a0:	e7c1      	b.n	8004026 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xbe>
            }
            else {
                spectral_ptr++;
 80040a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80040a6:	3301      	adds	r3, #1
 80040a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        while (spectral_ptr != NULL) {
 80040ac:	e7bb      	b.n	8004026 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xbe>
            }
        }
        edges_matrix_in.rows = edge_matrix_ix;
 80040ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80040b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

        // calculate how much room we need for the output matrix
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
            true,
            config_ptr->spectral_peaks_count,
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 80040ba:	4619      	mov	r1, r3
            edges_matrix_in.rows);
 80040bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 80040c0:	461a      	mov	r2, r3
 80040c2:	2001      	movs	r0, #1
 80040c4:	f7ff ff2c 	bl	8003f20 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 80040c8:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        // ei_printf("output_matrix_size %hux%zu\n", input_matrix.rows, output_matrix_cols);
        if (output_matrix->cols * output_matrix->rows !=
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	6852      	ldr	r2, [r2, #4]
 80040d4:	fb03 f202 	mul.w	r2, r3, r2
            static_cast<uint32_t>(output_matrix_cols * config_ptr->axes)) {
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	4619      	mov	r1, r3
 80040de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80040e2:	fb01 f303 	mul.w	r3, r1, r3
        if (output_matrix->cols * output_matrix->rows !=
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d001      	beq.n	80040ee <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x186>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80040ea:	4c3b      	ldr	r4, [pc, #236]	; (80041d8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x270>)
 80040ec:	e062      	b.n	80041b4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }

        output_matrix->cols = output_matrix_cols;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80040f4:	609a      	str	r2, [r3, #8]
        output_matrix->rows = config_ptr->axes;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	461a      	mov	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	605a      	str	r2, [r3, #4]

        spectral::filter_t filter_type;
        if (strcmp(config_ptr->filter_type, "low") == 0) {
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4935      	ldr	r1, [pc, #212]	; (80041dc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x274>)
 8004106:	4618      	mov	r0, r3
 8004108:	f7fc f8b2 	bl	8000270 <strcmp>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d103      	bne.n	800411a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1b2>
            filter_type = spectral::filter_lowpass;
 8004112:	2301      	movs	r3, #1
 8004114:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8004118:	e00f      	b.n	800413a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d2>
        }
        else if (strcmp(config_ptr->filter_type, "high") == 0) {
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	4930      	ldr	r1, [pc, #192]	; (80041e0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x278>)
 8004120:	4618      	mov	r0, r3
 8004122:	f7fc f8a5 	bl	8000270 <strcmp>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d103      	bne.n	8004134 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1cc>
            filter_type = spectral::filter_highpass;
 800412c:	2302      	movs	r3, #2
 800412e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8004132:	e002      	b.n	800413a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d2>
        }
        else {
            filter_type = spectral::filter_none;
 8004134:	2300      	movs	r3, #0
 8004136:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        }

        ret = spectral::feature::spectral_analysis(
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	edd3 7a04 	vldr	s15, [r3, #16]
            output_matrix,
            input_matrix,
            sampling_freq,
            filter_type,
            config_ptr->filter_cutoff,
            config_ptr->filter_order,
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	695b      	ldr	r3, [r3, #20]
        ret = spectral::feature::spectral_analysis(
 8004144:	b2dc      	uxtb	r4, r3
            config_ptr->fft_length,
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
        ret = spectral::feature::spectral_analysis(
 800414a:	b29b      	uxth	r3, r3
            config_ptr->spectral_peaks_count,
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6a12      	ldr	r2, [r2, #32]
        ret = spectral::feature::spectral_analysis(
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8004158:	f897 00af 	ldrb.w	r0, [r7, #175]	; 0xaf
 800415c:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8004160:	9102      	str	r1, [sp, #8]
 8004162:	9201      	str	r2, [sp, #4]
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	eeb0 1a47 	vmov.f32	s2, s14
 800416a:	4623      	mov	r3, r4
 800416c:	eef0 0a67 	vmov.f32	s1, s15
 8004170:	4602      	mov	r2, r0
 8004172:	ed97 0a00 	vldr	s0, [r7]
 8004176:	68f9      	ldr	r1, [r7, #12]
 8004178:	68b8      	ldr	r0, [r7, #8]
 800417a:	f7ff fc8b 	bl	8003a94 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>
 800417e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
            config_ptr->spectral_peaks_threshold,
            &edges_matrix_in);
        if (ret != EIDSP_OK) {
 8004182:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004186:	2b00      	cmp	r3, #0
 8004188:	d007      	beq.n	800419a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x232>
            ei_printf("ERR: Failed to calculate spectral features (%d)\n", ret);
 800418a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800418e:	4815      	ldr	r0, [pc, #84]	; (80041e4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x27c>)
 8004190:	f001 fdd9 	bl	8005d46 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 8004194:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8004198:	e00c      	b.n	80041b4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }

        // flatten again
        output_matrix->cols = config_ptr->axes * output_matrix_cols;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	461a      	mov	r2, r3
 80041a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80041a4:	fb03 f202 	mul.w	r2, r3, r2
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	609a      	str	r2, [r3, #8]
        output_matrix->rows = 1;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2201      	movs	r2, #1
 80041b0:	605a      	str	r2, [r3, #4]

        return EIDSP_OK;
 80041b2:	2400      	movs	r4, #0
        matrix_t edges_matrix_in(64, 1);
 80041b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fd fadd 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
    }
 80041be:	4623      	mov	r3, r4
 80041c0:	4618      	mov	r0, r3
 80041c2:	37bc      	adds	r7, #188	; 0xbc
 80041c4:	46bd      	mov	sp, r7
 80041c6:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 80041ca:	bf00      	nop
 80041cc:	08026e84 	.word	0x08026e84
 80041d0:	08026ea8 	.word	0x08026ea8
 80041d4:	fffffc10 	.word	0xfffffc10
 80041d8:	fffffc14 	.word	0xfffffc14
 80041dc:	08026ed0 	.word	0x08026ed0
 80041e0:	08026ed4 	.word	0x08026ed4
 80041e4:	08026edc 	.word	0x08026edc

080041e8 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b>:

    static void get_start_stop_bin(
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80041f2:	6138      	str	r0, [r7, #16]
 80041f4:	edc7 0a03 	vstr	s1, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	70fb      	strb	r3, [r7, #3]
        size_t *stop_bin,
        bool is_high_pass)
    {
        // we want to find n such that fcutoff < sample_f / fft * n ( or > for high pass )
        // also, + - half bin width (sample_f/(fft*2)) for high / low pass
        float bin = filter_cutoff * fft_length / sampling_freq;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	ee07 3a90 	vmov	s15, r3
 8004204:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004208:	edd7 7a03 	vldr	s15, [r7, #12]
 800420c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004210:	ed97 7a05 	vldr	s14, [r7, #20]
 8004214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004218:	edc7 7a07 	vstr	s15, [r7, #28]
        if (is_high_pass) {
 800421c:	78fb      	ldrb	r3, [r7, #3]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d021      	beq.n	8004266 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x7e>
            *start_bin = static_cast<size_t>(bin - 0.5) + 1; // add one b/c we want to always round up
 8004222:	69f8      	ldr	r0, [r7, #28]
 8004224:	f7fc f99a 	bl	800055c <__aeabi_f2d>
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	4b1a      	ldr	r3, [pc, #104]	; (8004298 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xb0>)
 800422e:	f7fc f835 	bl	800029c <__aeabi_dsub>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	4610      	mov	r0, r2
 8004238:	4619      	mov	r1, r3
 800423a:	f7fc fcbf 	bl	8000bbc <__aeabi_d2uiz>
 800423e:	4603      	mov	r3, r0
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	601a      	str	r2, [r3, #0]
            // don't use the DC bin b/c it's zero
            *start_bin = *start_bin == 0 ? 1 : *start_bin;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x6c>
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	e000      	b.n	8004256 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x6e>
 8004254:	2301      	movs	r3, #1
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	6013      	str	r3, [r2, #0]
            *stop_bin = fft_length / 2 + 1; // go one past
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	085b      	lsrs	r3, r3, #1
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	601a      	str	r2, [r3, #0]
        }
        else {
            *start_bin = 1;
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
        }
    }
 8004264:	e014      	b.n	8004290 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xa8>
            *start_bin = 1;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2201      	movs	r2, #1
 800426a:	601a      	str	r2, [r3, #0]
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
 800426c:	69f8      	ldr	r0, [r7, #28]
 800426e:	f7fc f975 	bl	800055c <__aeabi_f2d>
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	4b08      	ldr	r3, [pc, #32]	; (8004298 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xb0>)
 8004278:	f7fc f812 	bl	80002a0 <__adddf3>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4610      	mov	r0, r2
 8004282:	4619      	mov	r1, r3
 8004284:	f7fc fc9a 	bl	8000bbc <__aeabi_d2uiz>
 8004288:	4603      	mov	r3, r0
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	601a      	str	r2, [r3, #0]
    }
 8004290:	bf00      	nop
 8004292:	3720      	adds	r7, #32
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	3fe00000 	.word	0x3fe00000

0800429c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v2(
 800429c:	b5b0      	push	{r4, r5, r7, lr}
 800429e:	b0a8      	sub	sp, #160	; 0xa0
 80042a0:	af04      	add	r7, sp, #16
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq)
    {
        // transpose the matrix so we have one row per axis
        numpy::transpose_in_place(input_matrix);
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f7fd fb18 	bl	80018e2 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>

        // func tests for scale of 1 and does a no op in that case
        EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80042b8:	eeb0 0a67 	vmov.f32	s0, s15
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f7fd fc21 	bl	8001b04 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 80042c2:	6738      	str	r0, [r7, #112]	; 0x70
 80042c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x32>
 80042ca:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80042cc:	e19e      	b.n	800460c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>

        bool do_filter = false;
 80042ce:	2300      	movs	r3, #0
 80042d0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        bool is_high_pass;

        // apply filter, if enabled
        // "zero" order filter allowed.  will still remove unwanted fft bins later
        if (strcmp(config->filter_type, "low") == 0) {
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	49ab      	ldr	r1, [pc, #684]	; (8004588 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2ec>)
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fb ffc8 	bl	8000270 <strcmp>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d11e      	bne.n	8004324 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x88>
            if( config->filter_order ) {
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d013      	beq.n	8004316 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x7a>
                EI_TRY(spectral::processing::butterworth_lowpass_filter(
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	4619      	mov	r1, r3
 80042fc:	eef0 0a67 	vmov.f32	s1, s15
 8004300:	ed97 0a00 	vldr	s0, [r7]
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f7fe fe21 	bl	8002f4c <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 800430a:	66b8      	str	r0, [r7, #104]	; 0x68
 800430c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x7a>
 8004312:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8004314:	e17a      	b.n	800460c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>
                    input_matrix,
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
            do_filter = true;
 8004316:	2301      	movs	r3, #1
 8004318:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            is_high_pass = false;
 800431c:	2300      	movs	r3, #0
 800431e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8004322:	e026      	b.n	8004372 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd6>
        }
        else if (strcmp(config->filter_type, "high") == 0) {
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	4998      	ldr	r1, [pc, #608]	; (800458c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2f0>)
 800432a:	4618      	mov	r0, r3
 800432c:	f7fb ffa0 	bl	8000270 <strcmp>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d11d      	bne.n	8004372 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd6>
            if( config->filter_order ) {
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d013      	beq.n	8004366 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xca>
                EI_TRY(spectral::processing::butterworth_highpass_filter(
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	edd3 7a04 	vldr	s15, [r3, #16]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	4619      	mov	r1, r3
 800434c:	eef0 0a67 	vmov.f32	s1, s15
 8004350:	ed97 0a00 	vldr	s0, [r7]
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f7fe fe2f 	bl	8002fb8 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 800435a:	66f8      	str	r0, [r7, #108]	; 0x6c
 800435c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xca>
 8004362:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8004364:	e152      	b.n	800460c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>
                    input_matrix,
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
            do_filter = true;
 8004366:	2301      	movs	r3, #1
 8004368:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            is_high_pass = true;
 800436c:	2301      	movs	r3, #1
 800436e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
        }

        EI_TRY(processing::subtract_mean(input_matrix));
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f7ff fb56 	bl	8003a24 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 8004378:	6678      	str	r0, [r7, #100]	; 0x64
 800437a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xe8>
 8004380:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8004382:	e143      	b.n	800460c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>

        // Figure bins we remove based on filter cutoff
        size_t start_bin, stop_bin;
        if (do_filter) {
 8004384:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004388:	2b00      	cmp	r3, #0
 800438a:	d012      	beq.n	80043b2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x116>
            get_start_stop_bin(
                sampling_freq,
                config->fft_length,
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	69db      	ldr	r3, [r3, #28]
            get_start_stop_bin(
 8004390:	4618      	mov	r0, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	edd3 7a04 	vldr	s15, [r3, #16]
 8004398:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800439c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80043a0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80043a4:	eef0 0a67 	vmov.f32	s1, s15
 80043a8:	ed97 0a00 	vldr	s0, [r7]
 80043ac:	f7ff ff1c 	bl	80041e8 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b>
 80043b0:	e008      	b.n	80043c4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x128>
                &start_bin,
                &stop_bin,
                is_high_pass);
        }
        else {
            start_bin = 1;
 80043b2:	2301      	movs	r3, #1
 80043b4:	64bb      	str	r3, [r7, #72]	; 0x48
            stop_bin = config->fft_length / 2 + 1;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	0fda      	lsrs	r2, r3, #31
 80043bc:	4413      	add	r3, r2
 80043be:	105b      	asrs	r3, r3, #1
 80043c0:	3301      	adds	r3, #1
 80043c2:	647b      	str	r3, [r7, #68]	; 0x44
        }
        size_t num_bins = stop_bin - start_bin;
 80043c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	663b      	str	r3, [r7, #96]	; 0x60

        float *feature_out = output_matrix->buffer;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80043d4:	2300      	movs	r3, #0
 80043d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80043e2:	429a      	cmp	r2, r3
 80043e4:	f080 8111 	bcs.w	800460a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36e>
            float *data_window = input_matrix->get_row_ptr(row);
 80043e8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f7fd f9d9 	bl	80017a4 <_ZN2ei9ei_matrix11get_row_ptrEj>
 80043f2:	65f8      	str	r0, [r7, #92]	; 0x5c
            size_t data_size = input_matrix->cols;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	65bb      	str	r3, [r7, #88]	; 0x58

            matrix_t rms_in_matrix(1, data_size, data_window);
 80043fa:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80043fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004400:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004402:	2101      	movs	r1, #1
 8004404:	f7fd f98d 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
            matrix_t rms_out_matrix(1, 1, feature_out);
 8004408:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800440c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004410:	2201      	movs	r2, #1
 8004412:	2101      	movs	r1, #1
 8004414:	f7fd f985 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
            EI_TRY(numpy::rms(&rms_in_matrix, &rms_out_matrix));
 8004418:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800441c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004420:	4611      	mov	r1, r2
 8004422:	4618      	mov	r0, r3
 8004424:	f7fd fc44 	bl	8001cb0 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 8004428:	6578      	str	r0, [r7, #84]	; 0x54
 800442a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x19a>
 8004430:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8004432:	2500      	movs	r5, #0
 8004434:	e0d2      	b.n	80045dc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x340>

            feature_out++;
 8004436:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800443a:	3304      	adds	r3, #4
 800443c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

            // Standard Deviation
            float stddev = *(feature_out-1); //= sqrt(numpy::variance(data_window, data_size));
 8004440:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004444:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8004448:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            if (stddev == 0.0f) {
 800444c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004450:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004458:	d102      	bne.n	8004460 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1c4>
                stddev = 1e-10f;
 800445a:	4b4d      	ldr	r3, [pc, #308]	; (8004590 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2f4>)
 800445c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            // Substitute 0 for mean (b/c it is subtracted out above)
            // Skew becomes: mean(X^3) / stddev^3
            // Kurtosis becomes: mean(X^4) / stddev^4
            // Note, this is the Fisher definition of Kurtosis, so subtract 3
            // (see https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kurtosis.html)
            float s_sum = 0;
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	67fb      	str	r3, [r7, #124]	; 0x7c
            float k_sum = 0;
 8004466:	f04f 0300 	mov.w	r3, #0
 800446a:	67bb      	str	r3, [r7, #120]	; 0x78
            float temp;
            for (size_t i = 0; i < data_size; i++) {
 800446c:	2300      	movs	r3, #0
 800446e:	677b      	str	r3, [r7, #116]	; 0x74
 8004470:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004474:	429a      	cmp	r2, r3
 8004476:	d233      	bcs.n	80044e0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x244>
                temp = data_window[i] * data_window[i] * data_window[i];
 8004478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800447e:	4413      	add	r3, r2
 8004480:	ed93 7a00 	vldr	s14, [r3]
 8004484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800448a:	4413      	add	r3, r2
 800448c:	edd3 7a00 	vldr	s15, [r3]
 8004490:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800449a:	4413      	add	r3, r2
 800449c:	edd3 7a00 	vldr	s15, [r3]
 80044a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
                s_sum += temp;
 80044a8:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80044ac:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80044b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044b4:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
                k_sum += temp * data_window[i];
 80044b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044be:	4413      	add	r3, r2
 80044c0:	ed93 7a00 	vldr	s14, [r3]
 80044c4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80044c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044cc:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80044d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044d4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            for (size_t i = 0; i < data_size; i++) {
 80044d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044da:	3301      	adds	r3, #1
 80044dc:	677b      	str	r3, [r7, #116]	; 0x74
 80044de:	e7c7      	b.n	8004470 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d4>
            }
            // Skewness out
            temp = stddev * stddev * stddev;
 80044e0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80044e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80044e8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80044ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
            *feature_out++ = (s_sum / data_size) / temp;
 80044f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044f6:	ee07 3a90 	vmov	s15, r3
 80044fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044fe:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8004502:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004506:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800450a:	1d1a      	adds	r2, r3, #4
 800450c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004510:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004518:	edc3 7a00 	vstr	s15, [r3]
            // Kurtosis out
            *feature_out++ = ((k_sum / data_size) / (temp * stddev)) - 3;
 800451c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800451e:	ee07 3a90 	vmov	s15, r3
 8004522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004526:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800452a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800452e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004532:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004536:	ee27 7a27 	vmul.f32	s14, s14, s15
 800453a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800453e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004542:	1d1a      	adds	r2, r3, #4
 8004544:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004548:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800454c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004550:	edc3 7a00 	vstr	s15, [r3]

            EI_TRY(numpy::welch_max_hold(
 8004554:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	69d2      	ldr	r2, [r2, #28]
 800455c:	4610      	mov	r0, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8004564:	9202      	str	r2, [sp, #8]
 8004566:	9001      	str	r0, [sp, #4]
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	460b      	mov	r3, r1
 800456c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004570:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004572:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004574:	f7fd ffd0 	bl	8002518 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>
 8004578:	64f8      	str	r0, [r7, #76]	; 0x4c
 800457a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800457c:	2b00      	cmp	r3, #0
 800457e:	d009      	beq.n	8004594 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2f8>
 8004580:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8004582:	2500      	movs	r5, #0
 8004584:	e02a      	b.n	80045dc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x340>
 8004586:	bf00      	nop
 8004588:	08026ed0 	.word	0x08026ed0
 800458c:	08026ed4 	.word	0x08026ed4
 8004590:	2edbe6ff 	.word	0x2edbe6ff
                feature_out,
                start_bin,
                stop_bin,
                config->fft_length,
                config->do_fft_overlap));
            if (config->do_log) {
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d016      	beq.n	80045cc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x330>
                numpy::zero_handling(feature_out, num_bins);
 800459e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80045a0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80045a4:	f7fe f86a 	bl	800267c <_ZN2ei5numpy13zero_handlingEPfj>
                ei_matrix temp(num_bins, 1, feature_out);
 80045a8:	f107 0014 	add.w	r0, r7, #20
 80045ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045b0:	2201      	movs	r2, #1
 80045b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80045b4:	f7fd f8b5 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
                numpy::log10(&temp);
 80045b8:	f107 0314 	add.w	r3, r7, #20
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fd fe19 	bl	80021f4 <_ZN2ei5numpy5log10EPNS_9ei_matrixE>
                ei_matrix temp(num_bins, 1, feature_out);
 80045c2:	f107 0314 	add.w	r3, r7, #20
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fd f8d6 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
            }
            feature_out += num_bins;
 80045cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80045d4:	4413      	add	r3, r2
 80045d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045da:	2501      	movs	r5, #1
 80045dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fd f8c9 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
 80045e6:	2d01      	cmp	r5, #1
 80045e8:	d001      	beq.n	80045ee <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x352>
 80045ea:	2500      	movs	r5, #0
 80045ec:	e000      	b.n	80045f0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x354>
 80045ee:	2501      	movs	r5, #1
 80045f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fd f8bf 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
 80045fa:	2d01      	cmp	r5, #1
 80045fc:	d106      	bne.n	800460c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x370>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80045fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004602:	3301      	adds	r3, #1
 8004604:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004608:	e6e7      	b.n	80043da <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13e>
        }
        return EIDSP_OK;
 800460a:	2400      	movs	r4, #0
    }
 800460c:	4623      	mov	r3, r4
 800460e:	4618      	mov	r0, r3
 8004610:	3790      	adds	r7, #144	; 0x90
 8004612:	46bd      	mov	sp, r7
 8004614:	bdb0      	pop	{r4, r5, r7, pc}
 8004616:	bf00      	nop

08004618 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4618      	mov	r0, r3
 8004624:	f7fd f859 	bl	80016da <_ZNSt14_Function_baseD1Ev>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4618      	mov	r0, r3
 800463e:	f001 ff7d 	bl	800653c <_ZNSt8functionIFijjPfEEC1Ev>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <_ZN2ei11ei_signal_tD1Ev>:
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff ffde 	bl	8004618 <_ZNSt8functionIFijjPfEED1Ev>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
__attribute__((unused)) int extract_spectral_analysis_features(
    signal_t *signal,
    matrix_t *output_matrix,
    void *config_ptr,
    const float frequency)
{
 8004668:	b590      	push	{r4, r7, lr}
 800466a:	b08b      	sub	sp, #44	; 0x2c
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_spectral_analysis_t *config = (ei_dsp_config_spectral_analysis_t *)config_ptr;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	627b      	str	r3, [r7, #36]	; 0x24

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004682:	6852      	ldr	r2, [r2, #4]
 8004684:	fbb3 f1f2 	udiv	r1, r3, r2
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	461a      	mov	r2, r3
 800468e:	f107 0014 	add.w	r0, r7, #20
 8004692:	2300      	movs	r3, #0
 8004694:	f7fd f845 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3a>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800469e:	4c1b      	ldr	r4, [pc, #108]	; (800470c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xa4>)
 80046a0:	e02a      	b.n	80046f8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>
    }

    signal->get_data(0, signal->total_length, input_matrix.buffer);
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2100      	movs	r1, #0
 80046ac:	f001 fe50 	bl	8006350 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        return spectral::wavelet::extract_wavelet_features(&input_matrix, output_matrix, config, frequency);
    }
#endif

#if EI_DSP_PARAMS_SPECTRAL_ANALYSIS_ANALYSIS_TYPE_FFT || EI_DSP_PARAMS_ALL
    if (strcmp(config->analysis_type, "FFT") == 0) {
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	4916      	ldr	r1, [pc, #88]	; (8004710 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xa8>)
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fb fdda 	bl	8000270 <strcmp>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d119      	bne.n	80046f6 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x8e>
        if (config->implementation_version == 1) {
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d10a      	bne.n	80046e0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x78>
            return spectral::feature::extract_spectral_analysis_features_v1(
 80046ca:	f107 0314 	add.w	r3, r7, #20
 80046ce:	ed97 0a00 	vldr	s0, [r7]
 80046d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff fc46 	bl	8003f68 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80046dc:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80046de:	e00b      	b.n	80046f8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>
        } else {
            return spectral::feature::extract_spectral_analysis_features_v2(
 80046e0:	f107 0314 	add.w	r3, r7, #20
 80046e4:	ed97 0a00 	vldr	s0, [r7]
 80046e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ea:	68b9      	ldr	r1, [r7, #8]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff fdd5 	bl	800429c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80046f2:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80046f4:	e000      	b.n	80046f8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>
            output_matrix,
            config,
            frequency);
    }
#endif
    return EIDSP_NOT_SUPPORTED;
 80046f6:	4c07      	ldr	r4, [pc, #28]	; (8004714 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xac>)
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
 80046f8:	f107 0314 	add.w	r3, r7, #20
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fd f83b 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
}
 8004702:	4623      	mov	r3, r4
 8004704:	4618      	mov	r0, r3
 8004706:	372c      	adds	r7, #44	; 0x2c
 8004708:	46bd      	mov	sp, r7
 800470a:	bd90      	pop	{r4, r7, pc}
 800470c:	fffffc16 	.word	0xfffffc16
 8004710:	08026f48 	.word	0x08026f48
 8004714:	fffffc0a 	.word	0xfffffc0a

08004718 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 8004718:	b5b0      	push	{r4, r5, r7, lr}
 800471a:	b098      	sub	sp, #96	; 0x60
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800472e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004730:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	4967      	ldr	r1, [pc, #412]	; (80048d4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1bc>)
 8004738:	4618      	mov	r0, r3
 800473a:	f7fb fd99 	bl	8000270 <strcmp>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x30>
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
 8004748:	2303      	movs	r3, #3
 800474a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    size_t output_ix = 0;
 800474e:	2300      	movs	r3, #0
 8004750:	65fb      	str	r3, [r7, #92]	; 0x5c

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 8004752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004756:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 800475e:	2300      	movs	r3, #0
 8004760:	65bb      	str	r3, [r7, #88]	; 0x58
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004768:	429a      	cmp	r2, r3
 800476a:	f080 80ac 	bcs.w	80048c6 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ae>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004774:	d803      	bhi.n	800477e <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x66>
 8004776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	e001      	b.n	8004782 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
 800477e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004782:	64bb      	str	r3, [r7, #72]	; 0x48

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 8004784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004786:	461a      	mov	r2, r3
 8004788:	f107 0014 	add.w	r0, r7, #20
 800478c:	2300      	movs	r3, #0
 800478e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004790:	f7fc ffc7 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d102      	bne.n	80047a0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x88>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800479a:	4d4f      	ldr	r5, [pc, #316]	; (80048d8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c0>)
 800479c:	2400      	movs	r4, #0
 800479e:	e086      	b.n	80048ae <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x196>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047a8:	f001 fdd2 	bl	8006350 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 80047ac:	2300      	movs	r3, #0
 80047ae:	657b      	str	r3, [r7, #84]	; 0x54
 80047b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80047b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d275      	bcs.n	80048a4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18c>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	edd3 7a00 	vldr	s15, [r3]
 80047c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047c8:	ee17 3a90 	vmov	r3, s15
 80047cc:	647b      	str	r3, [r7, #68]	; 0x44

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 80047ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d0:	0c1b      	lsrs	r3, r3, #16
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	ee07 3a90 	vmov	s15, r3
 80047d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047dc:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80048dc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 80047e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047e4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 80047e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ea:	0a1b      	lsrs	r3, r3, #8
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047f6:	eddf 6a39 	vldr	s13, [pc, #228]	; 80048dc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 80047fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047fe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8004802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004804:	b2db      	uxtb	r3, r3
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800480e:	eddf 6a33 	vldr	s13, [pc, #204]	; 80048dc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c4>
 8004812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004816:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            if (channel_count == 3) {
 800481a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800481e:	2b03      	cmp	r3, #3
 8004820:	d11b      	bne.n	800485a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x142>
                output_matrix->buffer[output_ix++] = r;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004828:	1c59      	adds	r1, r3, #1
 800482a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004832:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = g;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800483a:	1c59      	adds	r1, r3, #1
 800483c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004844:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = b;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800484c:	1c59      	adds	r1, r3, #1
 800484e:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	e020      	b.n	800489c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x184>
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 800485a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800485e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80048e0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c8>
 8004862:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004866:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800486a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80048e4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1cc>
 800486e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004872:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004876:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800487a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80048e8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1d0>
 800487e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004886:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                output_matrix->buffer[output_ix++] = v;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004890:	1c59      	adds	r1, r3, #1
 8004892:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800489a:	601a      	str	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 800489c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800489e:	3301      	adds	r3, #1
 80048a0:	657b      	str	r3, [r7, #84]	; 0x54
 80048a2:	e785      	b.n	80047b0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x98>
            }
        }

        bytes_left -= elements_to_read;
 80048a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
 80048ac:	2401      	movs	r4, #1
 80048ae:	f107 0314 	add.w	r3, r7, #20
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fc ff60 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
 80048b8:	2c01      	cmp	r4, #1
 80048ba:	d105      	bne.n	80048c8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 80048bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80048c4:	e74d      	b.n	8004762 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4a>
    }

    return EIDSP_OK;
 80048c6:	2500      	movs	r5, #0
}
 80048c8:	462b      	mov	r3, r5
 80048ca:	4618      	mov	r0, r3
 80048cc:	3760      	adds	r7, #96	; 0x60
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bdb0      	pop	{r4, r5, r7, pc}
 80048d2:	bf00      	nop
 80048d4:	08027178 	.word	0x08027178
 80048d8:	fffffc16 	.word	0xfffffc16
 80048dc:	437f0000 	.word	0x437f0000
 80048e0:	3e991687 	.word	0x3e991687
 80048e4:	3f1645a2 	.word	0x3f1645a2
 80048e8:	3de978d5 	.word	0x3de978d5

080048ec <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>:

#endif //(EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI)

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)

__attribute__((unused)) int extract_image_features_quantized(const ei_impulse_t *impulse, signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
 80048ec:	b5b0      	push	{r4, r5, r7, lr}
 80048ee:	b0a6      	sub	sp, #152	; 0x98
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6178      	str	r0, [r7, #20]
 80048f4:	6139      	str	r1, [r7, #16]
 80048f6:	60fa      	str	r2, [r7, #12]
 80048f8:	60bb      	str	r3, [r7, #8]
 80048fa:	ed87 0a01 	vstr	s0, [r7, #4]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004904:	ca07      	ldmia	r2, {r0, r1, r2}
 8004906:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 800490a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490c:	49ab      	ldr	r1, [pc, #684]	; (8004bbc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d0>)
 800490e:	4618      	mov	r0, r3
 8004910:	f7fb fcae 	bl	8000270 <strcmp>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x32>
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x34>
 800491e:	2303      	movs	r3, #3
 8004920:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    size_t output_ix = 0;
 8004924:	2300      	movs	r3, #0
 8004926:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    const int32_t iRedToGray = (int32_t)(0.299f * 65536.0f);
 800492a:	f644 438b 	movw	r3, #19595	; 0x4c8b
 800492e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    const int32_t iGreenToGray = (int32_t)(0.587f * 65536.0f);
 8004932:	f249 6345 	movw	r3, #38469	; 0x9645
 8004936:	67fb      	str	r3, [r7, #124]	; 0x7c
    const int32_t iBlueToGray = (int32_t)(0.114f * 65536.0f);
 8004938:	f641 532f 	movw	r3, #7471	; 0x1d2f
 800493c:	67bb      	str	r3, [r7, #120]	; 0x78

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 800493e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004942:	677b      	str	r3, [r7, #116]	; 0x74
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	62bb      	str	r3, [r7, #40]	; 0x28
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 800494a:	2300      	movs	r3, #0
 800494c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004958:	429a      	cmp	r2, r3
 800495a:	f080 821d 	bcs.w	8004d98 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ac>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004964:	d803      	bhi.n	800496e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x82>
 8004966:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	e001      	b.n	8004972 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x86>
 800496e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004972:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 8004974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004976:	461a      	mov	r2, r3
 8004978:	f107 0018 	add.w	r0, r7, #24
 800497c:	2300      	movs	r3, #0
 800497e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004980:	f7fc fecf 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d102      	bne.n	8004990 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xa4>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800498a:	4d8d      	ldr	r5, [pc, #564]	; (8004bc0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d4>)
 800498c:	2400      	movs	r4, #0
 800498e:	e1f5      	b.n	8004d7c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x490>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 8004990:	6938      	ldr	r0, [r7, #16]
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004996:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800499a:	f001 fcd9 	bl	8006350 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 800499e:	2300      	movs	r3, #0
 80049a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80049a4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80049a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049aa:	429a      	cmp	r2, r3
 80049ac:	f080 81e1 	bcs.w	8004d72 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x486>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	edd3 7a00 	vldr	s15, [r3]
 80049be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049c2:	ee17 3a90 	vmov	r3, s15
 80049c6:	66fb      	str	r3, [r7, #108]	; 0x6c

            if (channel_count == 3) {
 80049c8:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	f040 8105 	bne.w	8004bdc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2f0>
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80049d8:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8004bc4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 80049dc:	eef4 7a47 	vcmp.f32	s15, s14
 80049e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e4:	d160      	bne.n	8004aa8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80049ec:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8004bc8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 80049f0:	eef4 7a47 	vcmp.f32	s15, s14
 80049f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f8:	d156      	bne.n	8004aa8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x1bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 80049fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fc:	0c1b      	lsrs	r3, r3, #16
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	64fb      	str	r3, [r7, #76]	; 0x4c
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 8004a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a04:	0a1b      	lsrs	r3, r3, #8
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	64bb      	str	r3, [r7, #72]	; 0x48
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 8004a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	647b      	str	r3, [r7, #68]	; 0x44

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + impulse->tflite_input_zeropoint);
 8004a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a2c:	1c59      	adds	r1, r3, #1
 8004a2e:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004a32:	4413      	add	r3, r2
 8004a34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a38:	edc7 7a00 	vstr	s15, [r7]
 8004a3c:	783a      	ldrb	r2, [r7, #0]
 8004a3e:	b252      	sxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + impulse->tflite_input_zeropoint);
 8004a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a44:	ee07 3a90 	vmov	s15, r3
 8004a48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a5e:	1c59      	adds	r1, r3, #1
 8004a60:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004a64:	4413      	add	r3, r2
 8004a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a6a:	edc7 7a00 	vstr	s15, [r7]
 8004a6e:	783a      	ldrb	r2, [r7, #0]
 8004a70:	b252      	sxtb	r2, r2
 8004a72:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + impulse->tflite_input_zeropoint);
 8004a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a90:	1c59      	adds	r1, r3, #1
 8004a92:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004a96:	4413      	add	r3, r2
 8004a98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a9c:	edc7 7a00 	vstr	s15, [r7]
 8004aa0:	783a      	ldrb	r2, [r7, #0]
 8004aa2:	b252      	sxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	e15e      	b.n	8004d66 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8004aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aaa:	0c1b      	lsrs	r3, r3, #16
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ab6:	eddf 6a45 	vldr	s13, [pc, #276]	; 8004bcc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004aba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004abe:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8004ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac4:	0a1b      	lsrs	r3, r3, #8
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	ee07 3a90 	vmov	s15, r3
 8004acc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ad0:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8004bcc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004ad4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ad8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8004adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	ee07 3a90 	vmov	s15, r3
 8004ae4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ae8:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004bcc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004aec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004af0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004afa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004afe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004b02:	eeb0 0a66 	vmov.f32	s0, s13
 8004b06:	f7fc feb4 	bl	8001872 <_ZSt5roundf>
 8004b0a:	eeb0 7a40 	vmov.f32	s14, s0
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b20:	1c59      	adds	r1, r3, #1
 8004b22:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004b26:	4413      	add	r3, r2
 8004b28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b2c:	edc7 7a00 	vstr	s15, [r7]
 8004b30:	783a      	ldrb	r2, [r7, #0]
 8004b32:	b252      	sxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004b3c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004b40:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004b44:	eeb0 0a66 	vmov.f32	s0, s13
 8004b48:	f7fc fe93 	bl	8001872 <_ZSt5roundf>
 8004b4c:	eeb0 7a40 	vmov.f32	s14, s0
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b62:	1c59      	adds	r1, r3, #1
 8004b64:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004b68:	4413      	add	r3, r2
 8004b6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b6e:	edc7 7a00 	vstr	s15, [r7]
 8004b72:	783a      	ldrb	r2, [r7, #0]
 8004b74:	b252      	sxtb	r2, r2
 8004b76:	701a      	strb	r2, [r3, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004b7e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004b82:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004b86:	eeb0 0a66 	vmov.f32	s0, s13
 8004b8a:	f7fc fe72 	bl	8001872 <_ZSt5roundf>
 8004b8e:	eeb0 7a40 	vmov.f32	s14, s0
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ba4:	1c59      	adds	r1, r3, #1
 8004ba6:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004baa:	4413      	add	r3, r2
 8004bac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bb0:	edc7 7a00 	vstr	s15, [r7]
 8004bb4:	783a      	ldrb	r2, [r7, #0]
 8004bb6:	b252      	sxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]
 8004bba:	e0d4      	b.n	8004d66 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
 8004bbc:	08027178 	.word	0x08027178
 8004bc0:	fffffc16 	.word	0xfffffc16
 8004bc4:	3b808081 	.word	0x3b808081
 8004bc8:	c3000000 	.word	0xc3000000
 8004bcc:	437f0000 	.word	0x437f0000
 8004bd0:	3e991687 	.word	0x3e991687
 8004bd4:	3f1645a2 	.word	0x3f1645a2
 8004bd8:	3de978d5 	.word	0x3de978d5
                }
            }
            else {
                // fast code path
                if (impulse->tflite_input_scale == 0.003921568859368563f && impulse->tflite_input_zeropoint == -128) {
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004be2:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8004bc4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2d8>
 8004be6:	eef4 7a47 	vcmp.f32	s15, s14
 8004bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bee:	d15b      	bne.n	8004ca8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004bf6:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 8004bc8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2dc>
 8004bfa:	eef4 7a47 	vcmp.f32	s15, s14
 8004bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c02:	d151      	bne.n	8004ca8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3bc>
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
 8004c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c06:	0c1b      	lsrs	r3, r3, #16
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	66bb      	str	r3, [r7, #104]	; 0x68
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 8004c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0e:	0a1b      	lsrs	r3, r3, #8
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	667b      	str	r3, [r7, #100]	; 0x64
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
 8004c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	663b      	str	r3, [r7, #96]	; 0x60

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    int32_t gray = (iRedToGray * r) + (iGreenToGray * g) + (iBlueToGray * b);
 8004c1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c1c:	f644 428b 	movw	r2, #19595	; 0x4c8b
 8004c20:	fb03 f202 	mul.w	r2, r3, r2
 8004c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c26:	f249 6145 	movw	r1, #38469	; 0x9645
 8004c2a:	fb01 f303 	mul.w	r3, r1, r3
 8004c2e:	441a      	add	r2, r3
 8004c30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c32:	f641 512f 	movw	r1, #7471	; 0x1d2f
 8004c36:	fb01 f303 	mul.w	r3, r1, r3
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray >>= 16; // scale down to int8_t
 8004c40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c44:	141b      	asrs	r3, r3, #16
 8004c46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    gray += impulse->tflite_input_zeropoint;
 8004c4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c64:	ee17 3a90 	vmov	r3, s15
 8004c68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    if (gray < - 128) gray = -128;
 8004c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c70:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8004c74:	da04      	bge.n	8004c80 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x394>
 8004c76:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8004c7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c7e:	e006      	b.n	8004c8e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
                    else if (gray > 127) gray = 127;
 8004c80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c84:	2b7f      	cmp	r3, #127	; 0x7f
 8004c86:	dd02      	ble.n	8004c8e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x3a2>
 8004c88:	237f      	movs	r3, #127	; 0x7f
 8004c8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c96:	1c59      	adds	r1, r3, #1
 8004c98:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004ca2:	b252      	sxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]
 8004ca6:	e05e      	b.n	8004d66 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x47a>
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8004ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004caa:	0c1b      	lsrs	r3, r3, #16
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cb6:	ed5f 6a3b 	vldr	s13, [pc, #-236]	; 8004bcc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004cba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cbe:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8004cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc4:	0a1b      	lsrs	r3, r3, #8
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	ee07 3a90 	vmov	s15, r3
 8004ccc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cd0:	ed5f 6a42 	vldr	s13, [pc, #-264]	; 8004bcc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004cd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cd8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8004cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	ee07 3a90 	vmov	s15, r3
 8004ce4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ce8:	ed5f 6a48 	vldr	s13, [pc, #-288]	; 8004bcc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e0>
 8004cec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cf0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8004cf4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004cf8:	ed1f 7a4b 	vldr	s14, [pc, #-300]	; 8004bd0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e4>
 8004cfc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d00:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004d04:	ed5f 6a4d 	vldr	s13, [pc, #-308]	; 8004bd4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2e8>
 8004d08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004d0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d10:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004d14:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8004bd8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x2ec>
 8004d18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d20:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004d2a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004d2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d32:	eeb0 0a66 	vmov.f32	s0, s13
 8004d36:	f7fc fd9c 	bl	8001872 <_ZSt5roundf>
 8004d3a:	eeb0 7a40 	vmov.f32	s14, s0
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d50:	1c59      	adds	r1, r3, #1
 8004d52:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8004d56:	4413      	add	r3, r2
 8004d58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d5c:	edc7 7a00 	vstr	s15, [r7]
 8004d60:	783a      	ldrb	r2, [r7, #0]
 8004d62:	b252      	sxtb	r2, r2
 8004d64:	701a      	strb	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8004d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004d70:	e618      	b.n	80049a4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0xb8>
                }
            }
        }

        bytes_left -= elements_to_read;
 8004d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d7a:	2401      	movs	r4, #1
 8004d7c:	f107 0318 	add.w	r3, r7, #24
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fc fcf9 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
 8004d86:	2c01      	cmp	r4, #1
 8004d88:	d107      	bne.n	8004d9a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x4ae>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8004d8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d96:	e5db      	b.n	8004950 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf+0x64>
    }

    return EIDSP_OK;
 8004d98:	2500      	movs	r5, #0
}
 8004d9a:	462b      	mov	r3, r5
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3798      	adds	r7, #152	; 0x98
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bdb0      	pop	{r4, r5, r7, pc}

08004da4 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count, const ei_impulse_t *impulse):
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	605a      	str	r2, [r3, #4]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	609a      	str	r2, [r3, #8]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	60da      	str	r2, [r3, #12]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	3310      	adds	r3, #16
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff fc2f 	bl	8004632 <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b084      	sub	sp, #16
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60f8      	str	r0, [r7, #12]
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	607a      	str	r2, [r7, #4]
 8004dea:	603b      	str	r3, [r7, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	f000 f832 	bl	8004e5e <_ZN14SignalWithAxes8get_dataEjjPf>
 8004dfa:	4603      	mov	r3, r0
        };
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d102      	bne.n	8004e20 <_ZN14SignalWithAxes10get_signalEv+0x1c>
            return this->_original_signal;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	e01a      	b.n	8004e56 <_ZN14SignalWithAxes10get_signalEv+0x52>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6892      	ldr	r2, [r2, #8]
 8004e34:	fb03 f202 	mul.w	r2, r3, r2
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	621a      	str	r2, [r3, #32]
        };
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f103 0210 	add.w	r2, r3, #16
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	f107 030c 	add.w	r3, r7, #12
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	f001 fba2 	bl	8006596 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>
#endif
        return &wrapped_signal;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3310      	adds	r3, #16
    }
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b08a      	sub	sp, #40	; 0x28
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	60f8      	str	r0, [r7, #12]
 8004e66:	60b9      	str	r1, [r7, #8]
 8004e68:	607a      	str	r2, [r7, #4]
 8004e6a:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	68d2      	ldr	r2, [r2, #12]
 8004e7a:	6992      	ldr	r2, [r2, #24]
 8004e7c:	fb02 f303 	mul.w	r3, r2, r3
 8004e80:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	68d2      	ldr	r2, [r2, #12]
 8004e90:	6992      	ldr	r2, [r2, #24]
 8004e92:	fb02 f303 	mul.w	r3, r2, r3
 8004e96:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	623b      	str	r3, [r7, #32]
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	6a3a      	ldr	r2, [r7, #32]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d22b      	bcs.n	8004f04 <_ZN14SignalWithAxes8get_dataEjjPf+0xa6>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8004eac:	2300      	movs	r3, #0
 8004eae:	61fb      	str	r3, [r7, #28]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d21d      	bcs.n	8004ef6 <_ZN14SignalWithAxes8get_dataEjjPf+0x98>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	18d1      	adds	r1, r2, r3
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	627a      	str	r2, [r7, #36]	; 0x24
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	4413      	add	r3, r2
 8004edc:	2201      	movs	r2, #1
 8004ede:	f001 fa37 	bl	8006350 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8004ee2:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <_ZN14SignalWithAxes8get_dataEjjPf+0x90>
                    return r;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	e00b      	b.n	8004f06 <_ZN14SignalWithAxes8get_dataEjjPf+0xa8>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	61fb      	str	r3, [r7, #28]
 8004ef4:	e7dc      	b.n	8004eb0 <_ZN14SignalWithAxes8get_dataEjjPf+0x52>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	6a3a      	ldr	r2, [r7, #32]
 8004efe:	4413      	add	r3, r2
 8004f00:	623b      	str	r3, [r7, #32]
 8004f02:	e7cd      	b.n	8004ea0 <_ZN14SignalWithAxes8get_dataEjjPf+0x42>
                }
            }
        }

        return 0;
 8004f04:	2300      	movs	r3, #0
    }
 8004f06:	4618      	mov	r0, r3
 8004f08:	3728      	adds	r7, #40	; 0x28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>:

__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_fomo(const ei_impulse_t *impulse,
                                                                            ei_impulse_result_t *result,
                                                                            float *data,
                                                                            int out_width,
                                                                            int out_height) {
 8004f0e:	b480      	push	{r7}
 8004f10:	b085      	sub	sp, #20
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	60f8      	str	r0, [r7, #12]
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	607a      	str	r2, [r7, #4]
 8004f1a:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8004f1c:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>:
                                                                           ei_impulse_result_t *result,
                                                                           int8_t *data,
                                                                           float zero_point,
                                                                           float scale,
                                                                           int out_width,
                                                                           int out_height) {
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6178      	str	r0, [r7, #20]
 8004f34:	6139      	str	r1, [r7, #16]
 8004f36:	60fa      	str	r2, [r7, #12]
 8004f38:	ed87 0a02 	vstr	s0, [r7, #8]
 8004f3c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004f40:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8004f42:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	371c      	adds	r7, #28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
	...

08004f54 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_i8(const ei_impulse_t *impulse,
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6178      	str	r0, [r7, #20]
 8004f5c:	6139      	str	r1, [r7, #16]
 8004f5e:	60fa      	str	r2, [r7, #12]
 8004f60:	ed87 0a02 	vstr	s0, [r7, #8]
 8004f64:	edc7 0a01 	vstr	s1, [r7, #4]
 8004f68:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61fb      	str	r3, [r7, #28]
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004f72:	461a      	mov	r2, r3
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d23f      	bcs.n	8004ffa <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xa6>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f993 3000 	ldrsb.w	r3, [r3]
 8004f84:	ee07 3a90 	vmov	s15, r3
 8004f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004f90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f94:	ed97 7a01 	vldr	s14, [r7, #4]
 8004f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f9c:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d011      	beq.n	8004fca <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x76>
            ei_printf("%s:\t", impulse->categories[ix]);
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4813      	ldr	r0, [pc, #76]	; (8005004 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb0>)
 8004fb8:	f000 fec5 	bl	8005d46 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8004fbc:	ed97 0a06 	vldr	s0, [r7, #24]
 8004fc0:	f014 ff5a 	bl	8019e78 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8004fc4:	4810      	ldr	r0, [pc, #64]	; (8005008 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb4>)
 8004fc6:	f000 febe 	bl	8005d46 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	6819      	ldr	r1, [r3, #0]
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	69fa      	ldr	r2, [r7, #28]
 8004fdc:	3201      	adds	r2, #1
 8004fde:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	4413      	add	r3, r2
 8004fec:	3304      	adds	r3, #4
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	61fb      	str	r3, [r7, #28]
 8004ff8:	e7b9      	b.n	8004f6e <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x1a>
    }

    return EI_IMPULSE_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3720      	adds	r7, #32
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	08027184 	.word	0x08027184
 8005008:	0802718c 	.word	0x0802718c

0800500c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 800501a:	2300      	movs	r3, #0
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005022:	461a      	mov	r2, r3
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	4293      	cmp	r3, r2
 8005028:	d232      	bcs.n	8005090 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x84>
        float value = data[ix];
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	4413      	add	r3, r2
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	613b      	str	r3, [r7, #16]

        if (debug) {
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d011      	beq.n	8005060 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x54>
            ei_printf("%s:\t", impulse->categories[ix]);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4619      	mov	r1, r3
 800504c:	4813      	ldr	r0, [pc, #76]	; (800509c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x90>)
 800504e:	f000 fe7a 	bl	8005d46 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8005052:	ed97 0a04 	vldr	s0, [r7, #16]
 8005056:	f014 ff0f 	bl	8019e78 <_Z15ei_printf_floatf>
            ei_printf("\n");
 800505a:	4811      	ldr	r0, [pc, #68]	; (80050a0 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x94>)
 800505c:	f000 fe73 	bl	8005d46 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	6819      	ldr	r1, [r3, #0]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	3201      	adds	r2, #1
 8005074:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	3301      	adds	r3, #1
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	4413      	add	r3, r2
 8005082:	3304      	adds	r3, #4
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	3301      	adds	r3, #1
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	e7c6      	b.n	800501e <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x12>
    }

    return EI_IMPULSE_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	08027184 	.word	0x08027184
 80050a0:	0802718c 	.word	0x0802718c

080050a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>:
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(const ei_impulse_t *impulse, uint64_t *ctx_start_us, TfLiteTensor** input, TfLiteTensor** output,
    TfLiteTensor** output_labels,
    TfLiteTensor** output_scores,
    ei_unique_ptr_t& p_tensor_arena) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]

    *ctx_start_us = ei_read_timer_us();
 80050b2:	f014 fecd 	bl	8019e50 <_Z16ei_read_timer_usv>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	68b9      	ldr	r1, [r7, #8]
 80050bc:	e9c1 2300 	strd	r2, r3, [r1]

    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
 80050c0:	486e      	ldr	r0, [pc, #440]	; (800527c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1d8>)
 80050c2:	f019 fe8b 	bl	801eddc <_Z18trained_model_initPFPvjjE>
 80050c6:	4603      	mov	r3, r0
 80050c8:	75fb      	strb	r3, [r7, #23]
    if (init_status != kTfLiteOk) {
 80050ca:	7dfb      	ldrb	r3, [r7, #23]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d007      	beq.n	80050e0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x3c>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 80050d0:	7dfb      	ldrb	r3, [r7, #23]
 80050d2:	4619      	mov	r1, r3
 80050d4:	486a      	ldr	r0, [pc, #424]	; (8005280 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1dc>)
 80050d6:	f000 fe36 	bl	8005d46 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 80050da:	f06f 0305 	mvn.w	r3, #5
 80050de:	e0c8      	b.n	8005272 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ce>
    }

    static bool tflite_first_run = true;

    *input = impulse->model_input(0);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050e6:	2000      	movs	r0, #0
 80050e8:	4798      	blx	r3
 80050ea:	4602      	mov	r2, r0
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	601a      	str	r2, [r3, #0]
    *output = impulse->model_output(0);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f6:	2000      	movs	r0, #0
 80050f8:	4798      	blx	r3
 80050fa:	4602      	mov	r2, r0
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	601a      	str	r2, [r3, #0]

    if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 8005106:	2b01      	cmp	r3, #1
 8005108:	d115      	bne.n	8005136 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x92>
        *output_scores = impulse->model_output(impulse->tflite_output_score_tensor);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 8005116:	4610      	mov	r0, r2
 8005118:	4798      	blx	r3
 800511a:	4602      	mov	r2, r0
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	601a      	str	r2, [r3, #0]
        *output_labels = impulse->model_output(impulse->tflite_output_labels_tensor);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 800512c:	4610      	mov	r0, r2
 800512e:	4798      	blx	r3
 8005130:	4602      	mov	r2, r0
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	601a      	str	r2, [r3, #0]
    }

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
 8005136:	4b53      	ldr	r3, [pc, #332]	; (8005284 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 8098 	beq.w	8005270 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1cc>
        assert((*input)->type == impulse->tflite_input_datatype);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	781a      	ldrb	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800514c:	429a      	cmp	r2, r3
 800514e:	d005      	beq.n	800515c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xb8>
 8005150:	4b4d      	ldr	r3, [pc, #308]	; (8005288 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e4>)
 8005152:	4a4e      	ldr	r2, [pc, #312]	; (800528c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8005154:	2159      	movs	r1, #89	; 0x59
 8005156:	484e      	ldr	r0, [pc, #312]	; (8005290 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8005158:	f01d fbd8 	bl	802290c <__assert_func>
        assert((*output)->type == impulse->tflite_output_datatype);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	781a      	ldrb	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005168:	429a      	cmp	r2, r3
 800516a:	d005      	beq.n	8005178 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xd4>
 800516c:	4b49      	ldr	r3, [pc, #292]	; (8005294 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f0>)
 800516e:	4a47      	ldr	r2, [pc, #284]	; (800528c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8005170:	215a      	movs	r1, #90	; 0x5a
 8005172:	4847      	ldr	r0, [pc, #284]	; (8005290 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8005174:	f01d fbca 	bl	802290c <__assert_func>
        if (impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 800517e:	2b01      	cmp	r3, #1
 8005180:	d11b      	bne.n	80051ba <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
            assert((*output_scores)->type == impulse->tflite_output_datatype);
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	781a      	ldrb	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800518e:	429a      	cmp	r2, r3
 8005190:	d005      	beq.n	800519e <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0xfa>
 8005192:	4b41      	ldr	r3, [pc, #260]	; (8005298 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f4>)
 8005194:	4a3d      	ldr	r2, [pc, #244]	; (800528c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8005196:	215c      	movs	r1, #92	; 0x5c
 8005198:	483d      	ldr	r0, [pc, #244]	; (8005290 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800519a:	f01d fbb7 	bl	802290c <__assert_func>
            assert((*output_labels)->type == impulse->tflite_output_datatype);
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	781a      	ldrb	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d005      	beq.n	80051ba <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x116>
 80051ae:	4b3b      	ldr	r3, [pc, #236]	; (800529c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1f8>)
 80051b0:	4a36      	ldr	r2, [pc, #216]	; (800528c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80051b2:	215d      	movs	r1, #93	; 0x5d
 80051b4:	4836      	ldr	r0, [pc, #216]	; (8005290 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80051b6:	f01d fba9 	bl	802290c <__assert_func>
        }
        if (impulse->tflite_input_quantized) {
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d026      	beq.n	8005212 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
            assert((*input)->params.scale == impulse->tflite_input_scale);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	ed93 7a03 	vldr	s14, [r3, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80051d2:	eeb4 7a67 	vcmp.f32	s14, s15
 80051d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051da:	d005      	beq.n	80051e8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x144>
 80051dc:	4b30      	ldr	r3, [pc, #192]	; (80052a0 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1fc>)
 80051de:	4a2b      	ldr	r2, [pc, #172]	; (800528c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 80051e0:	2160      	movs	r1, #96	; 0x60
 80051e2:	482b      	ldr	r0, [pc, #172]	; (8005290 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 80051e4:	f01d fb92 	bl	802290c <__assert_func>
            assert((*input)->params.zero_point == impulse->tflite_input_zeropoint);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80051fc:	eeb4 7a67 	vcmp.f32	s14, s15
 8005200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005204:	d005      	beq.n	8005212 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x16e>
 8005206:	4b27      	ldr	r3, [pc, #156]	; (80052a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x200>)
 8005208:	4a20      	ldr	r2, [pc, #128]	; (800528c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 800520a:	2161      	movs	r1, #97	; 0x61
 800520c:	4820      	ldr	r0, [pc, #128]	; (8005290 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800520e:	f01d fb7d 	bl	802290c <__assert_func>
        }
        if (impulse->tflite_output_quantized) {
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005218:	2b00      	cmp	r3, #0
 800521a:	d026      	beq.n	800526a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
            assert((*output)->params.scale == impulse->tflite_output_scale);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	ed93 7a03 	vldr	s14, [r3, #12]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800522a:	eeb4 7a67 	vcmp.f32	s14, s15
 800522e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005232:	d005      	beq.n	8005240 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x19c>
 8005234:	4b1c      	ldr	r3, [pc, #112]	; (80052a8 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x204>)
 8005236:	4a15      	ldr	r2, [pc, #84]	; (800528c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8005238:	2164      	movs	r1, #100	; 0x64
 800523a:	4815      	ldr	r0, [pc, #84]	; (8005290 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 800523c:	f01d fb66 	bl	802290c <__assert_func>
            assert((*output)->params.zero_point == impulse->tflite_output_zeropoint);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	ee07 3a90 	vmov	s15, r3
 800524a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8005254:	eeb4 7a67 	vcmp.f32	s14, s15
 8005258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800525c:	d005      	beq.n	800526a <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1c6>
 800525e:	4b13      	ldr	r3, [pc, #76]	; (80052ac <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x208>)
 8005260:	4a0a      	ldr	r2, [pc, #40]	; (800528c <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e8>)
 8005262:	2165      	movs	r1, #101	; 0x65
 8005264:	480a      	ldr	r0, [pc, #40]	; (8005290 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1ec>)
 8005266:	f01d fb51 	bl	802290c <__assert_func>
        }
        tflite_first_run = false;
 800526a:	4b06      	ldr	r3, [pc, #24]	; (8005284 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE+0x1e0>)
 800526c:	2200      	movs	r2, #0
 800526e:	701a      	strb	r2, [r3, #0]
    }
    return EI_IMPULSE_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	080013f5 	.word	0x080013f5
 8005280:	08027190 	.word	0x08027190
 8005284:	20000070 	.word	0x20000070
 8005288:	080271c4 	.word	0x080271c4
 800528c:	080271f8 	.word	0x080271f8
 8005290:	08027294 	.word	0x08027294
 8005294:	08027324 	.word	0x08027324
 8005298:	08027358 	.word	0x08027358
 800529c:	08027394 	.word	0x08027394
 80052a0:	080273d0 	.word	0x080273d0
 80052a4:	08027408 	.word	0x08027408
 80052a8:	08027448 	.word	0x08027448
 80052ac:	08027480 	.word	0x08027480

080052b0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 80052b0:	b5b0      	push	{r4, r5, r7, lr}
 80052b2:	b08c      	sub	sp, #48	; 0x30
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	e9c7 2300 	strd	r2, r3, [r7]

    if(trained_model_invoke() != kTfLiteOk) {
 80052bc:	f019 fff2 	bl	801f2a4 <_Z20trained_model_invokev>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	bf14      	ite	ne
 80052c6:	2301      	movne	r3, #1
 80052c8:	2300      	moveq	r3, #0
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x26>
        return EI_IMPULSE_TFLITE_ERROR;
 80052d0:	f06f 0302 	mvn.w	r3, #2
 80052d4:	e0ea      	b.n	80054ac <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 80052d6:	f014 fdbb 	bl	8019e50 <_Z16ei_read_timer_usv>
 80052da:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 80052de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80052e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052e6:	1a84      	subs	r4, r0, r2
 80052e8:	eb61 0503 	sbc.w	r5, r1, r3
 80052ec:	4622      	mov	r2, r4
 80052ee:	462b      	mov	r3, r5
 80052f0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80052f2:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 80052f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052f8:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80052fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	f7fb fcca 	bl	8000c9c <__aeabi_ldivmod>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800530e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 8005312:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005316:	2b00      	cmp	r3, #0
 8005318:	d006      	beq.n	8005328 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x78>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 800531a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800531c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005320:	4619      	mov	r1, r3
 8005322:	4864      	ldr	r0, [pc, #400]	; (80054b4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x204>)
 8005324:	f000 fd0f 	bl	8005d46 <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (impulse->object_detection) {
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d072      	beq.n	800541e <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x16e>
        switch (impulse->object_detection_last_layer) {
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 800533e:	3b01      	subs	r3, #1
 8005340:	2b04      	cmp	r3, #4
 8005342:	d862      	bhi.n	800540a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x15a>
 8005344:	a201      	add	r2, pc, #4	; (adr r2, 800534c <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x9c>)
 8005346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534a:	bf00      	nop
 800534c:	080053d7 	.word	0x080053d7
 8005350:	08005361 	.word	0x08005361
 8005354:	080053e3 	.word	0x080053e3
 8005358:	080053f7 	.word	0x080053f7
 800535c:	080053e3 	.word	0x080053e3
            case EI_CLASSIFIER_LAST_LAYER_FOMO: {
                bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8005360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b09      	cmp	r3, #9
 8005366:	bf0c      	ite	eq
 8005368:	2301      	moveq	r3, #1
 800536a:	2300      	movne	r3, #0
 800536c:	75bb      	strb	r3, [r7, #22]
                if (int8_output) {
 800536e:	7dbb      	ldrb	r3, [r7, #22]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d01e      	beq.n	80053b2 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x102>
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8005374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	ee07 3a90 	vmov	s15, r3
 8005380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005386:	ed93 7a03 	vldr	s14, [r3, #12]
                        (int)output->dims->data[1], (int)output->dims->data[2]);
 800538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	6899      	ldr	r1, [r3, #8]
 8005390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	68db      	ldr	r3, [r3, #12]
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	460b      	mov	r3, r1
 800539a:	eef0 0a47 	vmov.f32	s1, s14
 800539e:	eeb0 0a67 	vmov.f32	s0, s15
 80053a2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f7ff fdc1 	bl	8004f2c <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>
 80053aa:	4603      	mov	r3, r0
 80053ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
                }
                break;
 80053b0:	e063      	b.n	800547a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f, (int)output->dims->data[1], (int)output->dims->data[2]);
 80053b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	6899      	ldr	r1, [r3, #8]
 80053bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	460b      	mov	r3, r1
 80053c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f7ff fda0 	bl	8004f0e <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>
 80053ce:	4603      	mov	r3, r0
 80053d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80053d4:	e051      	b.n	800547a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
            }
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                #if EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP
                    fill_res = fill_result_struct_f32_object_detection(impulse, result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
                #else
                    ei_printf("ERR: Cannot run SSD model, EI_CLASSIFIER_ENABLE_DETECTION_POSTPROCESS_OP is disabled\n");
 80053d6:	4838      	ldr	r0, [pc, #224]	; (80054b8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x208>)
 80053d8:	f000 fcb5 	bl	8005d46 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80053dc:	f06f 0309 	mvn.w	r3, #9
 80053e0:	e064      	b.n	80054ac <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
                break;
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5:
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI: {
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOv5 models are not supported using EON Compiler, use full TFLite (%d)\n",
 80053e8:	4619      	mov	r1, r3
 80053ea:	4834      	ldr	r0, [pc, #208]	; (80054bc <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x20c>)
 80053ec:	f000 fcab 	bl	8005d46 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80053f0:	f06f 0309 	mvn.w	r3, #9
 80053f4:	e05a      	b.n	80054ac <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOX: {
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
                    impulse->object_detection_last_layer);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: YOLOX models are not supported using EON Compiler, use full TFLite (%d)\n",
 80053fc:	4619      	mov	r1, r3
 80053fe:	4830      	ldr	r0, [pc, #192]	; (80054c0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x210>)
 8005400:	f000 fca1 	bl	8005d46 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8005404:	f06f 0309 	mvn.w	r3, #9
 8005408:	e050      	b.n	80054ac <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
                    impulse->object_detection_last_layer);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 8005410:	4619      	mov	r1, r3
 8005412:	482c      	ldr	r0, [pc, #176]	; (80054c4 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x214>)
 8005414:	f000 fc97 	bl	8005d46 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8005418:	f06f 0309 	mvn.w	r3, #9
 800541c:	e046      	b.n	80054ac <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
            }
        }
    }
    else {
        bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 800541e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	2b09      	cmp	r3, #9
 8005424:	bf0c      	ite	eq
 8005426:	2301      	moveq	r3, #1
 8005428:	2300      	movne	r3, #0
 800542a:	75fb      	strb	r3, [r7, #23]
        if (int8_output) {
 800542c:	7dfb      	ldrb	r3, [r7, #23]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d018      	beq.n	8005464 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1b4>
            fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	ee07 3a90 	vmov	s15, r3
 800543e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005444:	ed93 7a03 	vldr	s14, [r3, #12]
 8005448:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800544c:	eef0 0a47 	vmov.f32	s1, s14
 8005450:	eeb0 0a67 	vmov.f32	s0, s15
 8005454:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f7ff fd7c 	bl	8004f54 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>
 800545c:	4603      	mov	r3, r0
 800545e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005462:	e00a      	b.n	800547a <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1ca>
        }
        else {
            fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
 8005464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800546c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f7ff fdcc 	bl	800500c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 8005474:	4603      	mov	r3, r0
 8005476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    trained_model_reset(ei_aligned_free);
 800547a:	4813      	ldr	r0, [pc, #76]	; (80054c8 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x218>)
 800547c:	f019 ff48 	bl	801f310 <_Z19trained_model_resetPFvPvE>

    if (fill_res != EI_IMPULSE_OK) {
 8005480:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1de>
        return fill_res;
 8005488:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800548c:	e00e      	b.n	80054ac <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 800548e:	f014 fcd7 	bl	8019e40 <_Z29ei_run_impulse_check_canceledv>
 8005492:	4603      	mov	r3, r0
 8005494:	f113 0f02 	cmn.w	r3, #2
 8005498:	bf0c      	ite	eq
 800549a:	2301      	moveq	r3, #1
 800549c:	2300      	movne	r3, #0
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fa>
        return EI_IMPULSE_CANCELED;
 80054a4:	f06f 0301 	mvn.w	r3, #1
 80054a8:	e000      	b.n	80054ac <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb+0x1fc>
    }

    return EI_IMPULSE_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3728      	adds	r7, #40	; 0x28
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bdb0      	pop	{r4, r5, r7, pc}
 80054b4:	080274c4 	.word	0x080274c4
 80054b8:	080274e4 	.word	0x080274e4
 80054bc:	0802753c 	.word	0x0802753c
 80054c0:	0802758c 	.word	0x0802758c
 80054c4:	080275dc 	.word	0x080275dc
 80054c8:	08001479 	.word	0x08001479

080054cc <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>:
EI_IMPULSE_ERROR run_nn_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80054cc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80054d0:	b09e      	sub	sp, #120	; 0x78
 80054d2:	af06      	add	r7, sp, #24
 80054d4:	6178      	str	r0, [r7, #20]
 80054d6:	6139      	str	r1, [r7, #16]
 80054d8:	60fa      	str	r2, [r7, #12]
 80054da:	72fb      	strb	r3, [r7, #11]
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 80054dc:	f014 fcb8 	bl	8019e50 <_Z16ei_read_timer_usv>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80054e8:	4b7b      	ldr	r3, [pc, #492]	; (80056d8 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x20c>)
 80054ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054ec:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80054f0:	f107 0318 	add.w	r3, r7, #24
 80054f4:	2100      	movs	r1, #0
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fec7 	bl	800628a <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 80054fc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8005500:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005504:	f107 0120 	add.w	r1, r7, #32
 8005508:	f107 0318 	add.w	r3, r7, #24
 800550c:	9302      	str	r3, [sp, #8]
 800550e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005512:	9301      	str	r3, [sp, #4]
 8005514:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	4603      	mov	r3, r0
 800551c:	6978      	ldr	r0, [r7, #20]
 800551e:	f7ff fdc1 	bl	80050a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 8005522:	4603      	mov	r3, r0
 8005524:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 8005528:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x6a>
        return init_res;
 8005530:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 8005534:	e0c5      	b.n	80056c2 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 8005536:	f107 0318 	add.w	r3, r7, #24
 800553a:	4618      	mov	r0, r3
 800553c:	f001 f84a 	bl	80065d4 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8005540:	64f8      	str	r0, [r7, #76]	; 0x4c

    switch (input->type) {
 8005542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b09      	cmp	r3, #9
 8005548:	d022      	beq.n	8005590 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc4>
 800554a:	2b09      	cmp	r3, #9
 800554c:	f300 8083 	bgt.w	8005656 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
 8005550:	2b01      	cmp	r3, #1
 8005552:	d002      	beq.n	800555a <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x8e>
 8005554:	2b03      	cmp	r3, #3
 8005556:	d051      	beq.n	80055fc <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x130>
 8005558:	e07d      	b.n	8005656 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
        case kTfLiteFloat32: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 800555a:	2300      	movs	r3, #0
 800555c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	6892      	ldr	r2, [r2, #8]
 8005566:	fb02 f303 	mul.w	r3, r2, r3
 800556a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800556c:	429a      	cmp	r2, r3
 800556e:	d27b      	bcs.n	8005668 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x19c>
                input->data.f[ix] = fmatrix->buffer[ix];
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	441a      	add	r2, r3
 800557a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557c:	6859      	ldr	r1, [r3, #4]
 800557e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	440b      	add	r3, r1
 8005584:	6812      	ldr	r2, [r2, #0]
 8005586:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800558a:	3301      	adds	r3, #1
 800558c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800558e:	e7e6      	b.n	800555e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x92>
            }
            break;
        }
        case kTfLiteInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8005590:	2300      	movs	r3, #0
 8005592:	65bb      	str	r3, [r7, #88]	; 0x58
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	6892      	ldr	r2, [r2, #8]
 800559c:	fb02 f303 	mul.w	r3, r2, r3
 80055a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d262      	bcs.n	800566c <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a0>
                float pixel = (float)fmatrix->buffer[ix];
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	64bb      	str	r3, [r7, #72]	; 0x48
                input->data.int8[ix] = static_cast<int8_t>(round(pixel / input->params.scale) + input->params.zero_point);
 80055b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80055ba:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80055be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80055c2:	eeb0 0a66 	vmov.f32	s0, s13
 80055c6:	f7fc f954 	bl	8001872 <_ZSt5roundf>
 80055ca:	eeb0 7a40 	vmov.f32	s14, s0
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055e4:	4413      	add	r3, r2
 80055e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055ea:	edc7 7a01 	vstr	s15, [r7, #4]
 80055ee:	793a      	ldrb	r2, [r7, #4]
 80055f0:	b252      	sxtb	r2, r2
 80055f2:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80055f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055f6:	3301      	adds	r3, #1
 80055f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80055fa:	e7cb      	b.n	8005594 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0xc8>
            }
            break;
        }
        case kTfLiteUInt8: {
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80055fc:	2300      	movs	r3, #0
 80055fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	6892      	ldr	r2, [r2, #8]
 8005608:	fb02 f303 	mul.w	r3, r2, r3
 800560c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800560e:	429a      	cmp	r2, r3
 8005610:	d221      	bcs.n	8005656 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x18a>
                float pixel = (float)fmatrix->buffer[ix];
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	647b      	str	r3, [r7, #68]	; 0x44
                input->data.uint8[ix] = static_cast<uint8_t>((pixel / impulse->tflite_input_scale) + impulse->tflite_input_zeropoint);
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8005626:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800562a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800563e:	4413      	add	r3, r2
 8005640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005644:	edc7 7a01 	vstr	s15, [r7, #4]
 8005648:	793a      	ldrb	r2, [r7, #4]
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	701a      	strb	r2, [r3, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 800564e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005650:	3301      	adds	r3, #1
 8005652:	657b      	str	r3, [r7, #84]	; 0x54
 8005654:	e7d4      	b.n	8005600 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x134>
            }
        }
        default: {
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	4619      	mov	r1, r3
 800565c:	481f      	ldr	r0, [pc, #124]	; (80056dc <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x210>)
 800565e:	f000 fb72 	bl	8005d46 <_Z9ei_printfPKcz>
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 8005662:	f06f 040c 	mvn.w	r4, #12
 8005666:	e02c      	b.n	80056c2 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
            break;
 8005668:	bf00      	nop
 800566a:	e000      	b.n	800566e <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1a2>
            break;
 800566c:	bf00      	nop
        }
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse, ctx_start_us,
 800566e:	e9d7 bc08 	ldrd	fp, ip, [r7, #32]
 8005672:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005674:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005676:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8005678:	7afb      	ldrb	r3, [r7, #11]
 800567a:	9305      	str	r3, [sp, #20]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	9304      	str	r3, [sp, #16]
 8005680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005682:	9303      	str	r3, [sp, #12]
 8005684:	9602      	str	r6, [sp, #8]
 8005686:	9001      	str	r0, [sp, #4]
 8005688:	9100      	str	r1, [sp, #0]
 800568a:	465a      	mov	r2, fp
 800568c:	4663      	mov	r3, ip
 800568e:	6978      	ldr	r0, [r7, #20]
 8005690:	f7ff fe0e 	bl	80052b0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 8005694:	4603      	mov	r3, r0
 8005696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                                                    output, output_labels, output_scores,
                                                    tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 800569a:	f014 fbd9 	bl	8019e50 <_Z16ei_read_timer_usv>
 800569e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056a2:	1a84      	subs	r4, r0, r2
 80056a4:	eb61 0503 	sbc.w	r5, r1, r3
 80056a8:	4622      	mov	r2, r4
 80056aa:	462b      	mov	r3, r5
 80056ac:	68f9      	ldr	r1, [r7, #12]
 80056ae:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    if (run_res != EI_IMPULSE_OK) {
 80056b2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f4>
        return run_res;
 80056ba:	f997 4043 	ldrsb.w	r4, [r7, #67]	; 0x43
 80056be:	e000      	b.n	80056c2 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb+0x1f6>
    }

    return EI_IMPULSE_OK;
 80056c0:	2400      	movs	r4, #0
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80056c2:	f107 0318 	add.w	r3, r7, #24
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fdf4 	bl	80062b4 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 80056cc:	4623      	mov	r3, r4
 80056ce:	4618      	mov	r0, r3
 80056d0:	3760      	adds	r7, #96	; 0x60
 80056d2:	46bd      	mov	sp, r7
 80056d4:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80056d8:	08001479 	.word	0x08001479
 80056dc:	08027610 	.word	0x08027610

080056e0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>:
 */
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false) {
 80056e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056e4:	b0a1      	sub	sp, #132	; 0x84
 80056e6:	af06      	add	r7, sp, #24
 80056e8:	6178      	str	r0, [r7, #20]
 80056ea:	6139      	str	r1, [r7, #16]
 80056ec:	60fa      	str	r2, [r7, #12]
 80056ee:	72fb      	strb	r3, [r7, #11]

    memset(result, 0, sizeof(ei_impulse_result_t));
 80056f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056f4:	2100      	movs	r1, #0
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f01d f9aa 	bl	8022a50 <memset>
    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;

    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80056fc:	4b7b      	ldr	r3, [pc, #492]	; (80058ec <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x20c>)
 80056fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005700:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005704:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005708:	2100      	movs	r1, #0
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fdbd 	bl	800628a <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(impulse,
 8005710:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8005714:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005718:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800571c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005720:	9302      	str	r3, [sp, #8]
 8005722:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005726:	9301      	str	r3, [sp, #4]
 8005728:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	4603      	mov	r3, r0
 8005730:	6978      	ldr	r0, [r7, #20]
 8005732:	f7ff fcb7 	bl	80050a4 <_ZL22inference_tflite_setupPK10ei_impulsePyPP12TfLiteTensorS5_S5_S5_RSt10unique_ptrIvPFvPvEE>
 8005736:	4603      	mov	r3, r0
 8005738:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
        &ctx_start_us, &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);
    if (init_res != EI_IMPULSE_OK) {
 800573c:	f997 3063 	ldrsb.w	r3, [r7, #99]	; 0x63
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x6a>
        return init_res;
 8005744:	f997 4063 	ldrsb.w	r4, [r7, #99]	; 0x63
 8005748:	e0c4      	b.n	80058d4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
 800574a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b09      	cmp	r3, #9
 8005750:	d002      	beq.n	8005758 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x78>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8005752:	f06f 0408 	mvn.w	r4, #8
 8005756:	e0bd      	b.n	80058d4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1f4>
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 8005758:	f014 fb7a 	bl	8019e50 <_Z16ei_read_timer_usv>
 800575c:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f107 0018 	add.w	r0, r7, #24
 800576c:	2101      	movs	r1, #1
 800576e:	f7fc f82d 	bl	80017cc <_ZN2ei12ei_matrix_i8C1EmmPa>

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(impulse, signal, &features_matrix, ei_dsp_blocks[0].config, impulse->frequency);
 8005772:	4b5f      	ldr	r3, [pc, #380]	; (80058f0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x210>)
 8005774:	6899      	ldr	r1, [r3, #8]
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800577c:	f107 0218 	add.w	r2, r7, #24
 8005780:	eeb0 0a67 	vmov.f32	s0, s15
 8005784:	460b      	mov	r3, r1
 8005786:	6939      	ldr	r1, [r7, #16]
 8005788:	6978      	ldr	r0, [r7, #20]
 800578a:	f7ff f8af 	bl	80048ec <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPK10ei_impulsePN2ei11ei_signal_tEPNS3_12ei_matrix_i8EPvf>
 800578e:	6578      	str	r0, [r7, #84]	; 0x54
    if (ret != EIDSP_OK) {
 8005790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005792:	2b00      	cmp	r3, #0
 8005794:	d006      	beq.n	80057a4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xc4>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8005796:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005798:	4856      	ldr	r0, [pc, #344]	; (80058f4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x214>)
 800579a:	f000 fad4 	bl	8005d46 <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 800579e:	f06f 0404 	mvn.w	r4, #4
 80057a2:	e092      	b.n	80058ca <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80057a4:	f014 fb4c 	bl	8019e40 <_Z29ei_run_impulse_check_canceledv>
 80057a8:	4603      	mov	r3, r0
 80057aa:	f113 0f02 	cmn.w	r3, #2
 80057ae:	bf0c      	ite	eq
 80057b0:	2301      	moveq	r3, #1
 80057b2:	2300      	movne	r3, #0
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0xe0>
        return EI_IMPULSE_CANCELED;
 80057ba:	f06f 0401 	mvn.w	r4, #1
 80057be:	e084      	b.n	80058ca <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 80057c0:	f014 fb46 	bl	8019e50 <_Z16ei_read_timer_usv>
 80057c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80057c8:	ebb0 0802 	subs.w	r8, r0, r2
 80057cc:	eb61 0903 	sbc.w	r9, r1, r3
 80057d0:	4642      	mov	r2, r8
 80057d2:	464b      	mov	r3, r9
 80057d4:	68f9      	ldr	r1, [r7, #12]
 80057d6:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 80057e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057e4:	f04f 0300 	mov.w	r3, #0
 80057e8:	f7fb fa58 	bl	8000c9c <__aeabi_ldivmod>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 80057f6:	7afb      	ldrb	r3, [r7, #11]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d02d      	beq.n	8005858 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x178>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005802:	4619      	mov	r1, r3
 8005804:	483c      	ldr	r0, [pc, #240]	; (80058f8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x218>)
 8005806:	f000 fa9e 	bl	8005d46 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 800580a:	2300      	movs	r3, #0
 800580c:	667b      	str	r3, [r7, #100]	; 0x64
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005812:	429a      	cmp	r2, r3
 8005814:	d21d      	bcs.n	8005852 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x172>
            ei_printf_float((features_matrix.buffer[ix] - impulse->tflite_input_zeropoint) * impulse->tflite_input_scale);
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800581a:	4413      	add	r3, r2
 800581c:	f993 3000 	ldrsb.w	r3, [r3]
 8005820:	ee07 3a90 	vmov	s15, r3
 8005824:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800582e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8005838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583c:	eeb0 0a67 	vmov.f32	s0, s15
 8005840:	f014 fb1a 	bl	8019e78 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8005844:	482d      	ldr	r0, [pc, #180]	; (80058fc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x21c>)
 8005846:	f000 fa7e 	bl	8005d46 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 800584a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800584c:	3301      	adds	r3, #1
 800584e:	667b      	str	r3, [r7, #100]	; 0x64
 8005850:	e7dd      	b.n	800580e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x12e>
        }
        ei_printf("\n");
 8005852:	482b      	ldr	r0, [pc, #172]	; (8005900 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x220>)
 8005854:	f000 fa77 	bl	8005d46 <_Z9ei_printfPKcz>
    }

    ctx_start_us = ei_read_timer_us();
 8005858:	f014 fafa 	bl	8019e50 <_Z16ei_read_timer_usv>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 8005864:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005868:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800586a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586c:	607b      	str	r3, [r7, #4]
 800586e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005870:	603a      	str	r2, [r7, #0]
        ctx_start_us,
        output,
        output_labels,
        output_scores,
        static_cast<uint8_t*>(p_tensor_arena.get()),
 8005872:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005876:	4618      	mov	r0, r3
 8005878:	f000 feac 	bl	80065d4 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 800587c:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 800587e:	7afb      	ldrb	r3, [r7, #11]
 8005880:	9305      	str	r3, [sp, #20]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	9304      	str	r3, [sp, #16]
 8005886:	9203      	str	r2, [sp, #12]
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	9202      	str	r2, [sp, #8]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	9301      	str	r3, [sp, #4]
 8005890:	9600      	str	r6, [sp, #0]
 8005892:	4642      	mov	r2, r8
 8005894:	464b      	mov	r3, r9
 8005896:	6978      	ldr	r0, [r7, #20]
 8005898:	f7ff fd0a 	bl	80052b0 <_ZL20inference_tflite_runPK10ei_impulseyP12TfLiteTensorS3_S3_PhP19ei_impulse_result_tb>
 800589c:	4603      	mov	r3, r0
 800589e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        result, debug);

    if (run_res != EI_IMPULSE_OK) {
 80058a2:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1d0>
        return run_res;
 80058aa:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 80058ae:	e00c      	b.n	80058ca <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb+0x1ea>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 80058b0:	f014 face 	bl	8019e50 <_Z16ei_read_timer_usv>
 80058b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058b8:	1a84      	subs	r4, r0, r2
 80058ba:	eb61 0503 	sbc.w	r5, r1, r3
 80058be:	4622      	mov	r2, r4
 80058c0:	462b      	mov	r3, r5
 80058c2:	68f9      	ldr	r1, [r7, #12]
 80058c4:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    return EI_IMPULSE_OK;
 80058c8:	2400      	movs	r4, #0
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 80058ca:	f107 0318 	add.w	r3, r7, #24
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fb ffa6 	bl	8001820 <_ZN2ei12ei_matrix_i8D1Ev>
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 80058d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058d8:	4618      	mov	r0, r3
 80058da:	f000 fceb 	bl	80062b4 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
}
 80058de:	4623      	mov	r3, r4
 80058e0:	4618      	mov	r0, r3
 80058e2:	376c      	adds	r7, #108	; 0x6c
 80058e4:	46bd      	mov	sp, r7
 80058e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058ea:	bf00      	nop
 80058ec:	08001479 	.word	0x08001479
 80058f0:	2000005c 	.word	0x2000005c
 80058f4:	08027634 	.word	0x08027634
 80058f8:	0802765c 	.word	0x0802765c
 80058fc:	08027670 	.word	0x08027670
 8005900:	0802718c 	.word	0x0802718c

08005904 <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
 8005910:	70fb      	strb	r3, [r7, #3]
#if (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE && EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)
    EI_IMPULSE_ERROR nn_res = run_nn_inference(impulse, fmatrix, result, debug);
 8005912:	78fb      	ldrb	r3, [r7, #3]
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	68b9      	ldr	r1, [r7, #8]
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f7ff fdd7 	bl	80054cc <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tb>
 800591e:	4603      	mov	r3, r0
 8005920:	75fb      	strb	r3, [r7, #23]
    if (nn_res != EI_IMPULSE_OK) {
 8005922:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <run_inference+0x2c>
        return nn_res;
 800592a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800592e:	e00e      	b.n	800594e <run_inference+0x4a>
            return anomaly_res;
        }
    }
#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8005930:	f014 fa86 	bl	8019e40 <_Z29ei_run_impulse_check_canceledv>
 8005934:	4603      	mov	r3, r0
 8005936:	f113 0f02 	cmn.w	r3, #2
 800593a:	bf0c      	ite	eq
 800593c:	2301      	moveq	r3, #1
 800593e:	2300      	movne	r3, #0
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <run_inference+0x48>
        return EI_IMPULSE_CANCELED;
 8005946:	f06f 0301 	mvn.w	r3, #1
 800594a:	e000      	b.n	800594e <run_inference+0x4a>
    }

    return EI_IMPULSE_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3310      	adds	r3, #16
 8005962:	4618      	mov	r0, r3
 8005964:	f7fe fe72 	bl	800464c <_ZN2ei11ei_signal_tD1Ev>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4618      	mov	r0, r3
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <process_impulse>:
 */
extern "C" EI_IMPULSE_ERROR process_impulse(const ei_impulse_t *impulse,
                                            signal_t *signal,
                                            ei_impulse_result_t *result,
                                            bool debug = false)
{
 8005974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005978:	b0a5      	sub	sp, #148	; 0x94
 800597a:	af02      	add	r7, sp, #8
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	607a      	str	r2, [r7, #4]
 8005982:	70fb      	strb	r3, [r7, #3]
 8005984:	2600      	movs	r6, #0

#if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1 && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TENSAIFLOW)) || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI
    // Shortcut for quantized image models
    if (can_run_classifier_image_quantized(impulse) == EI_IMPULSE_OK) {
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 f928 	bl	8005bdc <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	bf0c      	ite	eq
 8005992:	2301      	moveq	r3, #1
 8005994:	2300      	movne	r3, #0
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d008      	beq.n	80059ae <process_impulse+0x3a>
        return run_classifier_image_quantized(impulse, signal, result, debug);
 800599c:	78fb      	ldrb	r3, [r7, #3]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	68b9      	ldr	r1, [r7, #8]
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 f954 	bl	8005c50 <run_classifier_image_quantized>
 80059a8:	4603      	mov	r3, r0
 80059aa:	461e      	mov	r6, r3
 80059ac:	e0ef      	b.n	8005b8e <process_impulse+0x21a>
    }
#endif

    memset(result, 0, sizeof(ei_impulse_result_t));
 80059ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059b2:	2100      	movs	r1, #0
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f01d f84b 	bl	8022a50 <memset>

    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	691a      	ldr	r2, [r3, #16]
 80059be:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80059c2:	2300      	movs	r3, #0
 80059c4:	2101      	movs	r1, #1
 80059c6:	f7fb feac 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>

    uint64_t dsp_start_us = ei_read_timer_us();
 80059ca:	f014 fa41 	bl	8019e50 <_Z16ei_read_timer_usv>
 80059ce:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

    size_t out_features_index = 0;
 80059d2:	2300      	movs	r3, #0
 80059d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 80059d8:	2300      	movs	r3, #0
 80059da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d27c      	bcs.n	8005ae4 <process_impulse+0x170>
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80059ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8005a00:	461d      	mov	r5, r3
 8005a02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a06:	682b      	ldr	r3, [r5, #0]
 8005a08:	6023      	str	r3, [r4, #0]

        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
 8005a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a10:	441a      	add	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d905      	bls.n	8005a26 <process_impulse+0xb2>
            ei_printf("ERR: Would write outside feature buffer\n");
 8005a1a:	4860      	ldr	r0, [pc, #384]	; (8005b9c <process_impulse+0x228>)
 8005a1c:	f000 f993 	bl	8005d46 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8005a20:	f06f 0604 	mvn.w	r6, #4
 8005a24:	e0ad      	b.n	8005b82 <process_impulse+0x20e>
        }

        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 8005a26:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005a28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4413      	add	r3, r2
 8005a32:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8005a36:	460a      	mov	r2, r1
 8005a38:	2101      	movs	r1, #1
 8005a3a:	f7fb fe72 	bl	8001722 <_ZN2ei9ei_matrixC1EmmPf>
            ei_printf("ERR: EIDSP_SIGNAL_C_FN_POINTER can only be used when all axes are selected for DSP blocks\n");
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = block.extract_fn(signal, &fm, block.config, impulse->frequency);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size, impulse);
 8005a3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a40:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a42:	f107 0014 	add.w	r0, r7, #20
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	68b9      	ldr	r1, [r7, #8]
 8005a4e:	f7ff f9a9 	bl	8004da4 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, impulse->frequency);
 8005a52:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8005a54:	f107 0314 	add.w	r3, r7, #20
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff f9d3 	bl	8004e04 <_ZN14SignalWithAxes10get_signalEv>
 8005a5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005a66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8005a6e:	4619      	mov	r1, r3
 8005a70:	47a0      	blx	r4
 8005a72:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif

        if (ret != EIDSP_OK) {
 8005a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d007      	beq.n	8005a8a <process_impulse+0x116>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8005a7a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005a7c:	4848      	ldr	r0, [pc, #288]	; (8005ba0 <process_impulse+0x22c>)
 8005a7e:	f000 f962 	bl	8005d46 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8005a82:	f06f 0604 	mvn.w	r6, #4
 8005a86:	2400      	movs	r4, #0
 8005a88:	e015      	b.n	8005ab6 <process_impulse+0x142>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8005a8a:	f014 f9d9 	bl	8019e40 <_Z29ei_run_impulse_check_canceledv>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	f113 0f02 	cmn.w	r3, #2
 8005a94:	bf0c      	ite	eq
 8005a96:	2301      	moveq	r3, #1
 8005a98:	2300      	movne	r3, #0
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <process_impulse+0x134>
            return EI_IMPULSE_CANCELED;
 8005aa0:	f06f 0601 	mvn.w	r6, #1
 8005aa4:	2400      	movs	r4, #0
 8005aa6:	e006      	b.n	8005ab6 <process_impulse+0x142>
        }

        out_features_index += block.n_output_features;
 8005aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aaa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005aae:	4413      	add	r3, r2
 8005ab0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ab4:	2401      	movs	r4, #1
 8005ab6:	f107 0314 	add.w	r3, r7, #20
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7ff ff4b 	bl	8005956 <_ZN14SignalWithAxesD1Ev>
 8005ac0:	2c01      	cmp	r4, #1
 8005ac2:	d001      	beq.n	8005ac8 <process_impulse+0x154>
 8005ac4:	2400      	movs	r4, #0
 8005ac6:	e000      	b.n	8005aca <process_impulse+0x156>
 8005ac8:	2401      	movs	r4, #1
 8005aca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fb fe52 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>
 8005ad4:	2c01      	cmp	r4, #1
 8005ad6:	d154      	bne.n	8005b82 <process_impulse+0x20e>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8005ad8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005adc:	3301      	adds	r3, #1
 8005ade:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ae2:	e77c      	b.n	80059de <process_impulse+0x6a>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8005ae4:	f014 f9b4 	bl	8019e50 <_Z16ei_read_timer_usv>
 8005ae8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005aec:	ebb0 0802 	subs.w	r8, r0, r2
 8005af0:	eb61 0903 	sbc.w	r9, r1, r3
 8005af4:	4642      	mov	r2, r8
 8005af6:	464b      	mov	r3, r9
 8005af8:	6879      	ldr	r1, [r7, #4]
 8005afa:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8005b04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b08:	f04f 0300 	mov.w	r3, #0
 8005b0c:	f7fb f8c6 	bl	8000c9c <__aeabi_ldivmod>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 8005b1a:	78fb      	ldrb	r3, [r7, #3]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d020      	beq.n	8005b62 <process_impulse+0x1ee>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005b26:	4619      	mov	r1, r3
 8005b28:	481e      	ldr	r0, [pc, #120]	; (8005ba4 <process_impulse+0x230>)
 8005b2a:	f000 f90c 	bl	8005d46 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8005b2e:	2300      	movs	r3, #0
 8005b30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b34:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d210      	bcs.n	8005b5c <process_impulse+0x1e8>
            ei_printf_float(features_matrix.buffer[ix]);
 8005b3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	edd3 7a00 	vldr	s15, [r3]
 8005b46:	eeb0 0a67 	vmov.f32	s0, s15
 8005b4a:	f014 f995 	bl	8019e78 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8005b4e:	4816      	ldr	r0, [pc, #88]	; (8005ba8 <process_impulse+0x234>)
 8005b50:	f000 f8f9 	bl	8005d46 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8005b54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b56:	3301      	adds	r3, #1
 8005b58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b5a:	e7ea      	b.n	8005b32 <process_impulse+0x1be>
        }
        ei_printf("\n");
 8005b5c:	4813      	ldr	r0, [pc, #76]	; (8005bac <process_impulse+0x238>)
 8005b5e:	f000 f8f2 	bl	8005d46 <_Z9ei_printfPKcz>
    }

    if (debug) {
 8005b62:	78fb      	ldrb	r3, [r7, #3]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <process_impulse+0x1fa>
        ei_printf("Running impulse...\n");
 8005b68:	4811      	ldr	r0, [pc, #68]	; (8005bb0 <process_impulse+0x23c>)
 8005b6a:	f000 f8ec 	bl	8005d46 <_Z9ei_printfPKcz>
    }

    return run_inference(impulse, &features_matrix, result, debug);
 8005b6e:	78fb      	ldrb	r3, [r7, #3]
 8005b70:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f7ff fec4 	bl	8005904 <run_inference>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	461e      	mov	r6, r3
 8005b80:	e000      	b.n	8005b84 <process_impulse+0x210>
            return EI_IMPULSE_DSP_ERROR;
 8005b82:	bf00      	nop
    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 8005b84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fb fdf5 	bl	8001778 <_ZN2ei9ei_matrixD1Ev>

}
 8005b8e:	4633      	mov	r3, r6
 8005b90:	4618      	mov	r0, r3
 8005b92:	378c      	adds	r7, #140	; 0x8c
 8005b94:	46bd      	mov	sp, r7
 8005b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b9a:	bf00      	nop
 8005b9c:	08027674 	.word	0x08027674
 8005ba0:	08027634 	.word	0x08027634
 8005ba4:	0802765c 	.word	0x0802765c
 8005ba8:	08027670 	.word	0x08027670
 8005bac:	0802718c 	.word	0x0802718c
 8005bb0:	080276a0 	.word	0x080276a0

08005bb4 <ei_construct_impulse>:
#if EI_CLASSIFIER_STUDIO_VERSION < 3
/**
 * @brief      Construct impulse from macros - for run_classifer compatibility
 */
extern "C" const ei_impulse_t ei_construct_impulse()
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]

const ei_impulse_t impulse =
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a06      	ldr	r2, [pc, #24]	; (8005bd8 <ei_construct_impulse+0x24>)
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	23a4      	movs	r3, #164	; 0xa4
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f01c ff1a 	bl	8022a00 <memcpy>
    .model_reset = NULL,
#endif
    .categories = ei_classifier_inferencing_categories
    };

    return impulse;
 8005bcc:	bf00      	nop
}
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	08027718 	.word	0x08027718

08005bdc <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>:
#endif

/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized(const ei_impulse_t *impulse) {
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]

    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d00a      	beq.n	8005c02 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_TENSAIFLOW
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf0:	2b05      	cmp	r3, #5
 8005bf2:	d006      	beq.n	8005c02 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
        && impulse->inferencing_engine != EI_CLASSIFIER_DRPAI) // check later
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf8:	2b07      	cmp	r3, #7
 8005bfa:	d002      	beq.n	8005c02 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x26>
    {
        return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8005bfc:	f06f 0309 	mvn.w	r3, #9
 8005c00:	e01d      	b.n	8005c3e <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    if (impulse->has_anomaly == 1){
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d102      	bne.n	8005c12 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x36>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8005c0c:	f06f 0308 	mvn.w	r3, #8
 8005c10:	e015      	b.n	8005c3e <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

        // Check if we have a quantized NN Input layer (input is always quantized for DRP-AI)
    if (impulse->tflite_input_quantized != 1) {
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d002      	beq.n	8005c22 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x46>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8005c1c:	f06f 0308 	mvn.w	r3, #8
 8005c20:	e00d      	b.n	8005c3e <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    // And if we have one DSP block which operates on images...
    if (impulse->dsp_blocks_size != 1 || impulse->dsp_blocks[0].extract_fn != extract_image_features) {
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d105      	bne.n	8005c36 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x5a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	4a06      	ldr	r2, [pc, #24]	; (8005c4c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x70>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d002      	beq.n	8005c3c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x60>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8005c36:	f06f 0308 	mvn.w	r3, #8
 8005c3a:	e000      	b.n	8005c3e <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse+0x62>
    }

    return EI_IMPULSE_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	08004719 	.word	0x08004719

08005c50 <run_classifier_image_quantized>:
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	70fb      	strb	r3, [r7, #3]
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized(impulse);
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f7ff ffbc 	bl	8005bdc <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEPK10ei_impulse>
 8005c64:	4603      	mov	r3, r0
 8005c66:	75fb      	strb	r3, [r7, #23]
    if (verify_res != EI_IMPULSE_OK) {
 8005c68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <run_classifier_image_quantized+0x26>
        return verify_res;
 8005c70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c74:	e00d      	b.n	8005c92 <run_classifier_image_quantized+0x42>
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
 8005c76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f01c fee7 	bl	8022a50 <memset>

    return run_nn_inference_image_quantized(impulse, signal, result, debug);
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	68b9      	ldr	r1, [r7, #8]
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f7ff fd29 	bl	80056e0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tb>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	bf00      	nop

}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b0ae      	sub	sp, #184	; 0xb8
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	71fb      	strb	r3, [r7, #7]
#if EI_CLASSIFIER_STUDIO_VERSION < 3
        const ei_impulse_t impulse = ei_construct_impulse();
 8005ca8:	f107 0314 	add.w	r3, r7, #20
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff ff81 	bl	8005bb4 <ei_construct_impulse>
#else
       const ei_impulse_t impulse = ei_default_impulse;
#endif
    return process_impulse(&impulse, signal, result, debug);
 8005cb2:	79fb      	ldrb	r3, [r7, #7]
 8005cb4:	f107 0014 	add.w	r0, r7, #20
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	68f9      	ldr	r1, [r7, #12]
 8005cbc:	f7ff fe5a 	bl	8005974 <process_impulse>
 8005cc0:	4603      	mov	r3, r0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	37b8      	adds	r7, #184	; 0xb8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <_Z16get_feature_datajjPf>:
// paste the raw features here
static const float features[] = {
		162.2424, -27.8252, 454.5918, 270.9091, -55.2039, 392.2041, 535.6364, -72.6214, -29.3265, 509.0909, -8.4272, -298.5918, 522.2424, -22.6408, -169.1020, 396.5454, -51.4757, 269.1429, 100.2424, 1.8252, 471.5510, 8.4242, 34.5631, 473.7551, 381.7575, -81.6505, 270.7959, 551.9393, -37.2039, -110.9388, 556.0605, 33.2816, -198.4286, 508.7272, -25.4369, 93.3674, 132.3030, -9.0680, 469.1633, -100.0000, 52.0388, 458.0816, 11.1515, 16.1553, 442.8979
};

int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features + offset, length * sizeof(float));
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4a06      	ldr	r2, [pc, #24]	; (8005cf8 <_Z16get_feature_datajjPf+0x2c>)
 8005cde:	1899      	adds	r1, r3, r2
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f01c fe8a 	bl	8022a00 <memcpy>
    return 0;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	080289b4 	.word	0x080289b4

08005cfc <_Z6vprintPKcSt9__va_list>:
/* USER CODE BEGIN 0 */
#include <stdarg.h>
#include "edge-impulse-sdk/classifier/ei_run_classifier.h"

void vprint(const char *fmt, va_list argp)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b0b4      	sub	sp, #208	; 0xd0
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 8005d06:	f107 0308 	add.w	r3, r7, #8
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	6879      	ldr	r1, [r7, #4]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f01e fc0e 	bl	8024530 <vsiprintf>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	bfcc      	ite	gt
 8005d1a:	2301      	movgt	r3, #1
 8005d1c:	2300      	movle	r3, #0
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00c      	beq.n	8005d3e <_Z6vprintPKcSt9__va_list+0x42>
    {
    	CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8005d24:	f107 0308 	add.w	r3, r7, #8
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fa faab 	bl	8000284 <strlen>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	f107 0308 	add.w	r3, r7, #8
 8005d36:	4611      	mov	r1, r2
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f019 fc25 	bl	801f588 <CDC_Transmit_FS>

    }
}
 8005d3e:	bf00      	nop
 8005d40:	37d0      	adds	r7, #208	; 0xd0
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 8005d46:	b40f      	push	{r0, r1, r2, r3}
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 8005d4e:	f107 0314 	add.w	r3, r7, #20
 8005d52:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	6938      	ldr	r0, [r7, #16]
 8005d58:	f7ff ffd0 	bl	8005cfc <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 8005d5c:	bf00      	nop
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d66:	b004      	add	sp, #16
 8005d68:	4770      	bx	lr
	...

08005d6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b0cc      	sub	sp, #304	; 0x130
 8005d70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005d72:	f003 f865 	bl	8008e40 <HAL_Init>

  /* USER CODE BEGIN Init */
  signal_t signal;
 8005d76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fe fc59 	bl	8004632 <_ZN2ei11ei_signal_tC1Ev>
  signal.total_length = sizeof(features) / sizeof(features[0]);
 8005d80:	232d      	movs	r3, #45	; 0x2d
 8005d82:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  signal.get_data = &get_feature_data;
 8005d86:	4b4c      	ldr	r3, [pc, #304]	; (8005eb8 <main+0x14c>)
 8005d88:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005d8c:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8005d90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d94:	4611      	mov	r1, r2
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 fbdd 	bl	8006556 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005d9c:	f000 f8a6 	bl	8005eec <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005da0:	f000 f96c 	bl	800607c <_ZL12MX_GPIO_Initv>
  MX_USB_DEVICE_Init();
 8005da4:	f019 fb1c 	bl	801f3e0 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8005da8:	f000 f92c 	bl	8006004 <_ZL12MX_SPI1_Initv>
  MX_CRC_Init();
 8005dac:	f000 f912 	bl	8005fd4 <_ZL11MX_CRC_Initv>
  /* USER CODE BEGIN 2 */
  myAccConfigDef.dataRate = LIS3DSH_DATARATE_1600;
 8005db0:	4b42      	ldr	r3, [pc, #264]	; (8005ebc <main+0x150>)
 8005db2:	2290      	movs	r2, #144	; 0x90
 8005db4:	701a      	strb	r2, [r3, #0]
  	myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_2;
 8005db6:	4b41      	ldr	r3, [pc, #260]	; (8005ebc <main+0x150>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	705a      	strb	r2, [r3, #1]
  	myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;//update rate
 8005dbc:	4b3f      	ldr	r3, [pc, #252]	; (8005ebc <main+0x150>)
 8005dbe:	22c0      	movs	r2, #192	; 0xc0
 8005dc0:	709a      	strb	r2, [r3, #2]
  	myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 8005dc2:	4b3e      	ldr	r3, [pc, #248]	; (8005ebc <main+0x150>)
 8005dc4:	2207      	movs	r2, #7
 8005dc6:	70da      	strb	r2, [r3, #3]
  	myAccConfigDef.interruptEnable = false;
 8005dc8:	4b3c      	ldr	r3, [pc, #240]	; (8005ebc <main+0x150>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	711a      	strb	r2, [r3, #4]
  	LIS3DSH_Init(&hspi1, &myAccConfigDef);
 8005dce:	493b      	ldr	r1, [pc, #236]	; (8005ebc <main+0x150>)
 8005dd0:	483b      	ldr	r0, [pc, #236]	; (8005ec0 <main+0x154>)
 8005dd2:	f7fb f995 	bl	8001100 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>
  	LIS3DSH_DataScaled myscaledata;
  	LIS3DSH_X_calibrate(-1000.0, 980.0);
 8005dd6:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8005ec4 <main+0x158>
 8005dda:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8005ec8 <main+0x15c>
 8005dde:	f7fb fa53 	bl	8001288 <_Z19LIS3DSH_X_calibrateff>
  	    LIS3DSH_Y_calibrate(-1020.0, 1040.0);
 8005de2:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8005ecc <main+0x160>
 8005de6:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8005ed0 <main+0x164>
 8005dea:	f7fb fa7b 	bl	80012e4 <_Z19LIS3DSH_Y_calibrateff>
  	    LIS3DSH_Z_calibrate(-920.0, 1040.0);
 8005dee:	eddf 0a37 	vldr	s1, [pc, #220]	; 8005ecc <main+0x160>
 8005df2:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8005ed4 <main+0x168>
 8005df6:	f7fb faa3 	bl	8001340 <_Z19LIS3DSH_Z_calibrateff>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  while (1)
  	  {
  	        ei_impulse_result_t result = { 0 };
 8005dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e02:	4618      	mov	r0, r3
 8005e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e08:	461a      	mov	r2, r3
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	f01c fe20 	bl	8022a50 <memset>
  	        EI_IMPULSE_ERROR res = run_classifier(&signal, &result, true);
 8005e10:	4639      	mov	r1, r7
 8005e12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e16:	2201      	movs	r2, #1
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff ff3e 	bl	8005c9a <run_classifier>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  	        ei_printf("run_classifier returned: %d\n", res);
 8005e24:	f997 312b 	ldrsb.w	r3, [r7, #299]	; 0x12b
 8005e28:	4619      	mov	r1, r3
 8005e2a:	482b      	ldr	r0, [pc, #172]	; (8005ed8 <main+0x16c>)
 8005e2c:	f7ff ff8b 	bl	8005d46 <_Z9ei_printfPKcz>

  	        ei_printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
 8005e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e38:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8005e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e44:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e54:	4821      	ldr	r0, [pc, #132]	; (8005edc <main+0x170>)
 8005e56:	f7ff ff76 	bl	8005d46 <_Z9ei_printfPKcz>
  	            result.timing.dsp, result.timing.classification, result.timing.anomaly);

  	        // print the predictions
  	        ei_printf("[");
 8005e5a:	4821      	ldr	r0, [pc, #132]	; (8005ee0 <main+0x174>)
 8005e5c:	f7ff ff73 	bl	8005d46 <_Z9ei_printfPKcz>
  	        for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8005e60:	2300      	movs	r3, #0
 8005e62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d81c      	bhi.n	8005ea8 <main+0x13c>
  	      	  ei_printf_float(result.classification[ix].value);
 8005e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e72:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8005e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	00db      	lsls	r3, r3, #3
 8005e7e:	4413      	add	r3, r2
 8005e80:	3304      	adds	r3, #4
 8005e82:	edd3 7a00 	vldr	s15, [r3]
 8005e86:	eeb0 0a67 	vmov.f32	s0, s15
 8005e8a:	f013 fff5 	bl	8019e78 <_Z15ei_printf_floatf>
  	    #if EI_CLASSIFIER_HAS_ANOMALY == 1
  	            ei_printf(", ");
  	    #else
  	            if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
 8005e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d002      	beq.n	8005e9c <main+0x130>
  	                ei_printf(", ");
 8005e96:	4813      	ldr	r0, [pc, #76]	; (8005ee4 <main+0x178>)
 8005e98:	f7ff ff55 	bl	8005d46 <_Z9ei_printfPKcz>
  	        for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8005e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005ea6:	e7de      	b.n	8005e66 <main+0xfa>
  	    #endif
  	        }
  	    #if EI_CLASSIFIER_HAS_ANOMALY == 1
  	        ei_printf_float(result.anomaly);
  	    #endif
  	        ei_printf("]\n\n\n");
 8005ea8:	480f      	ldr	r0, [pc, #60]	; (8005ee8 <main+0x17c>)
 8005eaa:	f7ff ff4c 	bl	8005d46 <_Z9ei_printfPKcz>

  	      HAL_Delay(5000);
 8005eae:	f241 3088 	movw	r0, #5000	; 0x1388
 8005eb2:	f003 f837 	bl	8008f24 <HAL_Delay>
  	  }
 8005eb6:	e7a0      	b.n	8005dfa <main+0x8e>
 8005eb8:	08005ccd 	.word	0x08005ccd
 8005ebc:	200004dc 	.word	0x200004dc
 8005ec0:	200004ec 	.word	0x200004ec
 8005ec4:	44750000 	.word	0x44750000
 8005ec8:	c47a0000 	.word	0xc47a0000
 8005ecc:	44820000 	.word	0x44820000
 8005ed0:	c47f0000 	.word	0xc47f0000
 8005ed4:	c4660000 	.word	0xc4660000
 8005ed8:	080277f0 	.word	0x080277f0
 8005edc:	08027810 	.word	0x08027810
 8005ee0:	08027858 	.word	0x08027858
 8005ee4:	0802785c 	.word	0x0802785c
 8005ee8:	08027860 	.word	0x08027860

08005eec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b094      	sub	sp, #80	; 0x50
 8005ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ef2:	f107 0320 	add.w	r3, r7, #32
 8005ef6:	2230      	movs	r2, #48	; 0x30
 8005ef8:	2100      	movs	r1, #0
 8005efa:	4618      	mov	r0, r3
 8005efc:	f01c fda8 	bl	8022a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f00:	f107 030c 	add.w	r3, r7, #12
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	605a      	str	r2, [r3, #4]
 8005f0a:	609a      	str	r2, [r3, #8]
 8005f0c:	60da      	str	r2, [r3, #12]
 8005f0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f10:	2300      	movs	r3, #0
 8005f12:	60bb      	str	r3, [r7, #8]
 8005f14:	4b2d      	ldr	r3, [pc, #180]	; (8005fcc <_Z18SystemClock_Configv+0xe0>)
 8005f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f18:	4a2c      	ldr	r2, [pc, #176]	; (8005fcc <_Z18SystemClock_Configv+0xe0>)
 8005f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8005f20:	4b2a      	ldr	r3, [pc, #168]	; (8005fcc <_Z18SystemClock_Configv+0xe0>)
 8005f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f28:	60bb      	str	r3, [r7, #8]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	607b      	str	r3, [r7, #4]
 8005f30:	4b27      	ldr	r3, [pc, #156]	; (8005fd0 <_Z18SystemClock_Configv+0xe4>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a26      	ldr	r2, [pc, #152]	; (8005fd0 <_Z18SystemClock_Configv+0xe4>)
 8005f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f3a:	6013      	str	r3, [r2, #0]
 8005f3c:	4b24      	ldr	r3, [pc, #144]	; (8005fd0 <_Z18SystemClock_Configv+0xe4>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f44:	607b      	str	r3, [r7, #4]
 8005f46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f52:	2302      	movs	r3, #2
 8005f54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005f56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005f5c:	2304      	movs	r3, #4
 8005f5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005f60:	23a8      	movs	r3, #168	; 0xa8
 8005f62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005f64:	2302      	movs	r3, #2
 8005f66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005f68:	2307      	movs	r3, #7
 8005f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f6c:	f107 0320 	add.w	r3, r7, #32
 8005f70:	4618      	mov	r0, r3
 8005f72:	f004 fd5b 	bl	800aa2c <HAL_RCC_OscConfig>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	bf14      	ite	ne
 8005f7c:	2301      	movne	r3, #1
 8005f7e:	2300      	moveq	r3, #0
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8005f86:	f000 f8d7 	bl	8006138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005f8a:	230f      	movs	r3, #15
 8005f8c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f8e:	2302      	movs	r3, #2
 8005f90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005f96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005f9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fa0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005fa2:	f107 030c 	add.w	r3, r7, #12
 8005fa6:	2105      	movs	r1, #5
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f004 ffb7 	bl	800af1c <HAL_RCC_ClockConfig>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	bf14      	ite	ne
 8005fb4:	2301      	movne	r3, #1
 8005fb6:	2300      	moveq	r3, #0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8005fbe:	f000 f8bb 	bl	8006138 <Error_Handler>
  }
}
 8005fc2:	bf00      	nop
 8005fc4:	3750      	adds	r7, #80	; 0x50
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	40023800 	.word	0x40023800
 8005fd0:	40007000 	.word	0x40007000

08005fd4 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8005fd8:	4b08      	ldr	r3, [pc, #32]	; (8005ffc <_ZL11MX_CRC_Initv+0x28>)
 8005fda:	4a09      	ldr	r2, [pc, #36]	; (8006000 <_ZL11MX_CRC_Initv+0x2c>)
 8005fdc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005fde:	4807      	ldr	r0, [pc, #28]	; (8005ffc <_ZL11MX_CRC_Initv+0x28>)
 8005fe0:	f003 f8d5 	bl	800918e <HAL_CRC_Init>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	bf14      	ite	ne
 8005fea:	2301      	movne	r3, #1
 8005fec:	2300      	moveq	r3, #0
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 8005ff4:	f000 f8a0 	bl	8006138 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8005ff8:	bf00      	nop
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	200004e4 	.word	0x200004e4
 8006000:	40023000 	.word	0x40023000

08006004 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006008:	4b1a      	ldr	r3, [pc, #104]	; (8006074 <_ZL12MX_SPI1_Initv+0x70>)
 800600a:	4a1b      	ldr	r2, [pc, #108]	; (8006078 <_ZL12MX_SPI1_Initv+0x74>)
 800600c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800600e:	4b19      	ldr	r3, [pc, #100]	; (8006074 <_ZL12MX_SPI1_Initv+0x70>)
 8006010:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006014:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006016:	4b17      	ldr	r3, [pc, #92]	; (8006074 <_ZL12MX_SPI1_Initv+0x70>)
 8006018:	2200      	movs	r2, #0
 800601a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800601c:	4b15      	ldr	r3, [pc, #84]	; (8006074 <_ZL12MX_SPI1_Initv+0x70>)
 800601e:	2200      	movs	r2, #0
 8006020:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006022:	4b14      	ldr	r3, [pc, #80]	; (8006074 <_ZL12MX_SPI1_Initv+0x70>)
 8006024:	2200      	movs	r2, #0
 8006026:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006028:	4b12      	ldr	r3, [pc, #72]	; (8006074 <_ZL12MX_SPI1_Initv+0x70>)
 800602a:	2200      	movs	r2, #0
 800602c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800602e:	4b11      	ldr	r3, [pc, #68]	; (8006074 <_ZL12MX_SPI1_Initv+0x70>)
 8006030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006034:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006036:	4b0f      	ldr	r3, [pc, #60]	; (8006074 <_ZL12MX_SPI1_Initv+0x70>)
 8006038:	2200      	movs	r2, #0
 800603a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800603c:	4b0d      	ldr	r3, [pc, #52]	; (8006074 <_ZL12MX_SPI1_Initv+0x70>)
 800603e:	2200      	movs	r2, #0
 8006040:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006042:	4b0c      	ldr	r3, [pc, #48]	; (8006074 <_ZL12MX_SPI1_Initv+0x70>)
 8006044:	2200      	movs	r2, #0
 8006046:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006048:	4b0a      	ldr	r3, [pc, #40]	; (8006074 <_ZL12MX_SPI1_Initv+0x70>)
 800604a:	2200      	movs	r2, #0
 800604c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800604e:	4b09      	ldr	r3, [pc, #36]	; (8006074 <_ZL12MX_SPI1_Initv+0x70>)
 8006050:	220a      	movs	r2, #10
 8006052:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006054:	4807      	ldr	r0, [pc, #28]	; (8006074 <_ZL12MX_SPI1_Initv+0x70>)
 8006056:	f005 f959 	bl	800b30c <HAL_SPI_Init>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	bf14      	ite	ne
 8006060:	2301      	movne	r3, #1
 8006062:	2300      	moveq	r3, #0
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800606a:	f000 f865 	bl	8006138 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800606e:	bf00      	nop
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	200004ec 	.word	0x200004ec
 8006078:	40013000 	.word	0x40013000

0800607c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08a      	sub	sp, #40	; 0x28
 8006080:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006082:	f107 0314 	add.w	r3, r7, #20
 8006086:	2200      	movs	r2, #0
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	605a      	str	r2, [r3, #4]
 800608c:	609a      	str	r2, [r3, #8]
 800608e:	60da      	str	r2, [r3, #12]
 8006090:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006092:	2300      	movs	r3, #0
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	4b26      	ldr	r3, [pc, #152]	; (8006130 <_ZL12MX_GPIO_Initv+0xb4>)
 8006098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609a:	4a25      	ldr	r2, [pc, #148]	; (8006130 <_ZL12MX_GPIO_Initv+0xb4>)
 800609c:	f043 0310 	orr.w	r3, r3, #16
 80060a0:	6313      	str	r3, [r2, #48]	; 0x30
 80060a2:	4b23      	ldr	r3, [pc, #140]	; (8006130 <_ZL12MX_GPIO_Initv+0xb4>)
 80060a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a6:	f003 0310 	and.w	r3, r3, #16
 80060aa:	613b      	str	r3, [r7, #16]
 80060ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	4b1f      	ldr	r3, [pc, #124]	; (8006130 <_ZL12MX_GPIO_Initv+0xb4>)
 80060b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b6:	4a1e      	ldr	r2, [pc, #120]	; (8006130 <_ZL12MX_GPIO_Initv+0xb4>)
 80060b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060bc:	6313      	str	r3, [r2, #48]	; 0x30
 80060be:	4b1c      	ldr	r3, [pc, #112]	; (8006130 <_ZL12MX_GPIO_Initv+0xb4>)
 80060c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80060ca:	2300      	movs	r3, #0
 80060cc:	60bb      	str	r3, [r7, #8]
 80060ce:	4b18      	ldr	r3, [pc, #96]	; (8006130 <_ZL12MX_GPIO_Initv+0xb4>)
 80060d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d2:	4a17      	ldr	r2, [pc, #92]	; (8006130 <_ZL12MX_GPIO_Initv+0xb4>)
 80060d4:	f043 0301 	orr.w	r3, r3, #1
 80060d8:	6313      	str	r3, [r2, #48]	; 0x30
 80060da:	4b15      	ldr	r3, [pc, #84]	; (8006130 <_ZL12MX_GPIO_Initv+0xb4>)
 80060dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	60bb      	str	r3, [r7, #8]
 80060e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80060e6:	2300      	movs	r3, #0
 80060e8:	607b      	str	r3, [r7, #4]
 80060ea:	4b11      	ldr	r3, [pc, #68]	; (8006130 <_ZL12MX_GPIO_Initv+0xb4>)
 80060ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ee:	4a10      	ldr	r2, [pc, #64]	; (8006130 <_ZL12MX_GPIO_Initv+0xb4>)
 80060f0:	f043 0302 	orr.w	r3, r3, #2
 80060f4:	6313      	str	r3, [r2, #48]	; 0x30
 80060f6:	4b0e      	ldr	r3, [pc, #56]	; (8006130 <_ZL12MX_GPIO_Initv+0xb4>)
 80060f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	607b      	str	r3, [r7, #4]
 8006100:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_0, GPIO_PIN_RESET);
 8006102:	2200      	movs	r2, #0
 8006104:	2109      	movs	r1, #9
 8006106:	480b      	ldr	r0, [pc, #44]	; (8006134 <_ZL12MX_GPIO_Initv+0xb8>)
 8006108:	f003 f9fa 	bl	8009500 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0;
 800610c:	2309      	movs	r3, #9
 800610e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006110:	2301      	movs	r3, #1
 8006112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006114:	2300      	movs	r3, #0
 8006116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006118:	2300      	movs	r3, #0
 800611a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800611c:	f107 0314 	add.w	r3, r7, #20
 8006120:	4619      	mov	r1, r3
 8006122:	4804      	ldr	r0, [pc, #16]	; (8006134 <_ZL12MX_GPIO_Initv+0xb8>)
 8006124:	f003 f850 	bl	80091c8 <HAL_GPIO_Init>

}
 8006128:	bf00      	nop
 800612a:	3728      	adds	r7, #40	; 0x28
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	40023800 	.word	0x40023800
 8006134:	40021000 	.word	0x40021000

08006138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006138:	b480      	push	{r7}
 800613a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800613c:	b672      	cpsid	i
}
 800613e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006140:	e7fe      	b.n	8006140 <Error_Handler+0x8>

08006142 <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>:
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : vector(__n, false, __a)
      { }

      vector(size_type __n, const bool& __value,
 8006142:	b580      	push	{r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
 800614e:	603b      	str	r3, [r7, #0]
#else
      explicit
      vector(size_type __n, const bool& __value = bool(),
	     const allocator_type& __a = allocator_type())
#endif
      : _Base(__a)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6839      	ldr	r1, [r7, #0]
 8006154:	4618      	mov	r0, r3
 8006156:	f000 fa4a 	bl	80065ee <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEEC1ERKS2_>
      {
	_M_initialize(__n);
 800615a:	68b9      	ldr	r1, [r7, #8]
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 fa69 	bl	8006634 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj>
	_M_initialize_value(__value);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	4619      	mov	r1, r3
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 fab1 	bl	80066d0 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb>
      }
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <_ZNSt6vectorIbN2ei7EiAllocIbEEED1Ev>:
	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
	  _M_initialize_dispatch(__first, __last, _Integral());
	}
#endif

      ~vector() _GLIBCXX_NOEXCEPT { }
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fa4a 	bl	800661c <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEED1Ev>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4618      	mov	r0, r3
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>:
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
      { return begin() == end(); }

      reference
      operator[](size_type __n)
 8006192:	b580      	push	{r7, lr}
 8006194:	b086      	sub	sp, #24
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	607a      	str	r2, [r7, #4]
      {
	return *iterator(this->_M_impl._M_start._M_p
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	681a      	ldr	r2, [r3, #0]
			 + __n / int(_S_word_bit), __n % int(_S_word_bit));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	095b      	lsrs	r3, r3, #5
 80061a6:	009b      	lsls	r3, r3, #2
	return *iterator(this->_M_impl._M_start._M_p
 80061a8:	18d1      	adds	r1, r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f003 021f 	and.w	r2, r3, #31
 80061b0:	f107 0310 	add.w	r3, r7, #16
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fb fa23 	bl	8001600 <_ZNSt13_Bit_iteratorC1EPmj>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f107 0210 	add.w	r2, r7, #16
 80061c0:	4611      	mov	r1, r2
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fb fa2d 	bl	8001622 <_ZNKSt13_Bit_iteratordeEv>
			 + __n / int(_S_word_bit), __n % int(_S_word_bit));
 80061c8:	bf00      	nop
      }
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4618      	mov	r0, r3
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <_ZSt4swapImENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7ff ffed 	bl	80061d2 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 80061f8:	4603      	mov	r3, r0
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80061fe:	6838      	ldr	r0, [r7, #0]
 8006200:	f7ff ffe7 	bl	80061d2 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 8006204:	4603      	mov	r3, r0
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800620c:	f107 030c 	add.w	r3, r7, #12
 8006210:	4618      	mov	r0, r3
 8006212:	f7ff ffde 	bl	80061d2 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 8006216:	4603      	mov	r3, r0
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	601a      	str	r2, [r3, #0]
    }
 800621e:	bf00      	nop
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8006226:	b5b0      	push	{r4, r5, r7, lr}
 8006228:	b082      	sub	sp, #8
 800622a:	af00      	add	r7, sp, #0
 800622c:	ed87 0a01 	vstr	s0, [r7, #4]
 8006230:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7fa f992 	bl	800055c <__aeabi_f2d>
 8006238:	4604      	mov	r4, r0
 800623a:	460d      	mov	r5, r1
 800623c:	6838      	ldr	r0, [r7, #0]
 800623e:	f7fa f97b 	bl	8000538 <__aeabi_i2d>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	ec43 2b11 	vmov	d1, r2, r3
 800624a:	ec45 4b10 	vmov	d0, r4, r5
 800624e:	f01a f845 	bl	80202dc <pow>
 8006252:	eeb0 7a40 	vmov.f32	s14, s0
 8006256:	eef0 7a60 	vmov.f32	s15, s1
    }
 800625a:	eeb0 0a47 	vmov.f32	s0, s14
 800625e:	eef0 0a67 	vmov.f32	s1, s15
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bdb0      	pop	{r4, r5, r7, pc}

08006268 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	68b9      	ldr	r1, [r7, #8]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fa77 	bl	800676e <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
       *
       * The deleter will be initialized with @p std::move(__d)
       */
      template<typename _Del = deleter_type,
	       typename = _Require<is_move_constructible<_Del>>>
	unique_ptr(pointer __p,
 800628a:	b590      	push	{r4, r7, lr}
 800628c:	b085      	sub	sp, #20
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	607a      	str	r2, [r7, #4]
		   __enable_if_t<!is_lvalue_reference<_Del>::value,
				 _Del&&> __d) noexcept
	: _M_t(__p, std::move(__d))
 8006296:	68fc      	ldr	r4, [r7, #12]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fa5d 	bl	8006758 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 800629e:	4603      	mov	r3, r0
 80062a0:	461a      	mov	r2, r3
 80062a2:	68b9      	ldr	r1, [r7, #8]
 80062a4:	4620      	mov	r0, r4
 80062a6:	f7ff ffdf 	bl	8006268 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4618      	mov	r0, r3
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd90      	pop	{r4, r7, pc}

080062b4 <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 80062b4:	b590      	push	{r4, r7, lr}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 fa6b 	bl	800679a <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 80062c4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00b      	beq.n	80062e6 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fa70 	bl	80067b4 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 80062d4:	4603      	mov	r3, r0
 80062d6:	681c      	ldr	r4, [r3, #0]
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 fa78 	bl	80067ce <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 80062de:	4603      	mov	r3, r0
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4618      	mov	r0, r3
 80062e4:	47a0      	blx	r4
	__ptr = pointer();
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]
      }
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd90      	pop	{r4, r7, pc}

080062f6 <_ZNSt10unique_ptrIvPFvPvEE5resetES0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 80062f6:	b590      	push	{r4, r7, lr}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 8006300:	687c      	ldr	r4, [r7, #4]
 8006302:	463b      	mov	r3, r7
 8006304:	4618      	mov	r0, r3
 8006306:	f000 fa62 	bl	80067ce <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 800630a:	4603      	mov	r3, r0
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4619      	mov	r1, r3
 8006310:	4620      	mov	r0, r4
 8006312:	f000 fa67 	bl	80067e4 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_>
      }
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	bd90      	pop	{r4, r7, pc}

0800631e <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	ed93 7a00 	vldr	s14, [r3]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	edd3 7a00 	vldr	s15, [r3]
 8006334:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800633c:	d501      	bpl.n	8006342 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	e000      	b.n	8006344 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8006342:	687b      	ldr	r3, [r7, #4]
    }
 8006344:	4618      	mov	r0, r3
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8006350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	607a      	str	r2, [r7, #4]
 800635e:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4618      	mov	r0, r3
 8006364:	f7fb f9cc 	bl	8001700 <_ZNKSt14_Function_base8_M_emptyEv>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 800636e:	f7fb fa6d 	bl	800184c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	68dc      	ldr	r4, [r3, #12]
 8006376:	68fd      	ldr	r5, [r7, #12]
 8006378:	f107 0308 	add.w	r3, r7, #8
 800637c:	4618      	mov	r0, r3
 800637e:	f000 fa50 	bl	8006822 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8006382:	4606      	mov	r6, r0
 8006384:	1d3b      	adds	r3, r7, #4
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fa4b 	bl	8006822 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800638c:	4680      	mov	r8, r0
 800638e:	463b      	mov	r3, r7
 8006390:	4618      	mov	r0, r3
 8006392:	f000 fa51 	bl	8006838 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8006396:	4603      	mov	r3, r0
 8006398:	4642      	mov	r2, r8
 800639a:	4631      	mov	r1, r6
 800639c:	4628      	mov	r0, r5
 800639e:	47a0      	blx	r4
 80063a0:	4603      	mov	r3, r0
    }
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080063ac <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    floor(_Tp __x)
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7fa f8bf 	bl	8000538 <__aeabi_i2d>
 80063ba:	4602      	mov	r2, r0
 80063bc:	460b      	mov	r3, r1
 80063be:	ec43 2b17 	vmov	d7, r2, r3
 80063c2:	eeb0 0a47 	vmov.f32	s0, s14
 80063c6:	eef0 0a67 	vmov.f32	s1, s15
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 fa37 	bl	800684e <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_Vector_impl_dataC1Ev>
	{ }
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4618      	mov	r0, r3
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b082      	sub	sp, #8
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8006402:	461a      	mov	r2, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fa36 	bl	8006876 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>
      }
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4618      	mov	r0, r3
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8006414:	b5b0      	push	{r4, r5, r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681c      	ldr	r4, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fa38 	bl	800689c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800642c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800642e:	461a      	mov	r2, r3
 8006430:	4629      	mov	r1, r5
 8006432:	4620      	mov	r0, r4
 8006434:	f000 fa3d 	bl	80068b2 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff ffd5 	bl	80063ea <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4618      	mov	r0, r3
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bdb0      	pop	{r4, r5, r7, pc}

0800644a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 800644a:	b580      	push	{r7, lr}
 800644c:	b082      	sub	sp, #8
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	429a      	cmp	r2, r3
 800645e:	d00d      	beq.n	800647c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	4619      	mov	r1, r3
 800646a:	f000 fa3c 	bl	80068e6 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>
				     __x);
	    ++this->_M_impl._M_finish;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f103 0208 	add.w	r2, r3, #8
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800647a:	e008      	b.n	800648e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f81a 	bl	80064b6 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>
 8006482:	4603      	mov	r3, r0
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fa55 	bl	8006938 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>
      }
 800648e:	bf00      	nop
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8006496:	b580      	push	{r7, lr}
 8006498:	b084      	sub	sp, #16
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	f107 030c 	add.w	r3, r7, #12
 80064a4:	4611      	mov	r1, r2
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 fb02 	bl	8006ab0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b084      	sub	sp, #16
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	1d1a      	adds	r2, r3, #4
 80064c2:	f107 030c 	add.w	r3, r7, #12
 80064c6:	4611      	mov	r1, r2
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 faf1 	bl	8006ab0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESD_fftEUlRKS5_SF_E_EvT_SH_T0_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80064d8:	b590      	push	{r4, r7, lr}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	713a      	strb	r2, [r7, #4]
	    typename iterator_traits<_RandomAccessIterator>::value_type,
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 faf3 	bl	8006ad0 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>
 80064ea:	4622      	mov	r2, r4
 80064ec:	68b9      	ldr	r1, [r7, #8]
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 fb01 	bl	8006af6 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 80064f4:	bf00      	nop
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd90      	pop	{r4, r7, pc}

080064fc <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	10db      	asrs	r3, r3, #3
 8006510:	4618      	mov	r0, r3
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	4413      	add	r3, r2
      }
 8006530:	4618      	mov	r0, r3
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4618      	mov	r0, r3
 8006548:	f7fb f8b9 	bl	80016be <_ZNSt14_Function_baseC1Ev>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4618      	mov	r0, r3
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 8006556:	b580      	push	{r7, lr}
 8006558:	b086      	sub	sp, #24
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8006560:	6838      	ldr	r0, [r7, #0]
 8006562:	f000 faf5 	bl	8006b50 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006566:	4603      	mov	r3, r0
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	f107 0308 	add.w	r3, r7, #8
 800656e:	4611      	mov	r1, r2
 8006570:	4618      	mov	r0, r3
 8006572:	f000 faf9 	bl	8006b68 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 8006576:	f107 0308 	add.w	r3, r7, #8
 800657a:	6879      	ldr	r1, [r7, #4]
 800657c:	4618      	mov	r0, r3
 800657e:	f000 f8ca 	bl	8006716 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8006582:	f107 0308 	add.w	r3, r7, #8
 8006586:	4618      	mov	r0, r3
 8006588:	f7fe f846 	bl	8004618 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 800658c:	687b      	ldr	r3, [r7, #4]
	}
 800658e:	4618      	mov	r0, r3
 8006590:	3718      	adds	r7, #24
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>:
	operator=(_Functor&& __f)
 8006596:	b580      	push	{r7, lr}
 8006598:	b086      	sub	sp, #24
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 80065a0:	6838      	ldr	r0, [r7, #0]
 80065a2:	f000 fb0b 	bl	8006bbc <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 80065a6:	4602      	mov	r2, r0
 80065a8:	f107 0308 	add.w	r3, r7, #8
 80065ac:	6811      	ldr	r1, [r2, #0]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 fb10 	bl	8006bd4 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>
 80065b4:	f107 0308 	add.w	r3, r7, #8
 80065b8:	6879      	ldr	r1, [r7, #4]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 f8ab 	bl	8006716 <_ZNSt8functionIFijjPfEE4swapERS2_>
 80065c0:	f107 0308 	add.w	r3, r7, #8
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7fe f827 	bl	8004618 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 80065ca:	687b      	ldr	r3, [r7, #4]
	}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
      get() const noexcept
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fb22 	bl	8006c28 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 80065e4:	4603      	mov	r3, r0
 80065e6:	4618      	mov	r0, r3
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEEC1ERKS2_>:
      _Bvector_base(const allocator_type& __a)
 80065ee:	b590      	push	{r4, r7, lr}
 80065f0:	b085      	sub	sp, #20
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80065f8:	687c      	ldr	r4, [r7, #4]
 80065fa:	f107 030c 	add.w	r3, r7, #12
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	4618      	mov	r0, r3
 8006602:	f000 fb1f 	bl	8006c44 <_ZN2ei7EiAllocImEC1IbEERKNS0_IT_EE>
 8006606:	f107 030c 	add.w	r3, r7, #12
 800660a:	4619      	mov	r1, r3
 800660c:	4620      	mov	r0, r4
 800660e:	f000 fb25 	bl	8006c5c <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_implC1ERKNS1_ImEE>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	bd90      	pop	{r4, r7, pc}

0800661c <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEED1Ev>:
      ~_Bvector_base()
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
      { this->_M_deallocate(); }
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fb27 	bl	8006c78 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj>:
	return std::copy(const_iterator(__last._M_p, 0), __last,
			 iterator(__q, 0));
      }

      void
      _M_initialize(size_type __n)
 8006634:	b590      	push	{r4, r7, lr}
 8006636:	b08b      	sub	sp, #44	; 0x2c
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
      {
	if (__n)
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d021      	beq.n	8006688 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj+0x54>
	  {
	    _Bit_pointer __q = this->_M_allocate(__n);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	68b9      	ldr	r1, [r7, #8]
 8006648:	4618      	mov	r0, r3
 800664a:	f000 fb3a 	bl	8006cc2 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE11_M_allocateEj>
 800664e:	6278      	str	r0, [r7, #36]	; 0x24
	    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
 8006650:	68b8      	ldr	r0, [r7, #8]
 8006652:	f000 fb49 	bl	8006ce8 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>
 8006656:	4603      	mov	r3, r0
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800665c:	441a      	add	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	611a      	str	r2, [r3, #16]
	    this->_M_impl._M_start = iterator(std::__addressof(*__q), 0);
 8006662:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006664:	f000 fb4d 	bl	8006d02 <_ZSt11__addressofImEPT_RS0_>
 8006668:	4601      	mov	r1, r0
 800666a:	f107 0314 	add.w	r3, r7, #20
 800666e:	2200      	movs	r2, #0
 8006670:	4618      	mov	r0, r3
 8006672:	f7fa ffc5 	bl	8001600 <_ZNSt13_Bit_iteratorC1EPmj>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	461a      	mov	r2, r3
 800667a:	f107 0314 	add.w	r3, r7, #20
 800667e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006682:	e882 0003 	stmia.w	r2, {r0, r1}
 8006686:	e011      	b.n	80066ac <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj+0x78>
	  }
	else
	  {
	    this->_M_impl._M_end_of_storage = _Bit_pointer();
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	611a      	str	r2, [r3, #16]
	    this->_M_impl._M_start = iterator(0, 0);
 800668e:	f107 031c 	add.w	r3, r7, #28
 8006692:	2200      	movs	r2, #0
 8006694:	2100      	movs	r1, #0
 8006696:	4618      	mov	r0, r3
 8006698:	f7fa ffb2 	bl	8001600 <_ZNSt13_Bit_iteratorC1EPmj>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	461a      	mov	r2, r3
 80066a0:	f107 031c 	add.w	r3, r7, #28
 80066a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80066a8:	e882 0003 	stmia.w	r2, {r0, r1}
	  }
	this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
 80066ac:	68f9      	ldr	r1, [r7, #12]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	68fc      	ldr	r4, [r7, #12]
 80066b2:	463b      	mov	r3, r7
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7fa ffd7 	bl	8001668 <_ZStplRKSt13_Bit_iteratori>
 80066ba:	f104 0308 	add.w	r3, r4, #8
 80066be:	463a      	mov	r2, r7
 80066c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066c4:	e883 0003 	stmia.w	r3, {r0, r1}

      }
 80066c8:	bf00      	nop
 80066ca:	372c      	adds	r7, #44	; 0x2c
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd90      	pop	{r4, r7, pc}

080066d0 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb>:

      void
      _M_initialize_value(bool __x)
 80066d0:	b590      	push	{r4, r7, lr}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	70fb      	strb	r3, [r7, #3]
      {
	if (_Bit_type* __p = this->_M_impl._M_start._M_p)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	60fb      	str	r3, [r7, #12]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d012      	beq.n	800670e <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x3e>
	  __builtin_memset(__p, __x ? ~0 : 0,
 80066e8:	78fb      	ldrb	r3, [r7, #3]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x24>
 80066ee:	f04f 34ff 	mov.w	r4, #4294967295
 80066f2:	e000      	b.n	80066f6 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x26>
 80066f4:	2400      	movs	r4, #0
			   (this->_M_impl._M_end_addr() - __p)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 fb0d 	bl	8006d18 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>
 80066fe:	4602      	mov	r2, r0
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	1ad3      	subs	r3, r2, r3
	  __builtin_memset(__p, __x ? ~0 : 0,
 8006704:	461a      	mov	r2, r3
 8006706:	4621      	mov	r1, r4
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f01c f9a1 	bl	8022a50 <memset>
			   * sizeof(_Bit_type));
      }
 800670e:	bf00      	nop
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	bd90      	pop	{r4, r7, pc}

08006716 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 8006716:	b580      	push	{r7, lr}
 8006718:	b082      	sub	sp, #8
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	4611      	mov	r1, r2
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fb17 	bl	8006d5a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f103 0208 	add.w	r2, r3, #8
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	3308      	adds	r3, #8
 8006736:	4619      	mov	r1, r3
 8006738:	4610      	mov	r0, r2
 800673a:	f000 fb40 	bl	8006dbe <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f103 020c 	add.w	r2, r3, #12
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	330c      	adds	r3, #12
 8006748:	4619      	mov	r1, r3
 800674a:	4610      	mov	r0, r2
 800674c:	f000 fb61 	bl	8006e12 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8006750:	bf00      	nop
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4618      	mov	r0, r3
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800676e:	b590      	push	{r4, r7, lr}
 8006770:	b085      	sub	sp, #20
 8006772:	af00      	add	r7, sp, #0
 8006774:	60f8      	str	r0, [r7, #12]
 8006776:	60b9      	str	r1, [r7, #8]
 8006778:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800677a:	68fc      	ldr	r4, [r7, #12]
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fb67 	bl	8006e50 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006782:	4602      	mov	r2, r0
 8006784:	f107 0308 	add.w	r3, r7, #8
 8006788:	4619      	mov	r1, r3
 800678a:	4620      	mov	r0, r4
 800678c:	f000 fb6b 	bl	8006e66 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4618      	mov	r0, r3
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	bd90      	pop	{r4, r7, pc}

0800679a <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800679a:	b580      	push	{r7, lr}
 800679c:	b082      	sub	sp, #8
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 fb77 	bl	8006e98 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 80067aa:	4603      	mov	r3, r0
 80067ac:	4618      	mov	r0, r3
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:
      get_deleter() noexcept
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fb77 	bl	8006eb2 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 80067c4:	4603      	mov	r3, r0
 80067c6:	4618      	mov	r0, r3
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4618      	mov	r0, r3
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_>:
      void reset(pointer __p) noexcept
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7ff ffd3 	bl	800679a <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 80067f4:	4603      	mov	r3, r0
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff ffcd 	bl	800679a <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8006800:	4602      	mov	r2, r0
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	6013      	str	r3, [r2, #0]
	if (__old_p)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d006      	beq.n	800681a <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_+0x36>
	  _M_deleter()(__old_p);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fb50 	bl	8006eb2 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 8006812:	4603      	mov	r3, r0
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	4798      	blx	r3
      }
 800681a:	bf00      	nop
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4618      	mov	r0, r3
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4618      	mov	r0, r3
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	605a      	str	r2, [r3, #4]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	609a      	str	r2, [r3, #8]
	{ }
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4618      	mov	r0, r3
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	60f8      	str	r0, [r7, #12]
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	607a      	str	r2, [r7, #4]
	if (__p)
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d005      	beq.n	8006894 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	68b9      	ldr	r1, [r7, #8]
 800688e:	4618      	mov	r0, r3
 8006890:	f000 fb1c 	bl	8006ecc <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10deallocateERS5_PS4_j>
      }
 8006894:	bf00      	nop
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4618      	mov	r0, r3
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>:
   * destroy() even if _Tp has a trivial destructor.
   */

  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	607a      	str	r2, [r7, #4]
	     _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d00b      	beq.n	80068de <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_+0x2c>
#if __cplusplus < 201103L
	__alloc.destroy(std::__addressof(*__first));
#else
	allocator_traits<_Allocator>::destroy(__alloc,
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f000 fb0f 	bl	8006eea <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 80068cc:	4603      	mov	r3, r0
 80068ce:	4619      	mov	r1, r3
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fb15 	bl	8006f00 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>
      for (; __first != __last; ++__first)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3308      	adds	r3, #8
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	e7ef      	b.n	80068be <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_+0xc>
					      std::__addressof(*__first));
#endif
    }
 80068de:	bf00      	nop
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	60f8      	str	r0, [r7, #12]
 80068ee:	60b9      	str	r1, [r7, #8]
 80068f0:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fb12 	bl	8006f1c <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 80068f8:	4603      	mov	r3, r0
 80068fa:	461a      	mov	r2, r3
 80068fc:	68b9      	ldr	r1, [r7, #8]
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 fb17 	bl	8006f32 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JRKS4_EEENSt9enable_ifIXsrSt6__and_IJSB_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISE_JSG_EEEEEE5valueEvE4typeERS5_PSE_DpOSF_>
 8006904:	bf00      	nop
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>:
      _S_use_relocate()
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8006912:	4618      	mov	r0, r3
 8006914:	f000 f805 	bl	8006922 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8006918:	4603      	mov	r3, r0
      }
 800691a:	4618      	mov	r0, r3
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800692a:	2301      	movs	r3, #1
      }
 800692c:	4618      	mov	r0, r3
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8006938:	b5b0      	push	{r4, r5, r7, lr}
 800693a:	b08c      	sub	sp, #48	; 0x30
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8006944:	4a59      	ldr	r2, [pc, #356]	; (8006aac <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x174>)
 8006946:	2101      	movs	r1, #1
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 fb0b 	bl	8006f64 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc>
 800694e:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f7ff fd9a 	bl	8006496 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>
 8006962:	4603      	mov	r3, r0
 8006964:	617b      	str	r3, [r7, #20]
 8006966:	f107 0214 	add.w	r2, r7, #20
 800696a:	f107 0308 	add.w	r3, r7, #8
 800696e:	4611      	mov	r1, r2
 8006970:	4618      	mov	r0, r3
 8006972:	f000 fb3e 	bl	8006ff2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8006976:	4603      	mov	r3, r0
 8006978:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800697e:	4618      	mov	r0, r3
 8006980:	f000 fb4c 	bl	800701c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj>
 8006984:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800698a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8006990:	69ba      	ldr	r2, [r7, #24]
 8006992:	18d5      	adds	r5, r2, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fac1 	bl	8006f1c <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 800699a:	4603      	mov	r3, r0
 800699c:	461a      	mov	r2, r3
 800699e:	4629      	mov	r1, r5
 80069a0:	4620      	mov	r0, r4
 80069a2:	f7ff ffa0 	bl	80068e6 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80069a6:	2300      	movs	r3, #0
 80069a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80069aa:	f7ff ffaf 	bl	800690c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d027      	beq.n	8006a04 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80069b4:	f107 0308 	add.w	r3, r7, #8
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 fb57 	bl	800706c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80069be:	4603      	mov	r3, r0
 80069c0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7ff ff69 	bl	800689c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 80069ca:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	4621      	mov	r1, r4
 80069d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069d2:	f000 fb37 	bl	8007044 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>
 80069d6:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	3308      	adds	r3, #8
 80069dc:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80069de:	f107 0308 	add.w	r3, r7, #8
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 fb42 	bl	800706c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80069e8:	4603      	mov	r3, r0
 80069ea:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7ff ff54 	bl	800689c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 80069f4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80069f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069f8:	6a39      	ldr	r1, [r7, #32]
 80069fa:	4620      	mov	r0, r4
 80069fc:	f000 fb22 	bl	8007044 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>
 8006a00:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006a02:	e026      	b.n	8006a52 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8006a04:	f107 0308 	add.w	r3, r7, #8
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 fb2f 	bl	800706c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7ff ff41 	bl	800689c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8006a1a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	4621      	mov	r1, r4
 8006a20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a22:	f000 fb2e 	bl	8007082 <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 8006a26:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8006a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2a:	3308      	adds	r3, #8
 8006a2c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8006a2e:	f107 0308 	add.w	r3, r7, #8
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fb1a 	bl	800706c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7ff ff2c 	bl	800689c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8006a44:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8006a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a48:	6a39      	ldr	r1, [r7, #32]
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f000 fb19 	bl	8007082 <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 8006a50:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8006a52:	f7ff ff5b 	bl	800690c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>
 8006a56:	4603      	mov	r3, r0
 8006a58:	f083 0301 	eor.w	r3, r3, #1
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d009      	beq.n	8006a76 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7ff ff19 	bl	800689c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	6a39      	ldr	r1, [r7, #32]
 8006a70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a72:	f7ff ff1e 	bl	80068b2 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8006a76:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	689a      	ldr	r2, [r3, #8]
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 8006a82:	461a      	mov	r2, r3
 8006a84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a86:	f7ff fef6 	bl	8006876 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	69ba      	ldr	r2, [r7, #24]
 8006a8e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a94:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a98:	00db      	lsls	r3, r3, #3
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	441a      	add	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	609a      	str	r2, [r3, #8]
    }
 8006aa2:	bf00      	nop
 8006aa4:	3730      	adds	r7, #48	; 0x30
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	08027868 	.word	0x08027868

08006ab0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>:
    };

  template<typename _Compare>
    _GLIBCXX14_CONSTEXPR
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
 8006ad0:	b5b0      	push	{r4, r5, r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	7138      	strb	r0, [r7, #4]
    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8006ad8:	1d3b      	adds	r3, r7, #4
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 faea 	bl	80070b4 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
 8006ae0:	f107 030c 	add.w	r3, r7, #12
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 faef 	bl	80070ca <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>
 8006aec:	bf00      	nop
 8006aee:	4620      	mov	r0, r4
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bdb0      	pop	{r4, r5, r7, pc}

08006af6 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b084      	sub	sp, #16
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	60f8      	str	r0, [r7, #12]
 8006afe:	60b9      	str	r1, [r7, #8]
 8006b00:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 8006b02:	f107 0208 	add.w	r2, r7, #8
 8006b06:	f107 030c 	add.w	r3, r7, #12
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 faea 	bl	80070e6 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d017      	beq.n	8006b48 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x52>
				std::__lg(__last - __first) * 2,
 8006b18:	f107 020c 	add.w	r2, r7, #12
 8006b1c:	f107 0308 	add.w	r3, r7, #8
 8006b20:	4611      	mov	r1, r2
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 fa65 	bl	8006ff2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fa fc46 	bl	80013bc <_ZSt4__lgi>
 8006b30:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 8006b32:	005a      	lsls	r2, r3, #1
 8006b34:	793b      	ldrb	r3, [r7, #4]
 8006b36:	68b9      	ldr	r1, [r7, #8]
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 faec 	bl	8007116 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 8006b3e:	793a      	ldrb	r2, [r7, #4]
 8006b40:	68b9      	ldr	r1, [r7, #8]
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 fb1e 	bl	8007184 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 8006b48:	bf00      	nop
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
	...

08006b68 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8006b68:	b590      	push	{r4, r7, lr}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fa fda2 	bl	80016be <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f000 fb39 	bl	80071f4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00f      	beq.n	8006ba8 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8006b88:	687c      	ldr	r4, [r7, #4]
 8006b8a:	463b      	mov	r3, r7
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 fb41 	bl	8007214 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8006b92:	4603      	mov	r3, r0
 8006b94:	4619      	mov	r1, r3
 8006b96:	4620      	mov	r0, r4
 8006b98:	f000 fb47 	bl	800722a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a05      	ldr	r2, [pc, #20]	; (8006bb4 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 8006ba0:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a04      	ldr	r2, [pc, #16]	; (8006bb8 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 8006ba6:	609a      	str	r2, [r3, #8]
      }
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4618      	mov	r0, r3
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd90      	pop	{r4, r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	0800724f 	.word	0x0800724f
 8006bb8:	08007291 	.word	0x08007291

08006bbc <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	370c      	adds	r7, #12
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
	...

08006bd4 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8006bd4:	b590      	push	{r4, r7, lr}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7fa fd6c 	bl	80016be <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8006be6:	463b      	mov	r3, r7
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 fb70 	bl	80072ce <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00f      	beq.n	8006c14 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8006bf4:	687c      	ldr	r4, [r7, #4]
 8006bf6:	463b      	mov	r3, r7
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f000 fb73 	bl	80072e4 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	4619      	mov	r1, r3
 8006c02:	4620      	mov	r0, r4
 8006c04:	f000 fb79 	bl	80072fa <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a05      	ldr	r2, [pc, #20]	; (8006c20 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x4c>)
 8006c0c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a04      	ldr	r2, [pc, #16]	; (8006c24 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x50>)
 8006c12:	609a      	str	r2, [r3, #8]
      }
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4618      	mov	r0, r3
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd90      	pop	{r4, r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	0800731f 	.word	0x0800731f
 8006c24:	08007361 	.word	0x08007361

08006c28 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 fbb3 	bl	800739e <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <_ZN2ei7EiAllocImEC1IbEERKNS0_IT_EE>:
struct EiAlloc
{
    typedef T value_type;
    EiAlloc() = default;
    template <class U>
    constexpr EiAlloc(const EiAlloc<U> &) noexcept {}
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4618      	mov	r0, r3
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_implC1ERKNS1_ImEE>:
	  _Bvector_impl(const _Bit_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
	  : _Bit_alloc_type(__a)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 fba5 	bl	80073b8 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>
	  { }
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4618      	mov	r0, r3
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv>:
      _M_deallocate()
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
	if (_M_impl._M_start._M_p)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d018      	beq.n	8006cba <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv+0x42>
	    const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 f844 	bl	8006d18 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>
 8006c90:	4602      	mov	r2, r0
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	109b      	asrs	r3, r3, #2
 8006c9a:	60fb      	str	r3, [r7, #12]
	    _Bit_alloc_traits::deallocate(_M_impl,
 8006c9c:	6878      	ldr	r0, [r7, #4]
					  _M_impl._M_end_of_storage - __n,
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691a      	ldr	r2, [r3, #16]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	425b      	negs	r3, r3
	    _Bit_alloc_traits::deallocate(_M_impl,
 8006ca8:	4413      	add	r3, r2
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	4619      	mov	r1, r3
 8006cae:	f000 fb98 	bl	80073e2 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>
	    _M_impl._M_reset();
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fba3 	bl	8007400 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_data8_M_resetEv>
      }
 8006cba:	bf00      	nop
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006cc2:	b590      	push	{r4, r7, lr}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }
 8006ccc:	687c      	ldr	r4, [r7, #4]
 8006cce:	6838      	ldr	r0, [r7, #0]
 8006cd0:	f000 f80a 	bl	8006ce8 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f000 fbb1 	bl	8007440 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd90      	pop	{r4, r7, pc}

08006ce8 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>:
      _S_nword(size_t __n)
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	331f      	adds	r3, #31
 8006cf4:	095b      	lsrs	r3, r3, #5
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <_ZSt11__addressofImEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>:
	_M_end_addr() const _GLIBCXX_NOEXCEPT
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
	  if (this->_M_end_of_storage)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d008      	beq.n	8006d3a <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv+0x22>
	    return std::__addressof(this->_M_end_of_storage[-1]) + 1;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	3b04      	subs	r3, #4
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7ff ffe7 	bl	8006d02 <_ZSt11__addressofImEPT_RS0_>
 8006d34:	4603      	mov	r3, r0
 8006d36:	3304      	adds	r3, #4
 8006d38:	e000      	b.n	8006d3c <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv+0x24>
	  return 0;
 8006d3a:	2300      	movs	r3, #0
	}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff ffed 	bl	8006d44 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	f107 0308 	add.w	r3, r7, #8
 8006d70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d74:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8006d78:	6838      	ldr	r0, [r7, #0]
 8006d7a:	f7ff ffe3 	bl	8006d44 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d86:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8006d8a:	f107 0308 	add.w	r3, r7, #8
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7ff ffd8 	bl	8006d44 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8006d94:	4602      	mov	r2, r0
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d9c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8006da0:	bf00      	nop
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4618      	mov	r0, r3
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f7ff ffed 	bl	8006da8 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8006dd4:	6838      	ldr	r0, [r7, #0]
 8006dd6:	f7ff ffe7 	bl	8006da8 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8006de2:	f107 030c 	add.w	r3, r7, #12
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7ff ffde 	bl	8006da8 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8006dec:	4603      	mov	r3, r0
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	601a      	str	r2, [r3, #0]
    }
 8006df4:	bf00      	nop
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4618      	mov	r0, r3
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b084      	sub	sp, #16
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7ff ffed 	bl	8006dfc <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8006e22:	4603      	mov	r3, r0
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8006e28:	6838      	ldr	r0, [r7, #0]
 8006e2a:	f7ff ffe7 	bl	8006dfc <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8006e36:	f107 030c 	add.w	r3, r7, #12
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7ff ffde 	bl	8006dfc <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8006e40:	4603      	mov	r3, r0
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	601a      	str	r2, [r3, #0]
    }
 8006e48:	bf00      	nop
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 8006e66:	b5b0      	push	{r4, r5, r7, lr}
 8006e68:	b084      	sub	sp, #16
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	60b9      	str	r1, [r7, #8]
 8006e70:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8006e72:	68fc      	ldr	r4, [r7, #12]
 8006e74:	68b8      	ldr	r0, [r7, #8]
 8006e76:	f000 faf1 	bl	800745c <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8006e7a:	4605      	mov	r5, r0
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7ff ffe7 	bl	8006e50 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006e82:	4603      	mov	r3, r0
 8006e84:	461a      	mov	r2, r3
 8006e86:	4629      	mov	r1, r5
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f000 faf2 	bl	8007472 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bdb0      	pop	{r4, r5, r7, pc}

08006e98 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 fb03 	bl	80074ae <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 fb02 	bl	80074c6 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10deallocateERS5_PS4_j>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	68b9      	ldr	r1, [r7, #8]
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f000 faff 	bl	80074e0 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE10deallocateEPS3_j>
 8006ee2:	bf00      	nop
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006eea:	b480      	push	{r7}
 8006eec:	b083      	sub	sp, #12
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>:
	destroy(_Alloc& __a, _Tp* __p)
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
	{ _S_destroy(__a, __p, 0); }
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 faf3 	bl	80074fa <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10_S_destroyIS5_S4_EEvRT_PT0_z>
 8006f14:	bf00      	nop
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4618      	mov	r0, r3
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JRKS4_EEENSt9enable_ifIXsrSt6__and_IJSB_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISE_JSG_EEEEEE5valueEvE4typeERS5_PSE_DpOSF_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 8006f32:	b590      	push	{r4, r7, lr}
 8006f34:	b085      	sub	sp, #20
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	60f8      	str	r0, [r7, #12]
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7ff ffec 	bl	8006f1c <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006f44:	4604      	mov	r4, r0
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	4619      	mov	r1, r3
 8006f4a:	2008      	movs	r0, #8
 8006f4c:	f7fa fa45 	bl	80013da <_ZnwjPv>
 8006f50:	4603      	mov	r3, r0
 8006f52:	4622      	mov	r2, r4
 8006f54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006f58:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 8006f5c:	bf00      	nop
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd90      	pop	{r4, r7, pc}

08006f64 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8006f64:	b590      	push	{r4, r7, lr}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 fad1 	bl	8007518 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 8006f76:	4604      	mov	r4, r0
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f7ff fabf 	bl	80064fc <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	1ae2      	subs	r2, r4, r3
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	bf34      	ite	cc
 8006f88:	2301      	movcc	r3, #1
 8006f8a:	2300      	movcs	r3, #0
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f018 ff69 	bl	801fe6a <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f7ff faaf 	bl	80064fc <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f7ff faab 	bl	80064fc <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	613b      	str	r3, [r7, #16]
 8006faa:	f107 0208 	add.w	r2, r7, #8
 8006fae:	f107 0310 	add.w	r3, r7, #16
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 fac0 	bl	800753a <_ZSt3maxIjERKT_S2_S2_>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4423      	add	r3, r4
 8006fc0:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f7ff fa9a 	bl	80064fc <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d306      	bcc.n	8006fde <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x7a>
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f000 faa1 	bl	8007518 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d904      	bls.n	8006fe8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x84>
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 fa9a 	bl	8007518 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	e000      	b.n	8006fea <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x86>
 8006fe8:	697b      	ldr	r3, [r7, #20]
      }
 8006fea:	4618      	mov	r0, r3
 8006fec:	371c      	adds	r7, #28
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd90      	pop	{r4, r7, pc}

08006ff2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8006ff2:	b590      	push	{r4, r7, lr}
 8006ff4:	b083      	sub	sp, #12
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
 8006ffa:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f835 	bl	800706c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8007002:	4603      	mov	r3, r0
 8007004:	681c      	ldr	r4, [r3, #0]
 8007006:	6838      	ldr	r0, [r7, #0]
 8007008:	f000 f830 	bl	800706c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800700c:	4603      	mov	r3, r0
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	1ae3      	subs	r3, r4, r3
 8007012:	10db      	asrs	r3, r3, #3
 8007014:	4618      	mov	r0, r3
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	bd90      	pop	{r4, r7, pc}

0800701c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d006      	beq.n	800703a <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj+0x1e>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	4618      	mov	r0, r3
 8007032:	f000 fa96 	bl	8007562 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8allocateERS5_j>
 8007036:	4603      	mov	r3, r0
 8007038:	e000      	b.n	800703c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj+0x20>
 800703a:	2300      	movs	r3, #0
      }
 800703c:	4618      	mov	r0, r3
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8007044:	b590      	push	{r4, r7, lr}
 8007046:	b087      	sub	sp, #28
 8007048:	af02      	add	r7, sp, #8
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
 8007050:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8007052:	f88d 4000 	strb.w	r4, [sp]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	68b9      	ldr	r1, [r7, #8]
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 fa8e 	bl	800757e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE14_S_do_relocateEPS3_S7_S7_RS5_St17integral_constantIbLb1EE>
 8007062:	4603      	mov	r3, r0
      }
 8007064:	4618      	mov	r0, r3
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	bd90      	pop	{r4, r7, pc}

0800706c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4618      	mov	r0, r3
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8007082:	b590      	push	{r4, r7, lr}
 8007084:	b085      	sub	sp, #20
 8007086:	af00      	add	r7, sp, #0
 8007088:	60f8      	str	r0, [r7, #12]
 800708a:	60b9      	str	r1, [r7, #8]
 800708c:	607a      	str	r2, [r7, #4]
 800708e:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 fa86 	bl	80075a2 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 8007096:	4604      	mov	r4, r0
 8007098:	68b8      	ldr	r0, [r7, #8]
 800709a:	f000 fa82 	bl	80075a2 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 800709e:	4601      	mov	r1, r0
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	4620      	mov	r0, r4
 80070a6:	f000 fa8b 	bl	80075c0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_>
 80070aa:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd90      	pop	{r4, r7, pc}

080070b4 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4618      	mov	r0, r3
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>:
      _Iter_comp_iter(_Compare __comp)
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b082      	sub	sp, #8
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	7039      	strb	r1, [r7, #0]
	: _M_comp(_GLIBCXX_MOVE(__comp))
 80070d4:	463b      	mov	r3, r7
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff ffec 	bl	80070b4 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80070e6:	b590      	push	{r4, r7, lr}
 80070e8:	b083      	sub	sp, #12
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7ff ffbb 	bl	800706c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80070f6:	4603      	mov	r3, r0
 80070f8:	681c      	ldr	r4, [r3, #0]
 80070fa:	6838      	ldr	r0, [r7, #0]
 80070fc:	f7ff ffb6 	bl	800706c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8007100:	4603      	mov	r3, r0
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	429c      	cmp	r4, r3
 8007106:	bf14      	ite	ne
 8007108:	2301      	movne	r3, #1
 800710a:	2300      	moveq	r3, #0
 800710c:	b2db      	uxtb	r3, r3
 800710e:	4618      	mov	r0, r3
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	bd90      	pop	{r4, r7, pc}

08007116 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 8007116:	b580      	push	{r7, lr}
 8007118:	b086      	sub	sp, #24
 800711a:	af00      	add	r7, sp, #0
 800711c:	60f8      	str	r0, [r7, #12]
 800711e:	60b9      	str	r1, [r7, #8]
 8007120:	607a      	str	r2, [r7, #4]
 8007122:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 8007124:	f107 020c 	add.w	r2, r7, #12
 8007128:	f107 0308 	add.w	r3, r7, #8
 800712c:	4611      	mov	r1, r2
 800712e:	4618      	mov	r0, r3
 8007130:	f7ff ff5f 	bl	8006ff2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8007134:	4603      	mov	r3, r0
 8007136:	2b10      	cmp	r3, #16
 8007138:	bfcc      	ite	gt
 800713a:	2301      	movgt	r3, #1
 800713c:	2300      	movle	r3, #0
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d01c      	beq.n	800717e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x68>
	  if (__depth_limit == 0)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d106      	bne.n	8007158 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x42>
	      std::__partial_sort(__first, __last, __last, __comp);
 800714a:	783b      	ldrb	r3, [r7, #0]
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	68b9      	ldr	r1, [r7, #8]
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 fa66 	bl	8007622 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>
 8007156:	e012      	b.n	800717e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x68>
	  --__depth_limit;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3b01      	subs	r3, #1
 800715c:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800715e:	783a      	ldrb	r2, [r7, #0]
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 fa74 	bl	8007650 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_>
 8007168:	4603      	mov	r3, r0
 800716a:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800716c:	783b      	ldrb	r3, [r7, #0]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	68b9      	ldr	r1, [r7, #8]
 8007172:	6978      	ldr	r0, [r7, #20]
 8007174:	f7ff ffcf 	bl	8007116 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
	  __last = __cut;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 800717c:	e7d2      	b.n	8007124 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0xe>
    }
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 8007190:	f107 020c 	add.w	r2, r7, #12
 8007194:	f107 0308 	add.w	r3, r7, #8
 8007198:	4611      	mov	r1, r2
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff ff29 	bl	8006ff2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b10      	cmp	r3, #16
 80071a4:	bfcc      	ite	gt
 80071a6:	2301      	movgt	r3, #1
 80071a8:	2300      	movle	r3, #0
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d018      	beq.n	80071e2 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 80071b0:	f107 030c 	add.w	r3, r7, #12
 80071b4:	2110      	movs	r1, #16
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 fa8c 	bl	80076d4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80071bc:	4603      	mov	r3, r0
 80071be:	793a      	ldrb	r2, [r7, #4]
 80071c0:	4619      	mov	r1, r3
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 fa9e 	bl	8007704 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 80071c8:	f107 030c 	add.w	r3, r7, #12
 80071cc:	2110      	movs	r1, #16
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 fa80 	bl	80076d4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80071d4:	4603      	mov	r3, r0
 80071d6:	793a      	ldrb	r2, [r7, #4]
 80071d8:	68b9      	ldr	r1, [r7, #8]
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 fafe 	bl	80077dc <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 80071e0:	e004      	b.n	80071ec <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 80071e2:	793a      	ldrb	r2, [r7, #4]
 80071e4:	68b9      	ldr	r1, [r7, #8]
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 fa8c 	bl	8007704 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 80071ec:	bf00      	nop
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	bf14      	ite	ne
 8007202:	2301      	movne	r3, #1
 8007204:	2300      	moveq	r3, #0
 8007206:	b2db      	uxtb	r3, r3
 8007208:	4618      	mov	r0, r3
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4618      	mov	r0, r3
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800722a:	b590      	push	{r4, r7, lr}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8007234:	6838      	ldr	r0, [r7, #0]
 8007236:	f7ff ffed 	bl	8007214 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 800723a:	4603      	mov	r3, r0
 800723c:	4622      	mov	r2, r4
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fb03 	bl	800784c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8007246:	bf00      	nop
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	bd90      	pop	{r4, r7, pc}

0800724e <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800724e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007250:	b085      	sub	sp, #20
 8007252:	af00      	add	r7, sp, #0
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	607a      	str	r2, [r7, #4]
 800725a:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f000 fb0e 	bl	800787e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8007262:	4604      	mov	r4, r0
 8007264:	68b8      	ldr	r0, [r7, #8]
 8007266:	f7ff fadc 	bl	8006822 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800726a:	4605      	mov	r5, r0
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f7ff fad8 	bl	8006822 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007272:	4606      	mov	r6, r0
 8007274:	6838      	ldr	r0, [r7, #0]
 8007276:	f7ff fadf 	bl	8006838 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800727a:	4603      	mov	r3, r0
 800727c:	4632      	mov	r2, r6
 800727e:	4629      	mov	r1, r5
 8007280:	4620      	mov	r0, r4
 8007282:	f000 fb0d 	bl	80078a0 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8007286:	4603      	mov	r3, r0
      }
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007290 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8007290:	b590      	push	{r4, r7, lr}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	4613      	mov	r3, r2
 800729c:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800729e:	79fb      	ldrb	r3, [r7, #7]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d109      	bne.n	80072b8 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 fb20 	bl	80078ea <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 80072aa:	4604      	mov	r4, r0
 80072ac:	68b8      	ldr	r0, [r7, #8]
 80072ae:	f000 fae6 	bl	800787e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 80072b2:	4603      	mov	r3, r0
 80072b4:	6023      	str	r3, [r4, #0]
	    break;
 80072b6:	e005      	b.n	80072c4 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80072b8:	79fb      	ldrb	r3, [r7, #7]
 80072ba:	461a      	mov	r2, r3
 80072bc:	68b9      	ldr	r1, [r7, #8]
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 fb1f 	bl	8007902 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 80072c4:	2300      	movs	r3, #0
      }
 80072c6:	4618      	mov	r0, r3
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd90      	pop	{r4, r7, pc}

080072ce <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
	  { return true; }
 80072d6:	2301      	movs	r3, #1
 80072d8:	4618      	mov	r0, r3
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4618      	mov	r0, r3
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80072fa:	b590      	push	{r4, r7, lr}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8007304:	6838      	ldr	r0, [r7, #0]
 8007306:	f7ff ffed 	bl	80072e4 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 800730a:	4603      	mov	r3, r0
 800730c:	4622      	mov	r2, r4
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fb21 	bl	8007958 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8007316:	bf00      	nop
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	bd90      	pop	{r4, r7, pc}

0800731e <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800731e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007320:	b085      	sub	sp, #20
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	607a      	str	r2, [r7, #4]
 800732a:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 fb2c 	bl	800798a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8007332:	4604      	mov	r4, r0
 8007334:	68b8      	ldr	r0, [r7, #8]
 8007336:	f7ff fa74 	bl	8006822 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800733a:	4605      	mov	r5, r0
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7ff fa70 	bl	8006822 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8007342:	4606      	mov	r6, r0
 8007344:	6838      	ldr	r0, [r7, #0]
 8007346:	f7ff fa77 	bl	8006838 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800734a:	4603      	mov	r3, r0
 800734c:	4632      	mov	r2, r6
 800734e:	4629      	mov	r1, r5
 8007350:	4620      	mov	r0, r4
 8007352:	f000 fb2b 	bl	80079ac <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8007356:	4603      	mov	r3, r0
      }
 8007358:	4618      	mov	r0, r3
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007360 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8007360:	b590      	push	{r4, r7, lr}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	4613      	mov	r3, r2
 800736c:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800736e:	79fb      	ldrb	r3, [r7, #7]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d109      	bne.n	8007388 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 fb3e 	bl	80079f6 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 800737a:	4604      	mov	r4, r0
 800737c:	68b8      	ldr	r0, [r7, #8]
 800737e:	f000 fb04 	bl	800798a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8007382:	4603      	mov	r3, r0
 8007384:	6023      	str	r3, [r4, #0]
	    break;
 8007386:	e005      	b.n	8007394 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8007388:	79fb      	ldrb	r3, [r7, #7]
 800738a:	461a      	mov	r2, r3
 800738c:	68b9      	ldr	r1, [r7, #8]
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f000 fb3d 	bl	8007a0e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8007394:	2300      	movs	r3, #0
      }
 8007396:	4618      	mov	r0, r3
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	bd90      	pop	{r4, r7, pc}

0800739e <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800739e:	b580      	push	{r7, lr}
 80073a0:	b082      	sub	sp, #8
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 fb5b 	bl	8007a64 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80073ae:	4603      	mov	r3, r0
 80073b0:	4618      	mov	r0, r3
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>:
	_Bvector_impl_data() _GLIBCXX_NOEXCEPT
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fa f90d 	bl	80015e2 <_ZNSt13_Bit_iteratorC1Ev>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3308      	adds	r3, #8
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7fa f908 	bl	80015e2 <_ZNSt13_Bit_iteratorC1Ev>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	611a      	str	r2, [r3, #16]
	{ }
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4618      	mov	r0, r3
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	60f8      	str	r0, [r7, #12]
 80073ea:	60b9      	str	r1, [r7, #8]
 80073ec:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	68b9      	ldr	r1, [r7, #8]
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f000 fb42 	bl	8007a7c <_ZN2ei7EiAllocImE10deallocateEPmj>
 80073f8:	bf00      	nop
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_data8_M_resetEv>:
	_M_reset() _GLIBCXX_NOEXCEPT
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
	  _M_start = _M_finish = _Bit_iterator();
 8007408:	f107 0308 	add.w	r3, r7, #8
 800740c:	4618      	mov	r0, r3
 800740e:	f7fa f8e8 	bl	80015e2 <_ZNSt13_Bit_iteratorC1Ev>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	3308      	adds	r3, #8
 8007416:	f107 0208 	add.w	r2, r7, #8
 800741a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800741e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f103 0208 	add.w	r2, r3, #8
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800742e:	e883 0003 	stmia.w	r3, {r0, r1}
	  _M_end_of_storage = _Bit_pointer();
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	611a      	str	r2, [r3, #16]
	}
 8007438:	bf00      	nop
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>:
      allocate(_Alloc& __a, size_type __n)
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fb22 	bl	8007a96 <_ZN2ei7EiAllocImE8allocateEj>
 8007452:	4603      	mov	r3, r0
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4618      	mov	r0, r3
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8007472:	b590      	push	{r4, r7, lr}
 8007474:	b085      	sub	sp, #20
 8007476:	af00      	add	r7, sp, #0
 8007478:	60f8      	str	r0, [r7, #12]
 800747a:	60b9      	str	r1, [r7, #8]
 800747c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800747e:	68fc      	ldr	r4, [r7, #12]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7ff fce5 	bl	8006e50 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007486:	4603      	mov	r3, r0
 8007488:	4619      	mov	r1, r3
 800748a:	4620      	mov	r0, r4
 800748c:	f000 fb14 	bl	8007ab8 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	1d1c      	adds	r4, r3, #4
 8007494:	68b8      	ldr	r0, [r7, #8]
 8007496:	f7ff ffe1 	bl	800745c <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800749a:	4603      	mov	r3, r0
 800749c:	4619      	mov	r1, r3
 800749e:	4620      	mov	r0, r4
 80074a0:	f000 fb1d 	bl	8007ade <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd90      	pop	{r4, r7, pc}

080074ae <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b082      	sub	sp, #8
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fb22 	bl	8007b00 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 80074bc:	4603      	mov	r3, r0
 80074be:	4618      	mov	r0, r3
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b082      	sub	sp, #8
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 fb23 	bl	8007b1c <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80074d6:	4603      	mov	r3, r0
 80074d8:	4618      	mov	r0, r3
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE10deallocateEPS3_j>:
        allocs[ptr] = bytes;
#endif
        return (T *)ptr;
    }

    void deallocate(T *p, size_t n) noexcept
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
#if EIDSP_TRACK_ALLOCATIONS
        auto size_p = allocs.find(p);
        ei_dsp_free(p,size_p->second);
        allocs.erase(size_p);
#else
        ei_dsp_free(p,0);
 80074ec:	68b8      	ldr	r0, [r7, #8]
 80074ee:	f012 fded 	bl	801a0cc <_Z7ei_freePv>
#endif
    }
 80074f2:	bf00      	nop
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10_S_destroyIS5_S4_EEvRT_PT0_z>:
	_S_destroy(_Alloc2&, _Tp* __p, ...)
 80074fa:	b40e      	push	{r1, r2, r3}
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
	{ std::_Destroy(__p); }
 8007504:	6978      	ldr	r0, [r7, #20]
 8007506:	f000 fb15 	bl	8007b34 <_ZSt8_DestroyIN2ei8spectral10processing11freq_peak_tEEvPT_>
 800750a:	bf00      	nop
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007514:	b003      	add	sp, #12
 8007516:	4770      	bx	lr

08007518 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4618      	mov	r0, r3
 8007524:	f000 fb2a 	bl	8007b7c <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 8007528:	4603      	mov	r3, r0
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fb0c 	bl	8007b48 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_max_sizeERKS5_>
 8007530:	4603      	mov	r3, r0
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	429a      	cmp	r2, r3
 800754e:	d201      	bcs.n	8007554 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	e000      	b.n	8007556 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8007554:	687b      	ldr	r3, [r7, #4]
    }
 8007556:	4618      	mov	r0, r3
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8allocateERS5_j>:
      allocate(_Alloc& __a, size_type __n)
 8007562:	b580      	push	{r7, lr}
 8007564:	b082      	sub	sp, #8
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fb0f 	bl	8007b92 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE8allocateEj>
 8007574:	4603      	mov	r3, r0
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE14_S_do_relocateEPS3_S7_S7_RS5_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	60f8      	str	r0, [r7, #12]
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	607a      	str	r2, [r7, #4]
 800758a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	68b9      	ldr	r1, [r7, #8]
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 fb0e 	bl	8007bb4 <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 8007598:	4603      	mov	r3, r0
      }
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b084      	sub	sp, #16
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80075aa:	f107 030c 	add.w	r3, r7, #12
 80075ae:	6879      	ldr	r1, [r7, #4]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 fb1c 	bl	8007bee <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80075c0:	b590      	push	{r4, r7, lr}
 80075c2:	b087      	sub	sp, #28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
 80075cc:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 80075d2:	f107 0208 	add.w	r2, r7, #8
 80075d6:	f107 030c 	add.w	r3, r7, #12
 80075da:	4611      	mov	r1, r2
 80075dc:	4618      	mov	r0, r3
 80075de:	f000 fb18 	bl	8007c12 <_ZStneIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d017      	beq.n	8007618 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_+0x58>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 80075e8:	6978      	ldr	r0, [r7, #20]
 80075ea:	f7ff fc7e 	bl	8006eea <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 80075ee:	4604      	mov	r4, r0
 80075f0:	f107 030c 	add.w	r3, r7, #12
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 fb2e 	bl	8007c56 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEdeEv>
 80075fa:	4603      	mov	r3, r0
 80075fc:	461a      	mov	r2, r3
 80075fe:	4621      	mov	r1, r4
 8007600:	6838      	ldr	r0, [r7, #0]
 8007602:	f000 fb34 	bl	8007c6e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>
	  for (; __first != __last; ++__first, (void)++__cur)
 8007606:	f107 030c 	add.w	r3, r7, #12
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fb12 	bl	8007c34 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEppEv>
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	3308      	adds	r3, #8
 8007614:	617b      	str	r3, [r7, #20]
 8007616:	e7dc      	b.n	80075d2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_+0x12>
	  return __cur;
 8007618:	697b      	ldr	r3, [r7, #20]
    }
 800761a:	4618      	mov	r0, r3
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	bd90      	pop	{r4, r7, pc}

08007622 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 8007622:	b580      	push	{r7, lr}
 8007624:	b084      	sub	sp, #16
 8007626:	af00      	add	r7, sp, #0
 8007628:	60f8      	str	r0, [r7, #12]
 800762a:	60b9      	str	r1, [r7, #8]
 800762c:	607a      	str	r2, [r7, #4]
 800762e:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 8007630:	783b      	ldrb	r3, [r7, #0]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	68b9      	ldr	r1, [r7, #8]
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f000 fb2c 	bl	8007c94 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>
      std::__sort_heap(__first, __middle, __comp);
 800763c:	463b      	mov	r3, r7
 800763e:	461a      	mov	r2, r3
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f000 fb58 	bl	8007cf8 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>
    }
 8007648:	bf00      	nop
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 8007650:	b590      	push	{r4, r7, lr}
 8007652:	b089      	sub	sp, #36	; 0x24
 8007654:	af02      	add	r7, sp, #8
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800765c:	f107 020c 	add.w	r2, r7, #12
 8007660:	f107 0308 	add.w	r3, r7, #8
 8007664:	4611      	mov	r1, r2
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff fcc3 	bl	8006ff2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800766c:	4603      	mov	r3, r0
 800766e:	0fda      	lsrs	r2, r3, #31
 8007670:	4413      	add	r3, r2
 8007672:	105b      	asrs	r3, r3, #1
 8007674:	461a      	mov	r2, r3
 8007676:	f107 030c 	add.w	r3, r7, #12
 800767a:	4611      	mov	r1, r2
 800767c:	4618      	mov	r0, r3
 800767e:	f000 f829 	bl	80076d4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007682:	4603      	mov	r3, r0
 8007684:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8007686:	f107 030c 	add.w	r3, r7, #12
 800768a:	2101      	movs	r1, #1
 800768c:	4618      	mov	r0, r3
 800768e:	f000 f821 	bl	80076d4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007692:	4604      	mov	r4, r0
 8007694:	f107 0308 	add.w	r3, r7, #8
 8007698:	2101      	movs	r1, #1
 800769a:	4618      	mov	r0, r3
 800769c:	f000 fb52 	bl	8007d44 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmiEi>
 80076a0:	4602      	mov	r2, r0
 80076a2:	793b      	ldrb	r3, [r7, #4]
 80076a4:	f88d 3000 	strb.w	r3, [sp]
 80076a8:	4613      	mov	r3, r2
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	4621      	mov	r1, r4
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 fb7d 	bl	8007dae <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 80076b4:	f107 030c 	add.w	r3, r7, #12
 80076b8:	2101      	movs	r1, #1
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 f80a 	bl	80076d4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80076c0:	793b      	ldrb	r3, [r7, #4]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	68b9      	ldr	r1, [r7, #8]
 80076c6:	f000 fbc7 	bl	8007e58 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_>
 80076ca:	4603      	mov	r3, r0
    }
 80076cc:	4618      	mov	r0, r3
 80076ce:	371c      	adds	r7, #28
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd90      	pop	{r4, r7, pc}

080076d4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	00db      	lsls	r3, r3, #3
 80076e6:	4413      	add	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]
 80076ea:	f107 020c 	add.w	r2, r7, #12
 80076ee:	f107 0308 	add.w	r3, r7, #8
 80076f2:	4611      	mov	r1, r2
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7ff f9db 	bl	8006ab0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 8007704:	b5b0      	push	{r4, r5, r7, lr}
 8007706:	b088      	sub	sp, #32
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 8007710:	f107 0208 	add.w	r2, r7, #8
 8007714:	f107 030c 	add.w	r3, r7, #12
 8007718:	4611      	mov	r1, r2
 800771a:	4618      	mov	r0, r3
 800771c:	f000 fbe4 	bl	8007ee8 <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d156      	bne.n	80077d4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xd0>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8007726:	f107 030c 	add.w	r3, r7, #12
 800772a:	2101      	movs	r1, #1
 800772c:	4618      	mov	r0, r3
 800772e:	f7ff ffd1 	bl	80076d4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8007732:	4603      	mov	r3, r0
 8007734:	61fb      	str	r3, [r7, #28]
 8007736:	f107 0208 	add.w	r2, r7, #8
 800773a:	f107 031c 	add.w	r3, r7, #28
 800773e:	4611      	mov	r1, r2
 8007740:	4618      	mov	r0, r3
 8007742:	f7ff fcd0 	bl	80070e6 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d044      	beq.n	80077d6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xd2>
	  if (__comp(__i, __first))
 800774c:	1d3b      	adds	r3, r7, #4
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	69f9      	ldr	r1, [r7, #28]
 8007752:	4618      	mov	r0, r3
 8007754:	f000 fb0f 	bl	8007d76 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d02d      	beq.n	80077ba <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xb6>
		__val = _GLIBCXX_MOVE(*__i);
 800775e:	f107 031c 	add.w	r3, r7, #28
 8007762:	4618      	mov	r0, r3
 8007764:	f000 fbe9 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007768:	4603      	mov	r3, r0
 800776a:	4618      	mov	r0, r3
 800776c:	f000 fbf1 	bl	8007f52 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8007770:	4602      	mov	r2, r0
 8007772:	f107 0314 	add.w	r3, r7, #20
 8007776:	e892 0003 	ldmia.w	r2, {r0, r1}
 800777a:	e883 0003 	stmia.w	r3, {r0, r1}
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800777e:	f107 031c 	add.w	r3, r7, #28
 8007782:	2101      	movs	r1, #1
 8007784:	4618      	mov	r0, r3
 8007786:	f7ff ffa5 	bl	80076d4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800778a:	4603      	mov	r3, r0
 800778c:	461a      	mov	r2, r3
 800778e:	69f9      	ldr	r1, [r7, #28]
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 fbe9 	bl	8007f68 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET0_T_SD_SC_>
	      *__first = _GLIBCXX_MOVE(__val);
 8007796:	f107 0314 	add.w	r3, r7, #20
 800779a:	4618      	mov	r0, r3
 800779c:	f000 fbd9 	bl	8007f52 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80077a0:	4604      	mov	r4, r0
 80077a2:	f107 030c 	add.w	r3, r7, #12
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 fbc7 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80077ac:	4603      	mov	r3, r0
 80077ae:	4622      	mov	r2, r4
 80077b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80077b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80077b8:	e006      	b.n	80077c8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xc4>
	    std::__unguarded_linear_insert(__i,
 80077ba:	7938      	ldrb	r0, [r7, #4]
 80077bc:	f000 fbec 	bl	8007f98 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 80077c0:	4629      	mov	r1, r5
 80077c2:	69f8      	ldr	r0, [r7, #28]
 80077c4:	f000 fbfc 	bl	8007fc0 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 80077c8:	f107 031c 	add.w	r3, r7, #28
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 fba3 	bl	8007f18 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 80077d2:	e7b0      	b.n	8007736 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x32>
      if (__first == __last) return;
 80077d4:	bf00      	nop
    }
 80077d6:	3720      	adds	r7, #32
 80077d8:	46bd      	mov	sp, r7
 80077da:	bdb0      	pop	{r4, r5, r7, pc}

080077dc <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 80077dc:	b590      	push	{r4, r7, lr}
 80077de:	b087      	sub	sp, #28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	f107 0208 	add.w	r2, r7, #8
 80077f0:	f107 0314 	add.w	r3, r7, #20
 80077f4:	4611      	mov	r1, r2
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7ff fc75 	bl	80070e6 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00c      	beq.n	800781c <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x40>
	std::__unguarded_linear_insert(__i,
 8007802:	7938      	ldrb	r0, [r7, #4]
 8007804:	f000 fbc8 	bl	8007f98 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 8007808:	4621      	mov	r1, r4
 800780a:	6978      	ldr	r0, [r7, #20]
 800780c:	f000 fbd8 	bl	8007fc0 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8007810:	f107 0314 	add.w	r3, r7, #20
 8007814:	4618      	mov	r0, r3
 8007816:	f000 fb7f 	bl	8007f18 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 800781a:	e7e7      	b.n	80077ec <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x10>
    }
 800781c:	bf00      	nop
 800781e:	371c      	adds	r7, #28
 8007820:	46bd      	mov	sp, r7
 8007822:	bd90      	pop	{r4, r7, pc}

08007824 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	429a      	cmp	r2, r3
 8007838:	d201      	bcs.n	800783e <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	e000      	b.n	8007840 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800783e:	687b      	ldr	r3, [r7, #4]
    }
 8007840:	4618      	mov	r0, r3
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800784c:	b590      	push	{r4, r7, lr}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8007858:	68b8      	ldr	r0, [r7, #8]
 800785a:	f7ff fcdb 	bl	8007214 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 800785e:	4603      	mov	r3, r0
 8007860:	681c      	ldr	r4, [r3, #0]
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f7f9 ff15 	bl	8001692 <_ZNSt9_Any_data9_M_accessEv>
 8007868:	4603      	mov	r3, r0
 800786a:	4619      	mov	r1, r3
 800786c:	2004      	movs	r0, #4
 800786e:	f7f9 fdb4 	bl	80013da <_ZnwjPv>
 8007872:	4603      	mov	r3, r0
 8007874:	601c      	str	r4, [r3, #0]
 8007876:	bf00      	nop
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	bd90      	pop	{r4, r7, pc}

0800787e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800787e:	b580      	push	{r7, lr}
 8007880:	b084      	sub	sp, #16
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fbef 	bl	800806a <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 800788c:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f000 fbf7 	bl	8008082 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8007894:	4603      	mov	r3, r0
 8007896:	bf00      	nop
	}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80078a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078a4:	b086      	sub	sp, #24
 80078a6:	af02      	add	r7, sp, #8
 80078a8:	60f8      	str	r0, [r7, #12]
 80078aa:	60b9      	str	r1, [r7, #8]
 80078ac:	607a      	str	r2, [r7, #4]
 80078ae:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 fbf1 	bl	8008098 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 80078b6:	4604      	mov	r4, r0
 80078b8:	68b8      	ldr	r0, [r7, #8]
 80078ba:	f7fe ffb2 	bl	8006822 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80078be:	4605      	mov	r5, r0
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7fe ffae 	bl	8006822 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80078c6:	4606      	mov	r6, r0
 80078c8:	6838      	ldr	r0, [r7, #0]
 80078ca:	f7fe ffb5 	bl	8006838 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80078ce:	4603      	mov	r3, r0
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	4633      	mov	r3, r6
 80078d4:	462a      	mov	r2, r5
 80078d6:	4621      	mov	r1, r4
 80078d8:	4640      	mov	r0, r8
 80078da:	f000 fbe8 	bl	80080ae <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 80078de:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080078ea <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b082      	sub	sp, #8
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7f9 fecd 	bl	8001692 <_ZNSt9_Any_data9_M_accessEv>
 80078f8:	4603      	mov	r3, r0
 80078fa:	4618      	mov	r0, r3
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8007902:	b5b0      	push	{r4, r5, r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	60f8      	str	r0, [r7, #12]
 800790a:	60b9      	str	r1, [r7, #8]
 800790c:	4613      	mov	r3, r2
 800790e:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8007910:	79fb      	ldrb	r3, [r7, #7]
 8007912:	2b03      	cmp	r3, #3
 8007914:	d016      	beq.n	8007944 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8007916:	2b03      	cmp	r3, #3
 8007918:	dc19      	bgt.n	800794e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 800791a:	2b01      	cmp	r3, #1
 800791c:	d002      	beq.n	8007924 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 800791e:	2b02      	cmp	r3, #2
 8007920:	d00a      	beq.n	8007938 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8007922:	e014      	b.n	800794e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f7ff ffe0 	bl	80078ea <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 800792a:	4604      	mov	r4, r0
 800792c:	68b8      	ldr	r0, [r7, #8]
 800792e:	f7ff ffa6 	bl	800787e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8007932:	4603      	mov	r3, r0
 8007934:	6023      	str	r3, [r4, #0]
	      break;
 8007936:	e00a      	b.n	800794e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8007938:	462a      	mov	r2, r5
 800793a:	68b9      	ldr	r1, [r7, #8]
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 fbda 	bl	80080f6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8007942:	e004      	b.n	800794e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8007944:	4621      	mov	r1, r4
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 fbee 	bl	8008128 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800794c:	bf00      	nop
	  return false;
 800794e:	2300      	movs	r3, #0
	}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bdb0      	pop	{r4, r5, r7, pc}

08007958 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8007958:	b590      	push	{r4, r7, lr}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8007964:	68b8      	ldr	r0, [r7, #8]
 8007966:	f7ff fcbd 	bl	80072e4 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 800796a:	4604      	mov	r4, r0
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f7f9 fe90 	bl	8001692 <_ZNSt9_Any_data9_M_accessEv>
 8007972:	4603      	mov	r3, r0
 8007974:	4619      	mov	r1, r3
 8007976:	2004      	movs	r0, #4
 8007978:	f7f9 fd2f 	bl	80013da <_ZnwjPv>
 800797c:	4602      	mov	r2, r0
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	6013      	str	r3, [r2, #0]
 8007982:	bf00      	nop
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	bd90      	pop	{r4, r7, pc}

0800798a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fbd4 	bl	8008140 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8007998:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 fbdc 	bl	8008158 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 80079a0:	4603      	mov	r3, r0
 80079a2:	bf00      	nop
	}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80079ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079b0:	b086      	sub	sp, #24
 80079b2:	af02      	add	r7, sp, #8
 80079b4:	60f8      	str	r0, [r7, #12]
 80079b6:	60b9      	str	r1, [r7, #8]
 80079b8:	607a      	str	r2, [r7, #4]
 80079ba:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 fbd6 	bl	800816e <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 80079c2:	4604      	mov	r4, r0
 80079c4:	68b8      	ldr	r0, [r7, #8]
 80079c6:	f7fe ff2c 	bl	8006822 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80079ca:	4605      	mov	r5, r0
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7fe ff28 	bl	8006822 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80079d2:	4606      	mov	r6, r0
 80079d4:	6838      	ldr	r0, [r7, #0]
 80079d6:	f7fe ff2f 	bl	8006838 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80079da:	4603      	mov	r3, r0
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	4633      	mov	r3, r6
 80079e0:	462a      	mov	r2, r5
 80079e2:	4621      	mov	r1, r4
 80079e4:	4640      	mov	r0, r8
 80079e6:	f000 fbcd 	bl	8008184 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 80079ea:	4603      	mov	r3, r0
    }
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080079f6 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b082      	sub	sp, #8
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7f9 fe47 	bl	8001692 <_ZNSt9_Any_data9_M_accessEv>
 8007a04:	4603      	mov	r3, r0
 8007a06:	4618      	mov	r0, r3
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8007a0e:	b5b0      	push	{r4, r5, r7, lr}
 8007a10:	b084      	sub	sp, #16
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	60f8      	str	r0, [r7, #12]
 8007a16:	60b9      	str	r1, [r7, #8]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8007a1c:	79fb      	ldrb	r3, [r7, #7]
 8007a1e:	2b03      	cmp	r3, #3
 8007a20:	d016      	beq.n	8007a50 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	dc19      	bgt.n	8007a5a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d002      	beq.n	8007a30 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d00a      	beq.n	8007a44 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8007a2e:	e014      	b.n	8007a5a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f7ff ffe0 	bl	80079f6 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8007a36:	4604      	mov	r4, r0
 8007a38:	68b8      	ldr	r0, [r7, #8]
 8007a3a:	f7ff ffa6 	bl	800798a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	6023      	str	r3, [r4, #0]
	      break;
 8007a42:	e00a      	b.n	8007a5a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8007a44:	462a      	mov	r2, r5
 8007a46:	68b9      	ldr	r1, [r7, #8]
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 fbbf 	bl	80081cc <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8007a4e:	e004      	b.n	8007a5a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8007a50:	4621      	mov	r1, r4
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 fbd3 	bl	80081fe <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8007a58:	bf00      	nop
	  return false;
 8007a5a:	2300      	movs	r3, #0
	}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bdb0      	pop	{r4, r5, r7, pc}

08007a64 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fbd2 	bl	8008216 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 8007a72:	4603      	mov	r3, r0
 8007a74:	4618      	mov	r0, r3
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <_ZN2ei7EiAllocImE10deallocateEPmj>:
    void deallocate(T *p, size_t n) noexcept
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
        ei_dsp_free(p,0);
 8007a88:	68b8      	ldr	r0, [r7, #8]
 8007a8a:	f012 fb1f 	bl	801a0cc <_Z7ei_freePv>
    }
 8007a8e:	bf00      	nop
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <_ZN2ei7EiAllocImE8allocateEj>:
    T *allocate(size_t n)
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b084      	sub	sp, #16
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f012 faf6 	bl	801a098 <_Z9ei_mallocj>
 8007aac:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 8007aae:	68bb      	ldr	r3, [r7, #8]
    }
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8007ab8:	b590      	push	{r4, r7, lr}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8007ac2:	687c      	ldr	r4, [r7, #4]
 8007ac4:	6838      	ldr	r0, [r7, #0]
 8007ac6:	f7ff f9c3 	bl	8006e50 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8007aca:	4603      	mov	r3, r0
 8007acc:	4619      	mov	r1, r3
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f000 fbaf 	bl	8008232 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd90      	pop	{r4, r7, pc}

08007ade <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b082      	sub	sp, #8
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8007ae8:	6838      	ldr	r0, [r7, #0]
 8007aea:	f7ff fcb7 	bl	800745c <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8007aee:	4603      	mov	r3, r0
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4618      	mov	r0, r3
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 fba1 	bl	8008254 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 8007b12:	4603      	mov	r3, r0
 8007b14:	4618      	mov	r0, r3
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fba0 	bl	800826a <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <_ZSt8_DestroyIN2ei8spectral10processing11freq_peak_tEEvPT_>:
  /**
   * Destroy the object pointed to by a pointer type.
   */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR inline void
    _Destroy(_Tp* __pointer)
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
#if __cplusplus > 201703L
      std::destroy_at(__pointer);
#else
      __pointer->~_Tp();
#endif
    }
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_max_sizeERKS5_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8007b50:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8007b54:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fb94 	bl	8008284 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8max_sizeERKS5_>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8007b60:	f107 0208 	add.w	r2, r7, #8
 8007b64:	f107 030c 	add.w	r3, r7, #12
 8007b68:	4611      	mov	r1, r2
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7ff fe5a 	bl	8007824 <_ZSt3minIjERKT_S2_S2_>
 8007b70:	4603      	mov	r3, r0
 8007b72:	681b      	ldr	r3, [r3, #0]
      }
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4618      	mov	r0, r3
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE8allocateEj>:
    T *allocate(size_t n)
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b084      	sub	sp, #16
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	00db      	lsls	r3, r3, #3
 8007ba0:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f012 fa78 	bl	801a098 <_Z9ei_mallocj>
 8007ba8:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 8007baa:	68bb      	ldr	r3, [r7, #8]
    }
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8007bb4:	b5b0      	push	{r4, r5, r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
 8007bc0:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 fb6b 	bl	800829e <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8007bc8:	4604      	mov	r4, r0
 8007bca:	68b8      	ldr	r0, [r7, #8]
 8007bcc:	f000 fb67 	bl	800829e <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8007bd0:	4605      	mov	r5, r0
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fb63 	bl	800829e <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	4629      	mov	r1, r5
 8007bde:	4620      	mov	r0, r4
 8007be0:	f000 fb68 	bl	80082b4 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 8007be4:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bdb0      	pop	{r4, r5, r7, pc}

08007bee <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>:
      move_iterator(iterator_type __i)
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b082      	sub	sp, #8
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8007bf8:	463b      	mov	r3, r7
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 fb80 	bl	8008300 <_ZSt4moveIRPN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS7_>
 8007c00:	4603      	mov	r3, r0
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	601a      	str	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <_ZStneIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b082      	sub	sp, #8
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fb79 	bl	8008316 <_ZSteqIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>
 8007c24:	4603      	mov	r3, r0
 8007c26:	f083 0301 	eor.w	r3, r3, #1
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEppEv>:
      operator++()
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
	++_M_current;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f103 0208 	add.w	r2, r3, #8
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	601a      	str	r2, [r3, #0]
	return *this;
 8007c48:	687b      	ldr	r3, [r7, #4]
      }
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEdeEv>:
      operator*() const
 8007c56:	b480      	push	{r7}
 8007c58:	b083      	sub	sp, #12
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4618      	mov	r0, r3
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	60f8      	str	r0, [r7, #12]
 8007c76:	60b9      	str	r1, [r7, #8]
 8007c78:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fb61 	bl	8008342 <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007c80:	4603      	mov	r3, r0
 8007c82:	461a      	mov	r2, r3
 8007c84:	68b9      	ldr	r1, [r7, #8]
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f000 fb66 	bl	8008358 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JS4_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISC_JSE_EEEEEE5valueEvE4typeERS5_PSC_DpOSD_>
 8007c8c:	bf00      	nop
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>:
    __heap_select(_RandomAccessIterator __first,
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 8007ca2:	463b      	mov	r3, r7
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	68b9      	ldr	r1, [r7, #8]
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f000 fb6e 	bl	800838a <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	617b      	str	r3, [r7, #20]
 8007cb2:	1d3a      	adds	r2, r7, #4
 8007cb4:	f107 0314 	add.w	r3, r7, #20
 8007cb8:	4611      	mov	r1, r2
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 fbc4 	bl	8008448 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d014      	beq.n	8007cf0 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x5c>
	if (__comp(__i, __first))
 8007cc6:	463b      	mov	r3, r7
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	6979      	ldr	r1, [r7, #20]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 f852 	bl	8007d76 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d005      	beq.n	8007ce4 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x50>
	  std::__pop_heap(__first, __middle, __i, __comp);
 8007cd8:	463b      	mov	r3, r7
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	68b9      	ldr	r1, [r7, #8]
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 fbca 	bl	8008478 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8007ce4:	f107 0314 	add.w	r3, r7, #20
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f000 f915 	bl	8007f18 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 8007cee:	e7e0      	b.n	8007cb2 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x1e>
    }
 8007cf0:	bf00      	nop
 8007cf2:	3718      	adds	r7, #24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 8007d04:	f107 020c 	add.w	r2, r7, #12
 8007d08:	f107 0308 	add.w	r3, r7, #8
 8007d0c:	4611      	mov	r1, r2
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7ff f96f 	bl	8006ff2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	bfcc      	ite	gt
 8007d1a:	2301      	movgt	r3, #1
 8007d1c:	2300      	movle	r3, #0
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00b      	beq.n	8007d3c <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x44>
	{
	  --__last;
 8007d24:	f107 0308 	add.w	r3, r7, #8
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f000 fbf1 	bl	8008510 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	68b9      	ldr	r1, [r7, #8]
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f000 fb9f 	bl	8008478 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      while (__last - __first > 1)
 8007d3a:	e7e3      	b.n	8007d04 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xc>
	}
    }
 8007d3c:	bf00      	nop
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	00db      	lsls	r3, r3, #3
 8007d56:	425b      	negs	r3, r3
 8007d58:	4413      	add	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	f107 020c 	add.w	r2, r7, #12
 8007d60:	f107 0308 	add.w	r3, r7, #8
 8007d64:	4611      	mov	r1, r2
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe fea2 	bl	8006ab0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 8007d76:	b5b0      	push	{r4, r5, r7, lr}
 8007d78:	b084      	sub	sp, #16
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	60f8      	str	r0, [r7, #12]
 8007d7e:	60b9      	str	r1, [r7, #8]
 8007d80:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 8007d82:	68fc      	ldr	r4, [r7, #12]
 8007d84:	f107 0308 	add.w	r3, r7, #8
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f000 f8d6 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007d8e:	4605      	mov	r5, r0
 8007d90:	1d3b      	adds	r3, r7, #4
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 f8d1 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	4629      	mov	r1, r5
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f7fb fa2c 	bl	80031fc <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 8007da4:	4603      	mov	r3, r0
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bdb0      	pop	{r4, r5, r7, pc}

08007dae <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b084      	sub	sp, #16
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	60b9      	str	r1, [r7, #8]
 8007db8:	607a      	str	r2, [r7, #4]
 8007dba:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	68b9      	ldr	r1, [r7, #8]
 8007dc0:	f107 0018 	add.w	r0, r7, #24
 8007dc4:	f7ff ffd7 	bl	8007d76 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d020      	beq.n	8007e10 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x62>
	  if (__comp(__b, __c))
 8007dce:	683a      	ldr	r2, [r7, #0]
 8007dd0:	6879      	ldr	r1, [r7, #4]
 8007dd2:	f107 0018 	add.w	r0, r7, #24
 8007dd6:	f7ff ffce 	bl	8007d76 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d004      	beq.n	8007dea <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x3c>
	    std::iter_swap(__result, __b);
 8007de0:	6879      	ldr	r1, [r7, #4]
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f000 fba5 	bl	8008532 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8007de8:	e032      	b.n	8007e50 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	  else if (__comp(__a, __c))
 8007dea:	683a      	ldr	r2, [r7, #0]
 8007dec:	68b9      	ldr	r1, [r7, #8]
 8007dee:	f107 0018 	add.w	r0, r7, #24
 8007df2:	f7ff ffc0 	bl	8007d76 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d004      	beq.n	8007e06 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x58>
	    std::iter_swap(__result, __c);
 8007dfc:	6839      	ldr	r1, [r7, #0]
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 fb97 	bl	8008532 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8007e04:	e024      	b.n	8007e50 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	    std::iter_swap(__result, __a);
 8007e06:	68b9      	ldr	r1, [r7, #8]
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f000 fb92 	bl	8008532 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8007e0e:	e01f      	b.n	8007e50 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
      else if (__comp(__a, __c))
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	68b9      	ldr	r1, [r7, #8]
 8007e14:	f107 0018 	add.w	r0, r7, #24
 8007e18:	f7ff ffad 	bl	8007d76 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d004      	beq.n	8007e2c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x7e>
	std::iter_swap(__result, __a);
 8007e22:	68b9      	ldr	r1, [r7, #8]
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 fb84 	bl	8008532 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8007e2a:	e011      	b.n	8007e50 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
      else if (__comp(__b, __c))
 8007e2c:	683a      	ldr	r2, [r7, #0]
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	f107 0018 	add.w	r0, r7, #24
 8007e34:	f7ff ff9f 	bl	8007d76 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d004      	beq.n	8007e48 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x9a>
	std::iter_swap(__result, __c);
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 fb76 	bl	8008532 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8007e46:	e003      	b.n	8007e50 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	std::iter_swap(__result, __b);
 8007e48:	6879      	ldr	r1, [r7, #4]
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f000 fb71 	bl	8008532 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 8007e50:	bf00      	nop
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
 8007e64:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 8007e66:	463b      	mov	r3, r7
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	68f9      	ldr	r1, [r7, #12]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7ff ff82 	bl	8007d76 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d005      	beq.n	8007e84 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x2c>
	    ++__first;
 8007e78:	f107 030c 	add.w	r3, r7, #12
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f000 f84b 	bl	8007f18 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
	  while (__comp(__first, __pivot))
 8007e82:	e7f0      	b.n	8007e66 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0xe>
	  --__last;
 8007e84:	f107 0308 	add.w	r3, r7, #8
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f000 fb41 	bl	8008510 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  while (__comp(__pivot, __last))
 8007e8e:	463b      	mov	r3, r7
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	6879      	ldr	r1, [r7, #4]
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7ff ff6e 	bl	8007d76 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d005      	beq.n	8007eac <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x54>
	    --__last;
 8007ea0:	f107 0308 	add.w	r3, r7, #8
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 fb33 	bl	8008510 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  while (__comp(__pivot, __last))
 8007eaa:	e7f0      	b.n	8007e8e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x36>
	  if (!(__first < __last))
 8007eac:	f107 0208 	add.w	r2, r7, #8
 8007eb0:	f107 030c 	add.w	r3, r7, #12
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 fac6 	bl	8008448 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	f083 0301 	eor.w	r3, r3, #1
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x74>
	    return __first;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	e009      	b.n	8007ee0 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x88>
	  std::iter_swap(__first, __last);
 8007ecc:	68b9      	ldr	r1, [r7, #8]
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 fb2f 	bl	8008532 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
	  ++__first;
 8007ed4:	f107 030c 	add.w	r3, r7, #12
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f000 f81d 	bl	8007f18 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
	  while (__comp(__first, __pivot))
 8007ede:	e7c2      	b.n	8007e66 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0xe>
    }
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8007ee8:	b590      	push	{r4, r7, lr}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7ff f8ba 	bl	800706c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	681c      	ldr	r4, [r3, #0]
 8007efc:	6838      	ldr	r0, [r7, #0]
 8007efe:	f7ff f8b5 	bl	800706c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8007f02:	4603      	mov	r3, r0
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	429c      	cmp	r4, r3
 8007f08:	bf0c      	ite	eq
 8007f0a:	2301      	moveq	r3, #1
 8007f0c:	2300      	movne	r3, #0
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	4618      	mov	r0, r3
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd90      	pop	{r4, r7, pc}

08007f18 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f103 0208 	add.w	r2, r3, #8
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	601a      	str	r2, [r3, #0]
	return *this;
 8007f2c:	687b      	ldr	r3, [r7, #4]
      }
 8007f2e:	4618      	mov	r0, r3
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8007f3a:	b480      	push	{r7}
 8007f3c:	b083      	sub	sp, #12
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4618      	mov	r0, r3
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8007f52:	b480      	push	{r7}
 8007f54:	b083      	sub	sp, #12
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET0_T_SD_SC_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8007f68:	b590      	push	{r4, r7, lr}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f000 faf3 	bl	8008560 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	68b8      	ldr	r0, [r7, #8]
 8007f7e:	f000 faef 	bl	8008560 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>
 8007f82:	4603      	mov	r3, r0
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	4619      	mov	r1, r3
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f000 faf4 	bl	8008576 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET1_T0_SD_SC_>
 8007f8e:	4603      	mov	r3, r0
    }
 8007f90:	4618      	mov	r0, r3
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd90      	pop	{r4, r7, pc}

08007f98 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>:
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }

  template<typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
 8007f98:	b590      	push	{r4, r7, lr}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	7138      	strb	r0, [r7, #4]
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8007fa0:	1d3b      	adds	r3, r7, #4
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f000 fb08 	bl	80085b8 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	f107 030c 	add.w	r3, r7, #12
 8007fae:	4611      	mov	r1, r2
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 fb0c 	bl	80085ce <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
 8007fb6:	bf00      	nop
 8007fb8:	4620      	mov	r0, r4
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd90      	pop	{r4, r7, pc}

08007fc0 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 8007fc0:	b590      	push	{r4, r7, lr}
 8007fc2:	b087      	sub	sp, #28
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 8007fca:	1d3b      	adds	r3, r7, #4
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7ff ffb4 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7ff ffbc 	bl	8007f52 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	f107 0310 	add.w	r3, r7, #16
 8007fe0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007fe4:	e883 0003 	stmia.w	r3, {r0, r1}
      _RandomAccessIterator __next = __last;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	60fb      	str	r3, [r7, #12]
      --__next;
 8007fec:	f107 030c 	add.w	r3, r7, #12
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f000 fa8d 	bl	8008510 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
      while (__comp(__val, __next))
 8007ff6:	f107 0110 	add.w	r1, r7, #16
 8007ffa:	463b      	mov	r3, r7
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 faf3 	bl	80085ea <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEEEEbRT_T0_>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d01b      	beq.n	8008042 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_+0x82>
	  *__last = _GLIBCXX_MOVE(*__next);
 800800a:	f107 030c 	add.w	r3, r7, #12
 800800e:	4618      	mov	r0, r3
 8008010:	f7ff ff93 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008014:	4603      	mov	r3, r0
 8008016:	4618      	mov	r0, r3
 8008018:	f7ff ff9b 	bl	8007f52 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800801c:	4604      	mov	r4, r0
 800801e:	1d3b      	adds	r3, r7, #4
 8008020:	4618      	mov	r0, r3
 8008022:	f7ff ff8a 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008026:	4603      	mov	r3, r0
 8008028:	4622      	mov	r2, r4
 800802a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800802e:	e883 0003 	stmia.w	r3, {r0, r1}
	  __last = __next;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	607b      	str	r3, [r7, #4]
	  --__next;
 8008036:	f107 030c 	add.w	r3, r7, #12
 800803a:	4618      	mov	r0, r3
 800803c:	f000 fa68 	bl	8008510 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
      while (__comp(__val, __next))
 8008040:	e7d9      	b.n	8007ff6 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_+0x36>
      *__last = _GLIBCXX_MOVE(__val);
 8008042:	f107 0310 	add.w	r3, r7, #16
 8008046:	4618      	mov	r0, r3
 8008048:	f7ff ff83 	bl	8007f52 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800804c:	4604      	mov	r4, r0
 800804e:	1d3b      	adds	r3, r7, #4
 8008050:	4618      	mov	r0, r3
 8008052:	f7ff ff72 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008056:	4603      	mov	r3, r0
 8008058:	4622      	mov	r2, r4
 800805a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800805e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8008062:	bf00      	nop
 8008064:	371c      	adds	r7, #28
 8008066:	46bd      	mov	sp, r7
 8008068:	bd90      	pop	{r4, r7, pc}

0800806a <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 800806a:	b580      	push	{r7, lr}
 800806c:	b082      	sub	sp, #8
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7f9 fb18 	bl	80016a8 <_ZNKSt9_Any_data9_M_accessEv>
 8008078:	4603      	mov	r3, r0
 800807a:	4618      	mov	r0, r3
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008082:	b480      	push	{r7}
 8008084:	b083      	sub	sp, #12
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4618      	mov	r0, r3
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4618      	mov	r0, r3
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr

080080ae <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80080ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080b0:	b085      	sub	sp, #20
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	7338      	strb	r0, [r7, #12]
 80080b6:	60b9      	str	r1, [r7, #8]
 80080b8:	607a      	str	r2, [r7, #4]
 80080ba:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80080bc:	68b8      	ldr	r0, [r7, #8]
 80080be:	f7ff ffeb 	bl	8008098 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 80080c2:	4603      	mov	r3, r0
 80080c4:	681c      	ldr	r4, [r3, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7fe fbab 	bl	8006822 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80080cc:	4603      	mov	r3, r0
 80080ce:	681d      	ldr	r5, [r3, #0]
 80080d0:	6838      	ldr	r0, [r7, #0]
 80080d2:	f7fe fba6 	bl	8006822 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80080d6:	4603      	mov	r3, r0
 80080d8:	681e      	ldr	r6, [r3, #0]
 80080da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080dc:	f7fe fbac 	bl	8006838 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80080e0:	4603      	mov	r3, r0
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	461a      	mov	r2, r3
 80080e6:	4631      	mov	r1, r6
 80080e8:	4628      	mov	r0, r5
 80080ea:	47a0      	blx	r4
 80080ec:	4603      	mov	r3, r0
 80080ee:	4618      	mov	r0, r3
 80080f0:	3714      	adds	r7, #20
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080f6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80080f6:	b590      	push	{r4, r7, lr}
 80080f8:	b085      	sub	sp, #20
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	60f8      	str	r0, [r7, #12]
 80080fe:	60b9      	str	r1, [r7, #8]
 8008100:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8008102:	68b8      	ldr	r0, [r7, #8]
 8008104:	f7ff ffb1 	bl	800806a <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8008108:	4603      	mov	r3, r0
 800810a:	681c      	ldr	r4, [r3, #0]
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f7f9 fac0 	bl	8001692 <_ZNSt9_Any_data9_M_accessEv>
 8008112:	4603      	mov	r3, r0
 8008114:	4619      	mov	r1, r3
 8008116:	2004      	movs	r0, #4
 8008118:	f7f9 f95f 	bl	80013da <_ZnwjPv>
 800811c:	4603      	mov	r3, r0
 800811e:	601c      	str	r4, [r3, #0]
	}
 8008120:	bf00      	nop
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	bd90      	pop	{r4, r7, pc}

08008128 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fa6f 	bl	8008616 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 8008138:	bf00      	nop
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7f9 faad 	bl	80016a8 <_ZNKSt9_Any_data9_M_accessEv>
 800814e:	4603      	mov	r3, r0
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4618      	mov	r0, r3
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800816e:	b480      	push	{r7}
 8008170:	b083      	sub	sp, #12
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4618      	mov	r0, r3
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	7338      	strb	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
 8008190:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008192:	68b8      	ldr	r0, [r7, #8]
 8008194:	f7ff ffeb 	bl	800816e <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8008198:	4606      	mov	r6, r0
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7fe fb41 	bl	8006822 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80081a0:	4603      	mov	r3, r0
 80081a2:	681c      	ldr	r4, [r3, #0]
 80081a4:	6838      	ldr	r0, [r7, #0]
 80081a6:	f7fe fb3c 	bl	8006822 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80081aa:	4603      	mov	r3, r0
 80081ac:	681d      	ldr	r5, [r3, #0]
 80081ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081b0:	f7fe fb42 	bl	8006838 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80081b4:	4603      	mov	r3, r0
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	462a      	mov	r2, r5
 80081ba:	4621      	mov	r1, r4
 80081bc:	4630      	mov	r0, r6
 80081be:	f7fc fe0e 	bl	8004dde <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 80081c2:	4603      	mov	r3, r0
 80081c4:	4618      	mov	r0, r3
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081cc <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80081cc:	b590      	push	{r4, r7, lr}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80081d8:	68b8      	ldr	r0, [r7, #8]
 80081da:	f7ff ffb1 	bl	8008140 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 80081de:	4604      	mov	r4, r0
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f7f9 fa56 	bl	8001692 <_ZNSt9_Any_data9_M_accessEv>
 80081e6:	4603      	mov	r3, r0
 80081e8:	4619      	mov	r1, r3
 80081ea:	2004      	movs	r0, #4
 80081ec:	f7f9 f8f5 	bl	80013da <_ZnwjPv>
 80081f0:	4602      	mov	r2, r0
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	6013      	str	r3, [r2, #0]
	}
 80081f6:	bf00      	nop
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd90      	pop	{r4, r7, pc}

080081fe <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80081fe:	b580      	push	{r7, lr}
 8008200:	b082      	sub	sp, #8
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fa10 	bl	800862e <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 800820e:	bf00      	nop
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008216:	b580      	push	{r7, lr}
 8008218:	b082      	sub	sp, #8
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	3304      	adds	r3, #4
 8008222:	4618      	mov	r0, r3
 8008224:	f000 fa0f 	bl	8008646 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 8008228:	4603      	mov	r3, r0
 800822a:	4618      	mov	r0, r3
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8008232:	b580      	push	{r7, lr}
 8008234:	b082      	sub	sp, #8
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800823c:	6838      	ldr	r0, [r7, #0]
 800823e:	f7fe fe07 	bl	8006e50 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8008242:	4603      	mov	r3, r0
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	601a      	str	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4618      	mov	r0, r3
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4618      	mov	r0, r3
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800826a:	b580      	push	{r7, lr}
 800826c:	b082      	sub	sp, #8
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4618      	mov	r0, r3
 8008276:	f000 f9f1 	bl	800865c <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 800827a:	4603      	mov	r3, r0
 800827c:	4618      	mov	r0, r3
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8max_sizeERKS5_>:
      max_size(const _Alloc& __a) noexcept
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(__a, 0); }
 800828c:	2100      	movs	r1, #0
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f9ef 	bl	8008672 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE11_S_max_sizeIKS5_EEjRT_z>
 8008294:	4603      	mov	r3, r0
 8008296:	4618      	mov	r0, r3
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>:
    __niter_base(_Iterator __it)
 800829e:	b480      	push	{r7}
 80082a0:	b083      	sub	sp, #12
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4618      	mov	r0, r3
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80082b4:	b590      	push	{r4, r7, lr}
 80082b6:	b087      	sub	sp, #28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
 80082c0:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d013      	beq.n	80082f6 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 80082ce:	6978      	ldr	r0, [r7, #20]
 80082d0:	f7fe fe0b 	bl	8006eea <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 80082d4:	4604      	mov	r4, r0
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f7fe fe07 	bl	8006eea <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 80082dc:	4603      	mov	r3, r0
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	4619      	mov	r1, r3
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 f9d0 	bl	8008688 <_ZSt19__relocate_object_aIN2ei8spectral10processing11freq_peak_tES3_NS0_7EiAllocIS3_EEEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3308      	adds	r3, #8
 80082ec:	60fb      	str	r3, [r7, #12]
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	3308      	adds	r3, #8
 80082f2:	617b      	str	r3, [r7, #20]
 80082f4:	e7e7      	b.n	80082c6 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_+0x12>
      return __cur;
 80082f6:	697b      	ldr	r3, [r7, #20]
    }
 80082f8:	4618      	mov	r0, r3
 80082fa:	371c      	adds	r7, #28
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd90      	pop	{r4, r7, pc}

08008300 <_ZSt4moveIRPN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4618      	mov	r0, r3
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <_ZSteqIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 8008316:	b590      	push	{r4, r7, lr}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f9cc 	bl	80086be <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 8008326:	4604      	mov	r4, r0
 8008328:	6838      	ldr	r0, [r7, #0]
 800832a:	f000 f9c8 	bl	80086be <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 800832e:	4603      	mov	r3, r0
 8008330:	429c      	cmp	r4, r3
 8008332:	bf0c      	ite	eq
 8008334:	2301      	moveq	r3, #1
 8008336:	2300      	movne	r3, #0
 8008338:	b2db      	uxtb	r3, r3
 800833a:	4618      	mov	r0, r3
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	bd90      	pop	{r4, r7, pc}

08008342 <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008342:	b480      	push	{r7}
 8008344:	b083      	sub	sp, #12
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4618      	mov	r0, r3
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JS4_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISC_JSE_EEEEEE5valueEvE4typeERS5_PSC_DpOSD_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 8008358:	b590      	push	{r4, r7, lr}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7ff ffec 	bl	8008342 <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 800836a:	4604      	mov	r4, r0
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	4619      	mov	r1, r3
 8008370:	2008      	movs	r0, #8
 8008372:	f7f9 f832 	bl	80013da <_ZnwjPv>
 8008376:	4603      	mov	r3, r0
 8008378:	4622      	mov	r2, r4
 800837a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800837e:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 8008382:	bf00      	nop
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	bd90      	pop	{r4, r7, pc}

0800838a <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800838a:	b580      	push	{r7, lr}
 800838c:	b08a      	sub	sp, #40	; 0x28
 800838e:	af00      	add	r7, sp, #0
 8008390:	60f8      	str	r0, [r7, #12]
 8008392:	60b9      	str	r1, [r7, #8]
 8008394:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 8008396:	f107 020c 	add.w	r2, r7, #12
 800839a:	f107 0308 	add.w	r3, r7, #8
 800839e:	4611      	mov	r1, r2
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fe fe26 	bl	8006ff2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	bfd4      	ite	le
 80083ac:	2301      	movle	r3, #1
 80083ae:	2300      	movgt	r3, #0
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d142      	bne.n	800843c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb2>
      const _DistanceType __len = __last - __first;
 80083b6:	f107 020c 	add.w	r2, r7, #12
 80083ba:	f107 0308 	add.w	r3, r7, #8
 80083be:	4611      	mov	r1, r2
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7fe fe16 	bl	8006ff2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 80083c6:	6238      	str	r0, [r7, #32]
      _DistanceType __parent = (__len - 2) / 2;
 80083c8:	6a3b      	ldr	r3, [r7, #32]
 80083ca:	3b02      	subs	r3, #2
 80083cc:	0fda      	lsrs	r2, r3, #31
 80083ce:	4413      	add	r3, r2
 80083d0:	105b      	asrs	r3, r3, #1
 80083d2:	627b      	str	r3, [r7, #36]	; 0x24
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 80083d4:	f107 030c 	add.w	r3, r7, #12
 80083d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083da:	4618      	mov	r0, r3
 80083dc:	f7ff f97a 	bl	80076d4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80083e0:	4603      	mov	r3, r0
 80083e2:	61fb      	str	r3, [r7, #28]
 80083e4:	f107 031c 	add.w	r3, r7, #28
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7ff fda6 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80083ee:	4603      	mov	r3, r0
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7ff fdae 	bl	8007f52 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80083f6:	4602      	mov	r2, r0
 80083f8:	f107 0314 	add.w	r3, r7, #20
 80083fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008400:	e883 0003 	stmia.w	r3, {r0, r1}
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 8008404:	f107 0314 	add.w	r3, r7, #20
 8008408:	4618      	mov	r0, r3
 800840a:	f7ff fda2 	bl	8007f52 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800840e:	4603      	mov	r3, r0
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	ed93 7a00 	vldr	s14, [r3]
 8008416:	edd3 7a01 	vldr	s15, [r3, #4]
 800841a:	7813      	ldrb	r3, [r2, #0]
 800841c:	eeb0 0a47 	vmov.f32	s0, s14
 8008420:	eef0 0a67 	vmov.f32	s1, s15
 8008424:	6a3a      	ldr	r2, [r7, #32]
 8008426:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 f954 	bl	80086d6 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>
	  if (__parent == 0)
 800842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008430:	2b00      	cmp	r3, #0
 8008432:	d005      	beq.n	8008440 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb6>
	  __parent--;
 8008434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008436:	3b01      	subs	r3, #1
 8008438:	627b      	str	r3, [r7, #36]	; 0x24
      while (true)
 800843a:	e7cb      	b.n	80083d4 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x4a>
	return;
 800843c:	bf00      	nop
 800843e:	e000      	b.n	8008442 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb8>
	    return;
 8008440:	bf00      	nop
    }
 8008442:	3728      	adds	r7, #40	; 0x28
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008448:	b590      	push	{r4, r7, lr}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f7fe fe0a 	bl	800706c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8008458:	4603      	mov	r3, r0
 800845a:	681c      	ldr	r4, [r3, #0]
 800845c:	6838      	ldr	r0, [r7, #0]
 800845e:	f7fe fe05 	bl	800706c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 8008462:	4603      	mov	r3, r0
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	429c      	cmp	r4, r3
 8008468:	bf34      	ite	cc
 800846a:	2301      	movcc	r3, #1
 800846c:	2300      	movcs	r3, #0
 800846e:	b2db      	uxtb	r3, r3
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	bd90      	pop	{r4, r7, pc}

08008478 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8008478:	b590      	push	{r4, r7, lr}
 800847a:	b087      	sub	sp, #28
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
 8008484:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8008486:	1d3b      	adds	r3, r7, #4
 8008488:	4618      	mov	r0, r3
 800848a:	f7ff fd56 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800848e:	4603      	mov	r3, r0
 8008490:	4618      	mov	r0, r3
 8008492:	f7ff fd5e 	bl	8007f52 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008496:	4602      	mov	r2, r0
 8008498:	f107 0310 	add.w	r3, r7, #16
 800849c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80084a0:	e883 0003 	stmia.w	r3, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 80084a4:	f107 030c 	add.w	r3, r7, #12
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7ff fd46 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80084ae:	4603      	mov	r3, r0
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7ff fd4e 	bl	8007f52 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80084b6:	4604      	mov	r4, r0
 80084b8:	1d3b      	adds	r3, r7, #4
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7ff fd3d 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80084c0:	4603      	mov	r3, r0
 80084c2:	4622      	mov	r2, r4
 80084c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80084c8:	e883 0003 	stmia.w	r3, {r0, r1}
			 _DistanceType(__last - __first),
 80084cc:	f107 020c 	add.w	r2, r7, #12
 80084d0:	f107 0308 	add.w	r3, r7, #8
 80084d4:	4611      	mov	r1, r2
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fe fd8b 	bl	8006ff2 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 80084dc:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 80084de:	f107 0310 	add.w	r3, r7, #16
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7ff fd35 	bl	8007f52 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80084e8:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	ed93 7a00 	vldr	s14, [r3]
 80084f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80084f4:	7813      	ldrb	r3, [r2, #0]
 80084f6:	eeb0 0a47 	vmov.f32	s0, s14
 80084fa:	eef0 0a67 	vmov.f32	s1, s15
 80084fe:	4622      	mov	r2, r4
 8008500:	2100      	movs	r1, #0
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f000 f8e7 	bl	80086d6 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>
    }
 8008508:	bf00      	nop
 800850a:	371c      	adds	r7, #28
 800850c:	46bd      	mov	sp, r7
 800850e:	bd90      	pop	{r4, r7, pc}

08008510 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
	--_M_current;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f1a3 0208 	sub.w	r2, r3, #8
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	601a      	str	r2, [r3, #0]
	return *this;
 8008524:	687b      	ldr	r3, [r7, #4]
      }
 8008526:	4618      	mov	r0, r3
 8008528:	370c      	adds	r7, #12
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8008532:	b590      	push	{r4, r7, lr}
 8008534:	b083      	sub	sp, #12
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
 800853a:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800853c:	1d3b      	adds	r3, r7, #4
 800853e:	4618      	mov	r0, r3
 8008540:	f7ff fcfb 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008544:	4604      	mov	r4, r0
 8008546:	463b      	mov	r3, r7
 8008548:	4618      	mov	r0, r3
 800854a:	f7ff fcf6 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800854e:	4603      	mov	r3, r0
 8008550:	4619      	mov	r1, r3
 8008552:	4620      	mov	r0, r4
 8008554:	f000 f982 	bl	800885c <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
    }
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	bd90      	pop	{r4, r7, pc}

08008560 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4618      	mov	r0, r3
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET1_T0_SD_SC_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8008576:	b5b0      	push	{r4, r5, r7, lr}
 8008578:	b084      	sub	sp, #16
 800857a:	af00      	add	r7, sp, #0
 800857c:	60f8      	str	r0, [r7, #12]
 800857e:	60b9      	str	r1, [r7, #8]
 8008580:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f000 f991 	bl	80088aa <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 8008588:	4604      	mov	r4, r0
 800858a:	68b8      	ldr	r0, [r7, #8]
 800858c:	f000 f98d 	bl	80088aa <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 8008590:	4605      	mov	r5, r0
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f989 	bl	80088aa <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 8008598:	4603      	mov	r3, r0
 800859a:	461a      	mov	r2, r3
 800859c:	4629      	mov	r1, r5
 800859e:	4620      	mov	r0, r4
 80085a0:	f000 f991 	bl	80088c6 <_ZSt23__copy_move_backward_a1ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 80085a4:	4603      	mov	r3, r0
 80085a6:	4619      	mov	r1, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 f99c 	bl	80088e6 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEES6_ET_SC_T0_>
 80085ae:	4603      	mov	r3, r0
    }
 80085b0:	4618      	mov	r0, r3
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bdb0      	pop	{r4, r5, r7, pc}

080085b8 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4618      	mov	r0, r3
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b082      	sub	sp, #8
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fe fd6a 	bl	80070b4 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEEEEbRT_T0_>:
	operator()(_Value& __val, _Iterator __it)
 80085ea:	b590      	push	{r4, r7, lr}
 80085ec:	b085      	sub	sp, #20
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	60b9      	str	r1, [r7, #8]
 80085f4:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(__val, *__it)); }
 80085f6:	68fc      	ldr	r4, [r7, #12]
 80085f8:	1d3b      	adds	r3, r7, #4
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7ff fc9d 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008600:	4603      	mov	r3, r0
 8008602:	461a      	mov	r2, r3
 8008604:	68b9      	ldr	r1, [r7, #8]
 8008606:	4620      	mov	r0, r4
 8008608:	f7fa fdf8 	bl	80031fc <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 800860c:	4603      	mov	r3, r0
 800860e:	4618      	mov	r0, r3
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	bd90      	pop	{r4, r7, pc}

08008616 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 8008616:	b580      	push	{r7, lr}
 8008618:	b082      	sub	sp, #8
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7f9 f837 	bl	8001692 <_ZNSt9_Any_data9_M_accessEv>
 8008624:	4603      	mov	r3, r0
 8008626:	4618      	mov	r0, r3
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 800862e:	b580      	push	{r7, lr}
 8008630:	b082      	sub	sp, #8
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f7f9 f82b 	bl	8001692 <_ZNSt9_Any_data9_M_accessEv>
 800863c:	4603      	mov	r3, r0
 800863e:	4618      	mov	r0, r3
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8008646:	b480      	push	{r7}
 8008648:	b083      	sub	sp, #12
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4618      	mov	r0, r3
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4618      	mov	r0, r3
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE11_S_max_sizeIKS5_EEjRT_z>:
	_S_max_size(_Alloc2&, ...)
 8008672:	b40f      	push	{r0, r1, r2, r3}
 8008674:	b480      	push	{r7}
 8008676:	af00      	add	r7, sp, #0
	    / sizeof(value_type);
 8008678:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
	}
 800867c:	4618      	mov	r0, r3
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	b004      	add	sp, #16
 8008686:	4770      	bx	lr

08008688 <_ZSt19__relocate_object_aIN2ei8spectral10processing11freq_peak_tES3_NS0_7EiAllocIS3_EEEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8008694:	68b8      	ldr	r0, [r7, #8]
 8008696:	f7ff fc5c 	bl	8007f52 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800869a:	4603      	mov	r3, r0
 800869c:	461a      	mov	r2, r3
 800869e:	68f9      	ldr	r1, [r7, #12]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7ff fae4 	bl	8007c6e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 80086a6:	68b8      	ldr	r0, [r7, #8]
 80086a8:	f7fe fc1f 	bl	8006eea <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 80086ac:	4603      	mov	r3, r0
 80086ae:	4619      	mov	r1, r3
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7fe fc25 	bl	8006f00 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>
    }
 80086b6:	bf00      	nop
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>:
      base() const
 80086be:	b480      	push	{r7}
 80086c0:	b083      	sub	sp, #12
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4618      	mov	r0, r3
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 80086d6:	b590      	push	{r4, r7, lr}
 80086d8:	b08f      	sub	sp, #60	; 0x3c
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6178      	str	r0, [r7, #20]
 80086de:	6139      	str	r1, [r7, #16]
 80086e0:	60fa      	str	r2, [r7, #12]
 80086e2:	eeb0 7a40 	vmov.f32	s14, s0
 80086e6:	eef0 7a60 	vmov.f32	s15, s1
 80086ea:	703b      	strb	r3, [r7, #0]
 80086ec:	ed87 7a01 	vstr	s14, [r7, #4]
 80086f0:	edc7 7a02 	vstr	s15, [r7, #8]
      const _Distance __topIndex = __holeIndex;
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	3b01      	subs	r3, #1
 8008700:	0fda      	lsrs	r2, r3, #31
 8008702:	4413      	add	r3, r2
 8008704:	105b      	asrs	r3, r3, #1
 8008706:	461a      	mov	r2, r3
 8008708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870a:	4293      	cmp	r3, r2
 800870c:	da46      	bge.n	800879c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0xc6>
	  __secondChild = 2 * (__secondChild + 1);
 800870e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008710:	3301      	adds	r3, #1
 8008712:	005b      	lsls	r3, r3, #1
 8008714:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 8008716:	f107 0314 	add.w	r3, r7, #20
 800871a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800871c:	4618      	mov	r0, r3
 800871e:	f7fe ffd9 	bl	80076d4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008722:	4604      	mov	r4, r0
 8008724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008726:	1e5a      	subs	r2, r3, #1
 8008728:	f107 0314 	add.w	r3, r7, #20
 800872c:	4611      	mov	r1, r2
 800872e:	4618      	mov	r0, r3
 8008730:	f7fe ffd0 	bl	80076d4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008734:	4602      	mov	r2, r0
 8008736:	463b      	mov	r3, r7
 8008738:	4621      	mov	r1, r4
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff fb1b 	bl	8007d76 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x76>
	    __secondChild--;
 8008746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008748:	3b01      	subs	r3, #1
 800874a:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 800874c:	f107 0314 	add.w	r3, r7, #20
 8008750:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008752:	4618      	mov	r0, r3
 8008754:	f7fe ffbe 	bl	80076d4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008758:	4603      	mov	r3, r0
 800875a:	623b      	str	r3, [r7, #32]
 800875c:	f107 0320 	add.w	r3, r7, #32
 8008760:	4618      	mov	r0, r3
 8008762:	f7ff fbea 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008766:	4603      	mov	r3, r0
 8008768:	4618      	mov	r0, r3
 800876a:	f7ff fbf2 	bl	8007f52 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800876e:	4604      	mov	r4, r0
 8008770:	f107 0314 	add.w	r3, r7, #20
 8008774:	6939      	ldr	r1, [r7, #16]
 8008776:	4618      	mov	r0, r3
 8008778:	f7fe ffac 	bl	80076d4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800877c:	4603      	mov	r3, r0
 800877e:	627b      	str	r3, [r7, #36]	; 0x24
 8008780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008784:	4618      	mov	r0, r3
 8008786:	f7ff fbd8 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800878a:	4603      	mov	r3, r0
 800878c:	4622      	mov	r2, r4
 800878e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008792:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild;
 8008796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008798:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 800879a:	e7af      	b.n	80086fc <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x26>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d136      	bne.n	8008814 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x13e>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	3b02      	subs	r3, #2
 80087aa:	0fda      	lsrs	r2, r3, #31
 80087ac:	4413      	add	r3, r2
 80087ae:	105b      	asrs	r3, r3, #1
 80087b0:	461a      	mov	r2, r3
 80087b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d12d      	bne.n	8008814 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x13e>
	  __secondChild = 2 * (__secondChild + 1);
 80087b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ba:	3301      	adds	r3, #1
 80087bc:	005b      	lsls	r3, r3, #1
 80087be:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 80087c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c2:	1e5a      	subs	r2, r3, #1
 80087c4:	f107 0314 	add.w	r3, r7, #20
 80087c8:	4611      	mov	r1, r2
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fe ff82 	bl	80076d4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80087d0:	4603      	mov	r3, r0
 80087d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80087d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80087d8:	4618      	mov	r0, r3
 80087da:	f7ff fbae 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80087de:	4603      	mov	r3, r0
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7ff fbb6 	bl	8007f52 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80087e6:	4604      	mov	r4, r0
 80087e8:	f107 0314 	add.w	r3, r7, #20
 80087ec:	6939      	ldr	r1, [r7, #16]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7fe ff70 	bl	80076d4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80087f4:	4603      	mov	r3, r0
 80087f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7ff fb9c 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008802:	4603      	mov	r3, r0
 8008804:	4622      	mov	r2, r4
 8008806:	e892 0003 	ldmia.w	r2, {r0, r1}
 800880a:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild - 1;
 800880e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008810:	3b01      	subs	r3, #1
 8008812:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 8008814:	463b      	mov	r3, r7
 8008816:	4618      	mov	r0, r3
 8008818:	f7ff fece 	bl	80085b8 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 800881c:	4602      	mov	r2, r0
 800881e:	f107 031c 	add.w	r3, r7, #28
 8008822:	4611      	mov	r1, r2
 8008824:	4618      	mov	r0, r3
 8008826:	f000 f875 	bl	8008914 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
		       _GLIBCXX_MOVE(__value), __cmp);
 800882a:	1d3b      	adds	r3, r7, #4
 800882c:	4618      	mov	r0, r3
 800882e:	f7ff fb90 	bl	8007f52 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008832:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8008834:	f107 021c 	add.w	r2, r7, #28
 8008838:	ed93 7a00 	vldr	s14, [r3]
 800883c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008840:	4613      	mov	r3, r2
 8008842:	eeb0 0a47 	vmov.f32	s0, s14
 8008846:	eef0 0a67 	vmov.f32	s1, s15
 800884a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800884c:	6939      	ldr	r1, [r7, #16]
 800884e:	6978      	ldr	r0, [r7, #20]
 8008850:	f000 f86e 	bl	8008930 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_>
    }
 8008854:	bf00      	nop
 8008856:	373c      	adds	r7, #60	; 0x3c
 8008858:	46bd      	mov	sp, r7
 800885a:	bd90      	pop	{r4, r7, pc}

0800885c <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7ff fb73 	bl	8007f52 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800886c:	4602      	mov	r2, r0
 800886e:	f107 0308 	add.w	r3, r7, #8
 8008872:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008876:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800887a:	6838      	ldr	r0, [r7, #0]
 800887c:	f7ff fb69 	bl	8007f52 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008880:	4602      	mov	r2, r0
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008888:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800888c:	f107 0308 	add.w	r3, r7, #8
 8008890:	4618      	mov	r0, r3
 8008892:	f7ff fb5e 	bl	8007f52 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8008896:	4602      	mov	r2, r0
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800889e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80088a2:	bf00      	nop
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b082      	sub	sp, #8
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 80088b2:	1d3b      	adds	r3, r7, #4
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fe fbd9 	bl	800706c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 80088ba:	4603      	mov	r3, r0
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <_ZSt23__copy_move_backward_a1ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b084      	sub	sp, #16
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	60f8      	str	r0, [r7, #12]
 80088ce:	60b9      	str	r1, [r7, #8]
 80088d0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	68b9      	ldr	r1, [r7, #8]
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 f8a1 	bl	8008a1e <_ZSt23__copy_move_backward_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 80088dc:	4603      	mov	r3, r0
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEES6_ET_SC_T0_>:
    __niter_wrap(_From __from, _To __res)
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b082      	sub	sp, #8
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7ff ffda 	bl	80088aa <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 80088f6:	4602      	mov	r2, r0
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	1a9b      	subs	r3, r3, r2
 80088fc:	10db      	asrs	r3, r3, #3
 80088fe:	461a      	mov	r2, r3
 8008900:	1d3b      	adds	r3, r7, #4
 8008902:	4611      	mov	r1, r2
 8008904:	4618      	mov	r0, r3
 8008906:	f7fe fee5 	bl	80076d4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800890a:	4603      	mov	r3, r0
 800890c:	4618      	mov	r0, r3
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	4618      	mov	r0, r3
 8008922:	f7fe fbc7 	bl	80070b4 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4618      	mov	r0, r3
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8008930:	b590      	push	{r4, r7, lr}
 8008932:	b08b      	sub	sp, #44	; 0x2c
 8008934:	af00      	add	r7, sp, #0
 8008936:	6178      	str	r0, [r7, #20]
 8008938:	6139      	str	r1, [r7, #16]
 800893a:	60fa      	str	r2, [r7, #12]
 800893c:	eeb0 7a40 	vmov.f32	s14, s0
 8008940:	eef0 7a60 	vmov.f32	s15, s1
 8008944:	603b      	str	r3, [r7, #0]
 8008946:	ed87 7a01 	vstr	s14, [r7, #4]
 800894a:	edc7 7a02 	vstr	s15, [r7, #8]
      _Distance __parent = (__holeIndex - 1) / 2;
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	3b01      	subs	r3, #1
 8008952:	0fda      	lsrs	r2, r3, #31
 8008954:	4413      	add	r3, r2
 8008956:	105b      	asrs	r3, r3, #1
 8008958:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	429a      	cmp	r2, r3
 8008960:	dd10      	ble.n	8008984 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x54>
 8008962:	f107 0314 	add.w	r3, r7, #20
 8008966:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008968:	4618      	mov	r0, r3
 800896a:	f7fe feb3 	bl	80076d4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800896e:	4601      	mov	r1, r0
 8008970:	1d3b      	adds	r3, r7, #4
 8008972:	461a      	mov	r2, r3
 8008974:	6838      	ldr	r0, [r7, #0]
 8008976:	f000 f862 	bl	8008a3e <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEES7_EEbT_RT0_>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x54>
 8008980:	2301      	movs	r3, #1
 8008982:	e000      	b.n	8008986 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x56>
 8008984:	2300      	movs	r3, #0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d02d      	beq.n	80089e6 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0xb6>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800898a:	f107 0314 	add.w	r3, r7, #20
 800898e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008990:	4618      	mov	r0, r3
 8008992:	f7fe fe9f 	bl	80076d4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8008996:	4603      	mov	r3, r0
 8008998:	61bb      	str	r3, [r7, #24]
 800899a:	f107 0318 	add.w	r3, r7, #24
 800899e:	4618      	mov	r0, r3
 80089a0:	f7ff facb 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80089a4:	4603      	mov	r3, r0
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7ff fad3 	bl	8007f52 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80089ac:	4604      	mov	r4, r0
 80089ae:	f107 0314 	add.w	r3, r7, #20
 80089b2:	6939      	ldr	r1, [r7, #16]
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7fe fe8d 	bl	80076d4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80089ba:	4603      	mov	r3, r0
 80089bc:	61fb      	str	r3, [r7, #28]
 80089be:	f107 031c 	add.w	r3, r7, #28
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7ff fab9 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80089c8:	4603      	mov	r3, r0
 80089ca:	4622      	mov	r2, r4
 80089cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80089d0:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __parent;
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	3b01      	subs	r3, #1
 80089dc:	0fda      	lsrs	r2, r3, #31
 80089de:	4413      	add	r3, r2
 80089e0:	105b      	asrs	r3, r3, #1
 80089e2:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80089e4:	e7b9      	b.n	800895a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x2a>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 80089e6:	1d3b      	adds	r3, r7, #4
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7ff fab2 	bl	8007f52 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80089ee:	4604      	mov	r4, r0
 80089f0:	f107 0314 	add.w	r3, r7, #20
 80089f4:	6939      	ldr	r1, [r7, #16]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fe fe6c 	bl	80076d4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80089fc:	4603      	mov	r3, r0
 80089fe:	623b      	str	r3, [r7, #32]
 8008a00:	f107 0320 	add.w	r3, r7, #32
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7ff fa98 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	4622      	mov	r2, r4
 8008a0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008a12:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8008a16:	bf00      	nop
 8008a18:	372c      	adds	r7, #44	; 0x2c
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd90      	pop	{r4, r7, pc}

08008a1e <_ZSt23__copy_move_backward_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	60f8      	str	r0, [r7, #12]
 8008a26:	60b9      	str	r1, [r7, #8]
 8008a28:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	68b9      	ldr	r1, [r7, #8]
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f000 f81c 	bl	8008a6c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>
 8008a34:	4603      	mov	r3, r0
    }
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEES7_EEbT_RT0_>:
	operator()(_Iterator __it, _Value& __val)
 8008a3e:	b590      	push	{r4, r7, lr}
 8008a40:	b085      	sub	sp, #20
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 8008a4a:	68fc      	ldr	r4, [r7, #12]
 8008a4c:	f107 0308 	add.w	r3, r7, #8
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7ff fa72 	bl	8007f3a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8008a56:	4603      	mov	r3, r0
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f7fa fbcd 	bl	80031fc <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 8008a62:	4603      	mov	r3, r0
 8008a64:	4618      	mov	r0, r3
 8008a66:	3714      	adds	r7, #20
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd90      	pop	{r4, r7, pc}

08008a6c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	10db      	asrs	r3, r3, #3
 8008a80:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00a      	beq.n	8008a9e <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	00db      	lsls	r3, r3, #3
 8008a8c:	425b      	negs	r3, r3
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	18d0      	adds	r0, r2, r3
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	00db      	lsls	r3, r3, #3
 8008a96:	461a      	mov	r2, r3
 8008a98:	68f9      	ldr	r1, [r7, #12]
 8008a9a:	f019 ffbf 	bl	8022a1c <memmove>
	  return __result - _Num;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	00db      	lsls	r3, r3, #3
 8008aa2:	425b      	negs	r3, r3
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	4413      	add	r3, r2
	}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3718      	adds	r7, #24
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	607b      	str	r3, [r7, #4]
 8008aba:	4b10      	ldr	r3, [pc, #64]	; (8008afc <HAL_MspInit+0x4c>)
 8008abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008abe:	4a0f      	ldr	r2, [pc, #60]	; (8008afc <HAL_MspInit+0x4c>)
 8008ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8008ac6:	4b0d      	ldr	r3, [pc, #52]	; (8008afc <HAL_MspInit+0x4c>)
 8008ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ace:	607b      	str	r3, [r7, #4]
 8008ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	603b      	str	r3, [r7, #0]
 8008ad6:	4b09      	ldr	r3, [pc, #36]	; (8008afc <HAL_MspInit+0x4c>)
 8008ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ada:	4a08      	ldr	r2, [pc, #32]	; (8008afc <HAL_MspInit+0x4c>)
 8008adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8008ae2:	4b06      	ldr	r3, [pc, #24]	; (8008afc <HAL_MspInit+0x4c>)
 8008ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aea:	603b      	str	r3, [r7, #0]
 8008aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008aee:	bf00      	nop
 8008af0:	370c      	adds	r7, #12
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	40023800 	.word	0x40023800

08008b00 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a0b      	ldr	r2, [pc, #44]	; (8008b3c <HAL_CRC_MspInit+0x3c>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d10d      	bne.n	8008b2e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008b12:	2300      	movs	r3, #0
 8008b14:	60fb      	str	r3, [r7, #12]
 8008b16:	4b0a      	ldr	r3, [pc, #40]	; (8008b40 <HAL_CRC_MspInit+0x40>)
 8008b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1a:	4a09      	ldr	r2, [pc, #36]	; (8008b40 <HAL_CRC_MspInit+0x40>)
 8008b1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b20:	6313      	str	r3, [r2, #48]	; 0x30
 8008b22:	4b07      	ldr	r3, [pc, #28]	; (8008b40 <HAL_CRC_MspInit+0x40>)
 8008b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b2a:	60fb      	str	r3, [r7, #12]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8008b2e:	bf00      	nop
 8008b30:	3714      	adds	r7, #20
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	40023000 	.word	0x40023000
 8008b40:	40023800 	.word	0x40023800

08008b44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b08a      	sub	sp, #40	; 0x28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b4c:	f107 0314 	add.w	r3, r7, #20
 8008b50:	2200      	movs	r2, #0
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	605a      	str	r2, [r3, #4]
 8008b56:	609a      	str	r2, [r3, #8]
 8008b58:	60da      	str	r2, [r3, #12]
 8008b5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a19      	ldr	r2, [pc, #100]	; (8008bc8 <HAL_SPI_MspInit+0x84>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d12b      	bne.n	8008bbe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008b66:	2300      	movs	r3, #0
 8008b68:	613b      	str	r3, [r7, #16]
 8008b6a:	4b18      	ldr	r3, [pc, #96]	; (8008bcc <HAL_SPI_MspInit+0x88>)
 8008b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b6e:	4a17      	ldr	r2, [pc, #92]	; (8008bcc <HAL_SPI_MspInit+0x88>)
 8008b70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b74:	6453      	str	r3, [r2, #68]	; 0x44
 8008b76:	4b15      	ldr	r3, [pc, #84]	; (8008bcc <HAL_SPI_MspInit+0x88>)
 8008b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b7e:	613b      	str	r3, [r7, #16]
 8008b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b82:	2300      	movs	r3, #0
 8008b84:	60fb      	str	r3, [r7, #12]
 8008b86:	4b11      	ldr	r3, [pc, #68]	; (8008bcc <HAL_SPI_MspInit+0x88>)
 8008b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8a:	4a10      	ldr	r2, [pc, #64]	; (8008bcc <HAL_SPI_MspInit+0x88>)
 8008b8c:	f043 0301 	orr.w	r3, r3, #1
 8008b90:	6313      	str	r3, [r2, #48]	; 0x30
 8008b92:	4b0e      	ldr	r3, [pc, #56]	; (8008bcc <HAL_SPI_MspInit+0x88>)
 8008b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	60fb      	str	r3, [r7, #12]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008b9e:	23e0      	movs	r3, #224	; 0xe0
 8008ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ba2:	2302      	movs	r3, #2
 8008ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008baa:	2303      	movs	r3, #3
 8008bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008bae:	2305      	movs	r3, #5
 8008bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bb2:	f107 0314 	add.w	r3, r7, #20
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	4805      	ldr	r0, [pc, #20]	; (8008bd0 <HAL_SPI_MspInit+0x8c>)
 8008bba:	f000 fb05 	bl	80091c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008bbe:	bf00      	nop
 8008bc0:	3728      	adds	r7, #40	; 0x28
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	40013000 	.word	0x40013000
 8008bcc:	40023800 	.word	0x40023800
 8008bd0:	40020000 	.word	0x40020000

08008bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008bd8:	e7fe      	b.n	8008bd8 <NMI_Handler+0x4>

08008bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008bda:	b480      	push	{r7}
 8008bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008bde:	e7fe      	b.n	8008bde <HardFault_Handler+0x4>

08008be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008be0:	b480      	push	{r7}
 8008be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008be4:	e7fe      	b.n	8008be4 <MemManage_Handler+0x4>

08008be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008be6:	b480      	push	{r7}
 8008be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008bea:	e7fe      	b.n	8008bea <BusFault_Handler+0x4>

08008bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008bec:	b480      	push	{r7}
 8008bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008bf0:	e7fe      	b.n	8008bf0 <UsageFault_Handler+0x4>

08008bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008bf6:	bf00      	nop
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008c00:	b480      	push	{r7}
 8008c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008c04:	bf00      	nop
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008c12:	bf00      	nop
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008c20:	f000 f960 	bl	8008ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008c24:	bf00      	nop
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008c2c:	4802      	ldr	r0, [pc, #8]	; (8008c38 <OTG_FS_IRQHandler+0x10>)
 8008c2e:	f000 fdd0 	bl	80097d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008c32:	bf00      	nop
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	20002014 	.word	0x20002014

08008c3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	af00      	add	r7, sp, #0
	return 1;
 8008c40:	2301      	movs	r3, #1
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <_kill>:

int _kill(int pid, int sig)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008c56:	f019 fe83 	bl	8022960 <__errno>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2216      	movs	r2, #22
 8008c5e:	601a      	str	r2, [r3, #0]
	return -1;
 8008c60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <_exit>:

void _exit (int status)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008c74:	f04f 31ff 	mov.w	r1, #4294967295
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7ff ffe7 	bl	8008c4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8008c7e:	e7fe      	b.n	8008c7e <_exit+0x12>

08008c80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	617b      	str	r3, [r7, #20]
 8008c90:	e00a      	b.n	8008ca8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008c92:	f3af 8000 	nop.w
 8008c96:	4601      	mov	r1, r0
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	1c5a      	adds	r2, r3, #1
 8008c9c:	60ba      	str	r2, [r7, #8]
 8008c9e:	b2ca      	uxtb	r2, r1
 8008ca0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	617b      	str	r3, [r7, #20]
 8008ca8:	697a      	ldr	r2, [r7, #20]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	dbf0      	blt.n	8008c92 <_read+0x12>
	}

return len;
 8008cb0:	687b      	ldr	r3, [r7, #4]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3718      	adds	r7, #24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b086      	sub	sp, #24
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	60f8      	str	r0, [r7, #12]
 8008cc2:	60b9      	str	r1, [r7, #8]
 8008cc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	617b      	str	r3, [r7, #20]
 8008cca:	e009      	b.n	8008ce0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	1c5a      	adds	r2, r3, #1
 8008cd0:	60ba      	str	r2, [r7, #8]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	617b      	str	r3, [r7, #20]
 8008ce0:	697a      	ldr	r2, [r7, #20]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	dbf1      	blt.n	8008ccc <_write+0x12>
	}
	return len;
 8008ce8:	687b      	ldr	r3, [r7, #4]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3718      	adds	r7, #24
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <_close>:

int _close(int file)
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b083      	sub	sp, #12
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
	return -1;
 8008cfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b083      	sub	sp, #12
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008d1a:	605a      	str	r2, [r3, #4]
	return 0;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <_isatty>:

int _isatty(int file)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b083      	sub	sp, #12
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
	return 1;
 8008d32:	2301      	movs	r3, #1
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
	return 0;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3714      	adds	r7, #20
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
	...

08008d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008d64:	4a14      	ldr	r2, [pc, #80]	; (8008db8 <_sbrk+0x5c>)
 8008d66:	4b15      	ldr	r3, [pc, #84]	; (8008dbc <_sbrk+0x60>)
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008d70:	4b13      	ldr	r3, [pc, #76]	; (8008dc0 <_sbrk+0x64>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d102      	bne.n	8008d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008d78:	4b11      	ldr	r3, [pc, #68]	; (8008dc0 <_sbrk+0x64>)
 8008d7a:	4a12      	ldr	r2, [pc, #72]	; (8008dc4 <_sbrk+0x68>)
 8008d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008d7e:	4b10      	ldr	r3, [pc, #64]	; (8008dc0 <_sbrk+0x64>)
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4413      	add	r3, r2
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d207      	bcs.n	8008d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008d8c:	f019 fde8 	bl	8022960 <__errno>
 8008d90:	4603      	mov	r3, r0
 8008d92:	220c      	movs	r2, #12
 8008d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008d96:	f04f 33ff 	mov.w	r3, #4294967295
 8008d9a:	e009      	b.n	8008db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008d9c:	4b08      	ldr	r3, [pc, #32]	; (8008dc0 <_sbrk+0x64>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008da2:	4b07      	ldr	r3, [pc, #28]	; (8008dc0 <_sbrk+0x64>)
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4413      	add	r3, r2
 8008daa:	4a05      	ldr	r2, [pc, #20]	; (8008dc0 <_sbrk+0x64>)
 8008dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008dae:	68fb      	ldr	r3, [r7, #12]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3718      	adds	r7, #24
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	20020000 	.word	0x20020000
 8008dbc:	00000400 	.word	0x00000400
 8008dc0:	20000644 	.word	0x20000644
 8008dc4:	20002758 	.word	0x20002758

08008dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008dcc:	4b06      	ldr	r3, [pc, #24]	; (8008de8 <SystemInit+0x20>)
 8008dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dd2:	4a05      	ldr	r2, [pc, #20]	; (8008de8 <SystemInit+0x20>)
 8008dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008ddc:	bf00      	nop
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	e000ed00 	.word	0xe000ed00

08008dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008e24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008df0:	480d      	ldr	r0, [pc, #52]	; (8008e28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008df2:	490e      	ldr	r1, [pc, #56]	; (8008e2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008df4:	4a0e      	ldr	r2, [pc, #56]	; (8008e30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008df8:	e002      	b.n	8008e00 <LoopCopyDataInit>

08008dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008dfe:	3304      	adds	r3, #4

08008e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008e04:	d3f9      	bcc.n	8008dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008e06:	4a0b      	ldr	r2, [pc, #44]	; (8008e34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008e08:	4c0b      	ldr	r4, [pc, #44]	; (8008e38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008e0c:	e001      	b.n	8008e12 <LoopFillZerobss>

08008e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008e10:	3204      	adds	r2, #4

08008e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008e14:	d3fb      	bcc.n	8008e0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008e16:	f7ff ffd7 	bl	8008dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008e1a:	f019 fdb9 	bl	8022990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008e1e:	f7fc ffa5 	bl	8005d6c <main>
  bx  lr    
 8008e22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008e24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008e2c:	2000045c 	.word	0x2000045c
  ldr r2, =_sidata
 8008e30:	080297d8 	.word	0x080297d8
  ldr r2, =_sbss
 8008e34:	2000045c 	.word	0x2000045c
  ldr r4, =_ebss
 8008e38:	20002754 	.word	0x20002754

08008e3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008e3c:	e7fe      	b.n	8008e3c <ADC_IRQHandler>
	...

08008e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008e44:	4b0e      	ldr	r3, [pc, #56]	; (8008e80 <HAL_Init+0x40>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a0d      	ldr	r2, [pc, #52]	; (8008e80 <HAL_Init+0x40>)
 8008e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008e50:	4b0b      	ldr	r3, [pc, #44]	; (8008e80 <HAL_Init+0x40>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a0a      	ldr	r2, [pc, #40]	; (8008e80 <HAL_Init+0x40>)
 8008e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008e5c:	4b08      	ldr	r3, [pc, #32]	; (8008e80 <HAL_Init+0x40>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a07      	ldr	r2, [pc, #28]	; (8008e80 <HAL_Init+0x40>)
 8008e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008e68:	2003      	movs	r0, #3
 8008e6a:	f000 f94f 	bl	800910c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008e6e:	200f      	movs	r0, #15
 8008e70:	f000 f808 	bl	8008e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008e74:	f7ff fe1c 	bl	8008ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	40023c00 	.word	0x40023c00

08008e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008e8c:	4b12      	ldr	r3, [pc, #72]	; (8008ed8 <HAL_InitTick+0x54>)
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	4b12      	ldr	r3, [pc, #72]	; (8008edc <HAL_InitTick+0x58>)
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	4619      	mov	r1, r3
 8008e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f000 f967 	bl	8009176 <HAL_SYSTICK_Config>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e00e      	b.n	8008ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b0f      	cmp	r3, #15
 8008eb6:	d80a      	bhi.n	8008ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008eb8:	2200      	movs	r2, #0
 8008eba:	6879      	ldr	r1, [r7, #4]
 8008ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec0:	f000 f92f 	bl	8009122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008ec4:	4a06      	ldr	r2, [pc, #24]	; (8008ee0 <HAL_InitTick+0x5c>)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	e000      	b.n	8008ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	20000074 	.word	0x20000074
 8008edc:	2000007c 	.word	0x2000007c
 8008ee0:	20000078 	.word	0x20000078

08008ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008ee8:	4b06      	ldr	r3, [pc, #24]	; (8008f04 <HAL_IncTick+0x20>)
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	461a      	mov	r2, r3
 8008eee:	4b06      	ldr	r3, [pc, #24]	; (8008f08 <HAL_IncTick+0x24>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	4a04      	ldr	r2, [pc, #16]	; (8008f08 <HAL_IncTick+0x24>)
 8008ef6:	6013      	str	r3, [r2, #0]
}
 8008ef8:	bf00      	nop
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	2000007c 	.word	0x2000007c
 8008f08:	20000648 	.word	0x20000648

08008f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8008f10:	4b03      	ldr	r3, [pc, #12]	; (8008f20 <HAL_GetTick+0x14>)
 8008f12:	681b      	ldr	r3, [r3, #0]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	20000648 	.word	0x20000648

08008f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008f2c:	f7ff ffee 	bl	8008f0c <HAL_GetTick>
 8008f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3c:	d005      	beq.n	8008f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008f3e:	4b0a      	ldr	r3, [pc, #40]	; (8008f68 <HAL_Delay+0x44>)
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	4413      	add	r3, r2
 8008f48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008f4a:	bf00      	nop
 8008f4c:	f7ff ffde 	bl	8008f0c <HAL_GetTick>
 8008f50:	4602      	mov	r2, r0
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d8f7      	bhi.n	8008f4c <HAL_Delay+0x28>
  {
  }
}
 8008f5c:	bf00      	nop
 8008f5e:	bf00      	nop
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	2000007c 	.word	0x2000007c

08008f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f003 0307 	and.w	r3, r3, #7
 8008f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f7c:	4b0c      	ldr	r3, [pc, #48]	; (8008fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008f88:	4013      	ands	r3, r2
 8008f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f9e:	4a04      	ldr	r2, [pc, #16]	; (8008fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	60d3      	str	r3, [r2, #12]
}
 8008fa4:	bf00      	nop
 8008fa6:	3714      	adds	r7, #20
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	e000ed00 	.word	0xe000ed00

08008fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008fb8:	4b04      	ldr	r3, [pc, #16]	; (8008fcc <__NVIC_GetPriorityGrouping+0x18>)
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	0a1b      	lsrs	r3, r3, #8
 8008fbe:	f003 0307 	and.w	r3, r3, #7
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr
 8008fcc:	e000ed00 	.word	0xe000ed00

08008fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	db0b      	blt.n	8008ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fe2:	79fb      	ldrb	r3, [r7, #7]
 8008fe4:	f003 021f 	and.w	r2, r3, #31
 8008fe8:	4907      	ldr	r1, [pc, #28]	; (8009008 <__NVIC_EnableIRQ+0x38>)
 8008fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fee:	095b      	lsrs	r3, r3, #5
 8008ff0:	2001      	movs	r0, #1
 8008ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8008ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008ffa:	bf00      	nop
 8008ffc:	370c      	adds	r7, #12
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	e000e100 	.word	0xe000e100

0800900c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	4603      	mov	r3, r0
 8009014:	6039      	str	r1, [r7, #0]
 8009016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800901c:	2b00      	cmp	r3, #0
 800901e:	db0a      	blt.n	8009036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	b2da      	uxtb	r2, r3
 8009024:	490c      	ldr	r1, [pc, #48]	; (8009058 <__NVIC_SetPriority+0x4c>)
 8009026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800902a:	0112      	lsls	r2, r2, #4
 800902c:	b2d2      	uxtb	r2, r2
 800902e:	440b      	add	r3, r1
 8009030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009034:	e00a      	b.n	800904c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	b2da      	uxtb	r2, r3
 800903a:	4908      	ldr	r1, [pc, #32]	; (800905c <__NVIC_SetPriority+0x50>)
 800903c:	79fb      	ldrb	r3, [r7, #7]
 800903e:	f003 030f 	and.w	r3, r3, #15
 8009042:	3b04      	subs	r3, #4
 8009044:	0112      	lsls	r2, r2, #4
 8009046:	b2d2      	uxtb	r2, r2
 8009048:	440b      	add	r3, r1
 800904a:	761a      	strb	r2, [r3, #24]
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr
 8009058:	e000e100 	.word	0xe000e100
 800905c:	e000ed00 	.word	0xe000ed00

08009060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009060:	b480      	push	{r7}
 8009062:	b089      	sub	sp, #36	; 0x24
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f003 0307 	and.w	r3, r3, #7
 8009072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	f1c3 0307 	rsb	r3, r3, #7
 800907a:	2b04      	cmp	r3, #4
 800907c:	bf28      	it	cs
 800907e:	2304      	movcs	r3, #4
 8009080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	3304      	adds	r3, #4
 8009086:	2b06      	cmp	r3, #6
 8009088:	d902      	bls.n	8009090 <NVIC_EncodePriority+0x30>
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	3b03      	subs	r3, #3
 800908e:	e000      	b.n	8009092 <NVIC_EncodePriority+0x32>
 8009090:	2300      	movs	r3, #0
 8009092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009094:	f04f 32ff 	mov.w	r2, #4294967295
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	fa02 f303 	lsl.w	r3, r2, r3
 800909e:	43da      	mvns	r2, r3
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	401a      	ands	r2, r3
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80090a8:	f04f 31ff 	mov.w	r1, #4294967295
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	fa01 f303 	lsl.w	r3, r1, r3
 80090b2:	43d9      	mvns	r1, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090b8:	4313      	orrs	r3, r2
         );
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3724      	adds	r7, #36	; 0x24
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr
	...

080090c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	3b01      	subs	r3, #1
 80090d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090d8:	d301      	bcc.n	80090de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80090da:	2301      	movs	r3, #1
 80090dc:	e00f      	b.n	80090fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80090de:	4a0a      	ldr	r2, [pc, #40]	; (8009108 <SysTick_Config+0x40>)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	3b01      	subs	r3, #1
 80090e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80090e6:	210f      	movs	r1, #15
 80090e8:	f04f 30ff 	mov.w	r0, #4294967295
 80090ec:	f7ff ff8e 	bl	800900c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80090f0:	4b05      	ldr	r3, [pc, #20]	; (8009108 <SysTick_Config+0x40>)
 80090f2:	2200      	movs	r2, #0
 80090f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80090f6:	4b04      	ldr	r3, [pc, #16]	; (8009108 <SysTick_Config+0x40>)
 80090f8:	2207      	movs	r2, #7
 80090fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	e000e010 	.word	0xe000e010

0800910c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f7ff ff29 	bl	8008f6c <__NVIC_SetPriorityGrouping>
}
 800911a:	bf00      	nop
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009122:	b580      	push	{r7, lr}
 8009124:	b086      	sub	sp, #24
 8009126:	af00      	add	r7, sp, #0
 8009128:	4603      	mov	r3, r0
 800912a:	60b9      	str	r1, [r7, #8]
 800912c:	607a      	str	r2, [r7, #4]
 800912e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009130:	2300      	movs	r3, #0
 8009132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009134:	f7ff ff3e 	bl	8008fb4 <__NVIC_GetPriorityGrouping>
 8009138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	68b9      	ldr	r1, [r7, #8]
 800913e:	6978      	ldr	r0, [r7, #20]
 8009140:	f7ff ff8e 	bl	8009060 <NVIC_EncodePriority>
 8009144:	4602      	mov	r2, r0
 8009146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800914a:	4611      	mov	r1, r2
 800914c:	4618      	mov	r0, r3
 800914e:	f7ff ff5d 	bl	800900c <__NVIC_SetPriority>
}
 8009152:	bf00      	nop
 8009154:	3718      	adds	r7, #24
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b082      	sub	sp, #8
 800915e:	af00      	add	r7, sp, #0
 8009160:	4603      	mov	r3, r0
 8009162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009168:	4618      	mov	r0, r3
 800916a:	f7ff ff31 	bl	8008fd0 <__NVIC_EnableIRQ>
}
 800916e:	bf00      	nop
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b082      	sub	sp, #8
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7ff ffa2 	bl	80090c8 <SysTick_Config>
 8009184:	4603      	mov	r3, r0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3708      	adds	r7, #8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b082      	sub	sp, #8
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d101      	bne.n	80091a0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	e00e      	b.n	80091be <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	795b      	ldrb	r3, [r3, #5]
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d105      	bne.n	80091b6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f7ff fca5 	bl	8008b00 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2201      	movs	r2, #1
 80091ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
	...

080091c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b089      	sub	sp, #36	; 0x24
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80091d6:	2300      	movs	r3, #0
 80091d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80091da:	2300      	movs	r3, #0
 80091dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80091de:	2300      	movs	r3, #0
 80091e0:	61fb      	str	r3, [r7, #28]
 80091e2:	e16b      	b.n	80094bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80091e4:	2201      	movs	r2, #1
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	fa02 f303 	lsl.w	r3, r2, r3
 80091ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	697a      	ldr	r2, [r7, #20]
 80091f4:	4013      	ands	r3, r2
 80091f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80091f8:	693a      	ldr	r2, [r7, #16]
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	f040 815a 	bne.w	80094b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	f003 0303 	and.w	r3, r3, #3
 800920a:	2b01      	cmp	r3, #1
 800920c:	d005      	beq.n	800921a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009216:	2b02      	cmp	r3, #2
 8009218:	d130      	bne.n	800927c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	005b      	lsls	r3, r3, #1
 8009224:	2203      	movs	r2, #3
 8009226:	fa02 f303 	lsl.w	r3, r2, r3
 800922a:	43db      	mvns	r3, r3
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	4013      	ands	r3, r2
 8009230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	68da      	ldr	r2, [r3, #12]
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	005b      	lsls	r3, r3, #1
 800923a:	fa02 f303 	lsl.w	r3, r2, r3
 800923e:	69ba      	ldr	r2, [r7, #24]
 8009240:	4313      	orrs	r3, r2
 8009242:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	69ba      	ldr	r2, [r7, #24]
 8009248:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009250:	2201      	movs	r2, #1
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	fa02 f303 	lsl.w	r3, r2, r3
 8009258:	43db      	mvns	r3, r3
 800925a:	69ba      	ldr	r2, [r7, #24]
 800925c:	4013      	ands	r3, r2
 800925e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	091b      	lsrs	r3, r3, #4
 8009266:	f003 0201 	and.w	r2, r3, #1
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	fa02 f303 	lsl.w	r3, r2, r3
 8009270:	69ba      	ldr	r2, [r7, #24]
 8009272:	4313      	orrs	r3, r2
 8009274:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	69ba      	ldr	r2, [r7, #24]
 800927a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f003 0303 	and.w	r3, r3, #3
 8009284:	2b03      	cmp	r3, #3
 8009286:	d017      	beq.n	80092b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	005b      	lsls	r3, r3, #1
 8009292:	2203      	movs	r2, #3
 8009294:	fa02 f303 	lsl.w	r3, r2, r3
 8009298:	43db      	mvns	r3, r3
 800929a:	69ba      	ldr	r2, [r7, #24]
 800929c:	4013      	ands	r3, r2
 800929e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	689a      	ldr	r2, [r3, #8]
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	005b      	lsls	r3, r3, #1
 80092a8:	fa02 f303 	lsl.w	r3, r2, r3
 80092ac:	69ba      	ldr	r2, [r7, #24]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	69ba      	ldr	r2, [r7, #24]
 80092b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	f003 0303 	and.w	r3, r3, #3
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d123      	bne.n	800930c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	08da      	lsrs	r2, r3, #3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	3208      	adds	r2, #8
 80092cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	f003 0307 	and.w	r3, r3, #7
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	220f      	movs	r2, #15
 80092dc:	fa02 f303 	lsl.w	r3, r2, r3
 80092e0:	43db      	mvns	r3, r3
 80092e2:	69ba      	ldr	r2, [r7, #24]
 80092e4:	4013      	ands	r3, r2
 80092e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	691a      	ldr	r2, [r3, #16]
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	f003 0307 	and.w	r3, r3, #7
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	fa02 f303 	lsl.w	r3, r2, r3
 80092f8:	69ba      	ldr	r2, [r7, #24]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	08da      	lsrs	r2, r3, #3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	3208      	adds	r2, #8
 8009306:	69b9      	ldr	r1, [r7, #24]
 8009308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	005b      	lsls	r3, r3, #1
 8009316:	2203      	movs	r2, #3
 8009318:	fa02 f303 	lsl.w	r3, r2, r3
 800931c:	43db      	mvns	r3, r3
 800931e:	69ba      	ldr	r2, [r7, #24]
 8009320:	4013      	ands	r3, r2
 8009322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	f003 0203 	and.w	r2, r3, #3
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	005b      	lsls	r3, r3, #1
 8009330:	fa02 f303 	lsl.w	r3, r2, r3
 8009334:	69ba      	ldr	r2, [r7, #24]
 8009336:	4313      	orrs	r3, r2
 8009338:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	69ba      	ldr	r2, [r7, #24]
 800933e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 80b4 	beq.w	80094b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800934e:	2300      	movs	r3, #0
 8009350:	60fb      	str	r3, [r7, #12]
 8009352:	4b60      	ldr	r3, [pc, #384]	; (80094d4 <HAL_GPIO_Init+0x30c>)
 8009354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009356:	4a5f      	ldr	r2, [pc, #380]	; (80094d4 <HAL_GPIO_Init+0x30c>)
 8009358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800935c:	6453      	str	r3, [r2, #68]	; 0x44
 800935e:	4b5d      	ldr	r3, [pc, #372]	; (80094d4 <HAL_GPIO_Init+0x30c>)
 8009360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009366:	60fb      	str	r3, [r7, #12]
 8009368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800936a:	4a5b      	ldr	r2, [pc, #364]	; (80094d8 <HAL_GPIO_Init+0x310>)
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	089b      	lsrs	r3, r3, #2
 8009370:	3302      	adds	r3, #2
 8009372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	f003 0303 	and.w	r3, r3, #3
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	220f      	movs	r2, #15
 8009382:	fa02 f303 	lsl.w	r3, r2, r3
 8009386:	43db      	mvns	r3, r3
 8009388:	69ba      	ldr	r2, [r7, #24]
 800938a:	4013      	ands	r3, r2
 800938c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a52      	ldr	r2, [pc, #328]	; (80094dc <HAL_GPIO_Init+0x314>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d02b      	beq.n	80093ee <HAL_GPIO_Init+0x226>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a51      	ldr	r2, [pc, #324]	; (80094e0 <HAL_GPIO_Init+0x318>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d025      	beq.n	80093ea <HAL_GPIO_Init+0x222>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a50      	ldr	r2, [pc, #320]	; (80094e4 <HAL_GPIO_Init+0x31c>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d01f      	beq.n	80093e6 <HAL_GPIO_Init+0x21e>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a4f      	ldr	r2, [pc, #316]	; (80094e8 <HAL_GPIO_Init+0x320>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d019      	beq.n	80093e2 <HAL_GPIO_Init+0x21a>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a4e      	ldr	r2, [pc, #312]	; (80094ec <HAL_GPIO_Init+0x324>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d013      	beq.n	80093de <HAL_GPIO_Init+0x216>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a4d      	ldr	r2, [pc, #308]	; (80094f0 <HAL_GPIO_Init+0x328>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d00d      	beq.n	80093da <HAL_GPIO_Init+0x212>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a4c      	ldr	r2, [pc, #304]	; (80094f4 <HAL_GPIO_Init+0x32c>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d007      	beq.n	80093d6 <HAL_GPIO_Init+0x20e>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a4b      	ldr	r2, [pc, #300]	; (80094f8 <HAL_GPIO_Init+0x330>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d101      	bne.n	80093d2 <HAL_GPIO_Init+0x20a>
 80093ce:	2307      	movs	r3, #7
 80093d0:	e00e      	b.n	80093f0 <HAL_GPIO_Init+0x228>
 80093d2:	2308      	movs	r3, #8
 80093d4:	e00c      	b.n	80093f0 <HAL_GPIO_Init+0x228>
 80093d6:	2306      	movs	r3, #6
 80093d8:	e00a      	b.n	80093f0 <HAL_GPIO_Init+0x228>
 80093da:	2305      	movs	r3, #5
 80093dc:	e008      	b.n	80093f0 <HAL_GPIO_Init+0x228>
 80093de:	2304      	movs	r3, #4
 80093e0:	e006      	b.n	80093f0 <HAL_GPIO_Init+0x228>
 80093e2:	2303      	movs	r3, #3
 80093e4:	e004      	b.n	80093f0 <HAL_GPIO_Init+0x228>
 80093e6:	2302      	movs	r3, #2
 80093e8:	e002      	b.n	80093f0 <HAL_GPIO_Init+0x228>
 80093ea:	2301      	movs	r3, #1
 80093ec:	e000      	b.n	80093f0 <HAL_GPIO_Init+0x228>
 80093ee:	2300      	movs	r3, #0
 80093f0:	69fa      	ldr	r2, [r7, #28]
 80093f2:	f002 0203 	and.w	r2, r2, #3
 80093f6:	0092      	lsls	r2, r2, #2
 80093f8:	4093      	lsls	r3, r2
 80093fa:	69ba      	ldr	r2, [r7, #24]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009400:	4935      	ldr	r1, [pc, #212]	; (80094d8 <HAL_GPIO_Init+0x310>)
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	089b      	lsrs	r3, r3, #2
 8009406:	3302      	adds	r3, #2
 8009408:	69ba      	ldr	r2, [r7, #24]
 800940a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800940e:	4b3b      	ldr	r3, [pc, #236]	; (80094fc <HAL_GPIO_Init+0x334>)
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	43db      	mvns	r3, r3
 8009418:	69ba      	ldr	r2, [r7, #24]
 800941a:	4013      	ands	r3, r2
 800941c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009426:	2b00      	cmp	r3, #0
 8009428:	d003      	beq.n	8009432 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800942a:	69ba      	ldr	r2, [r7, #24]
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	4313      	orrs	r3, r2
 8009430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009432:	4a32      	ldr	r2, [pc, #200]	; (80094fc <HAL_GPIO_Init+0x334>)
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009438:	4b30      	ldr	r3, [pc, #192]	; (80094fc <HAL_GPIO_Init+0x334>)
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	43db      	mvns	r3, r3
 8009442:	69ba      	ldr	r2, [r7, #24]
 8009444:	4013      	ands	r3, r2
 8009446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d003      	beq.n	800945c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009454:	69ba      	ldr	r2, [r7, #24]
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	4313      	orrs	r3, r2
 800945a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800945c:	4a27      	ldr	r2, [pc, #156]	; (80094fc <HAL_GPIO_Init+0x334>)
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009462:	4b26      	ldr	r3, [pc, #152]	; (80094fc <HAL_GPIO_Init+0x334>)
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	43db      	mvns	r3, r3
 800946c:	69ba      	ldr	r2, [r7, #24]
 800946e:	4013      	ands	r3, r2
 8009470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800947a:	2b00      	cmp	r3, #0
 800947c:	d003      	beq.n	8009486 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800947e:	69ba      	ldr	r2, [r7, #24]
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	4313      	orrs	r3, r2
 8009484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009486:	4a1d      	ldr	r2, [pc, #116]	; (80094fc <HAL_GPIO_Init+0x334>)
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800948c:	4b1b      	ldr	r3, [pc, #108]	; (80094fc <HAL_GPIO_Init+0x334>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	43db      	mvns	r3, r3
 8009496:	69ba      	ldr	r2, [r7, #24]
 8009498:	4013      	ands	r3, r2
 800949a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d003      	beq.n	80094b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80094a8:	69ba      	ldr	r2, [r7, #24]
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80094b0:	4a12      	ldr	r2, [pc, #72]	; (80094fc <HAL_GPIO_Init+0x334>)
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	3301      	adds	r3, #1
 80094ba:	61fb      	str	r3, [r7, #28]
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	2b0f      	cmp	r3, #15
 80094c0:	f67f ae90 	bls.w	80091e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80094c4:	bf00      	nop
 80094c6:	bf00      	nop
 80094c8:	3724      	adds	r7, #36	; 0x24
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	40023800 	.word	0x40023800
 80094d8:	40013800 	.word	0x40013800
 80094dc:	40020000 	.word	0x40020000
 80094e0:	40020400 	.word	0x40020400
 80094e4:	40020800 	.word	0x40020800
 80094e8:	40020c00 	.word	0x40020c00
 80094ec:	40021000 	.word	0x40021000
 80094f0:	40021400 	.word	0x40021400
 80094f4:	40021800 	.word	0x40021800
 80094f8:	40021c00 	.word	0x40021c00
 80094fc:	40013c00 	.word	0x40013c00

08009500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	807b      	strh	r3, [r7, #2]
 800950c:	4613      	mov	r3, r2
 800950e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009510:	787b      	ldrb	r3, [r7, #1]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d003      	beq.n	800951e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009516:	887a      	ldrh	r2, [r7, #2]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800951c:	e003      	b.n	8009526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800951e:	887b      	ldrh	r3, [r7, #2]
 8009520:	041a      	lsls	r2, r3, #16
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	619a      	str	r2, [r3, #24]
}
 8009526:	bf00      	nop
 8009528:	370c      	adds	r7, #12
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr

08009532 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009532:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009534:	b08f      	sub	sp, #60	; 0x3c
 8009536:	af0a      	add	r7, sp, #40	; 0x28
 8009538:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d101      	bne.n	8009544 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	e10f      	b.n	8009764 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b00      	cmp	r3, #0
 8009554:	d106      	bne.n	8009564 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f016 f95a 	bl	801f818 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2203      	movs	r2, #3
 8009568:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009574:	2b00      	cmp	r3, #0
 8009576:	d102      	bne.n	800957e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4618      	mov	r0, r3
 8009584:	f002 fa67 	bl	800ba56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	603b      	str	r3, [r7, #0]
 800958e:	687e      	ldr	r6, [r7, #4]
 8009590:	466d      	mov	r5, sp
 8009592:	f106 0410 	add.w	r4, r6, #16
 8009596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800959a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800959c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800959e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80095a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80095a6:	1d33      	adds	r3, r6, #4
 80095a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80095aa:	6838      	ldr	r0, [r7, #0]
 80095ac:	f002 f93e 	bl	800b82c <USB_CoreInit>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d005      	beq.n	80095c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2202      	movs	r2, #2
 80095ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	e0d0      	b.n	8009764 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2100      	movs	r1, #0
 80095c8:	4618      	mov	r0, r3
 80095ca:	f002 fa55 	bl	800ba78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095ce:	2300      	movs	r3, #0
 80095d0:	73fb      	strb	r3, [r7, #15]
 80095d2:	e04a      	b.n	800966a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80095d4:	7bfa      	ldrb	r2, [r7, #15]
 80095d6:	6879      	ldr	r1, [r7, #4]
 80095d8:	4613      	mov	r3, r2
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	4413      	add	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	440b      	add	r3, r1
 80095e2:	333d      	adds	r3, #61	; 0x3d
 80095e4:	2201      	movs	r2, #1
 80095e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80095e8:	7bfa      	ldrb	r2, [r7, #15]
 80095ea:	6879      	ldr	r1, [r7, #4]
 80095ec:	4613      	mov	r3, r2
 80095ee:	00db      	lsls	r3, r3, #3
 80095f0:	4413      	add	r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	440b      	add	r3, r1
 80095f6:	333c      	adds	r3, #60	; 0x3c
 80095f8:	7bfa      	ldrb	r2, [r7, #15]
 80095fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80095fc:	7bfa      	ldrb	r2, [r7, #15]
 80095fe:	7bfb      	ldrb	r3, [r7, #15]
 8009600:	b298      	uxth	r0, r3
 8009602:	6879      	ldr	r1, [r7, #4]
 8009604:	4613      	mov	r3, r2
 8009606:	00db      	lsls	r3, r3, #3
 8009608:	4413      	add	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	440b      	add	r3, r1
 800960e:	3344      	adds	r3, #68	; 0x44
 8009610:	4602      	mov	r2, r0
 8009612:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009614:	7bfa      	ldrb	r2, [r7, #15]
 8009616:	6879      	ldr	r1, [r7, #4]
 8009618:	4613      	mov	r3, r2
 800961a:	00db      	lsls	r3, r3, #3
 800961c:	4413      	add	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	440b      	add	r3, r1
 8009622:	3340      	adds	r3, #64	; 0x40
 8009624:	2200      	movs	r2, #0
 8009626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009628:	7bfa      	ldrb	r2, [r7, #15]
 800962a:	6879      	ldr	r1, [r7, #4]
 800962c:	4613      	mov	r3, r2
 800962e:	00db      	lsls	r3, r3, #3
 8009630:	4413      	add	r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	440b      	add	r3, r1
 8009636:	3348      	adds	r3, #72	; 0x48
 8009638:	2200      	movs	r2, #0
 800963a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800963c:	7bfa      	ldrb	r2, [r7, #15]
 800963e:	6879      	ldr	r1, [r7, #4]
 8009640:	4613      	mov	r3, r2
 8009642:	00db      	lsls	r3, r3, #3
 8009644:	4413      	add	r3, r2
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	440b      	add	r3, r1
 800964a:	334c      	adds	r3, #76	; 0x4c
 800964c:	2200      	movs	r2, #0
 800964e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009650:	7bfa      	ldrb	r2, [r7, #15]
 8009652:	6879      	ldr	r1, [r7, #4]
 8009654:	4613      	mov	r3, r2
 8009656:	00db      	lsls	r3, r3, #3
 8009658:	4413      	add	r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	440b      	add	r3, r1
 800965e:	3354      	adds	r3, #84	; 0x54
 8009660:	2200      	movs	r2, #0
 8009662:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009664:	7bfb      	ldrb	r3, [r7, #15]
 8009666:	3301      	adds	r3, #1
 8009668:	73fb      	strb	r3, [r7, #15]
 800966a:	7bfa      	ldrb	r2, [r7, #15]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	429a      	cmp	r2, r3
 8009672:	d3af      	bcc.n	80095d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009674:	2300      	movs	r3, #0
 8009676:	73fb      	strb	r3, [r7, #15]
 8009678:	e044      	b.n	8009704 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800967a:	7bfa      	ldrb	r2, [r7, #15]
 800967c:	6879      	ldr	r1, [r7, #4]
 800967e:	4613      	mov	r3, r2
 8009680:	00db      	lsls	r3, r3, #3
 8009682:	4413      	add	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	440b      	add	r3, r1
 8009688:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800968c:	2200      	movs	r2, #0
 800968e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009690:	7bfa      	ldrb	r2, [r7, #15]
 8009692:	6879      	ldr	r1, [r7, #4]
 8009694:	4613      	mov	r3, r2
 8009696:	00db      	lsls	r3, r3, #3
 8009698:	4413      	add	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	440b      	add	r3, r1
 800969e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80096a2:	7bfa      	ldrb	r2, [r7, #15]
 80096a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80096a6:	7bfa      	ldrb	r2, [r7, #15]
 80096a8:	6879      	ldr	r1, [r7, #4]
 80096aa:	4613      	mov	r3, r2
 80096ac:	00db      	lsls	r3, r3, #3
 80096ae:	4413      	add	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	440b      	add	r3, r1
 80096b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80096b8:	2200      	movs	r2, #0
 80096ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80096bc:	7bfa      	ldrb	r2, [r7, #15]
 80096be:	6879      	ldr	r1, [r7, #4]
 80096c0:	4613      	mov	r3, r2
 80096c2:	00db      	lsls	r3, r3, #3
 80096c4:	4413      	add	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	440b      	add	r3, r1
 80096ca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80096ce:	2200      	movs	r2, #0
 80096d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80096d2:	7bfa      	ldrb	r2, [r7, #15]
 80096d4:	6879      	ldr	r1, [r7, #4]
 80096d6:	4613      	mov	r3, r2
 80096d8:	00db      	lsls	r3, r3, #3
 80096da:	4413      	add	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	440b      	add	r3, r1
 80096e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80096e4:	2200      	movs	r2, #0
 80096e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80096e8:	7bfa      	ldrb	r2, [r7, #15]
 80096ea:	6879      	ldr	r1, [r7, #4]
 80096ec:	4613      	mov	r3, r2
 80096ee:	00db      	lsls	r3, r3, #3
 80096f0:	4413      	add	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	440b      	add	r3, r1
 80096f6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80096fa:	2200      	movs	r2, #0
 80096fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
 8009700:	3301      	adds	r3, #1
 8009702:	73fb      	strb	r3, [r7, #15]
 8009704:	7bfa      	ldrb	r2, [r7, #15]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	429a      	cmp	r2, r3
 800970c:	d3b5      	bcc.n	800967a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	603b      	str	r3, [r7, #0]
 8009714:	687e      	ldr	r6, [r7, #4]
 8009716:	466d      	mov	r5, sp
 8009718:	f106 0410 	add.w	r4, r6, #16
 800971c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800971e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009724:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009728:	e885 0003 	stmia.w	r5, {r0, r1}
 800972c:	1d33      	adds	r3, r6, #4
 800972e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009730:	6838      	ldr	r0, [r7, #0]
 8009732:	f002 f9ed 	bl	800bb10 <USB_DevInit>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d005      	beq.n	8009748 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2202      	movs	r2, #2
 8009740:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	e00d      	b.n	8009764 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4618      	mov	r0, r3
 800975e:	f003 fb3c 	bl	800cdda <USB_DevDisconnect>

  return HAL_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3714      	adds	r7, #20
 8009768:	46bd      	mov	sp, r7
 800976a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800976c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009780:	2b01      	cmp	r3, #1
 8009782:	d101      	bne.n	8009788 <HAL_PCD_Start+0x1c>
 8009784:	2302      	movs	r3, #2
 8009786:	e020      	b.n	80097ca <HAL_PCD_Start+0x5e>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009794:	2b01      	cmp	r3, #1
 8009796:	d109      	bne.n	80097ac <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800979c:	2b01      	cmp	r3, #1
 800979e:	d005      	beq.n	80097ac <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4618      	mov	r0, r3
 80097b2:	f002 f93f 	bl	800ba34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f003 faec 	bl	800cd98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80097d2:	b590      	push	{r4, r7, lr}
 80097d4:	b08d      	sub	sp, #52	; 0x34
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e0:	6a3b      	ldr	r3, [r7, #32]
 80097e2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4618      	mov	r0, r3
 80097ea:	f003 fbaa 	bl	800cf42 <USB_GetMode>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f040 848a 	bne.w	800a10a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f003 fb0e 	bl	800ce1c <USB_ReadInterrupts>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	f000 8480 	beq.w	800a108 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	0a1b      	lsrs	r3, r3, #8
 8009812:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4618      	mov	r0, r3
 8009822:	f003 fafb 	bl	800ce1c <USB_ReadInterrupts>
 8009826:	4603      	mov	r3, r0
 8009828:	f003 0302 	and.w	r3, r3, #2
 800982c:	2b02      	cmp	r3, #2
 800982e:	d107      	bne.n	8009840 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	695a      	ldr	r2, [r3, #20]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f002 0202 	and.w	r2, r2, #2
 800983e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4618      	mov	r0, r3
 8009846:	f003 fae9 	bl	800ce1c <USB_ReadInterrupts>
 800984a:	4603      	mov	r3, r0
 800984c:	f003 0310 	and.w	r3, r3, #16
 8009850:	2b10      	cmp	r3, #16
 8009852:	d161      	bne.n	8009918 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	699a      	ldr	r2, [r3, #24]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f022 0210 	bic.w	r2, r2, #16
 8009862:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	6a1b      	ldr	r3, [r3, #32]
 8009868:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	f003 020f 	and.w	r2, r3, #15
 8009870:	4613      	mov	r3, r2
 8009872:	00db      	lsls	r3, r3, #3
 8009874:	4413      	add	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	4413      	add	r3, r2
 8009880:	3304      	adds	r3, #4
 8009882:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	0c5b      	lsrs	r3, r3, #17
 8009888:	f003 030f 	and.w	r3, r3, #15
 800988c:	2b02      	cmp	r3, #2
 800988e:	d124      	bne.n	80098da <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009890:	69ba      	ldr	r2, [r7, #24]
 8009892:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009896:	4013      	ands	r3, r2
 8009898:	2b00      	cmp	r3, #0
 800989a:	d035      	beq.n	8009908 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	091b      	lsrs	r3, r3, #4
 80098a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80098a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	461a      	mov	r2, r3
 80098ae:	6a38      	ldr	r0, [r7, #32]
 80098b0:	f003 f920 	bl	800caf4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	691a      	ldr	r2, [r3, #16]
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	091b      	lsrs	r3, r3, #4
 80098bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098c0:	441a      	add	r2, r3
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	6a1a      	ldr	r2, [r3, #32]
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	091b      	lsrs	r3, r3, #4
 80098ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098d2:	441a      	add	r2, r3
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	621a      	str	r2, [r3, #32]
 80098d8:	e016      	b.n	8009908 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	0c5b      	lsrs	r3, r3, #17
 80098de:	f003 030f 	and.w	r3, r3, #15
 80098e2:	2b06      	cmp	r3, #6
 80098e4:	d110      	bne.n	8009908 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80098ec:	2208      	movs	r2, #8
 80098ee:	4619      	mov	r1, r3
 80098f0:	6a38      	ldr	r0, [r7, #32]
 80098f2:	f003 f8ff 	bl	800caf4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	6a1a      	ldr	r2, [r3, #32]
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	091b      	lsrs	r3, r3, #4
 80098fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009902:	441a      	add	r2, r3
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	699a      	ldr	r2, [r3, #24]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f042 0210 	orr.w	r2, r2, #16
 8009916:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4618      	mov	r0, r3
 800991e:	f003 fa7d 	bl	800ce1c <USB_ReadInterrupts>
 8009922:	4603      	mov	r3, r0
 8009924:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009928:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800992c:	f040 80a7 	bne.w	8009a7e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009930:	2300      	movs	r3, #0
 8009932:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4618      	mov	r0, r3
 800993a:	f003 fa82 	bl	800ce42 <USB_ReadDevAllOutEpInterrupt>
 800993e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009940:	e099      	b.n	8009a76 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009944:	f003 0301 	and.w	r3, r3, #1
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 808e 	beq.w	8009a6a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009954:	b2d2      	uxtb	r2, r2
 8009956:	4611      	mov	r1, r2
 8009958:	4618      	mov	r0, r3
 800995a:	f003 faa6 	bl	800ceaa <USB_ReadDevOutEPInterrupt>
 800995e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	f003 0301 	and.w	r3, r3, #1
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00c      	beq.n	8009984 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800996a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996c:	015a      	lsls	r2, r3, #5
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	4413      	add	r3, r2
 8009972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009976:	461a      	mov	r2, r3
 8009978:	2301      	movs	r3, #1
 800997a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800997c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 fec2 	bl	800a708 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	f003 0308 	and.w	r3, r3, #8
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00c      	beq.n	80099a8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800998e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009990:	015a      	lsls	r2, r3, #5
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	4413      	add	r3, r2
 8009996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800999a:	461a      	mov	r2, r3
 800999c:	2308      	movs	r3, #8
 800999e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80099a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 ff98 	bl	800a8d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	f003 0310 	and.w	r3, r3, #16
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d008      	beq.n	80099c4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80099b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b4:	015a      	lsls	r2, r3, #5
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	4413      	add	r3, r2
 80099ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099be:	461a      	mov	r2, r3
 80099c0:	2310      	movs	r3, #16
 80099c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	f003 0302 	and.w	r3, r3, #2
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d030      	beq.n	8009a30 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80099ce:	6a3b      	ldr	r3, [r7, #32]
 80099d0:	695b      	ldr	r3, [r3, #20]
 80099d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099d6:	2b80      	cmp	r3, #128	; 0x80
 80099d8:	d109      	bne.n	80099ee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	69fa      	ldr	r2, [r7, #28]
 80099e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80099ec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80099ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099f0:	4613      	mov	r3, r2
 80099f2:	00db      	lsls	r3, r3, #3
 80099f4:	4413      	add	r3, r2
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	4413      	add	r3, r2
 8009a00:	3304      	adds	r3, #4
 8009a02:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	78db      	ldrb	r3, [r3, #3]
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d108      	bne.n	8009a1e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	4619      	mov	r1, r3
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f016 f803 	bl	801fa24 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a20:	015a      	lsls	r2, r3, #5
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	4413      	add	r3, r2
 8009a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	f003 0320 	and.w	r3, r3, #32
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d008      	beq.n	8009a4c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3c:	015a      	lsls	r2, r3, #5
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	4413      	add	r3, r2
 8009a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a46:	461a      	mov	r2, r3
 8009a48:	2320      	movs	r3, #32
 8009a4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d009      	beq.n	8009a6a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a58:	015a      	lsls	r2, r3, #5
 8009a5a:	69fb      	ldr	r3, [r7, #28]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a62:	461a      	mov	r2, r3
 8009a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a68:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a72:	085b      	lsrs	r3, r3, #1
 8009a74:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f47f af62 	bne.w	8009942 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4618      	mov	r0, r3
 8009a84:	f003 f9ca 	bl	800ce1c <USB_ReadInterrupts>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a92:	f040 80db 	bne.w	8009c4c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f003 f9eb 	bl	800ce76 <USB_ReadDevAllInEpInterrupt>
 8009aa0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009aa6:	e0cd      	b.n	8009c44 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aaa:	f003 0301 	and.w	r3, r3, #1
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f000 80c2 	beq.w	8009c38 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aba:	b2d2      	uxtb	r2, r2
 8009abc:	4611      	mov	r1, r2
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f003 fa11 	bl	800cee6 <USB_ReadDevInEPInterrupt>
 8009ac4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	f003 0301 	and.w	r3, r3, #1
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d057      	beq.n	8009b80 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad2:	f003 030f 	and.w	r3, r3, #15
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8009adc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	43db      	mvns	r3, r3
 8009aea:	69f9      	ldr	r1, [r7, #28]
 8009aec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009af0:	4013      	ands	r3, r2
 8009af2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af6:	015a      	lsls	r2, r3, #5
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	4413      	add	r3, r2
 8009afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b00:	461a      	mov	r2, r3
 8009b02:	2301      	movs	r3, #1
 8009b04:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d132      	bne.n	8009b74 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009b0e:	6879      	ldr	r1, [r7, #4]
 8009b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b12:	4613      	mov	r3, r2
 8009b14:	00db      	lsls	r3, r3, #3
 8009b16:	4413      	add	r3, r2
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	440b      	add	r3, r1
 8009b1c:	334c      	adds	r3, #76	; 0x4c
 8009b1e:	6819      	ldr	r1, [r3, #0]
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b24:	4613      	mov	r3, r2
 8009b26:	00db      	lsls	r3, r3, #3
 8009b28:	4413      	add	r3, r2
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4403      	add	r3, r0
 8009b2e:	3348      	adds	r3, #72	; 0x48
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4419      	add	r1, r3
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b38:	4613      	mov	r3, r2
 8009b3a:	00db      	lsls	r3, r3, #3
 8009b3c:	4413      	add	r3, r2
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	4403      	add	r3, r0
 8009b42:	334c      	adds	r3, #76	; 0x4c
 8009b44:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d113      	bne.n	8009b74 <HAL_PCD_IRQHandler+0x3a2>
 8009b4c:	6879      	ldr	r1, [r7, #4]
 8009b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b50:	4613      	mov	r3, r2
 8009b52:	00db      	lsls	r3, r3, #3
 8009b54:	4413      	add	r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	440b      	add	r3, r1
 8009b5a:	3354      	adds	r3, #84	; 0x54
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d108      	bne.n	8009b74 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6818      	ldr	r0, [r3, #0]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	2101      	movs	r1, #1
 8009b70:	f003 fa18 	bl	800cfa4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	4619      	mov	r1, r3
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f015 fecd 	bl	801f91a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	f003 0308 	and.w	r3, r3, #8
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d008      	beq.n	8009b9c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	015a      	lsls	r2, r3, #5
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	4413      	add	r3, r2
 8009b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b96:	461a      	mov	r2, r3
 8009b98:	2308      	movs	r3, #8
 8009b9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	f003 0310 	and.w	r3, r3, #16
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d008      	beq.n	8009bb8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba8:	015a      	lsls	r2, r3, #5
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	4413      	add	r3, r2
 8009bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	2310      	movs	r3, #16
 8009bb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d008      	beq.n	8009bd4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc4:	015a      	lsls	r2, r3, #5
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	4413      	add	r3, r2
 8009bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bce:	461a      	mov	r2, r3
 8009bd0:	2340      	movs	r3, #64	; 0x40
 8009bd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	f003 0302 	and.w	r3, r3, #2
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d023      	beq.n	8009c26 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009bde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009be0:	6a38      	ldr	r0, [r7, #32]
 8009be2:	f002 f8f9 	bl	800bdd8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009be8:	4613      	mov	r3, r2
 8009bea:	00db      	lsls	r3, r3, #3
 8009bec:	4413      	add	r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	3338      	adds	r3, #56	; 0x38
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	3304      	adds	r3, #4
 8009bf8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	78db      	ldrb	r3, [r3, #3]
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d108      	bne.n	8009c14 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	2200      	movs	r2, #0
 8009c06:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f015 ff1a 	bl	801fa48 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c16:	015a      	lsls	r2, r3, #5
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c20:	461a      	mov	r2, r3
 8009c22:	2302      	movs	r3, #2
 8009c24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d003      	beq.n	8009c38 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fcdb 	bl	800a5ee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c40:	085b      	lsrs	r3, r3, #1
 8009c42:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f47f af2e 	bne.w	8009aa8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4618      	mov	r0, r3
 8009c52:	f003 f8e3 	bl	800ce1c <USB_ReadInterrupts>
 8009c56:	4603      	mov	r3, r0
 8009c58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c60:	d122      	bne.n	8009ca8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	69fa      	ldr	r2, [r7, #28]
 8009c6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c70:	f023 0301 	bic.w	r3, r3, #1
 8009c74:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d108      	bne.n	8009c92 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009c88:	2100      	movs	r1, #0
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fec2 	bl	800aa14 <HAL_PCDEx_LPM_Callback>
 8009c90:	e002      	b.n	8009c98 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f015 feb8 	bl	801fa08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	695a      	ldr	r2, [r3, #20]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009ca6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4618      	mov	r0, r3
 8009cae:	f003 f8b5 	bl	800ce1c <USB_ReadInterrupts>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cbc:	d112      	bne.n	8009ce4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	f003 0301 	and.w	r3, r3, #1
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d102      	bne.n	8009cd4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f015 fe74 	bl	801f9bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	695a      	ldr	r2, [r3, #20]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009ce2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f003 f897 	bl	800ce1c <USB_ReadInterrupts>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cf8:	f040 80b7 	bne.w	8009e6a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	69fa      	ldr	r2, [r7, #28]
 8009d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d0a:	f023 0301 	bic.w	r3, r3, #1
 8009d0e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2110      	movs	r1, #16
 8009d16:	4618      	mov	r0, r3
 8009d18:	f002 f85e 	bl	800bdd8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d20:	e046      	b.n	8009db0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d24:	015a      	lsls	r2, r3, #5
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	4413      	add	r3, r2
 8009d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d2e:	461a      	mov	r2, r3
 8009d30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009d34:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d38:	015a      	lsls	r2, r3, #5
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d46:	0151      	lsls	r1, r2, #5
 8009d48:	69fa      	ldr	r2, [r7, #28]
 8009d4a:	440a      	add	r2, r1
 8009d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d58:	015a      	lsls	r2, r3, #5
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d62:	461a      	mov	r2, r3
 8009d64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009d68:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6c:	015a      	lsls	r2, r3, #5
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	4413      	add	r3, r2
 8009d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d7a:	0151      	lsls	r1, r2, #5
 8009d7c:	69fa      	ldr	r2, [r7, #28]
 8009d7e:	440a      	add	r2, r1
 8009d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d88:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8c:	015a      	lsls	r2, r3, #5
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	4413      	add	r3, r2
 8009d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d9a:	0151      	lsls	r1, r2, #5
 8009d9c:	69fa      	ldr	r2, [r7, #28]
 8009d9e:	440a      	add	r2, r1
 8009da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009da4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009da8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dac:	3301      	adds	r3, #1
 8009dae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d3b3      	bcc.n	8009d22 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009dba:	69fb      	ldr	r3, [r7, #28]
 8009dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dc0:	69db      	ldr	r3, [r3, #28]
 8009dc2:	69fa      	ldr	r2, [r7, #28]
 8009dc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009dc8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009dcc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d016      	beq.n	8009e04 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009de0:	69fa      	ldr	r2, [r7, #28]
 8009de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009de6:	f043 030b 	orr.w	r3, r3, #11
 8009dea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009df6:	69fa      	ldr	r2, [r7, #28]
 8009df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009dfc:	f043 030b 	orr.w	r3, r3, #11
 8009e00:	6453      	str	r3, [r2, #68]	; 0x44
 8009e02:	e015      	b.n	8009e30 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e0a:	695b      	ldr	r3, [r3, #20]
 8009e0c:	69fa      	ldr	r2, [r7, #28]
 8009e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009e16:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009e1a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	69fa      	ldr	r2, [r7, #28]
 8009e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e2a:	f043 030b 	orr.w	r3, r3, #11
 8009e2e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	69fa      	ldr	r2, [r7, #28]
 8009e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e3e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009e42:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6818      	ldr	r0, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009e54:	461a      	mov	r2, r3
 8009e56:	f003 f8a5 	bl	800cfa4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	695a      	ldr	r2, [r3, #20]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009e68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f002 ffd4 	bl	800ce1c <USB_ReadInterrupts>
 8009e74:	4603      	mov	r3, r0
 8009e76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e7e:	d124      	bne.n	8009eca <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4618      	mov	r0, r3
 8009e86:	f003 f86a 	bl	800cf5e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f002 f81f 	bl	800bed2 <USB_GetDevSpeed>
 8009e94:	4603      	mov	r3, r0
 8009e96:	461a      	mov	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681c      	ldr	r4, [r3, #0]
 8009ea0:	f001 fa28 	bl	800b2f4 <HAL_RCC_GetHCLKFreq>
 8009ea4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	461a      	mov	r2, r3
 8009eae:	4620      	mov	r0, r4
 8009eb0:	f001 fd1e 	bl	800b8f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f015 fd58 	bl	801f96a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	695a      	ldr	r2, [r3, #20]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f002 ffa4 	bl	800ce1c <USB_ReadInterrupts>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	f003 0308 	and.w	r3, r3, #8
 8009eda:	2b08      	cmp	r3, #8
 8009edc:	d10a      	bne.n	8009ef4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f015 fd35 	bl	801f94e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	695a      	ldr	r2, [r3, #20]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f002 0208 	and.w	r2, r2, #8
 8009ef2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f002 ff8f 	bl	800ce1c <USB_ReadInterrupts>
 8009efe:	4603      	mov	r3, r0
 8009f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f04:	2b80      	cmp	r3, #128	; 0x80
 8009f06:	d122      	bne.n	8009f4e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009f08:	6a3b      	ldr	r3, [r7, #32]
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f10:	6a3b      	ldr	r3, [r7, #32]
 8009f12:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009f14:	2301      	movs	r3, #1
 8009f16:	627b      	str	r3, [r7, #36]	; 0x24
 8009f18:	e014      	b.n	8009f44 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009f1a:	6879      	ldr	r1, [r7, #4]
 8009f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f1e:	4613      	mov	r3, r2
 8009f20:	00db      	lsls	r3, r3, #3
 8009f22:	4413      	add	r3, r2
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	440b      	add	r3, r1
 8009f28:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d105      	bne.n	8009f3e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	4619      	mov	r1, r3
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 fb27 	bl	800a58c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f40:	3301      	adds	r3, #1
 8009f42:	627b      	str	r3, [r7, #36]	; 0x24
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d3e5      	bcc.n	8009f1a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4618      	mov	r0, r3
 8009f54:	f002 ff62 	bl	800ce1c <USB_ReadInterrupts>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f62:	d13b      	bne.n	8009fdc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009f64:	2301      	movs	r3, #1
 8009f66:	627b      	str	r3, [r7, #36]	; 0x24
 8009f68:	e02b      	b.n	8009fc2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6c:	015a      	lsls	r2, r3, #5
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	4413      	add	r3, r2
 8009f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009f7a:	6879      	ldr	r1, [r7, #4]
 8009f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f7e:	4613      	mov	r3, r2
 8009f80:	00db      	lsls	r3, r3, #3
 8009f82:	4413      	add	r3, r2
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	440b      	add	r3, r1
 8009f88:	3340      	adds	r3, #64	; 0x40
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d115      	bne.n	8009fbc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009f90:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	da12      	bge.n	8009fbc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009f96:	6879      	ldr	r1, [r7, #4]
 8009f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	00db      	lsls	r3, r3, #3
 8009f9e:	4413      	add	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	440b      	add	r3, r1
 8009fa4:	333f      	adds	r3, #63	; 0x3f
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 fae8 	bl	800a58c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d3ce      	bcc.n	8009f6a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	695a      	ldr	r2, [r3, #20]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009fda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f002 ff1b 	bl	800ce1c <USB_ReadInterrupts>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009fec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ff0:	d155      	bne.n	800a09e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ff6:	e045      	b.n	800a084 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffa:	015a      	lsls	r2, r3, #5
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	4413      	add	r3, r2
 800a000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a008:	6879      	ldr	r1, [r7, #4]
 800a00a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a00c:	4613      	mov	r3, r2
 800a00e:	00db      	lsls	r3, r3, #3
 800a010:	4413      	add	r3, r2
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	440b      	add	r3, r1
 800a016:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d12e      	bne.n	800a07e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a020:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a022:	2b00      	cmp	r3, #0
 800a024:	da2b      	bge.n	800a07e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800a032:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a036:	429a      	cmp	r2, r3
 800a038:	d121      	bne.n	800a07e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a03a:	6879      	ldr	r1, [r7, #4]
 800a03c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a03e:	4613      	mov	r3, r2
 800a040:	00db      	lsls	r3, r3, #3
 800a042:	4413      	add	r3, r2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	440b      	add	r3, r1
 800a048:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a04c:	2201      	movs	r2, #1
 800a04e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a050:	6a3b      	ldr	r3, [r7, #32]
 800a052:	699b      	ldr	r3, [r3, #24]
 800a054:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a058:	6a3b      	ldr	r3, [r7, #32]
 800a05a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a05c:	6a3b      	ldr	r3, [r7, #32]
 800a05e:	695b      	ldr	r3, [r3, #20]
 800a060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10a      	bne.n	800a07e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	69fa      	ldr	r2, [r7, #28]
 800a072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a07a:	6053      	str	r3, [r2, #4]
            break;
 800a07c:	e007      	b.n	800a08e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a080:	3301      	adds	r3, #1
 800a082:	627b      	str	r3, [r7, #36]	; 0x24
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d3b4      	bcc.n	8009ff8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	695a      	ldr	r2, [r3, #20]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a09c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f002 feba 	bl	800ce1c <USB_ReadInterrupts>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0b2:	d10a      	bne.n	800a0ca <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f015 fcd9 	bl	801fa6c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	695a      	ldr	r2, [r3, #20]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a0c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f002 fea4 	bl	800ce1c <USB_ReadInterrupts>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	f003 0304 	and.w	r3, r3, #4
 800a0da:	2b04      	cmp	r3, #4
 800a0dc:	d115      	bne.n	800a10a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	f003 0304 	and.w	r3, r3, #4
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d002      	beq.n	800a0f6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f015 fcc9 	bl	801fa88 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	6859      	ldr	r1, [r3, #4]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	69ba      	ldr	r2, [r7, #24]
 800a102:	430a      	orrs	r2, r1
 800a104:	605a      	str	r2, [r3, #4]
 800a106:	e000      	b.n	800a10a <HAL_PCD_IRQHandler+0x938>
      return;
 800a108:	bf00      	nop
    }
  }
}
 800a10a:	3734      	adds	r7, #52	; 0x34
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd90      	pop	{r4, r7, pc}

0800a110 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	460b      	mov	r3, r1
 800a11a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a122:	2b01      	cmp	r3, #1
 800a124:	d101      	bne.n	800a12a <HAL_PCD_SetAddress+0x1a>
 800a126:	2302      	movs	r3, #2
 800a128:	e013      	b.n	800a152 <HAL_PCD_SetAddress+0x42>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	78fa      	ldrb	r2, [r7, #3]
 800a136:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	78fa      	ldrb	r2, [r7, #3]
 800a140:	4611      	mov	r1, r2
 800a142:	4618      	mov	r0, r3
 800a144:	f002 fe02 	bl	800cd4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	3708      	adds	r7, #8
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b084      	sub	sp, #16
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
 800a162:	4608      	mov	r0, r1
 800a164:	4611      	mov	r1, r2
 800a166:	461a      	mov	r2, r3
 800a168:	4603      	mov	r3, r0
 800a16a:	70fb      	strb	r3, [r7, #3]
 800a16c:	460b      	mov	r3, r1
 800a16e:	803b      	strh	r3, [r7, #0]
 800a170:	4613      	mov	r3, r2
 800a172:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a174:	2300      	movs	r3, #0
 800a176:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	da0f      	bge.n	800a1a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a180:	78fb      	ldrb	r3, [r7, #3]
 800a182:	f003 020f 	and.w	r2, r3, #15
 800a186:	4613      	mov	r3, r2
 800a188:	00db      	lsls	r3, r3, #3
 800a18a:	4413      	add	r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	3338      	adds	r3, #56	; 0x38
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	4413      	add	r3, r2
 800a194:	3304      	adds	r3, #4
 800a196:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2201      	movs	r2, #1
 800a19c:	705a      	strb	r2, [r3, #1]
 800a19e:	e00f      	b.n	800a1c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a1a0:	78fb      	ldrb	r3, [r7, #3]
 800a1a2:	f003 020f 	and.w	r2, r3, #15
 800a1a6:	4613      	mov	r3, r2
 800a1a8:	00db      	lsls	r3, r3, #3
 800a1aa:	4413      	add	r3, r2
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a1c0:	78fb      	ldrb	r3, [r7, #3]
 800a1c2:	f003 030f 	and.w	r3, r3, #15
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a1cc:	883a      	ldrh	r2, [r7, #0]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	78ba      	ldrb	r2, [r7, #2]
 800a1d6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	785b      	ldrb	r3, [r3, #1]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d004      	beq.n	800a1ea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	b29a      	uxth	r2, r3
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a1ea:	78bb      	ldrb	r3, [r7, #2]
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	d102      	bne.n	800a1f6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d101      	bne.n	800a204 <HAL_PCD_EP_Open+0xaa>
 800a200:	2302      	movs	r3, #2
 800a202:	e00e      	b.n	800a222 <HAL_PCD_EP_Open+0xc8>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	68f9      	ldr	r1, [r7, #12]
 800a212:	4618      	mov	r0, r3
 800a214:	f001 fe82 	bl	800bf1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a220:	7afb      	ldrb	r3, [r7, #11]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b084      	sub	sp, #16
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	460b      	mov	r3, r1
 800a234:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	da0f      	bge.n	800a25e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a23e:	78fb      	ldrb	r3, [r7, #3]
 800a240:	f003 020f 	and.w	r2, r3, #15
 800a244:	4613      	mov	r3, r2
 800a246:	00db      	lsls	r3, r3, #3
 800a248:	4413      	add	r3, r2
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	3338      	adds	r3, #56	; 0x38
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	4413      	add	r3, r2
 800a252:	3304      	adds	r3, #4
 800a254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2201      	movs	r2, #1
 800a25a:	705a      	strb	r2, [r3, #1]
 800a25c:	e00f      	b.n	800a27e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a25e:	78fb      	ldrb	r3, [r7, #3]
 800a260:	f003 020f 	and.w	r2, r3, #15
 800a264:	4613      	mov	r3, r2
 800a266:	00db      	lsls	r3, r3, #3
 800a268:	4413      	add	r3, r2
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	4413      	add	r3, r2
 800a274:	3304      	adds	r3, #4
 800a276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2200      	movs	r2, #0
 800a27c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a27e:	78fb      	ldrb	r3, [r7, #3]
 800a280:	f003 030f 	and.w	r3, r3, #15
 800a284:	b2da      	uxtb	r2, r3
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a290:	2b01      	cmp	r3, #1
 800a292:	d101      	bne.n	800a298 <HAL_PCD_EP_Close+0x6e>
 800a294:	2302      	movs	r3, #2
 800a296:	e00e      	b.n	800a2b6 <HAL_PCD_EP_Close+0x8c>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	68f9      	ldr	r1, [r7, #12]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f001 fec0 	bl	800c02c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b086      	sub	sp, #24
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	60f8      	str	r0, [r7, #12]
 800a2c6:	607a      	str	r2, [r7, #4]
 800a2c8:	603b      	str	r3, [r7, #0]
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a2ce:	7afb      	ldrb	r3, [r7, #11]
 800a2d0:	f003 020f 	and.w	r2, r3, #15
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	00db      	lsls	r3, r3, #3
 800a2d8:	4413      	add	r3, r2
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	3304      	adds	r3, #4
 800a2e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	683a      	ldr	r2, [r7, #0]
 800a2f2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a300:	7afb      	ldrb	r3, [r7, #11]
 800a302:	f003 030f 	and.w	r3, r3, #15
 800a306:	b2da      	uxtb	r2, r3
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d102      	bne.n	800a31a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a31a:	7afb      	ldrb	r3, [r7, #11]
 800a31c:	f003 030f 	and.w	r3, r3, #15
 800a320:	2b00      	cmp	r3, #0
 800a322:	d109      	bne.n	800a338 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6818      	ldr	r0, [r3, #0]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	461a      	mov	r2, r3
 800a330:	6979      	ldr	r1, [r7, #20]
 800a332:	f002 f99f 	bl	800c674 <USB_EP0StartXfer>
 800a336:	e008      	b.n	800a34a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6818      	ldr	r0, [r3, #0]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	691b      	ldr	r3, [r3, #16]
 800a340:	b2db      	uxtb	r3, r3
 800a342:	461a      	mov	r2, r3
 800a344:	6979      	ldr	r1, [r7, #20]
 800a346:	f001 ff4d 	bl	800c1e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a34a:	2300      	movs	r3, #0
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3718      	adds	r7, #24
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	460b      	mov	r3, r1
 800a35e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a360:	78fb      	ldrb	r3, [r7, #3]
 800a362:	f003 020f 	and.w	r2, r3, #15
 800a366:	6879      	ldr	r1, [r7, #4]
 800a368:	4613      	mov	r3, r2
 800a36a:	00db      	lsls	r3, r3, #3
 800a36c:	4413      	add	r3, r2
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	440b      	add	r3, r1
 800a372:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800a376:	681b      	ldr	r3, [r3, #0]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b086      	sub	sp, #24
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	607a      	str	r2, [r7, #4]
 800a38e:	603b      	str	r3, [r7, #0]
 800a390:	460b      	mov	r3, r1
 800a392:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a394:	7afb      	ldrb	r3, [r7, #11]
 800a396:	f003 020f 	and.w	r2, r3, #15
 800a39a:	4613      	mov	r3, r2
 800a39c:	00db      	lsls	r3, r3, #3
 800a39e:	4413      	add	r3, r2
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	3338      	adds	r3, #56	; 0x38
 800a3a4:	68fa      	ldr	r2, [r7, #12]
 800a3a6:	4413      	add	r3, r2
 800a3a8:	3304      	adds	r3, #4
 800a3aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	683a      	ldr	r2, [r7, #0]
 800a3b6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a3c4:	7afb      	ldrb	r3, [r7, #11]
 800a3c6:	f003 030f 	and.w	r3, r3, #15
 800a3ca:	b2da      	uxtb	r2, r3
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	691b      	ldr	r3, [r3, #16]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d102      	bne.n	800a3de <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a3de:	7afb      	ldrb	r3, [r7, #11]
 800a3e0:	f003 030f 	and.w	r3, r3, #15
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d109      	bne.n	800a3fc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6818      	ldr	r0, [r3, #0]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	6979      	ldr	r1, [r7, #20]
 800a3f6:	f002 f93d 	bl	800c674 <USB_EP0StartXfer>
 800a3fa:	e008      	b.n	800a40e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6818      	ldr	r0, [r3, #0]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	691b      	ldr	r3, [r3, #16]
 800a404:	b2db      	uxtb	r3, r3
 800a406:	461a      	mov	r2, r3
 800a408:	6979      	ldr	r1, [r7, #20]
 800a40a:	f001 feeb 	bl	800c1e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	3718      	adds	r7, #24
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	460b      	mov	r3, r1
 800a422:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a424:	78fb      	ldrb	r3, [r7, #3]
 800a426:	f003 020f 	and.w	r2, r3, #15
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d901      	bls.n	800a436 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	e050      	b.n	800a4d8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a436:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	da0f      	bge.n	800a45e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a43e:	78fb      	ldrb	r3, [r7, #3]
 800a440:	f003 020f 	and.w	r2, r3, #15
 800a444:	4613      	mov	r3, r2
 800a446:	00db      	lsls	r3, r3, #3
 800a448:	4413      	add	r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	3338      	adds	r3, #56	; 0x38
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	4413      	add	r3, r2
 800a452:	3304      	adds	r3, #4
 800a454:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2201      	movs	r2, #1
 800a45a:	705a      	strb	r2, [r3, #1]
 800a45c:	e00d      	b.n	800a47a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a45e:	78fa      	ldrb	r2, [r7, #3]
 800a460:	4613      	mov	r3, r2
 800a462:	00db      	lsls	r3, r3, #3
 800a464:	4413      	add	r3, r2
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	4413      	add	r3, r2
 800a470:	3304      	adds	r3, #4
 800a472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2200      	movs	r2, #0
 800a478:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2201      	movs	r2, #1
 800a47e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a480:	78fb      	ldrb	r3, [r7, #3]
 800a482:	f003 030f 	and.w	r3, r3, #15
 800a486:	b2da      	uxtb	r2, r3
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a492:	2b01      	cmp	r3, #1
 800a494:	d101      	bne.n	800a49a <HAL_PCD_EP_SetStall+0x82>
 800a496:	2302      	movs	r3, #2
 800a498:	e01e      	b.n	800a4d8 <HAL_PCD_EP_SetStall+0xc0>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2201      	movs	r2, #1
 800a49e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	68f9      	ldr	r1, [r7, #12]
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f002 fb7b 	bl	800cba4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a4ae:	78fb      	ldrb	r3, [r7, #3]
 800a4b0:	f003 030f 	and.w	r3, r3, #15
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d10a      	bne.n	800a4ce <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6818      	ldr	r0, [r3, #0]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	b2d9      	uxtb	r1, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	f002 fd6b 	bl	800cfa4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a4ec:	78fb      	ldrb	r3, [r7, #3]
 800a4ee:	f003 020f 	and.w	r2, r3, #15
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d901      	bls.n	800a4fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e042      	b.n	800a584 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a4fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a502:	2b00      	cmp	r3, #0
 800a504:	da0f      	bge.n	800a526 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a506:	78fb      	ldrb	r3, [r7, #3]
 800a508:	f003 020f 	and.w	r2, r3, #15
 800a50c:	4613      	mov	r3, r2
 800a50e:	00db      	lsls	r3, r3, #3
 800a510:	4413      	add	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	3338      	adds	r3, #56	; 0x38
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	4413      	add	r3, r2
 800a51a:	3304      	adds	r3, #4
 800a51c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2201      	movs	r2, #1
 800a522:	705a      	strb	r2, [r3, #1]
 800a524:	e00f      	b.n	800a546 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a526:	78fb      	ldrb	r3, [r7, #3]
 800a528:	f003 020f 	and.w	r2, r3, #15
 800a52c:	4613      	mov	r3, r2
 800a52e:	00db      	lsls	r3, r3, #3
 800a530:	4413      	add	r3, r2
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	4413      	add	r3, r2
 800a53c:	3304      	adds	r3, #4
 800a53e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2200      	movs	r2, #0
 800a544:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2200      	movs	r2, #0
 800a54a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a54c:	78fb      	ldrb	r3, [r7, #3]
 800a54e:	f003 030f 	and.w	r3, r3, #15
 800a552:	b2da      	uxtb	r2, r3
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d101      	bne.n	800a566 <HAL_PCD_EP_ClrStall+0x86>
 800a562:	2302      	movs	r3, #2
 800a564:	e00e      	b.n	800a584 <HAL_PCD_EP_ClrStall+0xa4>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	68f9      	ldr	r1, [r7, #12]
 800a574:	4618      	mov	r0, r3
 800a576:	f002 fb83 	bl	800cc80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a582:	2300      	movs	r3, #0
}
 800a584:	4618      	mov	r0, r3
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	460b      	mov	r3, r1
 800a596:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a598:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	da0c      	bge.n	800a5ba <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a5a0:	78fb      	ldrb	r3, [r7, #3]
 800a5a2:	f003 020f 	and.w	r2, r3, #15
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	00db      	lsls	r3, r3, #3
 800a5aa:	4413      	add	r3, r2
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	3338      	adds	r3, #56	; 0x38
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	3304      	adds	r3, #4
 800a5b6:	60fb      	str	r3, [r7, #12]
 800a5b8:	e00c      	b.n	800a5d4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a5ba:	78fb      	ldrb	r3, [r7, #3]
 800a5bc:	f003 020f 	and.w	r2, r3, #15
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	00db      	lsls	r3, r3, #3
 800a5c4:	4413      	add	r3, r2
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	3304      	adds	r3, #4
 800a5d2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	68f9      	ldr	r1, [r7, #12]
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f002 f9a2 	bl	800c924 <USB_EPStopXfer>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a5e4:	7afb      	ldrb	r3, [r7, #11]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b08a      	sub	sp, #40	; 0x28
 800a5f2:	af02      	add	r7, sp, #8
 800a5f4:	6078      	str	r0, [r7, #4]
 800a5f6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a602:	683a      	ldr	r2, [r7, #0]
 800a604:	4613      	mov	r3, r2
 800a606:	00db      	lsls	r3, r3, #3
 800a608:	4413      	add	r3, r2
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	3338      	adds	r3, #56	; 0x38
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	4413      	add	r3, r2
 800a612:	3304      	adds	r3, #4
 800a614:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	6a1a      	ldr	r2, [r3, #32]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	699b      	ldr	r3, [r3, #24]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d901      	bls.n	800a626 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	e06c      	b.n	800a700 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	699a      	ldr	r2, [r3, #24]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	6a1b      	ldr	r3, [r3, #32]
 800a62e:	1ad3      	subs	r3, r2, r3
 800a630:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	69fa      	ldr	r2, [r7, #28]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d902      	bls.n	800a642 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	3303      	adds	r3, #3
 800a646:	089b      	lsrs	r3, r3, #2
 800a648:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a64a:	e02b      	b.n	800a6a4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	699a      	ldr	r2, [r3, #24]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6a1b      	ldr	r3, [r3, #32]
 800a654:	1ad3      	subs	r3, r2, r3
 800a656:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	69fa      	ldr	r2, [r7, #28]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d902      	bls.n	800a668 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	3303      	adds	r3, #3
 800a66c:	089b      	lsrs	r3, r3, #2
 800a66e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6919      	ldr	r1, [r3, #16]
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	b2da      	uxtb	r2, r3
 800a678:	69fb      	ldr	r3, [r7, #28]
 800a67a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a680:	b2db      	uxtb	r3, r3
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	4603      	mov	r3, r0
 800a686:	6978      	ldr	r0, [r7, #20]
 800a688:	f002 f9f6 	bl	800ca78 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	691a      	ldr	r2, [r3, #16]
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	441a      	add	r2, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	6a1a      	ldr	r2, [r3, #32]
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	441a      	add	r2, r3
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	015a      	lsls	r2, r3, #5
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6b0:	699b      	ldr	r3, [r3, #24]
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	69ba      	ldr	r2, [r7, #24]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d809      	bhi.n	800a6ce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6a1a      	ldr	r2, [r3, #32]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d203      	bcs.n	800a6ce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	699b      	ldr	r3, [r3, #24]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d1be      	bne.n	800a64c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	699a      	ldr	r2, [r3, #24]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6a1b      	ldr	r3, [r3, #32]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d811      	bhi.n	800a6fe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	f003 030f 	and.w	r3, r3, #15
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6e6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	43db      	mvns	r3, r3
 800a6f4:	6939      	ldr	r1, [r7, #16]
 800a6f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6fa:	4013      	ands	r3, r2
 800a6fc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a6fe:	2300      	movs	r3, #0
}
 800a700:	4618      	mov	r0, r3
 800a702:	3720      	adds	r7, #32
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b088      	sub	sp, #32
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	333c      	adds	r3, #60	; 0x3c
 800a720:	3304      	adds	r3, #4
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	015a      	lsls	r2, r3, #5
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	4413      	add	r3, r2
 800a72e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a732:	689b      	ldr	r3, [r3, #8]
 800a734:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d17b      	bne.n	800a836 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	f003 0308 	and.w	r3, r3, #8
 800a744:	2b00      	cmp	r3, #0
 800a746:	d015      	beq.n	800a774 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	4a61      	ldr	r2, [pc, #388]	; (800a8d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	f240 80b9 	bls.w	800a8c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f000 80b3 	beq.w	800a8c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	015a      	lsls	r2, r3, #5
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	4413      	add	r3, r2
 800a766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a76a:	461a      	mov	r2, r3
 800a76c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a770:	6093      	str	r3, [r2, #8]
 800a772:	e0a7      	b.n	800a8c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	f003 0320 	and.w	r3, r3, #32
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d009      	beq.n	800a792 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	015a      	lsls	r2, r3, #5
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	4413      	add	r3, r2
 800a786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a78a:	461a      	mov	r2, r3
 800a78c:	2320      	movs	r3, #32
 800a78e:	6093      	str	r3, [r2, #8]
 800a790:	e098      	b.n	800a8c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f040 8093 	bne.w	800a8c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	4a4b      	ldr	r2, [pc, #300]	; (800a8d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d90f      	bls.n	800a7c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00a      	beq.n	800a7c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	015a      	lsls	r2, r3, #5
 800a7b4:	69bb      	ldr	r3, [r7, #24]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7bc:	461a      	mov	r2, r3
 800a7be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7c2:	6093      	str	r3, [r2, #8]
 800a7c4:	e07e      	b.n	800a8c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	00db      	lsls	r3, r3, #3
 800a7cc:	4413      	add	r3, r2
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	3304      	adds	r3, #4
 800a7da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	69da      	ldr	r2, [r3, #28]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	0159      	lsls	r1, r3, #5
 800a7e4:	69bb      	ldr	r3, [r7, #24]
 800a7e6:	440b      	add	r3, r1
 800a7e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ec:	691b      	ldr	r3, [r3, #16]
 800a7ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7f2:	1ad2      	subs	r2, r2, r3
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d114      	bne.n	800a828 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	699b      	ldr	r3, [r3, #24]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d109      	bne.n	800a81a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6818      	ldr	r0, [r3, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a810:	461a      	mov	r2, r3
 800a812:	2101      	movs	r1, #1
 800a814:	f002 fbc6 	bl	800cfa4 <USB_EP0_OutStart>
 800a818:	e006      	b.n	800a828 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	691a      	ldr	r2, [r3, #16]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6a1b      	ldr	r3, [r3, #32]
 800a822:	441a      	add	r2, r3
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	4619      	mov	r1, r3
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f015 f858 	bl	801f8e4 <HAL_PCD_DataOutStageCallback>
 800a834:	e046      	b.n	800a8c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	4a26      	ldr	r2, [pc, #152]	; (800a8d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d124      	bne.n	800a888 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00a      	beq.n	800a85e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	015a      	lsls	r2, r3, #5
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	4413      	add	r3, r2
 800a850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a854:	461a      	mov	r2, r3
 800a856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a85a:	6093      	str	r3, [r2, #8]
 800a85c:	e032      	b.n	800a8c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	f003 0320 	and.w	r3, r3, #32
 800a864:	2b00      	cmp	r3, #0
 800a866:	d008      	beq.n	800a87a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	015a      	lsls	r2, r3, #5
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	4413      	add	r3, r2
 800a870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a874:	461a      	mov	r2, r3
 800a876:	2320      	movs	r3, #32
 800a878:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	4619      	mov	r1, r3
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f015 f82f 	bl	801f8e4 <HAL_PCD_DataOutStageCallback>
 800a886:	e01d      	b.n	800a8c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d114      	bne.n	800a8b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800a88e:	6879      	ldr	r1, [r7, #4]
 800a890:	683a      	ldr	r2, [r7, #0]
 800a892:	4613      	mov	r3, r2
 800a894:	00db      	lsls	r3, r3, #3
 800a896:	4413      	add	r3, r2
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	440b      	add	r3, r1
 800a89c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d108      	bne.n	800a8b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6818      	ldr	r0, [r3, #0]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	2100      	movs	r1, #0
 800a8b4:	f002 fb76 	bl	800cfa4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	4619      	mov	r1, r3
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f015 f810 	bl	801f8e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3720      	adds	r7, #32
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	4f54300a 	.word	0x4f54300a
 800a8d4:	4f54310a 	.word	0x4f54310a

0800a8d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b086      	sub	sp, #24
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	333c      	adds	r3, #60	; 0x3c
 800a8f0:	3304      	adds	r3, #4
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	015a      	lsls	r2, r3, #5
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	4a15      	ldr	r2, [pc, #84]	; (800a960 <PCD_EP_OutSetupPacket_int+0x88>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d90e      	bls.n	800a92c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a914:	2b00      	cmp	r3, #0
 800a916:	d009      	beq.n	800a92c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	015a      	lsls	r2, r3, #5
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	4413      	add	r3, r2
 800a920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a924:	461a      	mov	r2, r3
 800a926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a92a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f014 ffc7 	bl	801f8c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	4a0a      	ldr	r2, [pc, #40]	; (800a960 <PCD_EP_OutSetupPacket_int+0x88>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d90c      	bls.n	800a954 <PCD_EP_OutSetupPacket_int+0x7c>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d108      	bne.n	800a954 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6818      	ldr	r0, [r3, #0]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a94c:	461a      	mov	r2, r3
 800a94e:	2101      	movs	r1, #1
 800a950:	f002 fb28 	bl	800cfa4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3718      	adds	r7, #24
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	4f54300a 	.word	0x4f54300a

0800a964 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a964:	b480      	push	{r7}
 800a966:	b085      	sub	sp, #20
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	460b      	mov	r3, r1
 800a96e:	70fb      	strb	r3, [r7, #3]
 800a970:	4613      	mov	r3, r2
 800a972:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a97c:	78fb      	ldrb	r3, [r7, #3]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d107      	bne.n	800a992 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a982:	883b      	ldrh	r3, [r7, #0]
 800a984:	0419      	lsls	r1, r3, #16
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68ba      	ldr	r2, [r7, #8]
 800a98c:	430a      	orrs	r2, r1
 800a98e:	629a      	str	r2, [r3, #40]	; 0x28
 800a990:	e028      	b.n	800a9e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a998:	0c1b      	lsrs	r3, r3, #16
 800a99a:	68ba      	ldr	r2, [r7, #8]
 800a99c:	4413      	add	r3, r2
 800a99e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	73fb      	strb	r3, [r7, #15]
 800a9a4:	e00d      	b.n	800a9c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	7bfb      	ldrb	r3, [r7, #15]
 800a9ac:	3340      	adds	r3, #64	; 0x40
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	4413      	add	r3, r2
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	0c1b      	lsrs	r3, r3, #16
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a9bc:	7bfb      	ldrb	r3, [r7, #15]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	73fb      	strb	r3, [r7, #15]
 800a9c2:	7bfa      	ldrb	r2, [r7, #15]
 800a9c4:	78fb      	ldrb	r3, [r7, #3]
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d3ec      	bcc.n	800a9a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a9cc:	883b      	ldrh	r3, [r7, #0]
 800a9ce:	0418      	lsls	r0, r3, #16
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6819      	ldr	r1, [r3, #0]
 800a9d4:	78fb      	ldrb	r3, [r7, #3]
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	68ba      	ldr	r2, [r7, #8]
 800a9da:	4302      	orrs	r2, r0
 800a9dc:	3340      	adds	r3, #64	; 0x40
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	440b      	add	r3, r1
 800a9e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3714      	adds	r7, #20
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr

0800a9f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b083      	sub	sp, #12
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	887a      	ldrh	r2, [r7, #2]
 800aa04:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800aa06:	2300      	movs	r3, #0
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b086      	sub	sp, #24
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d101      	bne.n	800aa3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e267      	b.n	800af0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f003 0301 	and.w	r3, r3, #1
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d075      	beq.n	800ab36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aa4a:	4b88      	ldr	r3, [pc, #544]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	f003 030c 	and.w	r3, r3, #12
 800aa52:	2b04      	cmp	r3, #4
 800aa54:	d00c      	beq.n	800aa70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aa56:	4b85      	ldr	r3, [pc, #532]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aa5e:	2b08      	cmp	r3, #8
 800aa60:	d112      	bne.n	800aa88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aa62:	4b82      	ldr	r3, [pc, #520]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa6e:	d10b      	bne.n	800aa88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa70:	4b7e      	ldr	r3, [pc, #504]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d05b      	beq.n	800ab34 <HAL_RCC_OscConfig+0x108>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d157      	bne.n	800ab34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	e242      	b.n	800af0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa90:	d106      	bne.n	800aaa0 <HAL_RCC_OscConfig+0x74>
 800aa92:	4b76      	ldr	r3, [pc, #472]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a75      	ldr	r2, [pc, #468]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800aa98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa9c:	6013      	str	r3, [r2, #0]
 800aa9e:	e01d      	b.n	800aadc <HAL_RCC_OscConfig+0xb0>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aaa8:	d10c      	bne.n	800aac4 <HAL_RCC_OscConfig+0x98>
 800aaaa:	4b70      	ldr	r3, [pc, #448]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a6f      	ldr	r2, [pc, #444]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800aab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aab4:	6013      	str	r3, [r2, #0]
 800aab6:	4b6d      	ldr	r3, [pc, #436]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a6c      	ldr	r2, [pc, #432]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800aabc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aac0:	6013      	str	r3, [r2, #0]
 800aac2:	e00b      	b.n	800aadc <HAL_RCC_OscConfig+0xb0>
 800aac4:	4b69      	ldr	r3, [pc, #420]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a68      	ldr	r2, [pc, #416]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800aaca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aace:	6013      	str	r3, [r2, #0]
 800aad0:	4b66      	ldr	r3, [pc, #408]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a65      	ldr	r2, [pc, #404]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800aad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d013      	beq.n	800ab0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aae4:	f7fe fa12 	bl	8008f0c <HAL_GetTick>
 800aae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aaea:	e008      	b.n	800aafe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aaec:	f7fe fa0e 	bl	8008f0c <HAL_GetTick>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	1ad3      	subs	r3, r2, r3
 800aaf6:	2b64      	cmp	r3, #100	; 0x64
 800aaf8:	d901      	bls.n	800aafe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800aafa:	2303      	movs	r3, #3
 800aafc:	e207      	b.n	800af0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aafe:	4b5b      	ldr	r3, [pc, #364]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d0f0      	beq.n	800aaec <HAL_RCC_OscConfig+0xc0>
 800ab0a:	e014      	b.n	800ab36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab0c:	f7fe f9fe 	bl	8008f0c <HAL_GetTick>
 800ab10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ab12:	e008      	b.n	800ab26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ab14:	f7fe f9fa 	bl	8008f0c <HAL_GetTick>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	1ad3      	subs	r3, r2, r3
 800ab1e:	2b64      	cmp	r3, #100	; 0x64
 800ab20:	d901      	bls.n	800ab26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ab22:	2303      	movs	r3, #3
 800ab24:	e1f3      	b.n	800af0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ab26:	4b51      	ldr	r3, [pc, #324]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1f0      	bne.n	800ab14 <HAL_RCC_OscConfig+0xe8>
 800ab32:	e000      	b.n	800ab36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f003 0302 	and.w	r3, r3, #2
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d063      	beq.n	800ac0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ab42:	4b4a      	ldr	r3, [pc, #296]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	f003 030c 	and.w	r3, r3, #12
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00b      	beq.n	800ab66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ab4e:	4b47      	ldr	r3, [pc, #284]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ab56:	2b08      	cmp	r3, #8
 800ab58:	d11c      	bne.n	800ab94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ab5a:	4b44      	ldr	r3, [pc, #272]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d116      	bne.n	800ab94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab66:	4b41      	ldr	r3, [pc, #260]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f003 0302 	and.w	r3, r3, #2
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d005      	beq.n	800ab7e <HAL_RCC_OscConfig+0x152>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d001      	beq.n	800ab7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e1c7      	b.n	800af0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab7e:	4b3b      	ldr	r3, [pc, #236]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	00db      	lsls	r3, r3, #3
 800ab8c:	4937      	ldr	r1, [pc, #220]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab92:	e03a      	b.n	800ac0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d020      	beq.n	800abde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ab9c:	4b34      	ldr	r3, [pc, #208]	; (800ac70 <HAL_RCC_OscConfig+0x244>)
 800ab9e:	2201      	movs	r2, #1
 800aba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aba2:	f7fe f9b3 	bl	8008f0c <HAL_GetTick>
 800aba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aba8:	e008      	b.n	800abbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800abaa:	f7fe f9af 	bl	8008f0c <HAL_GetTick>
 800abae:	4602      	mov	r2, r0
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	1ad3      	subs	r3, r2, r3
 800abb4:	2b02      	cmp	r3, #2
 800abb6:	d901      	bls.n	800abbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800abb8:	2303      	movs	r3, #3
 800abba:	e1a8      	b.n	800af0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800abbc:	4b2b      	ldr	r3, [pc, #172]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f003 0302 	and.w	r3, r3, #2
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d0f0      	beq.n	800abaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abc8:	4b28      	ldr	r3, [pc, #160]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	00db      	lsls	r3, r3, #3
 800abd6:	4925      	ldr	r1, [pc, #148]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800abd8:	4313      	orrs	r3, r2
 800abda:	600b      	str	r3, [r1, #0]
 800abdc:	e015      	b.n	800ac0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800abde:	4b24      	ldr	r3, [pc, #144]	; (800ac70 <HAL_RCC_OscConfig+0x244>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abe4:	f7fe f992 	bl	8008f0c <HAL_GetTick>
 800abe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800abea:	e008      	b.n	800abfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800abec:	f7fe f98e 	bl	8008f0c <HAL_GetTick>
 800abf0:	4602      	mov	r2, r0
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	1ad3      	subs	r3, r2, r3
 800abf6:	2b02      	cmp	r3, #2
 800abf8:	d901      	bls.n	800abfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800abfa:	2303      	movs	r3, #3
 800abfc:	e187      	b.n	800af0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800abfe:	4b1b      	ldr	r3, [pc, #108]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f003 0302 	and.w	r3, r3, #2
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d1f0      	bne.n	800abec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f003 0308 	and.w	r3, r3, #8
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d036      	beq.n	800ac84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	695b      	ldr	r3, [r3, #20]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d016      	beq.n	800ac4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ac1e:	4b15      	ldr	r3, [pc, #84]	; (800ac74 <HAL_RCC_OscConfig+0x248>)
 800ac20:	2201      	movs	r2, #1
 800ac22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac24:	f7fe f972 	bl	8008f0c <HAL_GetTick>
 800ac28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ac2a:	e008      	b.n	800ac3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ac2c:	f7fe f96e 	bl	8008f0c <HAL_GetTick>
 800ac30:	4602      	mov	r2, r0
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	1ad3      	subs	r3, r2, r3
 800ac36:	2b02      	cmp	r3, #2
 800ac38:	d901      	bls.n	800ac3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ac3a:	2303      	movs	r3, #3
 800ac3c:	e167      	b.n	800af0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ac3e:	4b0b      	ldr	r3, [pc, #44]	; (800ac6c <HAL_RCC_OscConfig+0x240>)
 800ac40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac42:	f003 0302 	and.w	r3, r3, #2
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d0f0      	beq.n	800ac2c <HAL_RCC_OscConfig+0x200>
 800ac4a:	e01b      	b.n	800ac84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ac4c:	4b09      	ldr	r3, [pc, #36]	; (800ac74 <HAL_RCC_OscConfig+0x248>)
 800ac4e:	2200      	movs	r2, #0
 800ac50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac52:	f7fe f95b 	bl	8008f0c <HAL_GetTick>
 800ac56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac58:	e00e      	b.n	800ac78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ac5a:	f7fe f957 	bl	8008f0c <HAL_GetTick>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	1ad3      	subs	r3, r2, r3
 800ac64:	2b02      	cmp	r3, #2
 800ac66:	d907      	bls.n	800ac78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ac68:	2303      	movs	r3, #3
 800ac6a:	e150      	b.n	800af0e <HAL_RCC_OscConfig+0x4e2>
 800ac6c:	40023800 	.word	0x40023800
 800ac70:	42470000 	.word	0x42470000
 800ac74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac78:	4b88      	ldr	r3, [pc, #544]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800ac7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac7c:	f003 0302 	and.w	r3, r3, #2
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d1ea      	bne.n	800ac5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f003 0304 	and.w	r3, r3, #4
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	f000 8097 	beq.w	800adc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ac92:	2300      	movs	r3, #0
 800ac94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ac96:	4b81      	ldr	r3, [pc, #516]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800ac98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d10f      	bne.n	800acc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aca2:	2300      	movs	r3, #0
 800aca4:	60bb      	str	r3, [r7, #8]
 800aca6:	4b7d      	ldr	r3, [pc, #500]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800aca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acaa:	4a7c      	ldr	r2, [pc, #496]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800acac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acb0:	6413      	str	r3, [r2, #64]	; 0x40
 800acb2:	4b7a      	ldr	r3, [pc, #488]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800acb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acba:	60bb      	str	r3, [r7, #8]
 800acbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800acbe:	2301      	movs	r3, #1
 800acc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800acc2:	4b77      	ldr	r3, [pc, #476]	; (800aea0 <HAL_RCC_OscConfig+0x474>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acca:	2b00      	cmp	r3, #0
 800accc:	d118      	bne.n	800ad00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800acce:	4b74      	ldr	r3, [pc, #464]	; (800aea0 <HAL_RCC_OscConfig+0x474>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a73      	ldr	r2, [pc, #460]	; (800aea0 <HAL_RCC_OscConfig+0x474>)
 800acd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800acda:	f7fe f917 	bl	8008f0c <HAL_GetTick>
 800acde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ace0:	e008      	b.n	800acf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ace2:	f7fe f913 	bl	8008f0c <HAL_GetTick>
 800ace6:	4602      	mov	r2, r0
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	2b02      	cmp	r3, #2
 800acee:	d901      	bls.n	800acf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800acf0:	2303      	movs	r3, #3
 800acf2:	e10c      	b.n	800af0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800acf4:	4b6a      	ldr	r3, [pc, #424]	; (800aea0 <HAL_RCC_OscConfig+0x474>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d0f0      	beq.n	800ace2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d106      	bne.n	800ad16 <HAL_RCC_OscConfig+0x2ea>
 800ad08:	4b64      	ldr	r3, [pc, #400]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800ad0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad0c:	4a63      	ldr	r2, [pc, #396]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800ad0e:	f043 0301 	orr.w	r3, r3, #1
 800ad12:	6713      	str	r3, [r2, #112]	; 0x70
 800ad14:	e01c      	b.n	800ad50 <HAL_RCC_OscConfig+0x324>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	2b05      	cmp	r3, #5
 800ad1c:	d10c      	bne.n	800ad38 <HAL_RCC_OscConfig+0x30c>
 800ad1e:	4b5f      	ldr	r3, [pc, #380]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800ad20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad22:	4a5e      	ldr	r2, [pc, #376]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800ad24:	f043 0304 	orr.w	r3, r3, #4
 800ad28:	6713      	str	r3, [r2, #112]	; 0x70
 800ad2a:	4b5c      	ldr	r3, [pc, #368]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800ad2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad2e:	4a5b      	ldr	r2, [pc, #364]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800ad30:	f043 0301 	orr.w	r3, r3, #1
 800ad34:	6713      	str	r3, [r2, #112]	; 0x70
 800ad36:	e00b      	b.n	800ad50 <HAL_RCC_OscConfig+0x324>
 800ad38:	4b58      	ldr	r3, [pc, #352]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800ad3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad3c:	4a57      	ldr	r2, [pc, #348]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800ad3e:	f023 0301 	bic.w	r3, r3, #1
 800ad42:	6713      	str	r3, [r2, #112]	; 0x70
 800ad44:	4b55      	ldr	r3, [pc, #340]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800ad46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad48:	4a54      	ldr	r2, [pc, #336]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800ad4a:	f023 0304 	bic.w	r3, r3, #4
 800ad4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d015      	beq.n	800ad84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad58:	f7fe f8d8 	bl	8008f0c <HAL_GetTick>
 800ad5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad5e:	e00a      	b.n	800ad76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ad60:	f7fe f8d4 	bl	8008f0c <HAL_GetTick>
 800ad64:	4602      	mov	r2, r0
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	1ad3      	subs	r3, r2, r3
 800ad6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d901      	bls.n	800ad76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ad72:	2303      	movs	r3, #3
 800ad74:	e0cb      	b.n	800af0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad76:	4b49      	ldr	r3, [pc, #292]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800ad78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad7a:	f003 0302 	and.w	r3, r3, #2
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d0ee      	beq.n	800ad60 <HAL_RCC_OscConfig+0x334>
 800ad82:	e014      	b.n	800adae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad84:	f7fe f8c2 	bl	8008f0c <HAL_GetTick>
 800ad88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad8a:	e00a      	b.n	800ada2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ad8c:	f7fe f8be 	bl	8008f0c <HAL_GetTick>
 800ad90:	4602      	mov	r2, r0
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	1ad3      	subs	r3, r2, r3
 800ad96:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d901      	bls.n	800ada2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ad9e:	2303      	movs	r3, #3
 800ada0:	e0b5      	b.n	800af0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ada2:	4b3e      	ldr	r3, [pc, #248]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800ada4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ada6:	f003 0302 	and.w	r3, r3, #2
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1ee      	bne.n	800ad8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800adae:	7dfb      	ldrb	r3, [r7, #23]
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d105      	bne.n	800adc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800adb4:	4b39      	ldr	r3, [pc, #228]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800adb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb8:	4a38      	ldr	r2, [pc, #224]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800adba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800adbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	699b      	ldr	r3, [r3, #24]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	f000 80a1 	beq.w	800af0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800adca:	4b34      	ldr	r3, [pc, #208]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	f003 030c 	and.w	r3, r3, #12
 800add2:	2b08      	cmp	r3, #8
 800add4:	d05c      	beq.n	800ae90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	699b      	ldr	r3, [r3, #24]
 800adda:	2b02      	cmp	r3, #2
 800addc:	d141      	bne.n	800ae62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800adde:	4b31      	ldr	r3, [pc, #196]	; (800aea4 <HAL_RCC_OscConfig+0x478>)
 800ade0:	2200      	movs	r2, #0
 800ade2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ade4:	f7fe f892 	bl	8008f0c <HAL_GetTick>
 800ade8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800adea:	e008      	b.n	800adfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800adec:	f7fe f88e 	bl	8008f0c <HAL_GetTick>
 800adf0:	4602      	mov	r2, r0
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	1ad3      	subs	r3, r2, r3
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	d901      	bls.n	800adfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800adfa:	2303      	movs	r3, #3
 800adfc:	e087      	b.n	800af0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800adfe:	4b27      	ldr	r3, [pc, #156]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1f0      	bne.n	800adec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	69da      	ldr	r2, [r3, #28]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a1b      	ldr	r3, [r3, #32]
 800ae12:	431a      	orrs	r2, r3
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae18:	019b      	lsls	r3, r3, #6
 800ae1a:	431a      	orrs	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae20:	085b      	lsrs	r3, r3, #1
 800ae22:	3b01      	subs	r3, #1
 800ae24:	041b      	lsls	r3, r3, #16
 800ae26:	431a      	orrs	r2, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae2c:	061b      	lsls	r3, r3, #24
 800ae2e:	491b      	ldr	r1, [pc, #108]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800ae30:	4313      	orrs	r3, r2
 800ae32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ae34:	4b1b      	ldr	r3, [pc, #108]	; (800aea4 <HAL_RCC_OscConfig+0x478>)
 800ae36:	2201      	movs	r2, #1
 800ae38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae3a:	f7fe f867 	bl	8008f0c <HAL_GetTick>
 800ae3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae40:	e008      	b.n	800ae54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae42:	f7fe f863 	bl	8008f0c <HAL_GetTick>
 800ae46:	4602      	mov	r2, r0
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	2b02      	cmp	r3, #2
 800ae4e:	d901      	bls.n	800ae54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ae50:	2303      	movs	r3, #3
 800ae52:	e05c      	b.n	800af0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae54:	4b11      	ldr	r3, [pc, #68]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d0f0      	beq.n	800ae42 <HAL_RCC_OscConfig+0x416>
 800ae60:	e054      	b.n	800af0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae62:	4b10      	ldr	r3, [pc, #64]	; (800aea4 <HAL_RCC_OscConfig+0x478>)
 800ae64:	2200      	movs	r2, #0
 800ae66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae68:	f7fe f850 	bl	8008f0c <HAL_GetTick>
 800ae6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae6e:	e008      	b.n	800ae82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae70:	f7fe f84c 	bl	8008f0c <HAL_GetTick>
 800ae74:	4602      	mov	r2, r0
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	1ad3      	subs	r3, r2, r3
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	d901      	bls.n	800ae82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ae7e:	2303      	movs	r3, #3
 800ae80:	e045      	b.n	800af0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae82:	4b06      	ldr	r3, [pc, #24]	; (800ae9c <HAL_RCC_OscConfig+0x470>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d1f0      	bne.n	800ae70 <HAL_RCC_OscConfig+0x444>
 800ae8e:	e03d      	b.n	800af0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	699b      	ldr	r3, [r3, #24]
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d107      	bne.n	800aea8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e038      	b.n	800af0e <HAL_RCC_OscConfig+0x4e2>
 800ae9c:	40023800 	.word	0x40023800
 800aea0:	40007000 	.word	0x40007000
 800aea4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800aea8:	4b1b      	ldr	r3, [pc, #108]	; (800af18 <HAL_RCC_OscConfig+0x4ec>)
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	699b      	ldr	r3, [r3, #24]
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d028      	beq.n	800af08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d121      	bne.n	800af08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aece:	429a      	cmp	r2, r3
 800aed0:	d11a      	bne.n	800af08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800aed2:	68fa      	ldr	r2, [r7, #12]
 800aed4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800aed8:	4013      	ands	r3, r2
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aede:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d111      	bne.n	800af08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeee:	085b      	lsrs	r3, r3, #1
 800aef0:	3b01      	subs	r3, #1
 800aef2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d107      	bne.n	800af08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800af04:	429a      	cmp	r2, r3
 800af06:	d001      	beq.n	800af0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800af08:	2301      	movs	r3, #1
 800af0a:	e000      	b.n	800af0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3718      	adds	r7, #24
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	40023800 	.word	0x40023800

0800af1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d101      	bne.n	800af30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	e0cc      	b.n	800b0ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800af30:	4b68      	ldr	r3, [pc, #416]	; (800b0d4 <HAL_RCC_ClockConfig+0x1b8>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f003 0307 	and.w	r3, r3, #7
 800af38:	683a      	ldr	r2, [r7, #0]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d90c      	bls.n	800af58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af3e:	4b65      	ldr	r3, [pc, #404]	; (800b0d4 <HAL_RCC_ClockConfig+0x1b8>)
 800af40:	683a      	ldr	r2, [r7, #0]
 800af42:	b2d2      	uxtb	r2, r2
 800af44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800af46:	4b63      	ldr	r3, [pc, #396]	; (800b0d4 <HAL_RCC_ClockConfig+0x1b8>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f003 0307 	and.w	r3, r3, #7
 800af4e:	683a      	ldr	r2, [r7, #0]
 800af50:	429a      	cmp	r2, r3
 800af52:	d001      	beq.n	800af58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800af54:	2301      	movs	r3, #1
 800af56:	e0b8      	b.n	800b0ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 0302 	and.w	r3, r3, #2
 800af60:	2b00      	cmp	r3, #0
 800af62:	d020      	beq.n	800afa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f003 0304 	and.w	r3, r3, #4
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d005      	beq.n	800af7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800af70:	4b59      	ldr	r3, [pc, #356]	; (800b0d8 <HAL_RCC_ClockConfig+0x1bc>)
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	4a58      	ldr	r2, [pc, #352]	; (800b0d8 <HAL_RCC_ClockConfig+0x1bc>)
 800af76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800af7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f003 0308 	and.w	r3, r3, #8
 800af84:	2b00      	cmp	r3, #0
 800af86:	d005      	beq.n	800af94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800af88:	4b53      	ldr	r3, [pc, #332]	; (800b0d8 <HAL_RCC_ClockConfig+0x1bc>)
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	4a52      	ldr	r2, [pc, #328]	; (800b0d8 <HAL_RCC_ClockConfig+0x1bc>)
 800af8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800af92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af94:	4b50      	ldr	r3, [pc, #320]	; (800b0d8 <HAL_RCC_ClockConfig+0x1bc>)
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	689b      	ldr	r3, [r3, #8]
 800afa0:	494d      	ldr	r1, [pc, #308]	; (800b0d8 <HAL_RCC_ClockConfig+0x1bc>)
 800afa2:	4313      	orrs	r3, r2
 800afa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f003 0301 	and.w	r3, r3, #1
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d044      	beq.n	800b03c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d107      	bne.n	800afca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afba:	4b47      	ldr	r3, [pc, #284]	; (800b0d8 <HAL_RCC_ClockConfig+0x1bc>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d119      	bne.n	800affa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800afc6:	2301      	movs	r3, #1
 800afc8:	e07f      	b.n	800b0ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	2b02      	cmp	r3, #2
 800afd0:	d003      	beq.n	800afda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800afd6:	2b03      	cmp	r3, #3
 800afd8:	d107      	bne.n	800afea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800afda:	4b3f      	ldr	r3, [pc, #252]	; (800b0d8 <HAL_RCC_ClockConfig+0x1bc>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d109      	bne.n	800affa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	e06f      	b.n	800b0ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800afea:	4b3b      	ldr	r3, [pc, #236]	; (800b0d8 <HAL_RCC_ClockConfig+0x1bc>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f003 0302 	and.w	r3, r3, #2
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d101      	bne.n	800affa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	e067      	b.n	800b0ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800affa:	4b37      	ldr	r3, [pc, #220]	; (800b0d8 <HAL_RCC_ClockConfig+0x1bc>)
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	f023 0203 	bic.w	r2, r3, #3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	4934      	ldr	r1, [pc, #208]	; (800b0d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b008:	4313      	orrs	r3, r2
 800b00a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b00c:	f7fd ff7e 	bl	8008f0c <HAL_GetTick>
 800b010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b012:	e00a      	b.n	800b02a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b014:	f7fd ff7a 	bl	8008f0c <HAL_GetTick>
 800b018:	4602      	mov	r2, r0
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	1ad3      	subs	r3, r2, r3
 800b01e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b022:	4293      	cmp	r3, r2
 800b024:	d901      	bls.n	800b02a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b026:	2303      	movs	r3, #3
 800b028:	e04f      	b.n	800b0ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b02a:	4b2b      	ldr	r3, [pc, #172]	; (800b0d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	f003 020c 	and.w	r2, r3, #12
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	429a      	cmp	r2, r3
 800b03a:	d1eb      	bne.n	800b014 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b03c:	4b25      	ldr	r3, [pc, #148]	; (800b0d4 <HAL_RCC_ClockConfig+0x1b8>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f003 0307 	and.w	r3, r3, #7
 800b044:	683a      	ldr	r2, [r7, #0]
 800b046:	429a      	cmp	r2, r3
 800b048:	d20c      	bcs.n	800b064 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b04a:	4b22      	ldr	r3, [pc, #136]	; (800b0d4 <HAL_RCC_ClockConfig+0x1b8>)
 800b04c:	683a      	ldr	r2, [r7, #0]
 800b04e:	b2d2      	uxtb	r2, r2
 800b050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b052:	4b20      	ldr	r3, [pc, #128]	; (800b0d4 <HAL_RCC_ClockConfig+0x1b8>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f003 0307 	and.w	r3, r3, #7
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d001      	beq.n	800b064 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b060:	2301      	movs	r3, #1
 800b062:	e032      	b.n	800b0ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f003 0304 	and.w	r3, r3, #4
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d008      	beq.n	800b082 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b070:	4b19      	ldr	r3, [pc, #100]	; (800b0d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	4916      	ldr	r1, [pc, #88]	; (800b0d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b07e:	4313      	orrs	r3, r2
 800b080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f003 0308 	and.w	r3, r3, #8
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d009      	beq.n	800b0a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b08e:	4b12      	ldr	r3, [pc, #72]	; (800b0d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b090:	689b      	ldr	r3, [r3, #8]
 800b092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	691b      	ldr	r3, [r3, #16]
 800b09a:	00db      	lsls	r3, r3, #3
 800b09c:	490e      	ldr	r1, [pc, #56]	; (800b0d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b0a2:	f000 f821 	bl	800b0e8 <HAL_RCC_GetSysClockFreq>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	4b0b      	ldr	r3, [pc, #44]	; (800b0d8 <HAL_RCC_ClockConfig+0x1bc>)
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	091b      	lsrs	r3, r3, #4
 800b0ae:	f003 030f 	and.w	r3, r3, #15
 800b0b2:	490a      	ldr	r1, [pc, #40]	; (800b0dc <HAL_RCC_ClockConfig+0x1c0>)
 800b0b4:	5ccb      	ldrb	r3, [r1, r3]
 800b0b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b0ba:	4a09      	ldr	r2, [pc, #36]	; (800b0e0 <HAL_RCC_ClockConfig+0x1c4>)
 800b0bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b0be:	4b09      	ldr	r3, [pc, #36]	; (800b0e4 <HAL_RCC_ClockConfig+0x1c8>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7fd fede 	bl	8008e84 <HAL_InitTick>

  return HAL_OK;
 800b0c8:	2300      	movs	r3, #0
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	40023c00 	.word	0x40023c00
 800b0d8:	40023800 	.word	0x40023800
 800b0dc:	08028a68 	.word	0x08028a68
 800b0e0:	20000074 	.word	0x20000074
 800b0e4:	20000078 	.word	0x20000078

0800b0e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b0e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0ec:	b094      	sub	sp, #80	; 0x50
 800b0ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	647b      	str	r3, [r7, #68]	; 0x44
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b100:	4b79      	ldr	r3, [pc, #484]	; (800b2e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	f003 030c 	and.w	r3, r3, #12
 800b108:	2b08      	cmp	r3, #8
 800b10a:	d00d      	beq.n	800b128 <HAL_RCC_GetSysClockFreq+0x40>
 800b10c:	2b08      	cmp	r3, #8
 800b10e:	f200 80e1 	bhi.w	800b2d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b112:	2b00      	cmp	r3, #0
 800b114:	d002      	beq.n	800b11c <HAL_RCC_GetSysClockFreq+0x34>
 800b116:	2b04      	cmp	r3, #4
 800b118:	d003      	beq.n	800b122 <HAL_RCC_GetSysClockFreq+0x3a>
 800b11a:	e0db      	b.n	800b2d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b11c:	4b73      	ldr	r3, [pc, #460]	; (800b2ec <HAL_RCC_GetSysClockFreq+0x204>)
 800b11e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800b120:	e0db      	b.n	800b2da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b122:	4b73      	ldr	r3, [pc, #460]	; (800b2f0 <HAL_RCC_GetSysClockFreq+0x208>)
 800b124:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b126:	e0d8      	b.n	800b2da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b128:	4b6f      	ldr	r3, [pc, #444]	; (800b2e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b130:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b132:	4b6d      	ldr	r3, [pc, #436]	; (800b2e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d063      	beq.n	800b206 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b13e:	4b6a      	ldr	r3, [pc, #424]	; (800b2e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	099b      	lsrs	r3, r3, #6
 800b144:	2200      	movs	r2, #0
 800b146:	63bb      	str	r3, [r7, #56]	; 0x38
 800b148:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b150:	633b      	str	r3, [r7, #48]	; 0x30
 800b152:	2300      	movs	r3, #0
 800b154:	637b      	str	r3, [r7, #52]	; 0x34
 800b156:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b15a:	4622      	mov	r2, r4
 800b15c:	462b      	mov	r3, r5
 800b15e:	f04f 0000 	mov.w	r0, #0
 800b162:	f04f 0100 	mov.w	r1, #0
 800b166:	0159      	lsls	r1, r3, #5
 800b168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b16c:	0150      	lsls	r0, r2, #5
 800b16e:	4602      	mov	r2, r0
 800b170:	460b      	mov	r3, r1
 800b172:	4621      	mov	r1, r4
 800b174:	1a51      	subs	r1, r2, r1
 800b176:	6139      	str	r1, [r7, #16]
 800b178:	4629      	mov	r1, r5
 800b17a:	eb63 0301 	sbc.w	r3, r3, r1
 800b17e:	617b      	str	r3, [r7, #20]
 800b180:	f04f 0200 	mov.w	r2, #0
 800b184:	f04f 0300 	mov.w	r3, #0
 800b188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b18c:	4659      	mov	r1, fp
 800b18e:	018b      	lsls	r3, r1, #6
 800b190:	4651      	mov	r1, sl
 800b192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b196:	4651      	mov	r1, sl
 800b198:	018a      	lsls	r2, r1, #6
 800b19a:	4651      	mov	r1, sl
 800b19c:	ebb2 0801 	subs.w	r8, r2, r1
 800b1a0:	4659      	mov	r1, fp
 800b1a2:	eb63 0901 	sbc.w	r9, r3, r1
 800b1a6:	f04f 0200 	mov.w	r2, #0
 800b1aa:	f04f 0300 	mov.w	r3, #0
 800b1ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b1b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b1b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b1ba:	4690      	mov	r8, r2
 800b1bc:	4699      	mov	r9, r3
 800b1be:	4623      	mov	r3, r4
 800b1c0:	eb18 0303 	adds.w	r3, r8, r3
 800b1c4:	60bb      	str	r3, [r7, #8]
 800b1c6:	462b      	mov	r3, r5
 800b1c8:	eb49 0303 	adc.w	r3, r9, r3
 800b1cc:	60fb      	str	r3, [r7, #12]
 800b1ce:	f04f 0200 	mov.w	r2, #0
 800b1d2:	f04f 0300 	mov.w	r3, #0
 800b1d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b1da:	4629      	mov	r1, r5
 800b1dc:	024b      	lsls	r3, r1, #9
 800b1de:	4621      	mov	r1, r4
 800b1e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b1e4:	4621      	mov	r1, r4
 800b1e6:	024a      	lsls	r2, r1, #9
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b1f8:	f7f5 fda0 	bl	8000d3c <__aeabi_uldivmod>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	460b      	mov	r3, r1
 800b200:	4613      	mov	r3, r2
 800b202:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b204:	e058      	b.n	800b2b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b206:	4b38      	ldr	r3, [pc, #224]	; (800b2e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	099b      	lsrs	r3, r3, #6
 800b20c:	2200      	movs	r2, #0
 800b20e:	4618      	mov	r0, r3
 800b210:	4611      	mov	r1, r2
 800b212:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b216:	623b      	str	r3, [r7, #32]
 800b218:	2300      	movs	r3, #0
 800b21a:	627b      	str	r3, [r7, #36]	; 0x24
 800b21c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b220:	4642      	mov	r2, r8
 800b222:	464b      	mov	r3, r9
 800b224:	f04f 0000 	mov.w	r0, #0
 800b228:	f04f 0100 	mov.w	r1, #0
 800b22c:	0159      	lsls	r1, r3, #5
 800b22e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b232:	0150      	lsls	r0, r2, #5
 800b234:	4602      	mov	r2, r0
 800b236:	460b      	mov	r3, r1
 800b238:	4641      	mov	r1, r8
 800b23a:	ebb2 0a01 	subs.w	sl, r2, r1
 800b23e:	4649      	mov	r1, r9
 800b240:	eb63 0b01 	sbc.w	fp, r3, r1
 800b244:	f04f 0200 	mov.w	r2, #0
 800b248:	f04f 0300 	mov.w	r3, #0
 800b24c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b250:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b254:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b258:	ebb2 040a 	subs.w	r4, r2, sl
 800b25c:	eb63 050b 	sbc.w	r5, r3, fp
 800b260:	f04f 0200 	mov.w	r2, #0
 800b264:	f04f 0300 	mov.w	r3, #0
 800b268:	00eb      	lsls	r3, r5, #3
 800b26a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b26e:	00e2      	lsls	r2, r4, #3
 800b270:	4614      	mov	r4, r2
 800b272:	461d      	mov	r5, r3
 800b274:	4643      	mov	r3, r8
 800b276:	18e3      	adds	r3, r4, r3
 800b278:	603b      	str	r3, [r7, #0]
 800b27a:	464b      	mov	r3, r9
 800b27c:	eb45 0303 	adc.w	r3, r5, r3
 800b280:	607b      	str	r3, [r7, #4]
 800b282:	f04f 0200 	mov.w	r2, #0
 800b286:	f04f 0300 	mov.w	r3, #0
 800b28a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b28e:	4629      	mov	r1, r5
 800b290:	028b      	lsls	r3, r1, #10
 800b292:	4621      	mov	r1, r4
 800b294:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b298:	4621      	mov	r1, r4
 800b29a:	028a      	lsls	r2, r1, #10
 800b29c:	4610      	mov	r0, r2
 800b29e:	4619      	mov	r1, r3
 800b2a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	61bb      	str	r3, [r7, #24]
 800b2a6:	61fa      	str	r2, [r7, #28]
 800b2a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b2ac:	f7f5 fd46 	bl	8000d3c <__aeabi_uldivmod>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	460b      	mov	r3, r1
 800b2b4:	4613      	mov	r3, r2
 800b2b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b2b8:	4b0b      	ldr	r3, [pc, #44]	; (800b2e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	0c1b      	lsrs	r3, r3, #16
 800b2be:	f003 0303 	and.w	r3, r3, #3
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	005b      	lsls	r3, r3, #1
 800b2c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b2c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b2ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b2d2:	e002      	b.n	800b2da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b2d4:	4b05      	ldr	r3, [pc, #20]	; (800b2ec <HAL_RCC_GetSysClockFreq+0x204>)
 800b2d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b2d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b2da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3750      	adds	r7, #80	; 0x50
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2e6:	bf00      	nop
 800b2e8:	40023800 	.word	0x40023800
 800b2ec:	00f42400 	.word	0x00f42400
 800b2f0:	007a1200 	.word	0x007a1200

0800b2f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b2f8:	4b03      	ldr	r3, [pc, #12]	; (800b308 <HAL_RCC_GetHCLKFreq+0x14>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	20000074 	.word	0x20000074

0800b30c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d101      	bne.n	800b31e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b31a:	2301      	movs	r3, #1
 800b31c:	e07b      	b.n	800b416 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b322:	2b00      	cmp	r3, #0
 800b324:	d108      	bne.n	800b338 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b32e:	d009      	beq.n	800b344 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	61da      	str	r2, [r3, #28]
 800b336:	e005      	b.n	800b344 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b350:	b2db      	uxtb	r3, r3
 800b352:	2b00      	cmp	r3, #0
 800b354:	d106      	bne.n	800b364 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f7fd fbf0 	bl	8008b44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2202      	movs	r2, #2
 800b368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b37a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b38c:	431a      	orrs	r2, r3
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	68db      	ldr	r3, [r3, #12]
 800b392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b396:	431a      	orrs	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	691b      	ldr	r3, [r3, #16]
 800b39c:	f003 0302 	and.w	r3, r3, #2
 800b3a0:	431a      	orrs	r2, r3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	695b      	ldr	r3, [r3, #20]
 800b3a6:	f003 0301 	and.w	r3, r3, #1
 800b3aa:	431a      	orrs	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	699b      	ldr	r3, [r3, #24]
 800b3b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b3b4:	431a      	orrs	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	69db      	ldr	r3, [r3, #28]
 800b3ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3be:	431a      	orrs	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6a1b      	ldr	r3, [r3, #32]
 800b3c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3c8:	ea42 0103 	orr.w	r1, r2, r3
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	430a      	orrs	r2, r1
 800b3da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	699b      	ldr	r3, [r3, #24]
 800b3e0:	0c1b      	lsrs	r3, r3, #16
 800b3e2:	f003 0104 	and.w	r1, r3, #4
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ea:	f003 0210 	and.w	r2, r3, #16
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	430a      	orrs	r2, r1
 800b3f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	69da      	ldr	r2, [r3, #28]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b404:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2201      	movs	r2, #1
 800b410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3708      	adds	r7, #8
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b41e:	b580      	push	{r7, lr}
 800b420:	b088      	sub	sp, #32
 800b422:	af00      	add	r7, sp, #0
 800b424:	60f8      	str	r0, [r7, #12]
 800b426:	60b9      	str	r1, [r7, #8]
 800b428:	603b      	str	r3, [r7, #0]
 800b42a:	4613      	mov	r3, r2
 800b42c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b42e:	2300      	movs	r3, #0
 800b430:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d101      	bne.n	800b440 <HAL_SPI_Transmit+0x22>
 800b43c:	2302      	movs	r3, #2
 800b43e:	e126      	b.n	800b68e <HAL_SPI_Transmit+0x270>
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2201      	movs	r2, #1
 800b444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b448:	f7fd fd60 	bl	8008f0c <HAL_GetTick>
 800b44c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b44e:	88fb      	ldrh	r3, [r7, #6]
 800b450:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	2b01      	cmp	r3, #1
 800b45c:	d002      	beq.n	800b464 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b45e:	2302      	movs	r3, #2
 800b460:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b462:	e10b      	b.n	800b67c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d002      	beq.n	800b470 <HAL_SPI_Transmit+0x52>
 800b46a:	88fb      	ldrh	r3, [r7, #6]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d102      	bne.n	800b476 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b474:	e102      	b.n	800b67c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2203      	movs	r2, #3
 800b47a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2200      	movs	r2, #0
 800b482:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	68ba      	ldr	r2, [r7, #8]
 800b488:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	88fa      	ldrh	r2, [r7, #6]
 800b48e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	88fa      	ldrh	r2, [r7, #6]
 800b494:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2200      	movs	r2, #0
 800b49a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4bc:	d10f      	bne.n	800b4de <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4e8:	2b40      	cmp	r3, #64	; 0x40
 800b4ea:	d007      	beq.n	800b4fc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b504:	d14b      	bne.n	800b59e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d002      	beq.n	800b514 <HAL_SPI_Transmit+0xf6>
 800b50e:	8afb      	ldrh	r3, [r7, #22]
 800b510:	2b01      	cmp	r3, #1
 800b512:	d13e      	bne.n	800b592 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b518:	881a      	ldrh	r2, [r3, #0]
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b524:	1c9a      	adds	r2, r3, #2
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b52e:	b29b      	uxth	r3, r3
 800b530:	3b01      	subs	r3, #1
 800b532:	b29a      	uxth	r2, r3
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b538:	e02b      	b.n	800b592 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	f003 0302 	and.w	r3, r3, #2
 800b544:	2b02      	cmp	r3, #2
 800b546:	d112      	bne.n	800b56e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b54c:	881a      	ldrh	r2, [r3, #0]
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b558:	1c9a      	adds	r2, r3, #2
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b562:	b29b      	uxth	r3, r3
 800b564:	3b01      	subs	r3, #1
 800b566:	b29a      	uxth	r2, r3
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	86da      	strh	r2, [r3, #54]	; 0x36
 800b56c:	e011      	b.n	800b592 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b56e:	f7fd fccd 	bl	8008f0c <HAL_GetTick>
 800b572:	4602      	mov	r2, r0
 800b574:	69bb      	ldr	r3, [r7, #24]
 800b576:	1ad3      	subs	r3, r2, r3
 800b578:	683a      	ldr	r2, [r7, #0]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d803      	bhi.n	800b586 <HAL_SPI_Transmit+0x168>
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b584:	d102      	bne.n	800b58c <HAL_SPI_Transmit+0x16e>
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d102      	bne.n	800b592 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b58c:	2303      	movs	r3, #3
 800b58e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b590:	e074      	b.n	800b67c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b596:	b29b      	uxth	r3, r3
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1ce      	bne.n	800b53a <HAL_SPI_Transmit+0x11c>
 800b59c:	e04c      	b.n	800b638 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d002      	beq.n	800b5ac <HAL_SPI_Transmit+0x18e>
 800b5a6:	8afb      	ldrh	r3, [r7, #22]
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d140      	bne.n	800b62e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	330c      	adds	r3, #12
 800b5b6:	7812      	ldrb	r2, [r2, #0]
 800b5b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5be:	1c5a      	adds	r2, r3, #1
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	b29a      	uxth	r2, r3
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b5d2:	e02c      	b.n	800b62e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	689b      	ldr	r3, [r3, #8]
 800b5da:	f003 0302 	and.w	r3, r3, #2
 800b5de:	2b02      	cmp	r3, #2
 800b5e0:	d113      	bne.n	800b60a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	330c      	adds	r3, #12
 800b5ec:	7812      	ldrb	r2, [r2, #0]
 800b5ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5f4:	1c5a      	adds	r2, r3, #1
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	3b01      	subs	r3, #1
 800b602:	b29a      	uxth	r2, r3
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	86da      	strh	r2, [r3, #54]	; 0x36
 800b608:	e011      	b.n	800b62e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b60a:	f7fd fc7f 	bl	8008f0c <HAL_GetTick>
 800b60e:	4602      	mov	r2, r0
 800b610:	69bb      	ldr	r3, [r7, #24]
 800b612:	1ad3      	subs	r3, r2, r3
 800b614:	683a      	ldr	r2, [r7, #0]
 800b616:	429a      	cmp	r2, r3
 800b618:	d803      	bhi.n	800b622 <HAL_SPI_Transmit+0x204>
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b620:	d102      	bne.n	800b628 <HAL_SPI_Transmit+0x20a>
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d102      	bne.n	800b62e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b628:	2303      	movs	r3, #3
 800b62a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b62c:	e026      	b.n	800b67c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b632:	b29b      	uxth	r3, r3
 800b634:	2b00      	cmp	r3, #0
 800b636:	d1cd      	bne.n	800b5d4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b638:	69ba      	ldr	r2, [r7, #24]
 800b63a:	6839      	ldr	r1, [r7, #0]
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f000 f8b3 	bl	800b7a8 <SPI_EndRxTxTransaction>
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d002      	beq.n	800b64e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2220      	movs	r2, #32
 800b64c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d10a      	bne.n	800b66c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b656:	2300      	movs	r3, #0
 800b658:	613b      	str	r3, [r7, #16]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	613b      	str	r3, [r7, #16]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	613b      	str	r3, [r7, #16]
 800b66a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b670:	2b00      	cmp	r3, #0
 800b672:	d002      	beq.n	800b67a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	77fb      	strb	r3, [r7, #31]
 800b678:	e000      	b.n	800b67c <HAL_SPI_Transmit+0x25e>
  }

error:
 800b67a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2201      	movs	r2, #1
 800b680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2200      	movs	r2, #0
 800b688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b68c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3720      	adds	r7, #32
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
	...

0800b698 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b088      	sub	sp, #32
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	603b      	str	r3, [r7, #0]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b6a8:	f7fd fc30 	bl	8008f0c <HAL_GetTick>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b0:	1a9b      	subs	r3, r3, r2
 800b6b2:	683a      	ldr	r2, [r7, #0]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b6b8:	f7fd fc28 	bl	8008f0c <HAL_GetTick>
 800b6bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b6be:	4b39      	ldr	r3, [pc, #228]	; (800b7a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	015b      	lsls	r3, r3, #5
 800b6c4:	0d1b      	lsrs	r3, r3, #20
 800b6c6:	69fa      	ldr	r2, [r7, #28]
 800b6c8:	fb02 f303 	mul.w	r3, r2, r3
 800b6cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b6ce:	e054      	b.n	800b77a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d6:	d050      	beq.n	800b77a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b6d8:	f7fd fc18 	bl	8008f0c <HAL_GetTick>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	69bb      	ldr	r3, [r7, #24]
 800b6e0:	1ad3      	subs	r3, r2, r3
 800b6e2:	69fa      	ldr	r2, [r7, #28]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d902      	bls.n	800b6ee <SPI_WaitFlagStateUntilTimeout+0x56>
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d13d      	bne.n	800b76a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	685a      	ldr	r2, [r3, #4]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b6fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b706:	d111      	bne.n	800b72c <SPI_WaitFlagStateUntilTimeout+0x94>
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b710:	d004      	beq.n	800b71c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b71a:	d107      	bne.n	800b72c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b72a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b734:	d10f      	bne.n	800b756 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b744:	601a      	str	r2, [r3, #0]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b754:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2201      	movs	r2, #1
 800b75a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2200      	movs	r2, #0
 800b762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b766:	2303      	movs	r3, #3
 800b768:	e017      	b.n	800b79a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d101      	bne.n	800b774 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b770:	2300      	movs	r3, #0
 800b772:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	3b01      	subs	r3, #1
 800b778:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	689a      	ldr	r2, [r3, #8]
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	4013      	ands	r3, r2
 800b784:	68ba      	ldr	r2, [r7, #8]
 800b786:	429a      	cmp	r2, r3
 800b788:	bf0c      	ite	eq
 800b78a:	2301      	moveq	r3, #1
 800b78c:	2300      	movne	r3, #0
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	461a      	mov	r2, r3
 800b792:	79fb      	ldrb	r3, [r7, #7]
 800b794:	429a      	cmp	r2, r3
 800b796:	d19b      	bne.n	800b6d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b798:	2300      	movs	r3, #0
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3720      	adds	r7, #32
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	20000074 	.word	0x20000074

0800b7a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b088      	sub	sp, #32
 800b7ac:	af02      	add	r7, sp, #8
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b7b4:	4b1b      	ldr	r3, [pc, #108]	; (800b824 <SPI_EndRxTxTransaction+0x7c>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4a1b      	ldr	r2, [pc, #108]	; (800b828 <SPI_EndRxTxTransaction+0x80>)
 800b7ba:	fba2 2303 	umull	r2, r3, r2, r3
 800b7be:	0d5b      	lsrs	r3, r3, #21
 800b7c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b7c4:	fb02 f303 	mul.w	r3, r2, r3
 800b7c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b7d2:	d112      	bne.n	800b7fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	9300      	str	r3, [sp, #0]
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	2180      	movs	r1, #128	; 0x80
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f7ff ff5a 	bl	800b698 <SPI_WaitFlagStateUntilTimeout>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d016      	beq.n	800b818 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ee:	f043 0220 	orr.w	r2, r3, #32
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b7f6:	2303      	movs	r3, #3
 800b7f8:	e00f      	b.n	800b81a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d00a      	beq.n	800b816 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	3b01      	subs	r3, #1
 800b804:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b810:	2b80      	cmp	r3, #128	; 0x80
 800b812:	d0f2      	beq.n	800b7fa <SPI_EndRxTxTransaction+0x52>
 800b814:	e000      	b.n	800b818 <SPI_EndRxTxTransaction+0x70>
        break;
 800b816:	bf00      	nop
  }

  return HAL_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3718      	adds	r7, #24
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	20000074 	.word	0x20000074
 800b828:	165e9f81 	.word	0x165e9f81

0800b82c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b82c:	b084      	sub	sp, #16
 800b82e:	b580      	push	{r7, lr}
 800b830:	b084      	sub	sp, #16
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	f107 001c 	add.w	r0, r7, #28
 800b83a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b840:	2b01      	cmp	r3, #1
 800b842:	d122      	bne.n	800b88a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b848:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	68db      	ldr	r3, [r3, #12]
 800b864:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b86c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d105      	bne.n	800b87e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f001 fbee 	bl	800d060 <USB_CoreReset>
 800b884:	4603      	mov	r3, r0
 800b886:	73fb      	strb	r3, [r7, #15]
 800b888:	e01a      	b.n	800b8c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	68db      	ldr	r3, [r3, #12]
 800b88e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f001 fbe2 	bl	800d060 <USB_CoreReset>
 800b89c:	4603      	mov	r3, r0
 800b89e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b8a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d106      	bne.n	800b8b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	639a      	str	r2, [r3, #56]	; 0x38
 800b8b2:	e005      	b.n	800b8c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d10b      	bne.n	800b8de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	689b      	ldr	r3, [r3, #8]
 800b8ca:	f043 0206 	orr.w	r2, r3, #6
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	f043 0220 	orr.w	r2, r3, #32
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b8de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3710      	adds	r7, #16
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b8ea:	b004      	add	sp, #16
 800b8ec:	4770      	bx	lr
	...

0800b8f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b087      	sub	sp, #28
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b8fe:	79fb      	ldrb	r3, [r7, #7]
 800b900:	2b02      	cmp	r3, #2
 800b902:	d165      	bne.n	800b9d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	4a41      	ldr	r2, [pc, #260]	; (800ba0c <USB_SetTurnaroundTime+0x11c>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d906      	bls.n	800b91a <USB_SetTurnaroundTime+0x2a>
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	4a40      	ldr	r2, [pc, #256]	; (800ba10 <USB_SetTurnaroundTime+0x120>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d202      	bcs.n	800b91a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b914:	230f      	movs	r3, #15
 800b916:	617b      	str	r3, [r7, #20]
 800b918:	e062      	b.n	800b9e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	4a3c      	ldr	r2, [pc, #240]	; (800ba10 <USB_SetTurnaroundTime+0x120>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d306      	bcc.n	800b930 <USB_SetTurnaroundTime+0x40>
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	4a3b      	ldr	r2, [pc, #236]	; (800ba14 <USB_SetTurnaroundTime+0x124>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d202      	bcs.n	800b930 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b92a:	230e      	movs	r3, #14
 800b92c:	617b      	str	r3, [r7, #20]
 800b92e:	e057      	b.n	800b9e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	4a38      	ldr	r2, [pc, #224]	; (800ba14 <USB_SetTurnaroundTime+0x124>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d306      	bcc.n	800b946 <USB_SetTurnaroundTime+0x56>
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	4a37      	ldr	r2, [pc, #220]	; (800ba18 <USB_SetTurnaroundTime+0x128>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d202      	bcs.n	800b946 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b940:	230d      	movs	r3, #13
 800b942:	617b      	str	r3, [r7, #20]
 800b944:	e04c      	b.n	800b9e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	4a33      	ldr	r2, [pc, #204]	; (800ba18 <USB_SetTurnaroundTime+0x128>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d306      	bcc.n	800b95c <USB_SetTurnaroundTime+0x6c>
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	4a32      	ldr	r2, [pc, #200]	; (800ba1c <USB_SetTurnaroundTime+0x12c>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d802      	bhi.n	800b95c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b956:	230c      	movs	r3, #12
 800b958:	617b      	str	r3, [r7, #20]
 800b95a:	e041      	b.n	800b9e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	4a2f      	ldr	r2, [pc, #188]	; (800ba1c <USB_SetTurnaroundTime+0x12c>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d906      	bls.n	800b972 <USB_SetTurnaroundTime+0x82>
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	4a2e      	ldr	r2, [pc, #184]	; (800ba20 <USB_SetTurnaroundTime+0x130>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d802      	bhi.n	800b972 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b96c:	230b      	movs	r3, #11
 800b96e:	617b      	str	r3, [r7, #20]
 800b970:	e036      	b.n	800b9e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	4a2a      	ldr	r2, [pc, #168]	; (800ba20 <USB_SetTurnaroundTime+0x130>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d906      	bls.n	800b988 <USB_SetTurnaroundTime+0x98>
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	4a29      	ldr	r2, [pc, #164]	; (800ba24 <USB_SetTurnaroundTime+0x134>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d802      	bhi.n	800b988 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b982:	230a      	movs	r3, #10
 800b984:	617b      	str	r3, [r7, #20]
 800b986:	e02b      	b.n	800b9e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	4a26      	ldr	r2, [pc, #152]	; (800ba24 <USB_SetTurnaroundTime+0x134>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d906      	bls.n	800b99e <USB_SetTurnaroundTime+0xae>
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	4a25      	ldr	r2, [pc, #148]	; (800ba28 <USB_SetTurnaroundTime+0x138>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d202      	bcs.n	800b99e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b998:	2309      	movs	r3, #9
 800b99a:	617b      	str	r3, [r7, #20]
 800b99c:	e020      	b.n	800b9e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	4a21      	ldr	r2, [pc, #132]	; (800ba28 <USB_SetTurnaroundTime+0x138>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d306      	bcc.n	800b9b4 <USB_SetTurnaroundTime+0xc4>
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	4a20      	ldr	r2, [pc, #128]	; (800ba2c <USB_SetTurnaroundTime+0x13c>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d802      	bhi.n	800b9b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b9ae:	2308      	movs	r3, #8
 800b9b0:	617b      	str	r3, [r7, #20]
 800b9b2:	e015      	b.n	800b9e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	4a1d      	ldr	r2, [pc, #116]	; (800ba2c <USB_SetTurnaroundTime+0x13c>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d906      	bls.n	800b9ca <USB_SetTurnaroundTime+0xda>
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	4a1c      	ldr	r2, [pc, #112]	; (800ba30 <USB_SetTurnaroundTime+0x140>)
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d202      	bcs.n	800b9ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b9c4:	2307      	movs	r3, #7
 800b9c6:	617b      	str	r3, [r7, #20]
 800b9c8:	e00a      	b.n	800b9e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b9ca:	2306      	movs	r3, #6
 800b9cc:	617b      	str	r3, [r7, #20]
 800b9ce:	e007      	b.n	800b9e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b9d0:	79fb      	ldrb	r3, [r7, #7]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d102      	bne.n	800b9dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b9d6:	2309      	movs	r3, #9
 800b9d8:	617b      	str	r3, [r7, #20]
 800b9da:	e001      	b.n	800b9e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b9dc:	2309      	movs	r3, #9
 800b9de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	68da      	ldr	r2, [r3, #12]
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	029b      	lsls	r3, r3, #10
 800b9f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b9f8:	431a      	orrs	r2, r3
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	371c      	adds	r7, #28
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr
 800ba0c:	00d8acbf 	.word	0x00d8acbf
 800ba10:	00e4e1c0 	.word	0x00e4e1c0
 800ba14:	00f42400 	.word	0x00f42400
 800ba18:	01067380 	.word	0x01067380
 800ba1c:	011a499f 	.word	0x011a499f
 800ba20:	01312cff 	.word	0x01312cff
 800ba24:	014ca43f 	.word	0x014ca43f
 800ba28:	016e3600 	.word	0x016e3600
 800ba2c:	01a6ab1f 	.word	0x01a6ab1f
 800ba30:	01e84800 	.word	0x01e84800

0800ba34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b083      	sub	sp, #12
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	f043 0201 	orr.w	r2, r3, #1
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba48:	2300      	movs	r3, #0
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	370c      	adds	r7, #12
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr

0800ba56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba56:	b480      	push	{r7}
 800ba58:	b083      	sub	sp, #12
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	689b      	ldr	r3, [r3, #8]
 800ba62:	f023 0201 	bic.w	r2, r3, #1
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba6a:	2300      	movs	r3, #0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	370c      	adds	r7, #12
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr

0800ba78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	460b      	mov	r3, r1
 800ba82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ba84:	2300      	movs	r3, #0
 800ba86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	68db      	ldr	r3, [r3, #12]
 800ba8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ba94:	78fb      	ldrb	r3, [r7, #3]
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d115      	bne.n	800bac6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800baa6:	2001      	movs	r0, #1
 800baa8:	f7fd fa3c 	bl	8008f24 <HAL_Delay>
      ms++;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	3301      	adds	r3, #1
 800bab0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f001 fa45 	bl	800cf42 <USB_GetMode>
 800bab8:	4603      	mov	r3, r0
 800baba:	2b01      	cmp	r3, #1
 800babc:	d01e      	beq.n	800bafc <USB_SetCurrentMode+0x84>
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2b31      	cmp	r3, #49	; 0x31
 800bac2:	d9f0      	bls.n	800baa6 <USB_SetCurrentMode+0x2e>
 800bac4:	e01a      	b.n	800bafc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bac6:	78fb      	ldrb	r3, [r7, #3]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d115      	bne.n	800baf8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bad8:	2001      	movs	r0, #1
 800bada:	f7fd fa23 	bl	8008f24 <HAL_Delay>
      ms++;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	3301      	adds	r3, #1
 800bae2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f001 fa2c 	bl	800cf42 <USB_GetMode>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d005      	beq.n	800bafc <USB_SetCurrentMode+0x84>
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2b31      	cmp	r3, #49	; 0x31
 800baf4:	d9f0      	bls.n	800bad8 <USB_SetCurrentMode+0x60>
 800baf6:	e001      	b.n	800bafc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800baf8:	2301      	movs	r3, #1
 800bafa:	e005      	b.n	800bb08 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2b32      	cmp	r3, #50	; 0x32
 800bb00:	d101      	bne.n	800bb06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bb02:	2301      	movs	r3, #1
 800bb04:	e000      	b.n	800bb08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bb06:	2300      	movs	r3, #0
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3710      	adds	r7, #16
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bb10:	b084      	sub	sp, #16
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b086      	sub	sp, #24
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
 800bb1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bb1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bb22:	2300      	movs	r3, #0
 800bb24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	613b      	str	r3, [r7, #16]
 800bb2e:	e009      	b.n	800bb44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	3340      	adds	r3, #64	; 0x40
 800bb36:	009b      	lsls	r3, r3, #2
 800bb38:	4413      	add	r3, r2
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	3301      	adds	r3, #1
 800bb42:	613b      	str	r3, [r7, #16]
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	2b0e      	cmp	r3, #14
 800bb48:	d9f2      	bls.n	800bb30 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bb4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d11c      	bne.n	800bb8a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb5e:	f043 0302 	orr.w	r3, r3, #2
 800bb62:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb74:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb80:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	639a      	str	r2, [r3, #56]	; 0x38
 800bb88:	e00b      	b.n	800bba2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb8e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb9a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bba8:	461a      	mov	r2, r3
 800bbaa:	2300      	movs	r3, #0
 800bbac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	680b      	ldr	r3, [r1, #0]
 800bbc0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d10c      	bne.n	800bbe2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d104      	bne.n	800bbd8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bbce:	2100      	movs	r1, #0
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 f965 	bl	800bea0 <USB_SetDevSpeed>
 800bbd6:	e008      	b.n	800bbea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bbd8:	2101      	movs	r1, #1
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 f960 	bl	800bea0 <USB_SetDevSpeed>
 800bbe0:	e003      	b.n	800bbea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bbe2:	2103      	movs	r1, #3
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 f95b 	bl	800bea0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bbea:	2110      	movs	r1, #16
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 f8f3 	bl	800bdd8 <USB_FlushTxFifo>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d001      	beq.n	800bbfc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f000 f91f 	bl	800be40 <USB_FlushRxFifo>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d001      	beq.n	800bc0c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc12:	461a      	mov	r2, r3
 800bc14:	2300      	movs	r3, #0
 800bc16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc1e:	461a      	mov	r2, r3
 800bc20:	2300      	movs	r3, #0
 800bc22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc30:	2300      	movs	r3, #0
 800bc32:	613b      	str	r3, [r7, #16]
 800bc34:	e043      	b.n	800bcbe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	015a      	lsls	r2, r3, #5
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc4c:	d118      	bne.n	800bc80 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d10a      	bne.n	800bc6a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	015a      	lsls	r2, r3, #5
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	4413      	add	r3, r2
 800bc5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc60:	461a      	mov	r2, r3
 800bc62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bc66:	6013      	str	r3, [r2, #0]
 800bc68:	e013      	b.n	800bc92 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	015a      	lsls	r2, r3, #5
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	4413      	add	r3, r2
 800bc72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc76:	461a      	mov	r2, r3
 800bc78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bc7c:	6013      	str	r3, [r2, #0]
 800bc7e:	e008      	b.n	800bc92 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	015a      	lsls	r2, r3, #5
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	4413      	add	r3, r2
 800bc88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	2300      	movs	r3, #0
 800bc90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	015a      	lsls	r2, r3, #5
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	4413      	add	r3, r2
 800bc9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc9e:	461a      	mov	r2, r3
 800bca0:	2300      	movs	r3, #0
 800bca2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	015a      	lsls	r2, r3, #5
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	4413      	add	r3, r2
 800bcac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bcb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	613b      	str	r3, [r7, #16]
 800bcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc0:	693a      	ldr	r2, [r7, #16]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d3b7      	bcc.n	800bc36 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	613b      	str	r3, [r7, #16]
 800bcca:	e043      	b.n	800bd54 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	015a      	lsls	r2, r3, #5
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	4413      	add	r3, r2
 800bcd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bce2:	d118      	bne.n	800bd16 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d10a      	bne.n	800bd00 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	015a      	lsls	r2, r3, #5
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bcfc:	6013      	str	r3, [r2, #0]
 800bcfe:	e013      	b.n	800bd28 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	015a      	lsls	r2, r3, #5
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	4413      	add	r3, r2
 800bd08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bd12:	6013      	str	r3, [r2, #0]
 800bd14:	e008      	b.n	800bd28 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	015a      	lsls	r2, r3, #5
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd22:	461a      	mov	r2, r3
 800bd24:	2300      	movs	r3, #0
 800bd26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	015a      	lsls	r2, r3, #5
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	4413      	add	r3, r2
 800bd30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd34:	461a      	mov	r2, r3
 800bd36:	2300      	movs	r3, #0
 800bd38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	015a      	lsls	r2, r3, #5
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	4413      	add	r3, r2
 800bd42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd46:	461a      	mov	r2, r3
 800bd48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bd4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	3301      	adds	r3, #1
 800bd52:	613b      	str	r3, [r7, #16]
 800bd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd56:	693a      	ldr	r2, [r7, #16]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d3b7      	bcc.n	800bccc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd62:	691b      	ldr	r3, [r3, #16]
 800bd64:	68fa      	ldr	r2, [r7, #12]
 800bd66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2200      	movs	r2, #0
 800bd74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bd7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d105      	bne.n	800bd90 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	699b      	ldr	r3, [r3, #24]
 800bd88:	f043 0210 	orr.w	r2, r3, #16
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	699a      	ldr	r2, [r3, #24]
 800bd94:	4b0f      	ldr	r3, [pc, #60]	; (800bdd4 <USB_DevInit+0x2c4>)
 800bd96:	4313      	orrs	r3, r2
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bd9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d005      	beq.n	800bdae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	699b      	ldr	r3, [r3, #24]
 800bda6:	f043 0208 	orr.w	r2, r3, #8
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bdae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d107      	bne.n	800bdc4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	699b      	ldr	r3, [r3, #24]
 800bdb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bdbc:	f043 0304 	orr.w	r3, r3, #4
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bdc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3718      	adds	r7, #24
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bdd0:	b004      	add	sp, #16
 800bdd2:	4770      	bx	lr
 800bdd4:	803c3800 	.word	0x803c3800

0800bdd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b085      	sub	sp, #20
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bde2:	2300      	movs	r3, #0
 800bde4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	3301      	adds	r3, #1
 800bdea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	4a13      	ldr	r2, [pc, #76]	; (800be3c <USB_FlushTxFifo+0x64>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d901      	bls.n	800bdf8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bdf4:	2303      	movs	r3, #3
 800bdf6:	e01b      	b.n	800be30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	691b      	ldr	r3, [r3, #16]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	daf2      	bge.n	800bde6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800be00:	2300      	movs	r3, #0
 800be02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	019b      	lsls	r3, r3, #6
 800be08:	f043 0220 	orr.w	r2, r3, #32
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	3301      	adds	r3, #1
 800be14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	4a08      	ldr	r2, [pc, #32]	; (800be3c <USB_FlushTxFifo+0x64>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d901      	bls.n	800be22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800be1e:	2303      	movs	r3, #3
 800be20:	e006      	b.n	800be30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	691b      	ldr	r3, [r3, #16]
 800be26:	f003 0320 	and.w	r3, r3, #32
 800be2a:	2b20      	cmp	r3, #32
 800be2c:	d0f0      	beq.n	800be10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	3714      	adds	r7, #20
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr
 800be3c:	00030d40 	.word	0x00030d40

0800be40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800be40:	b480      	push	{r7}
 800be42:	b085      	sub	sp, #20
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be48:	2300      	movs	r3, #0
 800be4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	3301      	adds	r3, #1
 800be50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	4a11      	ldr	r2, [pc, #68]	; (800be9c <USB_FlushRxFifo+0x5c>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d901      	bls.n	800be5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800be5a:	2303      	movs	r3, #3
 800be5c:	e018      	b.n	800be90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	691b      	ldr	r3, [r3, #16]
 800be62:	2b00      	cmp	r3, #0
 800be64:	daf2      	bge.n	800be4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800be66:	2300      	movs	r3, #0
 800be68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2210      	movs	r2, #16
 800be6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	3301      	adds	r3, #1
 800be74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	4a08      	ldr	r2, [pc, #32]	; (800be9c <USB_FlushRxFifo+0x5c>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d901      	bls.n	800be82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800be7e:	2303      	movs	r3, #3
 800be80:	e006      	b.n	800be90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	691b      	ldr	r3, [r3, #16]
 800be86:	f003 0310 	and.w	r3, r3, #16
 800be8a:	2b10      	cmp	r3, #16
 800be8c:	d0f0      	beq.n	800be70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800be8e:	2300      	movs	r3, #0
}
 800be90:	4618      	mov	r0, r3
 800be92:	3714      	adds	r7, #20
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr
 800be9c:	00030d40 	.word	0x00030d40

0800bea0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b085      	sub	sp, #20
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	460b      	mov	r3, r1
 800beaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	78fb      	ldrb	r3, [r7, #3]
 800beba:	68f9      	ldr	r1, [r7, #12]
 800bebc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bec0:	4313      	orrs	r3, r2
 800bec2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bec4:	2300      	movs	r3, #0
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3714      	adds	r7, #20
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr

0800bed2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bed2:	b480      	push	{r7}
 800bed4:	b087      	sub	sp, #28
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	f003 0306 	and.w	r3, r3, #6
 800beea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d102      	bne.n	800bef8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bef2:	2300      	movs	r3, #0
 800bef4:	75fb      	strb	r3, [r7, #23]
 800bef6:	e00a      	b.n	800bf0e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2b02      	cmp	r3, #2
 800befc:	d002      	beq.n	800bf04 <USB_GetDevSpeed+0x32>
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2b06      	cmp	r3, #6
 800bf02:	d102      	bne.n	800bf0a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bf04:	2302      	movs	r3, #2
 800bf06:	75fb      	strb	r3, [r7, #23]
 800bf08:	e001      	b.n	800bf0e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bf0a:	230f      	movs	r3, #15
 800bf0c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bf0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	371c      	adds	r7, #28
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b085      	sub	sp, #20
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	785b      	ldrb	r3, [r3, #1]
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d13a      	bne.n	800bfae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf3e:	69da      	ldr	r2, [r3, #28]
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	f003 030f 	and.w	r3, r3, #15
 800bf48:	2101      	movs	r1, #1
 800bf4a:	fa01 f303 	lsl.w	r3, r1, r3
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	68f9      	ldr	r1, [r7, #12]
 800bf52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf56:	4313      	orrs	r3, r2
 800bf58:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	015a      	lsls	r2, r3, #5
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	4413      	add	r3, r2
 800bf62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d155      	bne.n	800c01c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	015a      	lsls	r2, r3, #5
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	4413      	add	r3, r2
 800bf78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf7c:	681a      	ldr	r2, [r3, #0]
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	68db      	ldr	r3, [r3, #12]
 800bf82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	791b      	ldrb	r3, [r3, #4]
 800bf8a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf8c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	059b      	lsls	r3, r3, #22
 800bf92:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bf94:	4313      	orrs	r3, r2
 800bf96:	68ba      	ldr	r2, [r7, #8]
 800bf98:	0151      	lsls	r1, r2, #5
 800bf9a:	68fa      	ldr	r2, [r7, #12]
 800bf9c:	440a      	add	r2, r1
 800bf9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bfa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bfaa:	6013      	str	r3, [r2, #0]
 800bfac:	e036      	b.n	800c01c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfb4:	69da      	ldr	r2, [r3, #28]
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	f003 030f 	and.w	r3, r3, #15
 800bfbe:	2101      	movs	r1, #1
 800bfc0:	fa01 f303 	lsl.w	r3, r1, r3
 800bfc4:	041b      	lsls	r3, r3, #16
 800bfc6:	68f9      	ldr	r1, [r7, #12]
 800bfc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	015a      	lsls	r2, r3, #5
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	4413      	add	r3, r2
 800bfd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d11a      	bne.n	800c01c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	015a      	lsls	r2, r3, #5
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	4413      	add	r3, r2
 800bfee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	791b      	ldrb	r3, [r3, #4]
 800c000:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c002:	430b      	orrs	r3, r1
 800c004:	4313      	orrs	r3, r2
 800c006:	68ba      	ldr	r2, [r7, #8]
 800c008:	0151      	lsls	r1, r2, #5
 800c00a:	68fa      	ldr	r2, [r7, #12]
 800c00c:	440a      	add	r2, r1
 800c00e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c01a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3714      	adds	r7, #20
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr
	...

0800c02c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b085      	sub	sp, #20
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	785b      	ldrb	r3, [r3, #1]
 800c044:	2b01      	cmp	r3, #1
 800c046:	d161      	bne.n	800c10c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	015a      	lsls	r2, r3, #5
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	4413      	add	r3, r2
 800c050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c05a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c05e:	d11f      	bne.n	800c0a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	015a      	lsls	r2, r3, #5
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	4413      	add	r3, r2
 800c068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	68ba      	ldr	r2, [r7, #8]
 800c070:	0151      	lsls	r1, r2, #5
 800c072:	68fa      	ldr	r2, [r7, #12]
 800c074:	440a      	add	r2, r1
 800c076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c07a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c07e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	015a      	lsls	r2, r3, #5
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	4413      	add	r3, r2
 800c088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	68ba      	ldr	r2, [r7, #8]
 800c090:	0151      	lsls	r1, r2, #5
 800c092:	68fa      	ldr	r2, [r7, #12]
 800c094:	440a      	add	r2, r1
 800c096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c09a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c09e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	f003 030f 	and.w	r3, r3, #15
 800c0b0:	2101      	movs	r1, #1
 800c0b2:	fa01 f303 	lsl.w	r3, r1, r3
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	43db      	mvns	r3, r3
 800c0ba:	68f9      	ldr	r1, [r7, #12]
 800c0bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c0c0:	4013      	ands	r3, r2
 800c0c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0ca:	69da      	ldr	r2, [r3, #28]
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	f003 030f 	and.w	r3, r3, #15
 800c0d4:	2101      	movs	r1, #1
 800c0d6:	fa01 f303 	lsl.w	r3, r1, r3
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	43db      	mvns	r3, r3
 800c0de:	68f9      	ldr	r1, [r7, #12]
 800c0e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c0e4:	4013      	ands	r3, r2
 800c0e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	015a      	lsls	r2, r3, #5
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	4413      	add	r3, r2
 800c0f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0f4:	681a      	ldr	r2, [r3, #0]
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	0159      	lsls	r1, r3, #5
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	440b      	add	r3, r1
 800c0fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c102:	4619      	mov	r1, r3
 800c104:	4b35      	ldr	r3, [pc, #212]	; (800c1dc <USB_DeactivateEndpoint+0x1b0>)
 800c106:	4013      	ands	r3, r2
 800c108:	600b      	str	r3, [r1, #0]
 800c10a:	e060      	b.n	800c1ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	015a      	lsls	r2, r3, #5
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	4413      	add	r3, r2
 800c114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c11e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c122:	d11f      	bne.n	800c164 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	015a      	lsls	r2, r3, #5
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	4413      	add	r3, r2
 800c12c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	68ba      	ldr	r2, [r7, #8]
 800c134:	0151      	lsls	r1, r2, #5
 800c136:	68fa      	ldr	r2, [r7, #12]
 800c138:	440a      	add	r2, r1
 800c13a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c13e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c142:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	015a      	lsls	r2, r3, #5
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	4413      	add	r3, r2
 800c14c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	68ba      	ldr	r2, [r7, #8]
 800c154:	0151      	lsls	r1, r2, #5
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	440a      	add	r2, r1
 800c15a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c15e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c162:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c16a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	f003 030f 	and.w	r3, r3, #15
 800c174:	2101      	movs	r1, #1
 800c176:	fa01 f303 	lsl.w	r3, r1, r3
 800c17a:	041b      	lsls	r3, r3, #16
 800c17c:	43db      	mvns	r3, r3
 800c17e:	68f9      	ldr	r1, [r7, #12]
 800c180:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c184:	4013      	ands	r3, r2
 800c186:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c18e:	69da      	ldr	r2, [r3, #28]
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	f003 030f 	and.w	r3, r3, #15
 800c198:	2101      	movs	r1, #1
 800c19a:	fa01 f303 	lsl.w	r3, r1, r3
 800c19e:	041b      	lsls	r3, r3, #16
 800c1a0:	43db      	mvns	r3, r3
 800c1a2:	68f9      	ldr	r1, [r7, #12]
 800c1a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1a8:	4013      	ands	r3, r2
 800c1aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	015a      	lsls	r2, r3, #5
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	0159      	lsls	r1, r3, #5
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	440b      	add	r3, r1
 800c1c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	4b05      	ldr	r3, [pc, #20]	; (800c1e0 <USB_DeactivateEndpoint+0x1b4>)
 800c1ca:	4013      	ands	r3, r2
 800c1cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c1ce:	2300      	movs	r3, #0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3714      	adds	r7, #20
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr
 800c1dc:	ec337800 	.word	0xec337800
 800c1e0:	eff37800 	.word	0xeff37800

0800c1e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b08a      	sub	sp, #40	; 0x28
 800c1e8:	af02      	add	r7, sp, #8
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	785b      	ldrb	r3, [r3, #1]
 800c200:	2b01      	cmp	r3, #1
 800c202:	f040 815c 	bne.w	800c4be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	699b      	ldr	r3, [r3, #24]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d132      	bne.n	800c274 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	015a      	lsls	r2, r3, #5
 800c212:	69fb      	ldr	r3, [r7, #28]
 800c214:	4413      	add	r3, r2
 800c216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c21a:	691b      	ldr	r3, [r3, #16]
 800c21c:	69ba      	ldr	r2, [r7, #24]
 800c21e:	0151      	lsls	r1, r2, #5
 800c220:	69fa      	ldr	r2, [r7, #28]
 800c222:	440a      	add	r2, r1
 800c224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c228:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c22c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c230:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	015a      	lsls	r2, r3, #5
 800c236:	69fb      	ldr	r3, [r7, #28]
 800c238:	4413      	add	r3, r2
 800c23a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c23e:	691b      	ldr	r3, [r3, #16]
 800c240:	69ba      	ldr	r2, [r7, #24]
 800c242:	0151      	lsls	r1, r2, #5
 800c244:	69fa      	ldr	r2, [r7, #28]
 800c246:	440a      	add	r2, r1
 800c248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c24c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c250:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c252:	69bb      	ldr	r3, [r7, #24]
 800c254:	015a      	lsls	r2, r3, #5
 800c256:	69fb      	ldr	r3, [r7, #28]
 800c258:	4413      	add	r3, r2
 800c25a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c25e:	691b      	ldr	r3, [r3, #16]
 800c260:	69ba      	ldr	r2, [r7, #24]
 800c262:	0151      	lsls	r1, r2, #5
 800c264:	69fa      	ldr	r2, [r7, #28]
 800c266:	440a      	add	r2, r1
 800c268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c26c:	0cdb      	lsrs	r3, r3, #19
 800c26e:	04db      	lsls	r3, r3, #19
 800c270:	6113      	str	r3, [r2, #16]
 800c272:	e074      	b.n	800c35e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c274:	69bb      	ldr	r3, [r7, #24]
 800c276:	015a      	lsls	r2, r3, #5
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	4413      	add	r3, r2
 800c27c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c280:	691b      	ldr	r3, [r3, #16]
 800c282:	69ba      	ldr	r2, [r7, #24]
 800c284:	0151      	lsls	r1, r2, #5
 800c286:	69fa      	ldr	r2, [r7, #28]
 800c288:	440a      	add	r2, r1
 800c28a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c28e:	0cdb      	lsrs	r3, r3, #19
 800c290:	04db      	lsls	r3, r3, #19
 800c292:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c294:	69bb      	ldr	r3, [r7, #24]
 800c296:	015a      	lsls	r2, r3, #5
 800c298:	69fb      	ldr	r3, [r7, #28]
 800c29a:	4413      	add	r3, r2
 800c29c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2a0:	691b      	ldr	r3, [r3, #16]
 800c2a2:	69ba      	ldr	r2, [r7, #24]
 800c2a4:	0151      	lsls	r1, r2, #5
 800c2a6:	69fa      	ldr	r2, [r7, #28]
 800c2a8:	440a      	add	r2, r1
 800c2aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c2b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c2b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	015a      	lsls	r2, r3, #5
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	4413      	add	r3, r2
 800c2c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	6999      	ldr	r1, [r3, #24]
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	68db      	ldr	r3, [r3, #12]
 800c2ce:	440b      	add	r3, r1
 800c2d0:	1e59      	subs	r1, r3, #1
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	68db      	ldr	r3, [r3, #12]
 800c2d6:	fbb1 f3f3 	udiv	r3, r1, r3
 800c2da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c2dc:	4b9d      	ldr	r3, [pc, #628]	; (800c554 <USB_EPStartXfer+0x370>)
 800c2de:	400b      	ands	r3, r1
 800c2e0:	69b9      	ldr	r1, [r7, #24]
 800c2e2:	0148      	lsls	r0, r1, #5
 800c2e4:	69f9      	ldr	r1, [r7, #28]
 800c2e6:	4401      	add	r1, r0
 800c2e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c2f0:	69bb      	ldr	r3, [r7, #24]
 800c2f2:	015a      	lsls	r2, r3, #5
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	4413      	add	r3, r2
 800c2f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2fc:	691a      	ldr	r2, [r3, #16]
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	699b      	ldr	r3, [r3, #24]
 800c302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c306:	69b9      	ldr	r1, [r7, #24]
 800c308:	0148      	lsls	r0, r1, #5
 800c30a:	69f9      	ldr	r1, [r7, #28]
 800c30c:	4401      	add	r1, r0
 800c30e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c312:	4313      	orrs	r3, r2
 800c314:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	791b      	ldrb	r3, [r3, #4]
 800c31a:	2b01      	cmp	r3, #1
 800c31c:	d11f      	bne.n	800c35e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	015a      	lsls	r2, r3, #5
 800c322:	69fb      	ldr	r3, [r7, #28]
 800c324:	4413      	add	r3, r2
 800c326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c32a:	691b      	ldr	r3, [r3, #16]
 800c32c:	69ba      	ldr	r2, [r7, #24]
 800c32e:	0151      	lsls	r1, r2, #5
 800c330:	69fa      	ldr	r2, [r7, #28]
 800c332:	440a      	add	r2, r1
 800c334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c338:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c33c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c33e:	69bb      	ldr	r3, [r7, #24]
 800c340:	015a      	lsls	r2, r3, #5
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	4413      	add	r3, r2
 800c346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c34a:	691b      	ldr	r3, [r3, #16]
 800c34c:	69ba      	ldr	r2, [r7, #24]
 800c34e:	0151      	lsls	r1, r2, #5
 800c350:	69fa      	ldr	r2, [r7, #28]
 800c352:	440a      	add	r2, r1
 800c354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c358:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c35c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c35e:	79fb      	ldrb	r3, [r7, #7]
 800c360:	2b01      	cmp	r3, #1
 800c362:	d14b      	bne.n	800c3fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	695b      	ldr	r3, [r3, #20]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d009      	beq.n	800c380 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	015a      	lsls	r2, r3, #5
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	4413      	add	r3, r2
 800c374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c378:	461a      	mov	r2, r3
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	695b      	ldr	r3, [r3, #20]
 800c37e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	791b      	ldrb	r3, [r3, #4]
 800c384:	2b01      	cmp	r3, #1
 800c386:	d128      	bne.n	800c3da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c394:	2b00      	cmp	r3, #0
 800c396:	d110      	bne.n	800c3ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c398:	69bb      	ldr	r3, [r7, #24]
 800c39a:	015a      	lsls	r2, r3, #5
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	4413      	add	r3, r2
 800c3a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	69ba      	ldr	r2, [r7, #24]
 800c3a8:	0151      	lsls	r1, r2, #5
 800c3aa:	69fa      	ldr	r2, [r7, #28]
 800c3ac:	440a      	add	r2, r1
 800c3ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c3b6:	6013      	str	r3, [r2, #0]
 800c3b8:	e00f      	b.n	800c3da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	015a      	lsls	r2, r3, #5
 800c3be:	69fb      	ldr	r3, [r7, #28]
 800c3c0:	4413      	add	r3, r2
 800c3c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	69ba      	ldr	r2, [r7, #24]
 800c3ca:	0151      	lsls	r1, r2, #5
 800c3cc:	69fa      	ldr	r2, [r7, #28]
 800c3ce:	440a      	add	r2, r1
 800c3d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	015a      	lsls	r2, r3, #5
 800c3de:	69fb      	ldr	r3, [r7, #28]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	69ba      	ldr	r2, [r7, #24]
 800c3ea:	0151      	lsls	r1, r2, #5
 800c3ec:	69fa      	ldr	r2, [r7, #28]
 800c3ee:	440a      	add	r2, r1
 800c3f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c3f8:	6013      	str	r3, [r2, #0]
 800c3fa:	e133      	b.n	800c664 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	015a      	lsls	r2, r3, #5
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	4413      	add	r3, r2
 800c404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	69ba      	ldr	r2, [r7, #24]
 800c40c:	0151      	lsls	r1, r2, #5
 800c40e:	69fa      	ldr	r2, [r7, #28]
 800c410:	440a      	add	r2, r1
 800c412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c416:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c41a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	791b      	ldrb	r3, [r3, #4]
 800c420:	2b01      	cmp	r3, #1
 800c422:	d015      	beq.n	800c450 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	699b      	ldr	r3, [r3, #24]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	f000 811b 	beq.w	800c664 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	f003 030f 	and.w	r3, r3, #15
 800c43e:	2101      	movs	r1, #1
 800c440:	fa01 f303 	lsl.w	r3, r1, r3
 800c444:	69f9      	ldr	r1, [r7, #28]
 800c446:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c44a:	4313      	orrs	r3, r2
 800c44c:	634b      	str	r3, [r1, #52]	; 0x34
 800c44e:	e109      	b.n	800c664 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c450:	69fb      	ldr	r3, [r7, #28]
 800c452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d110      	bne.n	800c482 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c460:	69bb      	ldr	r3, [r7, #24]
 800c462:	015a      	lsls	r2, r3, #5
 800c464:	69fb      	ldr	r3, [r7, #28]
 800c466:	4413      	add	r3, r2
 800c468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	69ba      	ldr	r2, [r7, #24]
 800c470:	0151      	lsls	r1, r2, #5
 800c472:	69fa      	ldr	r2, [r7, #28]
 800c474:	440a      	add	r2, r1
 800c476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c47a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c47e:	6013      	str	r3, [r2, #0]
 800c480:	e00f      	b.n	800c4a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c482:	69bb      	ldr	r3, [r7, #24]
 800c484:	015a      	lsls	r2, r3, #5
 800c486:	69fb      	ldr	r3, [r7, #28]
 800c488:	4413      	add	r3, r2
 800c48a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	69ba      	ldr	r2, [r7, #24]
 800c492:	0151      	lsls	r1, r2, #5
 800c494:	69fa      	ldr	r2, [r7, #28]
 800c496:	440a      	add	r2, r1
 800c498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c49c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	6919      	ldr	r1, [r3, #16]
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	781a      	ldrb	r2, [r3, #0]
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	699b      	ldr	r3, [r3, #24]
 800c4ae:	b298      	uxth	r0, r3
 800c4b0:	79fb      	ldrb	r3, [r7, #7]
 800c4b2:	9300      	str	r3, [sp, #0]
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	68f8      	ldr	r0, [r7, #12]
 800c4b8:	f000 fade 	bl	800ca78 <USB_WritePacket>
 800c4bc:	e0d2      	b.n	800c664 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	015a      	lsls	r2, r3, #5
 800c4c2:	69fb      	ldr	r3, [r7, #28]
 800c4c4:	4413      	add	r3, r2
 800c4c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4ca:	691b      	ldr	r3, [r3, #16]
 800c4cc:	69ba      	ldr	r2, [r7, #24]
 800c4ce:	0151      	lsls	r1, r2, #5
 800c4d0:	69fa      	ldr	r2, [r7, #28]
 800c4d2:	440a      	add	r2, r1
 800c4d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4d8:	0cdb      	lsrs	r3, r3, #19
 800c4da:	04db      	lsls	r3, r3, #19
 800c4dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c4de:	69bb      	ldr	r3, [r7, #24]
 800c4e0:	015a      	lsls	r2, r3, #5
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	4413      	add	r3, r2
 800c4e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4ea:	691b      	ldr	r3, [r3, #16]
 800c4ec:	69ba      	ldr	r2, [r7, #24]
 800c4ee:	0151      	lsls	r1, r2, #5
 800c4f0:	69fa      	ldr	r2, [r7, #28]
 800c4f2:	440a      	add	r2, r1
 800c4f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c4fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c500:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	699b      	ldr	r3, [r3, #24]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d126      	bne.n	800c558 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	015a      	lsls	r2, r3, #5
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	4413      	add	r3, r2
 800c512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c516:	691a      	ldr	r2, [r3, #16]
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	68db      	ldr	r3, [r3, #12]
 800c51c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c520:	69b9      	ldr	r1, [r7, #24]
 800c522:	0148      	lsls	r0, r1, #5
 800c524:	69f9      	ldr	r1, [r7, #28]
 800c526:	4401      	add	r1, r0
 800c528:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c52c:	4313      	orrs	r3, r2
 800c52e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	015a      	lsls	r2, r3, #5
 800c534:	69fb      	ldr	r3, [r7, #28]
 800c536:	4413      	add	r3, r2
 800c538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c53c:	691b      	ldr	r3, [r3, #16]
 800c53e:	69ba      	ldr	r2, [r7, #24]
 800c540:	0151      	lsls	r1, r2, #5
 800c542:	69fa      	ldr	r2, [r7, #28]
 800c544:	440a      	add	r2, r1
 800c546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c54a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c54e:	6113      	str	r3, [r2, #16]
 800c550:	e03a      	b.n	800c5c8 <USB_EPStartXfer+0x3e4>
 800c552:	bf00      	nop
 800c554:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	699a      	ldr	r2, [r3, #24]
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	4413      	add	r3, r2
 800c562:	1e5a      	subs	r2, r3, #1
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	fbb2 f3f3 	udiv	r3, r2, r3
 800c56c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	68db      	ldr	r3, [r3, #12]
 800c572:	8afa      	ldrh	r2, [r7, #22]
 800c574:	fb03 f202 	mul.w	r2, r3, r2
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	015a      	lsls	r2, r3, #5
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	4413      	add	r3, r2
 800c584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c588:	691a      	ldr	r2, [r3, #16]
 800c58a:	8afb      	ldrh	r3, [r7, #22]
 800c58c:	04d9      	lsls	r1, r3, #19
 800c58e:	4b38      	ldr	r3, [pc, #224]	; (800c670 <USB_EPStartXfer+0x48c>)
 800c590:	400b      	ands	r3, r1
 800c592:	69b9      	ldr	r1, [r7, #24]
 800c594:	0148      	lsls	r0, r1, #5
 800c596:	69f9      	ldr	r1, [r7, #28]
 800c598:	4401      	add	r1, r0
 800c59a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c5a2:	69bb      	ldr	r3, [r7, #24]
 800c5a4:	015a      	lsls	r2, r3, #5
 800c5a6:	69fb      	ldr	r3, [r7, #28]
 800c5a8:	4413      	add	r3, r2
 800c5aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5ae:	691a      	ldr	r2, [r3, #16]
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	69db      	ldr	r3, [r3, #28]
 800c5b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c5b8:	69b9      	ldr	r1, [r7, #24]
 800c5ba:	0148      	lsls	r0, r1, #5
 800c5bc:	69f9      	ldr	r1, [r7, #28]
 800c5be:	4401      	add	r1, r0
 800c5c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c5c8:	79fb      	ldrb	r3, [r7, #7]
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d10d      	bne.n	800c5ea <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	691b      	ldr	r3, [r3, #16]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d009      	beq.n	800c5ea <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	6919      	ldr	r1, [r3, #16]
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	015a      	lsls	r2, r3, #5
 800c5de:	69fb      	ldr	r3, [r7, #28]
 800c5e0:	4413      	add	r3, r2
 800c5e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5e6:	460a      	mov	r2, r1
 800c5e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	791b      	ldrb	r3, [r3, #4]
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d128      	bne.n	800c644 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5f8:	689b      	ldr	r3, [r3, #8]
 800c5fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d110      	bne.n	800c624 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c602:	69bb      	ldr	r3, [r7, #24]
 800c604:	015a      	lsls	r2, r3, #5
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	4413      	add	r3, r2
 800c60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	69ba      	ldr	r2, [r7, #24]
 800c612:	0151      	lsls	r1, r2, #5
 800c614:	69fa      	ldr	r2, [r7, #28]
 800c616:	440a      	add	r2, r1
 800c618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c61c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c620:	6013      	str	r3, [r2, #0]
 800c622:	e00f      	b.n	800c644 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c624:	69bb      	ldr	r3, [r7, #24]
 800c626:	015a      	lsls	r2, r3, #5
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	4413      	add	r3, r2
 800c62c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	69ba      	ldr	r2, [r7, #24]
 800c634:	0151      	lsls	r1, r2, #5
 800c636:	69fa      	ldr	r2, [r7, #28]
 800c638:	440a      	add	r2, r1
 800c63a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c63e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c642:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c644:	69bb      	ldr	r3, [r7, #24]
 800c646:	015a      	lsls	r2, r3, #5
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	4413      	add	r3, r2
 800c64c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	69ba      	ldr	r2, [r7, #24]
 800c654:	0151      	lsls	r1, r2, #5
 800c656:	69fa      	ldr	r2, [r7, #28]
 800c658:	440a      	add	r2, r1
 800c65a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c65e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c662:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c664:	2300      	movs	r3, #0
}
 800c666:	4618      	mov	r0, r3
 800c668:	3720      	adds	r7, #32
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	1ff80000 	.word	0x1ff80000

0800c674 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c674:	b480      	push	{r7}
 800c676:	b087      	sub	sp, #28
 800c678:	af00      	add	r7, sp, #0
 800c67a:	60f8      	str	r0, [r7, #12]
 800c67c:	60b9      	str	r1, [r7, #8]
 800c67e:	4613      	mov	r3, r2
 800c680:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	785b      	ldrb	r3, [r3, #1]
 800c690:	2b01      	cmp	r3, #1
 800c692:	f040 80ce 	bne.w	800c832 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	699b      	ldr	r3, [r3, #24]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d132      	bne.n	800c704 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	015a      	lsls	r2, r3, #5
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	4413      	add	r3, r2
 800c6a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6aa:	691b      	ldr	r3, [r3, #16]
 800c6ac:	693a      	ldr	r2, [r7, #16]
 800c6ae:	0151      	lsls	r1, r2, #5
 800c6b0:	697a      	ldr	r2, [r7, #20]
 800c6b2:	440a      	add	r2, r1
 800c6b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c6bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c6c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	015a      	lsls	r2, r3, #5
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ce:	691b      	ldr	r3, [r3, #16]
 800c6d0:	693a      	ldr	r2, [r7, #16]
 800c6d2:	0151      	lsls	r1, r2, #5
 800c6d4:	697a      	ldr	r2, [r7, #20]
 800c6d6:	440a      	add	r2, r1
 800c6d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c6e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	015a      	lsls	r2, r3, #5
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ee:	691b      	ldr	r3, [r3, #16]
 800c6f0:	693a      	ldr	r2, [r7, #16]
 800c6f2:	0151      	lsls	r1, r2, #5
 800c6f4:	697a      	ldr	r2, [r7, #20]
 800c6f6:	440a      	add	r2, r1
 800c6f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6fc:	0cdb      	lsrs	r3, r3, #19
 800c6fe:	04db      	lsls	r3, r3, #19
 800c700:	6113      	str	r3, [r2, #16]
 800c702:	e04e      	b.n	800c7a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	015a      	lsls	r2, r3, #5
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	4413      	add	r3, r2
 800c70c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c710:	691b      	ldr	r3, [r3, #16]
 800c712:	693a      	ldr	r2, [r7, #16]
 800c714:	0151      	lsls	r1, r2, #5
 800c716:	697a      	ldr	r2, [r7, #20]
 800c718:	440a      	add	r2, r1
 800c71a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c71e:	0cdb      	lsrs	r3, r3, #19
 800c720:	04db      	lsls	r3, r3, #19
 800c722:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	015a      	lsls	r2, r3, #5
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	4413      	add	r3, r2
 800c72c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c730:	691b      	ldr	r3, [r3, #16]
 800c732:	693a      	ldr	r2, [r7, #16]
 800c734:	0151      	lsls	r1, r2, #5
 800c736:	697a      	ldr	r2, [r7, #20]
 800c738:	440a      	add	r2, r1
 800c73a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c73e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c742:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c746:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	699a      	ldr	r2, [r3, #24]
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	429a      	cmp	r2, r3
 800c752:	d903      	bls.n	800c75c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	68da      	ldr	r2, [r3, #12]
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	015a      	lsls	r2, r3, #5
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	4413      	add	r3, r2
 800c764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c768:	691b      	ldr	r3, [r3, #16]
 800c76a:	693a      	ldr	r2, [r7, #16]
 800c76c:	0151      	lsls	r1, r2, #5
 800c76e:	697a      	ldr	r2, [r7, #20]
 800c770:	440a      	add	r2, r1
 800c772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c776:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c77a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	015a      	lsls	r2, r3, #5
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	4413      	add	r3, r2
 800c784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c788:	691a      	ldr	r2, [r3, #16]
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	699b      	ldr	r3, [r3, #24]
 800c78e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c792:	6939      	ldr	r1, [r7, #16]
 800c794:	0148      	lsls	r0, r1, #5
 800c796:	6979      	ldr	r1, [r7, #20]
 800c798:	4401      	add	r1, r0
 800c79a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c7a2:	79fb      	ldrb	r3, [r7, #7]
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d11e      	bne.n	800c7e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	695b      	ldr	r3, [r3, #20]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d009      	beq.n	800c7c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	015a      	lsls	r2, r3, #5
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7bc:	461a      	mov	r2, r3
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	695b      	ldr	r3, [r3, #20]
 800c7c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	015a      	lsls	r2, r3, #5
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	693a      	ldr	r2, [r7, #16]
 800c7d4:	0151      	lsls	r1, r2, #5
 800c7d6:	697a      	ldr	r2, [r7, #20]
 800c7d8:	440a      	add	r2, r1
 800c7da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c7e2:	6013      	str	r3, [r2, #0]
 800c7e4:	e097      	b.n	800c916 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	015a      	lsls	r2, r3, #5
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	693a      	ldr	r2, [r7, #16]
 800c7f6:	0151      	lsls	r1, r2, #5
 800c7f8:	697a      	ldr	r2, [r7, #20]
 800c7fa:	440a      	add	r2, r1
 800c7fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c800:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c804:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	699b      	ldr	r3, [r3, #24]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f000 8083 	beq.w	800c916 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	f003 030f 	and.w	r3, r3, #15
 800c820:	2101      	movs	r1, #1
 800c822:	fa01 f303 	lsl.w	r3, r1, r3
 800c826:	6979      	ldr	r1, [r7, #20]
 800c828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c82c:	4313      	orrs	r3, r2
 800c82e:	634b      	str	r3, [r1, #52]	; 0x34
 800c830:	e071      	b.n	800c916 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	015a      	lsls	r2, r3, #5
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	4413      	add	r3, r2
 800c83a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c83e:	691b      	ldr	r3, [r3, #16]
 800c840:	693a      	ldr	r2, [r7, #16]
 800c842:	0151      	lsls	r1, r2, #5
 800c844:	697a      	ldr	r2, [r7, #20]
 800c846:	440a      	add	r2, r1
 800c848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c84c:	0cdb      	lsrs	r3, r3, #19
 800c84e:	04db      	lsls	r3, r3, #19
 800c850:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	015a      	lsls	r2, r3, #5
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	4413      	add	r3, r2
 800c85a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c85e:	691b      	ldr	r3, [r3, #16]
 800c860:	693a      	ldr	r2, [r7, #16]
 800c862:	0151      	lsls	r1, r2, #5
 800c864:	697a      	ldr	r2, [r7, #20]
 800c866:	440a      	add	r2, r1
 800c868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c86c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c870:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c874:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	699b      	ldr	r3, [r3, #24]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d003      	beq.n	800c886 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	68da      	ldr	r2, [r3, #12]
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	68da      	ldr	r2, [r3, #12]
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	015a      	lsls	r2, r3, #5
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	4413      	add	r3, r2
 800c896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c89a:	691b      	ldr	r3, [r3, #16]
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	0151      	lsls	r1, r2, #5
 800c8a0:	697a      	ldr	r2, [r7, #20]
 800c8a2:	440a      	add	r2, r1
 800c8a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c8ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	015a      	lsls	r2, r3, #5
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	4413      	add	r3, r2
 800c8b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ba:	691a      	ldr	r2, [r3, #16]
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	69db      	ldr	r3, [r3, #28]
 800c8c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c8c4:	6939      	ldr	r1, [r7, #16]
 800c8c6:	0148      	lsls	r0, r1, #5
 800c8c8:	6979      	ldr	r1, [r7, #20]
 800c8ca:	4401      	add	r1, r0
 800c8cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c8d4:	79fb      	ldrb	r3, [r7, #7]
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d10d      	bne.n	800c8f6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	691b      	ldr	r3, [r3, #16]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d009      	beq.n	800c8f6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	6919      	ldr	r1, [r3, #16]
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	015a      	lsls	r2, r3, #5
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8f2:	460a      	mov	r2, r1
 800c8f4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	015a      	lsls	r2, r3, #5
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	4413      	add	r3, r2
 800c8fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	693a      	ldr	r2, [r7, #16]
 800c906:	0151      	lsls	r1, r2, #5
 800c908:	697a      	ldr	r2, [r7, #20]
 800c90a:	440a      	add	r2, r1
 800c90c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c910:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c914:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c916:	2300      	movs	r3, #0
}
 800c918:	4618      	mov	r0, r3
 800c91a:	371c      	adds	r7, #28
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr

0800c924 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c924:	b480      	push	{r7}
 800c926:	b087      	sub	sp, #28
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c92e:	2300      	movs	r3, #0
 800c930:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c932:	2300      	movs	r3, #0
 800c934:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	785b      	ldrb	r3, [r3, #1]
 800c93e:	2b01      	cmp	r3, #1
 800c940:	d14a      	bne.n	800c9d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	015a      	lsls	r2, r3, #5
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	4413      	add	r3, r2
 800c94c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c956:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c95a:	f040 8086 	bne.w	800ca6a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	015a      	lsls	r2, r3, #5
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	4413      	add	r3, r2
 800c968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	683a      	ldr	r2, [r7, #0]
 800c970:	7812      	ldrb	r2, [r2, #0]
 800c972:	0151      	lsls	r1, r2, #5
 800c974:	693a      	ldr	r2, [r7, #16]
 800c976:	440a      	add	r2, r1
 800c978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c97c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c980:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	015a      	lsls	r2, r3, #5
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	4413      	add	r3, r2
 800c98c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	683a      	ldr	r2, [r7, #0]
 800c994:	7812      	ldrb	r2, [r2, #0]
 800c996:	0151      	lsls	r1, r2, #5
 800c998:	693a      	ldr	r2, [r7, #16]
 800c99a:	440a      	add	r2, r1
 800c99c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c9a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f242 7210 	movw	r2, #10000	; 0x2710
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d902      	bls.n	800c9bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	75fb      	strb	r3, [r7, #23]
          break;
 800c9ba:	e056      	b.n	800ca6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	015a      	lsls	r2, r3, #5
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9d4:	d0e7      	beq.n	800c9a6 <USB_EPStopXfer+0x82>
 800c9d6:	e048      	b.n	800ca6a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	015a      	lsls	r2, r3, #5
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	4413      	add	r3, r2
 800c9e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9f0:	d13b      	bne.n	800ca6a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	015a      	lsls	r2, r3, #5
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	683a      	ldr	r2, [r7, #0]
 800ca04:	7812      	ldrb	r2, [r2, #0]
 800ca06:	0151      	lsls	r1, r2, #5
 800ca08:	693a      	ldr	r2, [r7, #16]
 800ca0a:	440a      	add	r2, r1
 800ca0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ca14:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	015a      	lsls	r2, r3, #5
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	4413      	add	r3, r2
 800ca20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	683a      	ldr	r2, [r7, #0]
 800ca28:	7812      	ldrb	r2, [r2, #0]
 800ca2a:	0151      	lsls	r1, r2, #5
 800ca2c:	693a      	ldr	r2, [r7, #16]
 800ca2e:	440a      	add	r2, r1
 800ca30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f242 7210 	movw	r2, #10000	; 0x2710
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d902      	bls.n	800ca50 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	75fb      	strb	r3, [r7, #23]
          break;
 800ca4e:	e00c      	b.n	800ca6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	015a      	lsls	r2, r3, #5
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	4413      	add	r3, r2
 800ca5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca68:	d0e7      	beq.n	800ca3a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ca6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	371c      	adds	r7, #28
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr

0800ca78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b089      	sub	sp, #36	; 0x24
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	60b9      	str	r1, [r7, #8]
 800ca82:	4611      	mov	r1, r2
 800ca84:	461a      	mov	r2, r3
 800ca86:	460b      	mov	r3, r1
 800ca88:	71fb      	strb	r3, [r7, #7]
 800ca8a:	4613      	mov	r3, r2
 800ca8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ca96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d123      	bne.n	800cae6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ca9e:	88bb      	ldrh	r3, [r7, #4]
 800caa0:	3303      	adds	r3, #3
 800caa2:	089b      	lsrs	r3, r3, #2
 800caa4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800caa6:	2300      	movs	r3, #0
 800caa8:	61bb      	str	r3, [r7, #24]
 800caaa:	e018      	b.n	800cade <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800caac:	79fb      	ldrb	r3, [r7, #7]
 800caae:	031a      	lsls	r2, r3, #12
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	4413      	add	r3, r2
 800cab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cab8:	461a      	mov	r2, r3
 800caba:	69fb      	ldr	r3, [r7, #28]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	3301      	adds	r3, #1
 800cac4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	3301      	adds	r3, #1
 800caca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cacc:	69fb      	ldr	r3, [r7, #28]
 800cace:	3301      	adds	r3, #1
 800cad0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	3301      	adds	r3, #1
 800cad6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cad8:	69bb      	ldr	r3, [r7, #24]
 800cada:	3301      	adds	r3, #1
 800cadc:	61bb      	str	r3, [r7, #24]
 800cade:	69ba      	ldr	r2, [r7, #24]
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d3e2      	bcc.n	800caac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cae6:	2300      	movs	r3, #0
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3724      	adds	r7, #36	; 0x24
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b08b      	sub	sp, #44	; 0x2c
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	4613      	mov	r3, r2
 800cb00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cb0a:	88fb      	ldrh	r3, [r7, #6]
 800cb0c:	089b      	lsrs	r3, r3, #2
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cb12:	88fb      	ldrh	r3, [r7, #6]
 800cb14:	f003 0303 	and.w	r3, r3, #3
 800cb18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	623b      	str	r3, [r7, #32]
 800cb1e:	e014      	b.n	800cb4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2a:	601a      	str	r2, [r3, #0]
    pDest++;
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2e:	3301      	adds	r3, #1
 800cb30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb34:	3301      	adds	r3, #1
 800cb36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb40:	3301      	adds	r3, #1
 800cb42:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cb44:	6a3b      	ldr	r3, [r7, #32]
 800cb46:	3301      	adds	r3, #1
 800cb48:	623b      	str	r3, [r7, #32]
 800cb4a:	6a3a      	ldr	r2, [r7, #32]
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d3e6      	bcc.n	800cb20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cb52:	8bfb      	ldrh	r3, [r7, #30]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d01e      	beq.n	800cb96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cb5c:	69bb      	ldr	r3, [r7, #24]
 800cb5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb62:	461a      	mov	r2, r3
 800cb64:	f107 0310 	add.w	r3, r7, #16
 800cb68:	6812      	ldr	r2, [r2, #0]
 800cb6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cb6c:	693a      	ldr	r2, [r7, #16]
 800cb6e:	6a3b      	ldr	r3, [r7, #32]
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	00db      	lsls	r3, r3, #3
 800cb74:	fa22 f303 	lsr.w	r3, r2, r3
 800cb78:	b2da      	uxtb	r2, r3
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7c:	701a      	strb	r2, [r3, #0]
      i++;
 800cb7e:	6a3b      	ldr	r3, [r7, #32]
 800cb80:	3301      	adds	r3, #1
 800cb82:	623b      	str	r3, [r7, #32]
      pDest++;
 800cb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb86:	3301      	adds	r3, #1
 800cb88:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cb8a:	8bfb      	ldrh	r3, [r7, #30]
 800cb8c:	3b01      	subs	r3, #1
 800cb8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cb90:	8bfb      	ldrh	r3, [r7, #30]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d1ea      	bne.n	800cb6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	372c      	adds	r7, #44	; 0x2c
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr

0800cba4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b085      	sub	sp, #20
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	785b      	ldrb	r3, [r3, #1]
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d12c      	bne.n	800cc1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	015a      	lsls	r2, r3, #5
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	4413      	add	r3, r2
 800cbc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	db12      	blt.n	800cbf8 <USB_EPSetStall+0x54>
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d00f      	beq.n	800cbf8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	015a      	lsls	r2, r3, #5
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	4413      	add	r3, r2
 800cbe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	68ba      	ldr	r2, [r7, #8]
 800cbe8:	0151      	lsls	r1, r2, #5
 800cbea:	68fa      	ldr	r2, [r7, #12]
 800cbec:	440a      	add	r2, r1
 800cbee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbf2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cbf6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	015a      	lsls	r2, r3, #5
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	4413      	add	r3, r2
 800cc00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	68ba      	ldr	r2, [r7, #8]
 800cc08:	0151      	lsls	r1, r2, #5
 800cc0a:	68fa      	ldr	r2, [r7, #12]
 800cc0c:	440a      	add	r2, r1
 800cc0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cc16:	6013      	str	r3, [r2, #0]
 800cc18:	e02b      	b.n	800cc72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	015a      	lsls	r2, r3, #5
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	4413      	add	r3, r2
 800cc22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	db12      	blt.n	800cc52 <USB_EPSetStall+0xae>
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d00f      	beq.n	800cc52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	015a      	lsls	r2, r3, #5
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	4413      	add	r3, r2
 800cc3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	68ba      	ldr	r2, [r7, #8]
 800cc42:	0151      	lsls	r1, r2, #5
 800cc44:	68fa      	ldr	r2, [r7, #12]
 800cc46:	440a      	add	r2, r1
 800cc48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cc50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	015a      	lsls	r2, r3, #5
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	4413      	add	r3, r2
 800cc5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	68ba      	ldr	r2, [r7, #8]
 800cc62:	0151      	lsls	r1, r2, #5
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	440a      	add	r2, r1
 800cc68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cc70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc72:	2300      	movs	r3, #0
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3714      	adds	r7, #20
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr

0800cc80 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b085      	sub	sp, #20
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	785b      	ldrb	r3, [r3, #1]
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d128      	bne.n	800ccee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	015a      	lsls	r2, r3, #5
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	4413      	add	r3, r2
 800cca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	68ba      	ldr	r2, [r7, #8]
 800ccac:	0151      	lsls	r1, r2, #5
 800ccae:	68fa      	ldr	r2, [r7, #12]
 800ccb0:	440a      	add	r2, r1
 800ccb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ccba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	791b      	ldrb	r3, [r3, #4]
 800ccc0:	2b03      	cmp	r3, #3
 800ccc2:	d003      	beq.n	800cccc <USB_EPClearStall+0x4c>
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	791b      	ldrb	r3, [r3, #4]
 800ccc8:	2b02      	cmp	r3, #2
 800ccca:	d138      	bne.n	800cd3e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	015a      	lsls	r2, r3, #5
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	4413      	add	r3, r2
 800ccd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	68ba      	ldr	r2, [r7, #8]
 800ccdc:	0151      	lsls	r1, r2, #5
 800ccde:	68fa      	ldr	r2, [r7, #12]
 800cce0:	440a      	add	r2, r1
 800cce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccea:	6013      	str	r3, [r2, #0]
 800ccec:	e027      	b.n	800cd3e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	015a      	lsls	r2, r3, #5
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	68ba      	ldr	r2, [r7, #8]
 800ccfe:	0151      	lsls	r1, r2, #5
 800cd00:	68fa      	ldr	r2, [r7, #12]
 800cd02:	440a      	add	r2, r1
 800cd04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cd0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	791b      	ldrb	r3, [r3, #4]
 800cd12:	2b03      	cmp	r3, #3
 800cd14:	d003      	beq.n	800cd1e <USB_EPClearStall+0x9e>
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	791b      	ldrb	r3, [r3, #4]
 800cd1a:	2b02      	cmp	r3, #2
 800cd1c:	d10f      	bne.n	800cd3e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	015a      	lsls	r2, r3, #5
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	4413      	add	r3, r2
 800cd26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	68ba      	ldr	r2, [r7, #8]
 800cd2e:	0151      	lsls	r1, r2, #5
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	440a      	add	r2, r1
 800cd34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd3c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cd3e:	2300      	movs	r3, #0
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3714      	adds	r7, #20
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b085      	sub	sp, #20
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	460b      	mov	r3, r1
 800cd56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	68fa      	ldr	r2, [r7, #12]
 800cd66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cd6e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd76:	681a      	ldr	r2, [r3, #0]
 800cd78:	78fb      	ldrb	r3, [r7, #3]
 800cd7a:	011b      	lsls	r3, r3, #4
 800cd7c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cd80:	68f9      	ldr	r1, [r7, #12]
 800cd82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd86:	4313      	orrs	r3, r2
 800cd88:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cd8a:	2300      	movs	r3, #0
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3714      	adds	r7, #20
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr

0800cd98 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b085      	sub	sp, #20
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	68fa      	ldr	r2, [r7, #12]
 800cdae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cdb2:	f023 0303 	bic.w	r3, r3, #3
 800cdb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	68fa      	ldr	r2, [r7, #12]
 800cdc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdc6:	f023 0302 	bic.w	r3, r3, #2
 800cdca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3714      	adds	r7, #20
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr

0800cdda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cdda:	b480      	push	{r7}
 800cddc:	b085      	sub	sp, #20
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	68fa      	ldr	r2, [r7, #12]
 800cdf0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cdf4:	f023 0303 	bic.w	r3, r3, #3
 800cdf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	68fa      	ldr	r2, [r7, #12]
 800ce04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce08:	f043 0302 	orr.w	r3, r3, #2
 800ce0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ce0e:	2300      	movs	r3, #0
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3714      	adds	r7, #20
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr

0800ce1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	695b      	ldr	r3, [r3, #20]
 800ce28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	699b      	ldr	r3, [r3, #24]
 800ce2e:	68fa      	ldr	r2, [r7, #12]
 800ce30:	4013      	ands	r3, r2
 800ce32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ce34:	68fb      	ldr	r3, [r7, #12]
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3714      	adds	r7, #20
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr

0800ce42 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ce42:	b480      	push	{r7}
 800ce44:	b085      	sub	sp, #20
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce54:	699b      	ldr	r3, [r3, #24]
 800ce56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce5e:	69db      	ldr	r3, [r3, #28]
 800ce60:	68ba      	ldr	r2, [r7, #8]
 800ce62:	4013      	ands	r3, r2
 800ce64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	0c1b      	lsrs	r3, r3, #16
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3714      	adds	r7, #20
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr

0800ce76 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ce76:	b480      	push	{r7}
 800ce78:	b085      	sub	sp, #20
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce88:	699b      	ldr	r3, [r3, #24]
 800ce8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce92:	69db      	ldr	r3, [r3, #28]
 800ce94:	68ba      	ldr	r2, [r7, #8]
 800ce96:	4013      	ands	r3, r2
 800ce98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	b29b      	uxth	r3, r3
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3714      	adds	r7, #20
 800cea2:	46bd      	mov	sp, r7
 800cea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea8:	4770      	bx	lr

0800ceaa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ceaa:	b480      	push	{r7}
 800ceac:	b085      	sub	sp, #20
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ceba:	78fb      	ldrb	r3, [r7, #3]
 800cebc:	015a      	lsls	r2, r3, #5
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	4413      	add	r3, r2
 800cec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ced0:	695b      	ldr	r3, [r3, #20]
 800ced2:	68ba      	ldr	r2, [r7, #8]
 800ced4:	4013      	ands	r3, r2
 800ced6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ced8:	68bb      	ldr	r3, [r7, #8]
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3714      	adds	r7, #20
 800cede:	46bd      	mov	sp, r7
 800cee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee4:	4770      	bx	lr

0800cee6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cee6:	b480      	push	{r7}
 800cee8:	b087      	sub	sp, #28
 800ceea:	af00      	add	r7, sp, #0
 800ceec:	6078      	str	r0, [r7, #4]
 800ceee:	460b      	mov	r3, r1
 800cef0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cefc:	691b      	ldr	r3, [r3, #16]
 800cefe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf08:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cf0a:	78fb      	ldrb	r3, [r7, #3]
 800cf0c:	f003 030f 	and.w	r3, r3, #15
 800cf10:	68fa      	ldr	r2, [r7, #12]
 800cf12:	fa22 f303 	lsr.w	r3, r2, r3
 800cf16:	01db      	lsls	r3, r3, #7
 800cf18:	b2db      	uxtb	r3, r3
 800cf1a:	693a      	ldr	r2, [r7, #16]
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cf20:	78fb      	ldrb	r3, [r7, #3]
 800cf22:	015a      	lsls	r2, r3, #5
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	4413      	add	r3, r2
 800cf28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf2c:	689b      	ldr	r3, [r3, #8]
 800cf2e:	693a      	ldr	r2, [r7, #16]
 800cf30:	4013      	ands	r3, r2
 800cf32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cf34:	68bb      	ldr	r3, [r7, #8]
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	371c      	adds	r7, #28
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr

0800cf42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cf42:	b480      	push	{r7}
 800cf44:	b083      	sub	sp, #12
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	695b      	ldr	r3, [r3, #20]
 800cf4e:	f003 0301 	and.w	r3, r3, #1
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	370c      	adds	r7, #12
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr

0800cf5e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cf5e:	b480      	push	{r7}
 800cf60:	b085      	sub	sp, #20
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	68fa      	ldr	r2, [r7, #12]
 800cf74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf78:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cf7c:	f023 0307 	bic.w	r3, r3, #7
 800cf80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf88:	685b      	ldr	r3, [r3, #4]
 800cf8a:	68fa      	ldr	r2, [r7, #12]
 800cf8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cf96:	2300      	movs	r3, #0
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3714      	adds	r7, #20
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr

0800cfa4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b087      	sub	sp, #28
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	60f8      	str	r0, [r7, #12]
 800cfac:	460b      	mov	r3, r1
 800cfae:	607a      	str	r2, [r7, #4]
 800cfb0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	333c      	adds	r3, #60	; 0x3c
 800cfba:	3304      	adds	r3, #4
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	4a26      	ldr	r2, [pc, #152]	; (800d05c <USB_EP0_OutStart+0xb8>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d90a      	bls.n	800cfde <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cfd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cfd8:	d101      	bne.n	800cfde <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	e037      	b.n	800d04e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cff0:	691b      	ldr	r3, [r3, #16]
 800cff2:	697a      	ldr	r2, [r7, #20]
 800cff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cff8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cffc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d004:	691b      	ldr	r3, [r3, #16]
 800d006:	697a      	ldr	r2, [r7, #20]
 800d008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d00c:	f043 0318 	orr.w	r3, r3, #24
 800d010:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d018:	691b      	ldr	r3, [r3, #16]
 800d01a:	697a      	ldr	r2, [r7, #20]
 800d01c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d020:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d024:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d026:	7afb      	ldrb	r3, [r7, #11]
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d10f      	bne.n	800d04c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d032:	461a      	mov	r2, r3
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	697a      	ldr	r2, [r7, #20]
 800d042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d046:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d04a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d04c:	2300      	movs	r3, #0
}
 800d04e:	4618      	mov	r0, r3
 800d050:	371c      	adds	r7, #28
 800d052:	46bd      	mov	sp, r7
 800d054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d058:	4770      	bx	lr
 800d05a:	bf00      	nop
 800d05c:	4f54300a 	.word	0x4f54300a

0800d060 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d060:	b480      	push	{r7}
 800d062:	b085      	sub	sp, #20
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d068:	2300      	movs	r3, #0
 800d06a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	3301      	adds	r3, #1
 800d070:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	4a13      	ldr	r2, [pc, #76]	; (800d0c4 <USB_CoreReset+0x64>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d901      	bls.n	800d07e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d07a:	2303      	movs	r3, #3
 800d07c:	e01b      	b.n	800d0b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	691b      	ldr	r3, [r3, #16]
 800d082:	2b00      	cmp	r3, #0
 800d084:	daf2      	bge.n	800d06c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d086:	2300      	movs	r3, #0
 800d088:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	691b      	ldr	r3, [r3, #16]
 800d08e:	f043 0201 	orr.w	r2, r3, #1
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	3301      	adds	r3, #1
 800d09a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	4a09      	ldr	r2, [pc, #36]	; (800d0c4 <USB_CoreReset+0x64>)
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d901      	bls.n	800d0a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d0a4:	2303      	movs	r3, #3
 800d0a6:	e006      	b.n	800d0b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	691b      	ldr	r3, [r3, #16]
 800d0ac:	f003 0301 	and.w	r3, r3, #1
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d0f0      	beq.n	800d096 <USB_CoreReset+0x36>

  return HAL_OK;
 800d0b4:	2300      	movs	r3, #0
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3714      	adds	r7, #20
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c0:	4770      	bx	lr
 800d0c2:	bf00      	nop
 800d0c4:	00030d40 	.word	0x00030d40

0800d0c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b084      	sub	sp, #16
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d0d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d0d8:	f012 fe6e 	bl	801fdb8 <USBD_static_malloc>
 800d0dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d109      	bne.n	800d0f8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	32b0      	adds	r2, #176	; 0xb0
 800d0ee:	2100      	movs	r1, #0
 800d0f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d0f4:	2302      	movs	r3, #2
 800d0f6:	e0d4      	b.n	800d2a2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d0f8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800d0fc:	2100      	movs	r1, #0
 800d0fe:	68f8      	ldr	r0, [r7, #12]
 800d100:	f015 fca6 	bl	8022a50 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	32b0      	adds	r2, #176	; 0xb0
 800d10e:	68f9      	ldr	r1, [r7, #12]
 800d110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	32b0      	adds	r2, #176	; 0xb0
 800d11e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	7c1b      	ldrb	r3, [r3, #16]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d138      	bne.n	800d1a2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d130:	4b5e      	ldr	r3, [pc, #376]	; (800d2ac <USBD_CDC_Init+0x1e4>)
 800d132:	7819      	ldrb	r1, [r3, #0]
 800d134:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d138:	2202      	movs	r2, #2
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f012 fd19 	bl	801fb72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d140:	4b5a      	ldr	r3, [pc, #360]	; (800d2ac <USBD_CDC_Init+0x1e4>)
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	f003 020f 	and.w	r2, r3, #15
 800d148:	6879      	ldr	r1, [r7, #4]
 800d14a:	4613      	mov	r3, r2
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	4413      	add	r3, r2
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	440b      	add	r3, r1
 800d154:	3324      	adds	r3, #36	; 0x24
 800d156:	2201      	movs	r2, #1
 800d158:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d15a:	4b55      	ldr	r3, [pc, #340]	; (800d2b0 <USBD_CDC_Init+0x1e8>)
 800d15c:	7819      	ldrb	r1, [r3, #0]
 800d15e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d162:	2202      	movs	r2, #2
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f012 fd04 	bl	801fb72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d16a:	4b51      	ldr	r3, [pc, #324]	; (800d2b0 <USBD_CDC_Init+0x1e8>)
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	f003 020f 	and.w	r2, r3, #15
 800d172:	6879      	ldr	r1, [r7, #4]
 800d174:	4613      	mov	r3, r2
 800d176:	009b      	lsls	r3, r3, #2
 800d178:	4413      	add	r3, r2
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	440b      	add	r3, r1
 800d17e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d182:	2201      	movs	r2, #1
 800d184:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d186:	4b4b      	ldr	r3, [pc, #300]	; (800d2b4 <USBD_CDC_Init+0x1ec>)
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	f003 020f 	and.w	r2, r3, #15
 800d18e:	6879      	ldr	r1, [r7, #4]
 800d190:	4613      	mov	r3, r2
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	4413      	add	r3, r2
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	440b      	add	r3, r1
 800d19a:	3326      	adds	r3, #38	; 0x26
 800d19c:	2210      	movs	r2, #16
 800d19e:	801a      	strh	r2, [r3, #0]
 800d1a0:	e035      	b.n	800d20e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d1a2:	4b42      	ldr	r3, [pc, #264]	; (800d2ac <USBD_CDC_Init+0x1e4>)
 800d1a4:	7819      	ldrb	r1, [r3, #0]
 800d1a6:	2340      	movs	r3, #64	; 0x40
 800d1a8:	2202      	movs	r2, #2
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f012 fce1 	bl	801fb72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d1b0:	4b3e      	ldr	r3, [pc, #248]	; (800d2ac <USBD_CDC_Init+0x1e4>)
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	f003 020f 	and.w	r2, r3, #15
 800d1b8:	6879      	ldr	r1, [r7, #4]
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	009b      	lsls	r3, r3, #2
 800d1be:	4413      	add	r3, r2
 800d1c0:	009b      	lsls	r3, r3, #2
 800d1c2:	440b      	add	r3, r1
 800d1c4:	3324      	adds	r3, #36	; 0x24
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d1ca:	4b39      	ldr	r3, [pc, #228]	; (800d2b0 <USBD_CDC_Init+0x1e8>)
 800d1cc:	7819      	ldrb	r1, [r3, #0]
 800d1ce:	2340      	movs	r3, #64	; 0x40
 800d1d0:	2202      	movs	r2, #2
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f012 fccd 	bl	801fb72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d1d8:	4b35      	ldr	r3, [pc, #212]	; (800d2b0 <USBD_CDC_Init+0x1e8>)
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	f003 020f 	and.w	r2, r3, #15
 800d1e0:	6879      	ldr	r1, [r7, #4]
 800d1e2:	4613      	mov	r3, r2
 800d1e4:	009b      	lsls	r3, r3, #2
 800d1e6:	4413      	add	r3, r2
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	440b      	add	r3, r1
 800d1ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d1f4:	4b2f      	ldr	r3, [pc, #188]	; (800d2b4 <USBD_CDC_Init+0x1ec>)
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	f003 020f 	and.w	r2, r3, #15
 800d1fc:	6879      	ldr	r1, [r7, #4]
 800d1fe:	4613      	mov	r3, r2
 800d200:	009b      	lsls	r3, r3, #2
 800d202:	4413      	add	r3, r2
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	440b      	add	r3, r1
 800d208:	3326      	adds	r3, #38	; 0x26
 800d20a:	2210      	movs	r2, #16
 800d20c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d20e:	4b29      	ldr	r3, [pc, #164]	; (800d2b4 <USBD_CDC_Init+0x1ec>)
 800d210:	7819      	ldrb	r1, [r3, #0]
 800d212:	2308      	movs	r3, #8
 800d214:	2203      	movs	r2, #3
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f012 fcab 	bl	801fb72 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d21c:	4b25      	ldr	r3, [pc, #148]	; (800d2b4 <USBD_CDC_Init+0x1ec>)
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	f003 020f 	and.w	r2, r3, #15
 800d224:	6879      	ldr	r1, [r7, #4]
 800d226:	4613      	mov	r3, r2
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	4413      	add	r3, r2
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	440b      	add	r3, r1
 800d230:	3324      	adds	r3, #36	; 0x24
 800d232:	2201      	movs	r2, #1
 800d234:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2200      	movs	r2, #0
 800d23a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	33b0      	adds	r3, #176	; 0xb0
 800d248:	009b      	lsls	r3, r3, #2
 800d24a:	4413      	add	r3, r2
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2200      	movs	r2, #0
 800d256:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	2200      	movs	r2, #0
 800d25e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d101      	bne.n	800d270 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d26c:	2302      	movs	r3, #2
 800d26e:	e018      	b.n	800d2a2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	7c1b      	ldrb	r3, [r3, #16]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d10a      	bne.n	800d28e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d278:	4b0d      	ldr	r3, [pc, #52]	; (800d2b0 <USBD_CDC_Init+0x1e8>)
 800d27a:	7819      	ldrb	r1, [r3, #0]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d282:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f012 fd62 	bl	801fd50 <USBD_LL_PrepareReceive>
 800d28c:	e008      	b.n	800d2a0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d28e:	4b08      	ldr	r3, [pc, #32]	; (800d2b0 <USBD_CDC_Init+0x1e8>)
 800d290:	7819      	ldrb	r1, [r3, #0]
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d298:	2340      	movs	r3, #64	; 0x40
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f012 fd58 	bl	801fd50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d2a0:	2300      	movs	r3, #0
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3710      	adds	r7, #16
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	20000107 	.word	0x20000107
 800d2b0:	20000108 	.word	0x20000108
 800d2b4:	20000109 	.word	0x20000109

0800d2b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d2c4:	4b3a      	ldr	r3, [pc, #232]	; (800d3b0 <USBD_CDC_DeInit+0xf8>)
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f012 fc77 	bl	801fbbe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d2d0:	4b37      	ldr	r3, [pc, #220]	; (800d3b0 <USBD_CDC_DeInit+0xf8>)
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	f003 020f 	and.w	r2, r3, #15
 800d2d8:	6879      	ldr	r1, [r7, #4]
 800d2da:	4613      	mov	r3, r2
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	4413      	add	r3, r2
 800d2e0:	009b      	lsls	r3, r3, #2
 800d2e2:	440b      	add	r3, r1
 800d2e4:	3324      	adds	r3, #36	; 0x24
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d2ea:	4b32      	ldr	r3, [pc, #200]	; (800d3b4 <USBD_CDC_DeInit+0xfc>)
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f012 fc64 	bl	801fbbe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d2f6:	4b2f      	ldr	r3, [pc, #188]	; (800d3b4 <USBD_CDC_DeInit+0xfc>)
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	f003 020f 	and.w	r2, r3, #15
 800d2fe:	6879      	ldr	r1, [r7, #4]
 800d300:	4613      	mov	r3, r2
 800d302:	009b      	lsls	r3, r3, #2
 800d304:	4413      	add	r3, r2
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	440b      	add	r3, r1
 800d30a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d30e:	2200      	movs	r2, #0
 800d310:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d312:	4b29      	ldr	r3, [pc, #164]	; (800d3b8 <USBD_CDC_DeInit+0x100>)
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	4619      	mov	r1, r3
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f012 fc50 	bl	801fbbe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d31e:	4b26      	ldr	r3, [pc, #152]	; (800d3b8 <USBD_CDC_DeInit+0x100>)
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	f003 020f 	and.w	r2, r3, #15
 800d326:	6879      	ldr	r1, [r7, #4]
 800d328:	4613      	mov	r3, r2
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	4413      	add	r3, r2
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	440b      	add	r3, r1
 800d332:	3324      	adds	r3, #36	; 0x24
 800d334:	2200      	movs	r2, #0
 800d336:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d338:	4b1f      	ldr	r3, [pc, #124]	; (800d3b8 <USBD_CDC_DeInit+0x100>)
 800d33a:	781b      	ldrb	r3, [r3, #0]
 800d33c:	f003 020f 	and.w	r2, r3, #15
 800d340:	6879      	ldr	r1, [r7, #4]
 800d342:	4613      	mov	r3, r2
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	4413      	add	r3, r2
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	440b      	add	r3, r1
 800d34c:	3326      	adds	r3, #38	; 0x26
 800d34e:	2200      	movs	r2, #0
 800d350:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	32b0      	adds	r2, #176	; 0xb0
 800d35c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d01f      	beq.n	800d3a4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	33b0      	adds	r3, #176	; 0xb0
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	4413      	add	r3, r2
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	32b0      	adds	r2, #176	; 0xb0
 800d382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d386:	4618      	mov	r0, r3
 800d388:	f012 fd24 	bl	801fdd4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	32b0      	adds	r2, #176	; 0xb0
 800d396:	2100      	movs	r1, #0
 800d398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d3a4:	2300      	movs	r3, #0
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3708      	adds	r7, #8
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	20000107 	.word	0x20000107
 800d3b4:	20000108 	.word	0x20000108
 800d3b8:	20000109 	.word	0x20000109

0800d3bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b086      	sub	sp, #24
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	32b0      	adds	r2, #176	; 0xb0
 800d3d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d101      	bne.n	800d3ec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d3e8:	2303      	movs	r3, #3
 800d3ea:	e0bf      	b.n	800d56c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d050      	beq.n	800d49a <USBD_CDC_Setup+0xde>
 800d3f8:	2b20      	cmp	r3, #32
 800d3fa:	f040 80af 	bne.w	800d55c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	88db      	ldrh	r3, [r3, #6]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d03a      	beq.n	800d47c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	b25b      	sxtb	r3, r3
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	da1b      	bge.n	800d448 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	33b0      	adds	r3, #176	; 0xb0
 800d41a:	009b      	lsls	r3, r3, #2
 800d41c:	4413      	add	r3, r2
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	689b      	ldr	r3, [r3, #8]
 800d422:	683a      	ldr	r2, [r7, #0]
 800d424:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d426:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d428:	683a      	ldr	r2, [r7, #0]
 800d42a:	88d2      	ldrh	r2, [r2, #6]
 800d42c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	88db      	ldrh	r3, [r3, #6]
 800d432:	2b07      	cmp	r3, #7
 800d434:	bf28      	it	cs
 800d436:	2307      	movcs	r3, #7
 800d438:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	89fa      	ldrh	r2, [r7, #14]
 800d43e:	4619      	mov	r1, r3
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f001 fd89 	bl	800ef58 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d446:	e090      	b.n	800d56a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	785a      	ldrb	r2, [r3, #1]
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	88db      	ldrh	r3, [r3, #6]
 800d456:	2b3f      	cmp	r3, #63	; 0x3f
 800d458:	d803      	bhi.n	800d462 <USBD_CDC_Setup+0xa6>
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	88db      	ldrh	r3, [r3, #6]
 800d45e:	b2da      	uxtb	r2, r3
 800d460:	e000      	b.n	800d464 <USBD_CDC_Setup+0xa8>
 800d462:	2240      	movs	r2, #64	; 0x40
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d46a:	6939      	ldr	r1, [r7, #16]
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d472:	461a      	mov	r2, r3
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f001 fd9b 	bl	800efb0 <USBD_CtlPrepareRx>
      break;
 800d47a:	e076      	b.n	800d56a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	33b0      	adds	r3, #176	; 0xb0
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	4413      	add	r3, r2
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	689b      	ldr	r3, [r3, #8]
 800d48e:	683a      	ldr	r2, [r7, #0]
 800d490:	7850      	ldrb	r0, [r2, #1]
 800d492:	2200      	movs	r2, #0
 800d494:	6839      	ldr	r1, [r7, #0]
 800d496:	4798      	blx	r3
      break;
 800d498:	e067      	b.n	800d56a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	785b      	ldrb	r3, [r3, #1]
 800d49e:	2b0b      	cmp	r3, #11
 800d4a0:	d851      	bhi.n	800d546 <USBD_CDC_Setup+0x18a>
 800d4a2:	a201      	add	r2, pc, #4	; (adr r2, 800d4a8 <USBD_CDC_Setup+0xec>)
 800d4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4a8:	0800d4d9 	.word	0x0800d4d9
 800d4ac:	0800d555 	.word	0x0800d555
 800d4b0:	0800d547 	.word	0x0800d547
 800d4b4:	0800d547 	.word	0x0800d547
 800d4b8:	0800d547 	.word	0x0800d547
 800d4bc:	0800d547 	.word	0x0800d547
 800d4c0:	0800d547 	.word	0x0800d547
 800d4c4:	0800d547 	.word	0x0800d547
 800d4c8:	0800d547 	.word	0x0800d547
 800d4cc:	0800d547 	.word	0x0800d547
 800d4d0:	0800d503 	.word	0x0800d503
 800d4d4:	0800d52d 	.word	0x0800d52d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4de:	b2db      	uxtb	r3, r3
 800d4e0:	2b03      	cmp	r3, #3
 800d4e2:	d107      	bne.n	800d4f4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d4e4:	f107 030a 	add.w	r3, r7, #10
 800d4e8:	2202      	movs	r2, #2
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f001 fd33 	bl	800ef58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d4f2:	e032      	b.n	800d55a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d4f4:	6839      	ldr	r1, [r7, #0]
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f001 fcbd 	bl	800ee76 <USBD_CtlError>
            ret = USBD_FAIL;
 800d4fc:	2303      	movs	r3, #3
 800d4fe:	75fb      	strb	r3, [r7, #23]
          break;
 800d500:	e02b      	b.n	800d55a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d508:	b2db      	uxtb	r3, r3
 800d50a:	2b03      	cmp	r3, #3
 800d50c:	d107      	bne.n	800d51e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d50e:	f107 030d 	add.w	r3, r7, #13
 800d512:	2201      	movs	r2, #1
 800d514:	4619      	mov	r1, r3
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f001 fd1e 	bl	800ef58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d51c:	e01d      	b.n	800d55a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d51e:	6839      	ldr	r1, [r7, #0]
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f001 fca8 	bl	800ee76 <USBD_CtlError>
            ret = USBD_FAIL;
 800d526:	2303      	movs	r3, #3
 800d528:	75fb      	strb	r3, [r7, #23]
          break;
 800d52a:	e016      	b.n	800d55a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d532:	b2db      	uxtb	r3, r3
 800d534:	2b03      	cmp	r3, #3
 800d536:	d00f      	beq.n	800d558 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d538:	6839      	ldr	r1, [r7, #0]
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f001 fc9b 	bl	800ee76 <USBD_CtlError>
            ret = USBD_FAIL;
 800d540:	2303      	movs	r3, #3
 800d542:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d544:	e008      	b.n	800d558 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d546:	6839      	ldr	r1, [r7, #0]
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f001 fc94 	bl	800ee76 <USBD_CtlError>
          ret = USBD_FAIL;
 800d54e:	2303      	movs	r3, #3
 800d550:	75fb      	strb	r3, [r7, #23]
          break;
 800d552:	e002      	b.n	800d55a <USBD_CDC_Setup+0x19e>
          break;
 800d554:	bf00      	nop
 800d556:	e008      	b.n	800d56a <USBD_CDC_Setup+0x1ae>
          break;
 800d558:	bf00      	nop
      }
      break;
 800d55a:	e006      	b.n	800d56a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d55c:	6839      	ldr	r1, [r7, #0]
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f001 fc89 	bl	800ee76 <USBD_CtlError>
      ret = USBD_FAIL;
 800d564:	2303      	movs	r3, #3
 800d566:	75fb      	strb	r3, [r7, #23]
      break;
 800d568:	bf00      	nop
  }

  return (uint8_t)ret;
 800d56a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3718      	adds	r7, #24
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b084      	sub	sp, #16
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	460b      	mov	r3, r1
 800d57e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d586:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	32b0      	adds	r2, #176	; 0xb0
 800d592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d101      	bne.n	800d59e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d59a:	2303      	movs	r3, #3
 800d59c:	e065      	b.n	800d66a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	32b0      	adds	r2, #176	; 0xb0
 800d5a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d5ae:	78fb      	ldrb	r3, [r7, #3]
 800d5b0:	f003 020f 	and.w	r2, r3, #15
 800d5b4:	6879      	ldr	r1, [r7, #4]
 800d5b6:	4613      	mov	r3, r2
 800d5b8:	009b      	lsls	r3, r3, #2
 800d5ba:	4413      	add	r3, r2
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	440b      	add	r3, r1
 800d5c0:	3318      	adds	r3, #24
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d02f      	beq.n	800d628 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d5c8:	78fb      	ldrb	r3, [r7, #3]
 800d5ca:	f003 020f 	and.w	r2, r3, #15
 800d5ce:	6879      	ldr	r1, [r7, #4]
 800d5d0:	4613      	mov	r3, r2
 800d5d2:	009b      	lsls	r3, r3, #2
 800d5d4:	4413      	add	r3, r2
 800d5d6:	009b      	lsls	r3, r3, #2
 800d5d8:	440b      	add	r3, r1
 800d5da:	3318      	adds	r3, #24
 800d5dc:	681a      	ldr	r2, [r3, #0]
 800d5de:	78fb      	ldrb	r3, [r7, #3]
 800d5e0:	f003 010f 	and.w	r1, r3, #15
 800d5e4:	68f8      	ldr	r0, [r7, #12]
 800d5e6:	460b      	mov	r3, r1
 800d5e8:	00db      	lsls	r3, r3, #3
 800d5ea:	440b      	add	r3, r1
 800d5ec:	009b      	lsls	r3, r3, #2
 800d5ee:	4403      	add	r3, r0
 800d5f0:	3348      	adds	r3, #72	; 0x48
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	fbb2 f1f3 	udiv	r1, r2, r3
 800d5f8:	fb01 f303 	mul.w	r3, r1, r3
 800d5fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d112      	bne.n	800d628 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d602:	78fb      	ldrb	r3, [r7, #3]
 800d604:	f003 020f 	and.w	r2, r3, #15
 800d608:	6879      	ldr	r1, [r7, #4]
 800d60a:	4613      	mov	r3, r2
 800d60c:	009b      	lsls	r3, r3, #2
 800d60e:	4413      	add	r3, r2
 800d610:	009b      	lsls	r3, r3, #2
 800d612:	440b      	add	r3, r1
 800d614:	3318      	adds	r3, #24
 800d616:	2200      	movs	r2, #0
 800d618:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d61a:	78f9      	ldrb	r1, [r7, #3]
 800d61c:	2300      	movs	r3, #0
 800d61e:	2200      	movs	r2, #0
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f012 fb74 	bl	801fd0e <USBD_LL_Transmit>
 800d626:	e01f      	b.n	800d668 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	2200      	movs	r2, #0
 800d62c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d636:	687a      	ldr	r2, [r7, #4]
 800d638:	33b0      	adds	r3, #176	; 0xb0
 800d63a:	009b      	lsls	r3, r3, #2
 800d63c:	4413      	add	r3, r2
 800d63e:	685b      	ldr	r3, [r3, #4]
 800d640:	691b      	ldr	r3, [r3, #16]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d010      	beq.n	800d668 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d64c:	687a      	ldr	r2, [r7, #4]
 800d64e:	33b0      	adds	r3, #176	; 0xb0
 800d650:	009b      	lsls	r3, r3, #2
 800d652:	4413      	add	r3, r2
 800d654:	685b      	ldr	r3, [r3, #4]
 800d656:	691b      	ldr	r3, [r3, #16]
 800d658:	68ba      	ldr	r2, [r7, #8]
 800d65a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d65e:	68ba      	ldr	r2, [r7, #8]
 800d660:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d664:	78fa      	ldrb	r2, [r7, #3]
 800d666:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d668:	2300      	movs	r3, #0
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3710      	adds	r7, #16
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}

0800d672 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d672:	b580      	push	{r7, lr}
 800d674:	b084      	sub	sp, #16
 800d676:	af00      	add	r7, sp, #0
 800d678:	6078      	str	r0, [r7, #4]
 800d67a:	460b      	mov	r3, r1
 800d67c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	32b0      	adds	r2, #176	; 0xb0
 800d688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d68c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	32b0      	adds	r2, #176	; 0xb0
 800d698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d101      	bne.n	800d6a4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d6a0:	2303      	movs	r3, #3
 800d6a2:	e01a      	b.n	800d6da <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d6a4:	78fb      	ldrb	r3, [r7, #3]
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f012 fb72 	bl	801fd92 <USBD_LL_GetRxDataSize>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d6bc:	687a      	ldr	r2, [r7, #4]
 800d6be:	33b0      	adds	r3, #176	; 0xb0
 800d6c0:	009b      	lsls	r3, r3, #2
 800d6c2:	4413      	add	r3, r2
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	68db      	ldr	r3, [r3, #12]
 800d6c8:	68fa      	ldr	r2, [r7, #12]
 800d6ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d6ce:	68fa      	ldr	r2, [r7, #12]
 800d6d0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d6d4:	4611      	mov	r1, r2
 800d6d6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d6d8:	2300      	movs	r3, #0
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3710      	adds	r7, #16
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}

0800d6e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d6e2:	b580      	push	{r7, lr}
 800d6e4:	b084      	sub	sp, #16
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	32b0      	adds	r2, #176	; 0xb0
 800d6f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d101      	bne.n	800d704 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d700:	2303      	movs	r3, #3
 800d702:	e025      	b.n	800d750 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d70a:	687a      	ldr	r2, [r7, #4]
 800d70c:	33b0      	adds	r3, #176	; 0xb0
 800d70e:	009b      	lsls	r3, r3, #2
 800d710:	4413      	add	r3, r2
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d01a      	beq.n	800d74e <USBD_CDC_EP0_RxReady+0x6c>
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d71e:	2bff      	cmp	r3, #255	; 0xff
 800d720:	d015      	beq.n	800d74e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d728:	687a      	ldr	r2, [r7, #4]
 800d72a:	33b0      	adds	r3, #176	; 0xb0
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	4413      	add	r3, r2
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	689b      	ldr	r3, [r3, #8]
 800d734:	68fa      	ldr	r2, [r7, #12]
 800d736:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d73a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d73c:	68fa      	ldr	r2, [r7, #12]
 800d73e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d742:	b292      	uxth	r2, r2
 800d744:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	22ff      	movs	r2, #255	; 0xff
 800d74a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d74e:	2300      	movs	r3, #0
}
 800d750:	4618      	mov	r0, r3
 800d752:	3710      	adds	r7, #16
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b086      	sub	sp, #24
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d760:	2182      	movs	r1, #130	; 0x82
 800d762:	4818      	ldr	r0, [pc, #96]	; (800d7c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d764:	f000 fd4f 	bl	800e206 <USBD_GetEpDesc>
 800d768:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d76a:	2101      	movs	r1, #1
 800d76c:	4815      	ldr	r0, [pc, #84]	; (800d7c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d76e:	f000 fd4a 	bl	800e206 <USBD_GetEpDesc>
 800d772:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d774:	2181      	movs	r1, #129	; 0x81
 800d776:	4813      	ldr	r0, [pc, #76]	; (800d7c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d778:	f000 fd45 	bl	800e206 <USBD_GetEpDesc>
 800d77c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d002      	beq.n	800d78a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	2210      	movs	r2, #16
 800d788:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d006      	beq.n	800d79e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	2200      	movs	r2, #0
 800d794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d798:	711a      	strb	r2, [r3, #4]
 800d79a:	2200      	movs	r2, #0
 800d79c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d006      	beq.n	800d7b2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d7ac:	711a      	strb	r2, [r3, #4]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2243      	movs	r2, #67	; 0x43
 800d7b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d7b8:	4b02      	ldr	r3, [pc, #8]	; (800d7c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3718      	adds	r7, #24
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	200000c4 	.word	0x200000c4

0800d7c8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b086      	sub	sp, #24
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d7d0:	2182      	movs	r1, #130	; 0x82
 800d7d2:	4818      	ldr	r0, [pc, #96]	; (800d834 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d7d4:	f000 fd17 	bl	800e206 <USBD_GetEpDesc>
 800d7d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d7da:	2101      	movs	r1, #1
 800d7dc:	4815      	ldr	r0, [pc, #84]	; (800d834 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d7de:	f000 fd12 	bl	800e206 <USBD_GetEpDesc>
 800d7e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d7e4:	2181      	movs	r1, #129	; 0x81
 800d7e6:	4813      	ldr	r0, [pc, #76]	; (800d834 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d7e8:	f000 fd0d 	bl	800e206 <USBD_GetEpDesc>
 800d7ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d002      	beq.n	800d7fa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	2210      	movs	r2, #16
 800d7f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d006      	beq.n	800d80e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	2200      	movs	r2, #0
 800d804:	711a      	strb	r2, [r3, #4]
 800d806:	2200      	movs	r2, #0
 800d808:	f042 0202 	orr.w	r2, r2, #2
 800d80c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d006      	beq.n	800d822 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2200      	movs	r2, #0
 800d818:	711a      	strb	r2, [r3, #4]
 800d81a:	2200      	movs	r2, #0
 800d81c:	f042 0202 	orr.w	r2, r2, #2
 800d820:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2243      	movs	r2, #67	; 0x43
 800d826:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d828:	4b02      	ldr	r3, [pc, #8]	; (800d834 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3718      	adds	r7, #24
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
 800d832:	bf00      	nop
 800d834:	200000c4 	.word	0x200000c4

0800d838 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b086      	sub	sp, #24
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d840:	2182      	movs	r1, #130	; 0x82
 800d842:	4818      	ldr	r0, [pc, #96]	; (800d8a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d844:	f000 fcdf 	bl	800e206 <USBD_GetEpDesc>
 800d848:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d84a:	2101      	movs	r1, #1
 800d84c:	4815      	ldr	r0, [pc, #84]	; (800d8a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d84e:	f000 fcda 	bl	800e206 <USBD_GetEpDesc>
 800d852:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d854:	2181      	movs	r1, #129	; 0x81
 800d856:	4813      	ldr	r0, [pc, #76]	; (800d8a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d858:	f000 fcd5 	bl	800e206 <USBD_GetEpDesc>
 800d85c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d002      	beq.n	800d86a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	2210      	movs	r2, #16
 800d868:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d006      	beq.n	800d87e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	2200      	movs	r2, #0
 800d874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d878:	711a      	strb	r2, [r3, #4]
 800d87a:	2200      	movs	r2, #0
 800d87c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d006      	beq.n	800d892 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2200      	movs	r2, #0
 800d888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d88c:	711a      	strb	r2, [r3, #4]
 800d88e:	2200      	movs	r2, #0
 800d890:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2243      	movs	r2, #67	; 0x43
 800d896:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d898:	4b02      	ldr	r3, [pc, #8]	; (800d8a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3718      	adds	r7, #24
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	200000c4 	.word	0x200000c4

0800d8a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b083      	sub	sp, #12
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	220a      	movs	r2, #10
 800d8b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d8b6:	4b03      	ldr	r3, [pc, #12]	; (800d8c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	370c      	adds	r7, #12
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr
 800d8c4:	20000080 	.word	0x20000080

0800d8c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b083      	sub	sp, #12
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d101      	bne.n	800d8dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d8d8:	2303      	movs	r3, #3
 800d8da:	e009      	b.n	800d8f0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	33b0      	adds	r3, #176	; 0xb0
 800d8e6:	009b      	lsls	r3, r3, #2
 800d8e8:	4413      	add	r3, r2
 800d8ea:	683a      	ldr	r2, [r7, #0]
 800d8ec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d8ee:	2300      	movs	r3, #0
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	370c      	adds	r7, #12
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr

0800d8fc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b087      	sub	sp, #28
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	32b0      	adds	r2, #176	; 0xb0
 800d912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d916:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d101      	bne.n	800d922 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d91e:	2303      	movs	r3, #3
 800d920:	e008      	b.n	800d934 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	68ba      	ldr	r2, [r7, #8]
 800d926:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	687a      	ldr	r2, [r7, #4]
 800d92e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d932:	2300      	movs	r3, #0
}
 800d934:	4618      	mov	r0, r3
 800d936:	371c      	adds	r7, #28
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr

0800d940 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d940:	b480      	push	{r7}
 800d942:	b085      	sub	sp, #20
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
 800d948:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	32b0      	adds	r2, #176	; 0xb0
 800d954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d958:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d101      	bne.n	800d964 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d960:	2303      	movs	r3, #3
 800d962:	e004      	b.n	800d96e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	683a      	ldr	r2, [r7, #0]
 800d968:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d96c:	2300      	movs	r3, #0
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3714      	adds	r7, #20
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr
	...

0800d97c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	32b0      	adds	r2, #176	; 0xb0
 800d98e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d992:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d994:	2301      	movs	r3, #1
 800d996:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	32b0      	adds	r2, #176	; 0xb0
 800d9a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d101      	bne.n	800d9ae <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d9aa:	2303      	movs	r3, #3
 800d9ac:	e025      	b.n	800d9fa <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d11f      	bne.n	800d9f8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d9c0:	4b10      	ldr	r3, [pc, #64]	; (800da04 <USBD_CDC_TransmitPacket+0x88>)
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	f003 020f 	and.w	r2, r3, #15
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	4613      	mov	r3, r2
 800d9d2:	009b      	lsls	r3, r3, #2
 800d9d4:	4413      	add	r3, r2
 800d9d6:	009b      	lsls	r3, r3, #2
 800d9d8:	4403      	add	r3, r0
 800d9da:	3318      	adds	r3, #24
 800d9dc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d9de:	4b09      	ldr	r3, [pc, #36]	; (800da04 <USBD_CDC_TransmitPacket+0x88>)
 800d9e0:	7819      	ldrb	r1, [r3, #0]
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f012 f98d 	bl	801fd0e <USBD_LL_Transmit>

    ret = USBD_OK;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3710      	adds	r7, #16
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
 800da02:	bf00      	nop
 800da04:	20000107 	.word	0x20000107

0800da08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	32b0      	adds	r2, #176	; 0xb0
 800da1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da1e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	32b0      	adds	r2, #176	; 0xb0
 800da2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d101      	bne.n	800da36 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800da32:	2303      	movs	r3, #3
 800da34:	e018      	b.n	800da68 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	7c1b      	ldrb	r3, [r3, #16]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d10a      	bne.n	800da54 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800da3e:	4b0c      	ldr	r3, [pc, #48]	; (800da70 <USBD_CDC_ReceivePacket+0x68>)
 800da40:	7819      	ldrb	r1, [r3, #0]
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800da48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f012 f97f 	bl	801fd50 <USBD_LL_PrepareReceive>
 800da52:	e008      	b.n	800da66 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800da54:	4b06      	ldr	r3, [pc, #24]	; (800da70 <USBD_CDC_ReceivePacket+0x68>)
 800da56:	7819      	ldrb	r1, [r3, #0]
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800da5e:	2340      	movs	r3, #64	; 0x40
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f012 f975 	bl	801fd50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800da66:	2300      	movs	r3, #0
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3710      	adds	r7, #16
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}
 800da70:	20000108 	.word	0x20000108

0800da74 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b086      	sub	sp, #24
 800da78:	af00      	add	r7, sp, #0
 800da7a:	60f8      	str	r0, [r7, #12]
 800da7c:	60b9      	str	r1, [r7, #8]
 800da7e:	4613      	mov	r3, r2
 800da80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d101      	bne.n	800da8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800da88:	2303      	movs	r3, #3
 800da8a:	e01f      	b.n	800dacc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2200      	movs	r2, #0
 800da90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	2200      	movs	r2, #0
 800da98:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2200      	movs	r2, #0
 800daa0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d003      	beq.n	800dab2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	68ba      	ldr	r2, [r7, #8]
 800daae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2201      	movs	r2, #1
 800dab6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	79fa      	ldrb	r2, [r7, #7]
 800dabe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800dac0:	68f8      	ldr	r0, [r7, #12]
 800dac2:	f011 ffef 	bl	801faa4 <USBD_LL_Init>
 800dac6:	4603      	mov	r3, r0
 800dac8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800daca:	7dfb      	ldrb	r3, [r7, #23]
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3718      	adds	r7, #24
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dade:	2300      	movs	r3, #0
 800dae0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d101      	bne.n	800daec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800dae8:	2303      	movs	r3, #3
 800daea:	e025      	b.n	800db38 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	683a      	ldr	r2, [r7, #0]
 800daf0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	32ae      	adds	r2, #174	; 0xae
 800dafe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db04:	2b00      	cmp	r3, #0
 800db06:	d00f      	beq.n	800db28 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	32ae      	adds	r2, #174	; 0xae
 800db12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db18:	f107 020e 	add.w	r2, r7, #14
 800db1c:	4610      	mov	r0, r2
 800db1e:	4798      	blx	r3
 800db20:	4602      	mov	r2, r0
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800db2e:	1c5a      	adds	r2, r3, #1
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800db36:	2300      	movs	r3, #0
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3710      	adds	r7, #16
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f011 fff7 	bl	801fb3c <USBD_LL_Start>
 800db4e:	4603      	mov	r3, r0
}
 800db50:	4618      	mov	r0, r3
 800db52:	3708      	adds	r7, #8
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800db58:	b480      	push	{r7}
 800db5a:	b083      	sub	sp, #12
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800db60:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800db62:	4618      	mov	r0, r3
 800db64:	370c      	adds	r7, #12
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr

0800db6e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db6e:	b580      	push	{r7, lr}
 800db70:	b084      	sub	sp, #16
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
 800db76:	460b      	mov	r3, r1
 800db78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800db7a:	2300      	movs	r3, #0
 800db7c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db84:	2b00      	cmp	r3, #0
 800db86:	d009      	beq.n	800db9c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	78fa      	ldrb	r2, [r7, #3]
 800db92:	4611      	mov	r1, r2
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	4798      	blx	r3
 800db98:	4603      	mov	r3, r0
 800db9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800db9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3710      	adds	r7, #16
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}

0800dba6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dba6:	b580      	push	{r7, lr}
 800dba8:	b084      	sub	sp, #16
 800dbaa:	af00      	add	r7, sp, #0
 800dbac:	6078      	str	r0, [r7, #4]
 800dbae:	460b      	mov	r3, r1
 800dbb0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	78fa      	ldrb	r2, [r7, #3]
 800dbc0:	4611      	mov	r1, r2
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	4798      	blx	r3
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d001      	beq.n	800dbd0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800dbcc:	2303      	movs	r3, #3
 800dbce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dbd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3710      	adds	r7, #16
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}

0800dbda <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dbda:	b580      	push	{r7, lr}
 800dbdc:	b084      	sub	sp, #16
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]
 800dbe2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dbea:	6839      	ldr	r1, [r7, #0]
 800dbec:	4618      	mov	r0, r3
 800dbee:	f001 f908 	bl	800ee02 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800dc00:	461a      	mov	r2, r3
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dc0e:	f003 031f 	and.w	r3, r3, #31
 800dc12:	2b02      	cmp	r3, #2
 800dc14:	d01a      	beq.n	800dc4c <USBD_LL_SetupStage+0x72>
 800dc16:	2b02      	cmp	r3, #2
 800dc18:	d822      	bhi.n	800dc60 <USBD_LL_SetupStage+0x86>
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d002      	beq.n	800dc24 <USBD_LL_SetupStage+0x4a>
 800dc1e:	2b01      	cmp	r3, #1
 800dc20:	d00a      	beq.n	800dc38 <USBD_LL_SetupStage+0x5e>
 800dc22:	e01d      	b.n	800dc60 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f000 fb5f 	bl	800e2f0 <USBD_StdDevReq>
 800dc32:	4603      	mov	r3, r0
 800dc34:	73fb      	strb	r3, [r7, #15]
      break;
 800dc36:	e020      	b.n	800dc7a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dc3e:	4619      	mov	r1, r3
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f000 fbc7 	bl	800e3d4 <USBD_StdItfReq>
 800dc46:	4603      	mov	r3, r0
 800dc48:	73fb      	strb	r3, [r7, #15]
      break;
 800dc4a:	e016      	b.n	800dc7a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dc52:	4619      	mov	r1, r3
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 fc29 	bl	800e4ac <USBD_StdEPReq>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	73fb      	strb	r3, [r7, #15]
      break;
 800dc5e:	e00c      	b.n	800dc7a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dc66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dc6a:	b2db      	uxtb	r3, r3
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f011 ffc4 	bl	801fbfc <USBD_LL_StallEP>
 800dc74:	4603      	mov	r3, r0
 800dc76:	73fb      	strb	r3, [r7, #15]
      break;
 800dc78:	bf00      	nop
  }

  return ret;
 800dc7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3710      	adds	r7, #16
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b086      	sub	sp, #24
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	460b      	mov	r3, r1
 800dc8e:	607a      	str	r2, [r7, #4]
 800dc90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800dc92:	2300      	movs	r3, #0
 800dc94:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800dc96:	7afb      	ldrb	r3, [r7, #11]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d16e      	bne.n	800dd7a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800dca2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dcaa:	2b03      	cmp	r3, #3
 800dcac:	f040 8098 	bne.w	800dde0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	689a      	ldr	r2, [r3, #8]
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	68db      	ldr	r3, [r3, #12]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d913      	bls.n	800dce4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800dcbc:	693b      	ldr	r3, [r7, #16]
 800dcbe:	689a      	ldr	r2, [r3, #8]
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	68db      	ldr	r3, [r3, #12]
 800dcc4:	1ad2      	subs	r2, r2, r3
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	68da      	ldr	r2, [r3, #12]
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	689b      	ldr	r3, [r3, #8]
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	bf28      	it	cs
 800dcd6:	4613      	movcs	r3, r2
 800dcd8:	461a      	mov	r2, r3
 800dcda:	6879      	ldr	r1, [r7, #4]
 800dcdc:	68f8      	ldr	r0, [r7, #12]
 800dcde:	f001 f984 	bl	800efea <USBD_CtlContinueRx>
 800dce2:	e07d      	b.n	800dde0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dcea:	f003 031f 	and.w	r3, r3, #31
 800dcee:	2b02      	cmp	r3, #2
 800dcf0:	d014      	beq.n	800dd1c <USBD_LL_DataOutStage+0x98>
 800dcf2:	2b02      	cmp	r3, #2
 800dcf4:	d81d      	bhi.n	800dd32 <USBD_LL_DataOutStage+0xae>
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d002      	beq.n	800dd00 <USBD_LL_DataOutStage+0x7c>
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d003      	beq.n	800dd06 <USBD_LL_DataOutStage+0x82>
 800dcfe:	e018      	b.n	800dd32 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800dd00:	2300      	movs	r3, #0
 800dd02:	75bb      	strb	r3, [r7, #22]
            break;
 800dd04:	e018      	b.n	800dd38 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	4619      	mov	r1, r3
 800dd10:	68f8      	ldr	r0, [r7, #12]
 800dd12:	f000 fa5e 	bl	800e1d2 <USBD_CoreFindIF>
 800dd16:	4603      	mov	r3, r0
 800dd18:	75bb      	strb	r3, [r7, #22]
            break;
 800dd1a:	e00d      	b.n	800dd38 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	4619      	mov	r1, r3
 800dd26:	68f8      	ldr	r0, [r7, #12]
 800dd28:	f000 fa60 	bl	800e1ec <USBD_CoreFindEP>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	75bb      	strb	r3, [r7, #22]
            break;
 800dd30:	e002      	b.n	800dd38 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800dd32:	2300      	movs	r3, #0
 800dd34:	75bb      	strb	r3, [r7, #22]
            break;
 800dd36:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800dd38:	7dbb      	ldrb	r3, [r7, #22]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d119      	bne.n	800dd72 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd44:	b2db      	uxtb	r3, r3
 800dd46:	2b03      	cmp	r3, #3
 800dd48:	d113      	bne.n	800dd72 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800dd4a:	7dba      	ldrb	r2, [r7, #22]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	32ae      	adds	r2, #174	; 0xae
 800dd50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd54:	691b      	ldr	r3, [r3, #16]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d00b      	beq.n	800dd72 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800dd5a:	7dba      	ldrb	r2, [r7, #22]
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800dd62:	7dba      	ldrb	r2, [r7, #22]
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	32ae      	adds	r2, #174	; 0xae
 800dd68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd6c:	691b      	ldr	r3, [r3, #16]
 800dd6e:	68f8      	ldr	r0, [r7, #12]
 800dd70:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dd72:	68f8      	ldr	r0, [r7, #12]
 800dd74:	f001 f94a 	bl	800f00c <USBD_CtlSendStatus>
 800dd78:	e032      	b.n	800dde0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800dd7a:	7afb      	ldrb	r3, [r7, #11]
 800dd7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd80:	b2db      	uxtb	r3, r3
 800dd82:	4619      	mov	r1, r3
 800dd84:	68f8      	ldr	r0, [r7, #12]
 800dd86:	f000 fa31 	bl	800e1ec <USBD_CoreFindEP>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd8e:	7dbb      	ldrb	r3, [r7, #22]
 800dd90:	2bff      	cmp	r3, #255	; 0xff
 800dd92:	d025      	beq.n	800dde0 <USBD_LL_DataOutStage+0x15c>
 800dd94:	7dbb      	ldrb	r3, [r7, #22]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d122      	bne.n	800dde0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dda0:	b2db      	uxtb	r3, r3
 800dda2:	2b03      	cmp	r3, #3
 800dda4:	d117      	bne.n	800ddd6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800dda6:	7dba      	ldrb	r2, [r7, #22]
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	32ae      	adds	r2, #174	; 0xae
 800ddac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddb0:	699b      	ldr	r3, [r3, #24]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d00f      	beq.n	800ddd6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ddb6:	7dba      	ldrb	r2, [r7, #22]
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ddbe:	7dba      	ldrb	r2, [r7, #22]
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	32ae      	adds	r2, #174	; 0xae
 800ddc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddc8:	699b      	ldr	r3, [r3, #24]
 800ddca:	7afa      	ldrb	r2, [r7, #11]
 800ddcc:	4611      	mov	r1, r2
 800ddce:	68f8      	ldr	r0, [r7, #12]
 800ddd0:	4798      	blx	r3
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ddd6:	7dfb      	ldrb	r3, [r7, #23]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d001      	beq.n	800dde0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800dddc:	7dfb      	ldrb	r3, [r7, #23]
 800ddde:	e000      	b.n	800dde2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800dde0:	2300      	movs	r3, #0
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3718      	adds	r7, #24
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}

0800ddea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ddea:	b580      	push	{r7, lr}
 800ddec:	b086      	sub	sp, #24
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	60f8      	str	r0, [r7, #12]
 800ddf2:	460b      	mov	r3, r1
 800ddf4:	607a      	str	r2, [r7, #4]
 800ddf6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ddf8:	7afb      	ldrb	r3, [r7, #11]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d16f      	bne.n	800dede <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	3314      	adds	r3, #20
 800de02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800de0a:	2b02      	cmp	r3, #2
 800de0c:	d15a      	bne.n	800dec4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	689a      	ldr	r2, [r3, #8]
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	68db      	ldr	r3, [r3, #12]
 800de16:	429a      	cmp	r2, r3
 800de18:	d914      	bls.n	800de44 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	689a      	ldr	r2, [r3, #8]
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	68db      	ldr	r3, [r3, #12]
 800de22:	1ad2      	subs	r2, r2, r3
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	689b      	ldr	r3, [r3, #8]
 800de2c:	461a      	mov	r2, r3
 800de2e:	6879      	ldr	r1, [r7, #4]
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	f001 f8ac 	bl	800ef8e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de36:	2300      	movs	r3, #0
 800de38:	2200      	movs	r2, #0
 800de3a:	2100      	movs	r1, #0
 800de3c:	68f8      	ldr	r0, [r7, #12]
 800de3e:	f011 ff87 	bl	801fd50 <USBD_LL_PrepareReceive>
 800de42:	e03f      	b.n	800dec4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	68da      	ldr	r2, [r3, #12]
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	689b      	ldr	r3, [r3, #8]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d11c      	bne.n	800de8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	685a      	ldr	r2, [r3, #4]
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800de58:	429a      	cmp	r2, r3
 800de5a:	d316      	bcc.n	800de8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	685a      	ldr	r2, [r3, #4]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800de66:	429a      	cmp	r2, r3
 800de68:	d20f      	bcs.n	800de8a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800de6a:	2200      	movs	r2, #0
 800de6c:	2100      	movs	r1, #0
 800de6e:	68f8      	ldr	r0, [r7, #12]
 800de70:	f001 f88d 	bl	800ef8e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	2200      	movs	r2, #0
 800de78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de7c:	2300      	movs	r3, #0
 800de7e:	2200      	movs	r2, #0
 800de80:	2100      	movs	r1, #0
 800de82:	68f8      	ldr	r0, [r7, #12]
 800de84:	f011 ff64 	bl	801fd50 <USBD_LL_PrepareReceive>
 800de88:	e01c      	b.n	800dec4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de90:	b2db      	uxtb	r3, r3
 800de92:	2b03      	cmp	r3, #3
 800de94:	d10f      	bne.n	800deb6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de9c:	68db      	ldr	r3, [r3, #12]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d009      	beq.n	800deb6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	2200      	movs	r2, #0
 800dea6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800deb0:	68db      	ldr	r3, [r3, #12]
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800deb6:	2180      	movs	r1, #128	; 0x80
 800deb8:	68f8      	ldr	r0, [r7, #12]
 800deba:	f011 fe9f 	bl	801fbfc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800debe:	68f8      	ldr	r0, [r7, #12]
 800dec0:	f001 f8b7 	bl	800f032 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800deca:	2b00      	cmp	r3, #0
 800decc:	d03a      	beq.n	800df44 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800dece:	68f8      	ldr	r0, [r7, #12]
 800ded0:	f7ff fe42 	bl	800db58 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2200      	movs	r2, #0
 800ded8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800dedc:	e032      	b.n	800df44 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800dede:	7afb      	ldrb	r3, [r7, #11]
 800dee0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dee4:	b2db      	uxtb	r3, r3
 800dee6:	4619      	mov	r1, r3
 800dee8:	68f8      	ldr	r0, [r7, #12]
 800deea:	f000 f97f 	bl	800e1ec <USBD_CoreFindEP>
 800deee:	4603      	mov	r3, r0
 800def0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800def2:	7dfb      	ldrb	r3, [r7, #23]
 800def4:	2bff      	cmp	r3, #255	; 0xff
 800def6:	d025      	beq.n	800df44 <USBD_LL_DataInStage+0x15a>
 800def8:	7dfb      	ldrb	r3, [r7, #23]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d122      	bne.n	800df44 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df04:	b2db      	uxtb	r3, r3
 800df06:	2b03      	cmp	r3, #3
 800df08:	d11c      	bne.n	800df44 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800df0a:	7dfa      	ldrb	r2, [r7, #23]
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	32ae      	adds	r2, #174	; 0xae
 800df10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df14:	695b      	ldr	r3, [r3, #20]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d014      	beq.n	800df44 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800df1a:	7dfa      	ldrb	r2, [r7, #23]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800df22:	7dfa      	ldrb	r2, [r7, #23]
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	32ae      	adds	r2, #174	; 0xae
 800df28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df2c:	695b      	ldr	r3, [r3, #20]
 800df2e:	7afa      	ldrb	r2, [r7, #11]
 800df30:	4611      	mov	r1, r2
 800df32:	68f8      	ldr	r0, [r7, #12]
 800df34:	4798      	blx	r3
 800df36:	4603      	mov	r3, r0
 800df38:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800df3a:	7dbb      	ldrb	r3, [r7, #22]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d001      	beq.n	800df44 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800df40:	7dbb      	ldrb	r3, [r7, #22]
 800df42:	e000      	b.n	800df46 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800df44:	2300      	movs	r3, #0
}
 800df46:	4618      	mov	r0, r3
 800df48:	3718      	adds	r7, #24
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}

0800df4e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800df4e:	b580      	push	{r7, lr}
 800df50:	b084      	sub	sp, #16
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800df56:	2300      	movs	r3, #0
 800df58:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2201      	movs	r2, #1
 800df5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2200      	movs	r2, #0
 800df66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2200      	movs	r2, #0
 800df6e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2200      	movs	r2, #0
 800df74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2200      	movs	r2, #0
 800df7c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df86:	2b00      	cmp	r3, #0
 800df88:	d014      	beq.n	800dfb4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d00e      	beq.n	800dfb4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	687a      	ldr	r2, [r7, #4]
 800dfa0:	6852      	ldr	r2, [r2, #4]
 800dfa2:	b2d2      	uxtb	r2, r2
 800dfa4:	4611      	mov	r1, r2
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	4798      	blx	r3
 800dfaa:	4603      	mov	r3, r0
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d001      	beq.n	800dfb4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dfb0:	2303      	movs	r3, #3
 800dfb2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dfb4:	2340      	movs	r3, #64	; 0x40
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	2100      	movs	r1, #0
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f011 fdd9 	bl	801fb72 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2201      	movs	r2, #1
 800dfc4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2240      	movs	r2, #64	; 0x40
 800dfcc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dfd0:	2340      	movs	r3, #64	; 0x40
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	2180      	movs	r1, #128	; 0x80
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f011 fdcb 	bl	801fb72 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2201      	movs	r2, #1
 800dfe0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2240      	movs	r2, #64	; 0x40
 800dfe6:	621a      	str	r2, [r3, #32]

  return ret;
 800dfe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3710      	adds	r7, #16
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}

0800dff2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dff2:	b480      	push	{r7}
 800dff4:	b083      	sub	sp, #12
 800dff6:	af00      	add	r7, sp, #0
 800dff8:	6078      	str	r0, [r7, #4]
 800dffa:	460b      	mov	r3, r1
 800dffc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	78fa      	ldrb	r2, [r7, #3]
 800e002:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e004:	2300      	movs	r3, #0
}
 800e006:	4618      	mov	r0, r3
 800e008:	370c      	adds	r7, #12
 800e00a:	46bd      	mov	sp, r7
 800e00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e010:	4770      	bx	lr

0800e012 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e012:	b480      	push	{r7}
 800e014:	b083      	sub	sp, #12
 800e016:	af00      	add	r7, sp, #0
 800e018:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e020:	b2da      	uxtb	r2, r3
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2204      	movs	r2, #4
 800e02c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e030:	2300      	movs	r3, #0
}
 800e032:	4618      	mov	r0, r3
 800e034:	370c      	adds	r7, #12
 800e036:	46bd      	mov	sp, r7
 800e038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03c:	4770      	bx	lr

0800e03e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e03e:	b480      	push	{r7}
 800e040:	b083      	sub	sp, #12
 800e042:	af00      	add	r7, sp, #0
 800e044:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e04c:	b2db      	uxtb	r3, r3
 800e04e:	2b04      	cmp	r3, #4
 800e050:	d106      	bne.n	800e060 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e058:	b2da      	uxtb	r2, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e060:	2300      	movs	r3, #0
}
 800e062:	4618      	mov	r0, r3
 800e064:	370c      	adds	r7, #12
 800e066:	46bd      	mov	sp, r7
 800e068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06c:	4770      	bx	lr

0800e06e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e06e:	b580      	push	{r7, lr}
 800e070:	b082      	sub	sp, #8
 800e072:	af00      	add	r7, sp, #0
 800e074:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e07c:	b2db      	uxtb	r3, r3
 800e07e:	2b03      	cmp	r3, #3
 800e080:	d110      	bne.n	800e0a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d00b      	beq.n	800e0a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e092:	69db      	ldr	r3, [r3, #28]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d005      	beq.n	800e0a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e09e:	69db      	ldr	r3, [r3, #28]
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e0a4:	2300      	movs	r3, #0
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3708      	adds	r7, #8
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}

0800e0ae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e0ae:	b580      	push	{r7, lr}
 800e0b0:	b082      	sub	sp, #8
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	6078      	str	r0, [r7, #4]
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	32ae      	adds	r2, #174	; 0xae
 800e0c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d101      	bne.n	800e0d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e0cc:	2303      	movs	r3, #3
 800e0ce:	e01c      	b.n	800e10a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0d6:	b2db      	uxtb	r3, r3
 800e0d8:	2b03      	cmp	r3, #3
 800e0da:	d115      	bne.n	800e108 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	32ae      	adds	r2, #174	; 0xae
 800e0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0ea:	6a1b      	ldr	r3, [r3, #32]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d00b      	beq.n	800e108 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	32ae      	adds	r2, #174	; 0xae
 800e0fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0fe:	6a1b      	ldr	r3, [r3, #32]
 800e100:	78fa      	ldrb	r2, [r7, #3]
 800e102:	4611      	mov	r1, r2
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e108:	2300      	movs	r3, #0
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	3708      	adds	r7, #8
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}

0800e112 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e112:	b580      	push	{r7, lr}
 800e114:	b082      	sub	sp, #8
 800e116:	af00      	add	r7, sp, #0
 800e118:	6078      	str	r0, [r7, #4]
 800e11a:	460b      	mov	r3, r1
 800e11c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	32ae      	adds	r2, #174	; 0xae
 800e128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d101      	bne.n	800e134 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e130:	2303      	movs	r3, #3
 800e132:	e01c      	b.n	800e16e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e13a:	b2db      	uxtb	r3, r3
 800e13c:	2b03      	cmp	r3, #3
 800e13e:	d115      	bne.n	800e16c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	32ae      	adds	r2, #174	; 0xae
 800e14a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e150:	2b00      	cmp	r3, #0
 800e152:	d00b      	beq.n	800e16c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	32ae      	adds	r2, #174	; 0xae
 800e15e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e164:	78fa      	ldrb	r2, [r7, #3]
 800e166:	4611      	mov	r1, r2
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e16c:	2300      	movs	r3, #0
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3708      	adds	r7, #8
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e176:	b480      	push	{r7}
 800e178:	b083      	sub	sp, #12
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e17e:	2300      	movs	r3, #0
}
 800e180:	4618      	mov	r0, r3
 800e182:	370c      	adds	r7, #12
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr

0800e18c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b084      	sub	sp, #16
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e194:	2300      	movs	r3, #0
 800e196:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2201      	movs	r2, #1
 800e19c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d00e      	beq.n	800e1c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1b0:	685b      	ldr	r3, [r3, #4]
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	6852      	ldr	r2, [r2, #4]
 800e1b6:	b2d2      	uxtb	r2, r2
 800e1b8:	4611      	mov	r1, r2
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	4798      	blx	r3
 800e1be:	4603      	mov	r3, r0
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d001      	beq.n	800e1c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e1c4:	2303      	movs	r3, #3
 800e1c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3710      	adds	r7, #16
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}

0800e1d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e1d2:	b480      	push	{r7}
 800e1d4:	b083      	sub	sp, #12
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	6078      	str	r0, [r7, #4]
 800e1da:	460b      	mov	r3, r1
 800e1dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e1de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	370c      	adds	r7, #12
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr

0800e1ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b083      	sub	sp, #12
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e1f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	370c      	adds	r7, #12
 800e1fe:	46bd      	mov	sp, r7
 800e200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e204:	4770      	bx	lr

0800e206 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e206:	b580      	push	{r7, lr}
 800e208:	b086      	sub	sp, #24
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	6078      	str	r0, [r7, #4]
 800e20e:	460b      	mov	r3, r1
 800e210:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e21a:	2300      	movs	r3, #0
 800e21c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	885b      	ldrh	r3, [r3, #2]
 800e222:	b29a      	uxth	r2, r3
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	b29b      	uxth	r3, r3
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d920      	bls.n	800e270 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	b29b      	uxth	r3, r3
 800e234:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e236:	e013      	b.n	800e260 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e238:	f107 030a 	add.w	r3, r7, #10
 800e23c:	4619      	mov	r1, r3
 800e23e:	6978      	ldr	r0, [r7, #20]
 800e240:	f000 f81b 	bl	800e27a <USBD_GetNextDesc>
 800e244:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	785b      	ldrb	r3, [r3, #1]
 800e24a:	2b05      	cmp	r3, #5
 800e24c:	d108      	bne.n	800e260 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	789b      	ldrb	r3, [r3, #2]
 800e256:	78fa      	ldrb	r2, [r7, #3]
 800e258:	429a      	cmp	r2, r3
 800e25a:	d008      	beq.n	800e26e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e25c:	2300      	movs	r3, #0
 800e25e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	885b      	ldrh	r3, [r3, #2]
 800e264:	b29a      	uxth	r2, r3
 800e266:	897b      	ldrh	r3, [r7, #10]
 800e268:	429a      	cmp	r2, r3
 800e26a:	d8e5      	bhi.n	800e238 <USBD_GetEpDesc+0x32>
 800e26c:	e000      	b.n	800e270 <USBD_GetEpDesc+0x6a>
          break;
 800e26e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e270:	693b      	ldr	r3, [r7, #16]
}
 800e272:	4618      	mov	r0, r3
 800e274:	3718      	adds	r7, #24
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}

0800e27a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e27a:	b480      	push	{r7}
 800e27c:	b085      	sub	sp, #20
 800e27e:	af00      	add	r7, sp, #0
 800e280:	6078      	str	r0, [r7, #4]
 800e282:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	881a      	ldrh	r2, [r3, #0]
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	781b      	ldrb	r3, [r3, #0]
 800e290:	b29b      	uxth	r3, r3
 800e292:	4413      	add	r3, r2
 800e294:	b29a      	uxth	r2, r3
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	461a      	mov	r2, r3
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	4413      	add	r3, r2
 800e2a4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3714      	adds	r7, #20
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr

0800e2b4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b087      	sub	sp, #28
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	3301      	adds	r3, #1
 800e2ca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e2d2:	8a3b      	ldrh	r3, [r7, #16]
 800e2d4:	021b      	lsls	r3, r3, #8
 800e2d6:	b21a      	sxth	r2, r3
 800e2d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e2dc:	4313      	orrs	r3, r2
 800e2de:	b21b      	sxth	r3, r3
 800e2e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e2e2:	89fb      	ldrh	r3, [r7, #14]
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	371c      	adds	r7, #28
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr

0800e2f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b084      	sub	sp, #16
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e306:	2b40      	cmp	r3, #64	; 0x40
 800e308:	d005      	beq.n	800e316 <USBD_StdDevReq+0x26>
 800e30a:	2b40      	cmp	r3, #64	; 0x40
 800e30c:	d857      	bhi.n	800e3be <USBD_StdDevReq+0xce>
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d00f      	beq.n	800e332 <USBD_StdDevReq+0x42>
 800e312:	2b20      	cmp	r3, #32
 800e314:	d153      	bne.n	800e3be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	32ae      	adds	r2, #174	; 0xae
 800e320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e324:	689b      	ldr	r3, [r3, #8]
 800e326:	6839      	ldr	r1, [r7, #0]
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	4798      	blx	r3
 800e32c:	4603      	mov	r3, r0
 800e32e:	73fb      	strb	r3, [r7, #15]
      break;
 800e330:	e04a      	b.n	800e3c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	785b      	ldrb	r3, [r3, #1]
 800e336:	2b09      	cmp	r3, #9
 800e338:	d83b      	bhi.n	800e3b2 <USBD_StdDevReq+0xc2>
 800e33a:	a201      	add	r2, pc, #4	; (adr r2, 800e340 <USBD_StdDevReq+0x50>)
 800e33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e340:	0800e395 	.word	0x0800e395
 800e344:	0800e3a9 	.word	0x0800e3a9
 800e348:	0800e3b3 	.word	0x0800e3b3
 800e34c:	0800e39f 	.word	0x0800e39f
 800e350:	0800e3b3 	.word	0x0800e3b3
 800e354:	0800e373 	.word	0x0800e373
 800e358:	0800e369 	.word	0x0800e369
 800e35c:	0800e3b3 	.word	0x0800e3b3
 800e360:	0800e38b 	.word	0x0800e38b
 800e364:	0800e37d 	.word	0x0800e37d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e368:	6839      	ldr	r1, [r7, #0]
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 fa3c 	bl	800e7e8 <USBD_GetDescriptor>
          break;
 800e370:	e024      	b.n	800e3bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e372:	6839      	ldr	r1, [r7, #0]
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f000 fba1 	bl	800eabc <USBD_SetAddress>
          break;
 800e37a:	e01f      	b.n	800e3bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e37c:	6839      	ldr	r1, [r7, #0]
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f000 fbe0 	bl	800eb44 <USBD_SetConfig>
 800e384:	4603      	mov	r3, r0
 800e386:	73fb      	strb	r3, [r7, #15]
          break;
 800e388:	e018      	b.n	800e3bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e38a:	6839      	ldr	r1, [r7, #0]
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f000 fc83 	bl	800ec98 <USBD_GetConfig>
          break;
 800e392:	e013      	b.n	800e3bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e394:	6839      	ldr	r1, [r7, #0]
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 fcb4 	bl	800ed04 <USBD_GetStatus>
          break;
 800e39c:	e00e      	b.n	800e3bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e39e:	6839      	ldr	r1, [r7, #0]
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f000 fce3 	bl	800ed6c <USBD_SetFeature>
          break;
 800e3a6:	e009      	b.n	800e3bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e3a8:	6839      	ldr	r1, [r7, #0]
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f000 fd07 	bl	800edbe <USBD_ClrFeature>
          break;
 800e3b0:	e004      	b.n	800e3bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e3b2:	6839      	ldr	r1, [r7, #0]
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f000 fd5e 	bl	800ee76 <USBD_CtlError>
          break;
 800e3ba:	bf00      	nop
      }
      break;
 800e3bc:	e004      	b.n	800e3c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e3be:	6839      	ldr	r1, [r7, #0]
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f000 fd58 	bl	800ee76 <USBD_CtlError>
      break;
 800e3c6:	bf00      	nop
  }

  return ret;
 800e3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3710      	adds	r7, #16
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}
 800e3d2:	bf00      	nop

0800e3d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b084      	sub	sp, #16
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e3ea:	2b40      	cmp	r3, #64	; 0x40
 800e3ec:	d005      	beq.n	800e3fa <USBD_StdItfReq+0x26>
 800e3ee:	2b40      	cmp	r3, #64	; 0x40
 800e3f0:	d852      	bhi.n	800e498 <USBD_StdItfReq+0xc4>
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d001      	beq.n	800e3fa <USBD_StdItfReq+0x26>
 800e3f6:	2b20      	cmp	r3, #32
 800e3f8:	d14e      	bne.n	800e498 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e400:	b2db      	uxtb	r3, r3
 800e402:	3b01      	subs	r3, #1
 800e404:	2b02      	cmp	r3, #2
 800e406:	d840      	bhi.n	800e48a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	889b      	ldrh	r3, [r3, #4]
 800e40c:	b2db      	uxtb	r3, r3
 800e40e:	2b01      	cmp	r3, #1
 800e410:	d836      	bhi.n	800e480 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	889b      	ldrh	r3, [r3, #4]
 800e416:	b2db      	uxtb	r3, r3
 800e418:	4619      	mov	r1, r3
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f7ff fed9 	bl	800e1d2 <USBD_CoreFindIF>
 800e420:	4603      	mov	r3, r0
 800e422:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e424:	7bbb      	ldrb	r3, [r7, #14]
 800e426:	2bff      	cmp	r3, #255	; 0xff
 800e428:	d01d      	beq.n	800e466 <USBD_StdItfReq+0x92>
 800e42a:	7bbb      	ldrb	r3, [r7, #14]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d11a      	bne.n	800e466 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e430:	7bba      	ldrb	r2, [r7, #14]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	32ae      	adds	r2, #174	; 0xae
 800e436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e43a:	689b      	ldr	r3, [r3, #8]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d00f      	beq.n	800e460 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e440:	7bba      	ldrb	r2, [r7, #14]
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e448:	7bba      	ldrb	r2, [r7, #14]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	32ae      	adds	r2, #174	; 0xae
 800e44e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e452:	689b      	ldr	r3, [r3, #8]
 800e454:	6839      	ldr	r1, [r7, #0]
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	4798      	blx	r3
 800e45a:	4603      	mov	r3, r0
 800e45c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e45e:	e004      	b.n	800e46a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e460:	2303      	movs	r3, #3
 800e462:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e464:	e001      	b.n	800e46a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e466:	2303      	movs	r3, #3
 800e468:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	88db      	ldrh	r3, [r3, #6]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d110      	bne.n	800e494 <USBD_StdItfReq+0xc0>
 800e472:	7bfb      	ldrb	r3, [r7, #15]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d10d      	bne.n	800e494 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f000 fdc7 	bl	800f00c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e47e:	e009      	b.n	800e494 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e480:	6839      	ldr	r1, [r7, #0]
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f000 fcf7 	bl	800ee76 <USBD_CtlError>
          break;
 800e488:	e004      	b.n	800e494 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e48a:	6839      	ldr	r1, [r7, #0]
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 fcf2 	bl	800ee76 <USBD_CtlError>
          break;
 800e492:	e000      	b.n	800e496 <USBD_StdItfReq+0xc2>
          break;
 800e494:	bf00      	nop
      }
      break;
 800e496:	e004      	b.n	800e4a2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e498:	6839      	ldr	r1, [r7, #0]
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f000 fceb 	bl	800ee76 <USBD_CtlError>
      break;
 800e4a0:	bf00      	nop
  }

  return ret;
 800e4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3710      	adds	r7, #16
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}

0800e4ac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b084      	sub	sp, #16
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	889b      	ldrh	r3, [r3, #4]
 800e4be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	781b      	ldrb	r3, [r3, #0]
 800e4c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e4c8:	2b40      	cmp	r3, #64	; 0x40
 800e4ca:	d007      	beq.n	800e4dc <USBD_StdEPReq+0x30>
 800e4cc:	2b40      	cmp	r3, #64	; 0x40
 800e4ce:	f200 817f 	bhi.w	800e7d0 <USBD_StdEPReq+0x324>
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d02a      	beq.n	800e52c <USBD_StdEPReq+0x80>
 800e4d6:	2b20      	cmp	r3, #32
 800e4d8:	f040 817a 	bne.w	800e7d0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e4dc:	7bbb      	ldrb	r3, [r7, #14]
 800e4de:	4619      	mov	r1, r3
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f7ff fe83 	bl	800e1ec <USBD_CoreFindEP>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e4ea:	7b7b      	ldrb	r3, [r7, #13]
 800e4ec:	2bff      	cmp	r3, #255	; 0xff
 800e4ee:	f000 8174 	beq.w	800e7da <USBD_StdEPReq+0x32e>
 800e4f2:	7b7b      	ldrb	r3, [r7, #13]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	f040 8170 	bne.w	800e7da <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e4fa:	7b7a      	ldrb	r2, [r7, #13]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e502:	7b7a      	ldrb	r2, [r7, #13]
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	32ae      	adds	r2, #174	; 0xae
 800e508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e50c:	689b      	ldr	r3, [r3, #8]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	f000 8163 	beq.w	800e7da <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e514:	7b7a      	ldrb	r2, [r7, #13]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	32ae      	adds	r2, #174	; 0xae
 800e51a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e51e:	689b      	ldr	r3, [r3, #8]
 800e520:	6839      	ldr	r1, [r7, #0]
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	4798      	blx	r3
 800e526:	4603      	mov	r3, r0
 800e528:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e52a:	e156      	b.n	800e7da <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	785b      	ldrb	r3, [r3, #1]
 800e530:	2b03      	cmp	r3, #3
 800e532:	d008      	beq.n	800e546 <USBD_StdEPReq+0x9a>
 800e534:	2b03      	cmp	r3, #3
 800e536:	f300 8145 	bgt.w	800e7c4 <USBD_StdEPReq+0x318>
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	f000 809b 	beq.w	800e676 <USBD_StdEPReq+0x1ca>
 800e540:	2b01      	cmp	r3, #1
 800e542:	d03c      	beq.n	800e5be <USBD_StdEPReq+0x112>
 800e544:	e13e      	b.n	800e7c4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e54c:	b2db      	uxtb	r3, r3
 800e54e:	2b02      	cmp	r3, #2
 800e550:	d002      	beq.n	800e558 <USBD_StdEPReq+0xac>
 800e552:	2b03      	cmp	r3, #3
 800e554:	d016      	beq.n	800e584 <USBD_StdEPReq+0xd8>
 800e556:	e02c      	b.n	800e5b2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e558:	7bbb      	ldrb	r3, [r7, #14]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d00d      	beq.n	800e57a <USBD_StdEPReq+0xce>
 800e55e:	7bbb      	ldrb	r3, [r7, #14]
 800e560:	2b80      	cmp	r3, #128	; 0x80
 800e562:	d00a      	beq.n	800e57a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e564:	7bbb      	ldrb	r3, [r7, #14]
 800e566:	4619      	mov	r1, r3
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f011 fb47 	bl	801fbfc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e56e:	2180      	movs	r1, #128	; 0x80
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f011 fb43 	bl	801fbfc <USBD_LL_StallEP>
 800e576:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e578:	e020      	b.n	800e5bc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e57a:	6839      	ldr	r1, [r7, #0]
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f000 fc7a 	bl	800ee76 <USBD_CtlError>
              break;
 800e582:	e01b      	b.n	800e5bc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	885b      	ldrh	r3, [r3, #2]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d10e      	bne.n	800e5aa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e58c:	7bbb      	ldrb	r3, [r7, #14]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d00b      	beq.n	800e5aa <USBD_StdEPReq+0xfe>
 800e592:	7bbb      	ldrb	r3, [r7, #14]
 800e594:	2b80      	cmp	r3, #128	; 0x80
 800e596:	d008      	beq.n	800e5aa <USBD_StdEPReq+0xfe>
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	88db      	ldrh	r3, [r3, #6]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d104      	bne.n	800e5aa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e5a0:	7bbb      	ldrb	r3, [r7, #14]
 800e5a2:	4619      	mov	r1, r3
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f011 fb29 	bl	801fbfc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f000 fd2e 	bl	800f00c <USBD_CtlSendStatus>

              break;
 800e5b0:	e004      	b.n	800e5bc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e5b2:	6839      	ldr	r1, [r7, #0]
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f000 fc5e 	bl	800ee76 <USBD_CtlError>
              break;
 800e5ba:	bf00      	nop
          }
          break;
 800e5bc:	e107      	b.n	800e7ce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5c4:	b2db      	uxtb	r3, r3
 800e5c6:	2b02      	cmp	r3, #2
 800e5c8:	d002      	beq.n	800e5d0 <USBD_StdEPReq+0x124>
 800e5ca:	2b03      	cmp	r3, #3
 800e5cc:	d016      	beq.n	800e5fc <USBD_StdEPReq+0x150>
 800e5ce:	e04b      	b.n	800e668 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e5d0:	7bbb      	ldrb	r3, [r7, #14]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d00d      	beq.n	800e5f2 <USBD_StdEPReq+0x146>
 800e5d6:	7bbb      	ldrb	r3, [r7, #14]
 800e5d8:	2b80      	cmp	r3, #128	; 0x80
 800e5da:	d00a      	beq.n	800e5f2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e5dc:	7bbb      	ldrb	r3, [r7, #14]
 800e5de:	4619      	mov	r1, r3
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f011 fb0b 	bl	801fbfc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e5e6:	2180      	movs	r1, #128	; 0x80
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f011 fb07 	bl	801fbfc <USBD_LL_StallEP>
 800e5ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e5f0:	e040      	b.n	800e674 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e5f2:	6839      	ldr	r1, [r7, #0]
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 fc3e 	bl	800ee76 <USBD_CtlError>
              break;
 800e5fa:	e03b      	b.n	800e674 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	885b      	ldrh	r3, [r3, #2]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d136      	bne.n	800e672 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e604:	7bbb      	ldrb	r3, [r7, #14]
 800e606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d004      	beq.n	800e618 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e60e:	7bbb      	ldrb	r3, [r7, #14]
 800e610:	4619      	mov	r1, r3
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f011 fb11 	bl	801fc3a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f000 fcf7 	bl	800f00c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e61e:	7bbb      	ldrb	r3, [r7, #14]
 800e620:	4619      	mov	r1, r3
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f7ff fde2 	bl	800e1ec <USBD_CoreFindEP>
 800e628:	4603      	mov	r3, r0
 800e62a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e62c:	7b7b      	ldrb	r3, [r7, #13]
 800e62e:	2bff      	cmp	r3, #255	; 0xff
 800e630:	d01f      	beq.n	800e672 <USBD_StdEPReq+0x1c6>
 800e632:	7b7b      	ldrb	r3, [r7, #13]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d11c      	bne.n	800e672 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e638:	7b7a      	ldrb	r2, [r7, #13]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e640:	7b7a      	ldrb	r2, [r7, #13]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	32ae      	adds	r2, #174	; 0xae
 800e646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e64a:	689b      	ldr	r3, [r3, #8]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d010      	beq.n	800e672 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e650:	7b7a      	ldrb	r2, [r7, #13]
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	32ae      	adds	r2, #174	; 0xae
 800e656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e65a:	689b      	ldr	r3, [r3, #8]
 800e65c:	6839      	ldr	r1, [r7, #0]
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	4798      	blx	r3
 800e662:	4603      	mov	r3, r0
 800e664:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e666:	e004      	b.n	800e672 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e668:	6839      	ldr	r1, [r7, #0]
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f000 fc03 	bl	800ee76 <USBD_CtlError>
              break;
 800e670:	e000      	b.n	800e674 <USBD_StdEPReq+0x1c8>
              break;
 800e672:	bf00      	nop
          }
          break;
 800e674:	e0ab      	b.n	800e7ce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e67c:	b2db      	uxtb	r3, r3
 800e67e:	2b02      	cmp	r3, #2
 800e680:	d002      	beq.n	800e688 <USBD_StdEPReq+0x1dc>
 800e682:	2b03      	cmp	r3, #3
 800e684:	d032      	beq.n	800e6ec <USBD_StdEPReq+0x240>
 800e686:	e097      	b.n	800e7b8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e688:	7bbb      	ldrb	r3, [r7, #14]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d007      	beq.n	800e69e <USBD_StdEPReq+0x1f2>
 800e68e:	7bbb      	ldrb	r3, [r7, #14]
 800e690:	2b80      	cmp	r3, #128	; 0x80
 800e692:	d004      	beq.n	800e69e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e694:	6839      	ldr	r1, [r7, #0]
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f000 fbed 	bl	800ee76 <USBD_CtlError>
                break;
 800e69c:	e091      	b.n	800e7c2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e69e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	da0b      	bge.n	800e6be <USBD_StdEPReq+0x212>
 800e6a6:	7bbb      	ldrb	r3, [r7, #14]
 800e6a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e6ac:	4613      	mov	r3, r2
 800e6ae:	009b      	lsls	r3, r3, #2
 800e6b0:	4413      	add	r3, r2
 800e6b2:	009b      	lsls	r3, r3, #2
 800e6b4:	3310      	adds	r3, #16
 800e6b6:	687a      	ldr	r2, [r7, #4]
 800e6b8:	4413      	add	r3, r2
 800e6ba:	3304      	adds	r3, #4
 800e6bc:	e00b      	b.n	800e6d6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e6be:	7bbb      	ldrb	r3, [r7, #14]
 800e6c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e6c4:	4613      	mov	r3, r2
 800e6c6:	009b      	lsls	r3, r3, #2
 800e6c8:	4413      	add	r3, r2
 800e6ca:	009b      	lsls	r3, r3, #2
 800e6cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e6d0:	687a      	ldr	r2, [r7, #4]
 800e6d2:	4413      	add	r3, r2
 800e6d4:	3304      	adds	r3, #4
 800e6d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	2202      	movs	r2, #2
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f000 fc37 	bl	800ef58 <USBD_CtlSendData>
              break;
 800e6ea:	e06a      	b.n	800e7c2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e6ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	da11      	bge.n	800e718 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e6f4:	7bbb      	ldrb	r3, [r7, #14]
 800e6f6:	f003 020f 	and.w	r2, r3, #15
 800e6fa:	6879      	ldr	r1, [r7, #4]
 800e6fc:	4613      	mov	r3, r2
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	4413      	add	r3, r2
 800e702:	009b      	lsls	r3, r3, #2
 800e704:	440b      	add	r3, r1
 800e706:	3324      	adds	r3, #36	; 0x24
 800e708:	881b      	ldrh	r3, [r3, #0]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d117      	bne.n	800e73e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e70e:	6839      	ldr	r1, [r7, #0]
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f000 fbb0 	bl	800ee76 <USBD_CtlError>
                  break;
 800e716:	e054      	b.n	800e7c2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e718:	7bbb      	ldrb	r3, [r7, #14]
 800e71a:	f003 020f 	and.w	r2, r3, #15
 800e71e:	6879      	ldr	r1, [r7, #4]
 800e720:	4613      	mov	r3, r2
 800e722:	009b      	lsls	r3, r3, #2
 800e724:	4413      	add	r3, r2
 800e726:	009b      	lsls	r3, r3, #2
 800e728:	440b      	add	r3, r1
 800e72a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e72e:	881b      	ldrh	r3, [r3, #0]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d104      	bne.n	800e73e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e734:	6839      	ldr	r1, [r7, #0]
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f000 fb9d 	bl	800ee76 <USBD_CtlError>
                  break;
 800e73c:	e041      	b.n	800e7c2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e73e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e742:	2b00      	cmp	r3, #0
 800e744:	da0b      	bge.n	800e75e <USBD_StdEPReq+0x2b2>
 800e746:	7bbb      	ldrb	r3, [r7, #14]
 800e748:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e74c:	4613      	mov	r3, r2
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	4413      	add	r3, r2
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	3310      	adds	r3, #16
 800e756:	687a      	ldr	r2, [r7, #4]
 800e758:	4413      	add	r3, r2
 800e75a:	3304      	adds	r3, #4
 800e75c:	e00b      	b.n	800e776 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e75e:	7bbb      	ldrb	r3, [r7, #14]
 800e760:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e764:	4613      	mov	r3, r2
 800e766:	009b      	lsls	r3, r3, #2
 800e768:	4413      	add	r3, r2
 800e76a:	009b      	lsls	r3, r3, #2
 800e76c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e770:	687a      	ldr	r2, [r7, #4]
 800e772:	4413      	add	r3, r2
 800e774:	3304      	adds	r3, #4
 800e776:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e778:	7bbb      	ldrb	r3, [r7, #14]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d002      	beq.n	800e784 <USBD_StdEPReq+0x2d8>
 800e77e:	7bbb      	ldrb	r3, [r7, #14]
 800e780:	2b80      	cmp	r3, #128	; 0x80
 800e782:	d103      	bne.n	800e78c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	2200      	movs	r2, #0
 800e788:	601a      	str	r2, [r3, #0]
 800e78a:	e00e      	b.n	800e7aa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e78c:	7bbb      	ldrb	r3, [r7, #14]
 800e78e:	4619      	mov	r1, r3
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f011 fa71 	bl	801fc78 <USBD_LL_IsStallEP>
 800e796:	4603      	mov	r3, r0
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d003      	beq.n	800e7a4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	2201      	movs	r2, #1
 800e7a0:	601a      	str	r2, [r3, #0]
 800e7a2:	e002      	b.n	800e7aa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	2202      	movs	r2, #2
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 fbd1 	bl	800ef58 <USBD_CtlSendData>
              break;
 800e7b6:	e004      	b.n	800e7c2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e7b8:	6839      	ldr	r1, [r7, #0]
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f000 fb5b 	bl	800ee76 <USBD_CtlError>
              break;
 800e7c0:	bf00      	nop
          }
          break;
 800e7c2:	e004      	b.n	800e7ce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e7c4:	6839      	ldr	r1, [r7, #0]
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f000 fb55 	bl	800ee76 <USBD_CtlError>
          break;
 800e7cc:	bf00      	nop
      }
      break;
 800e7ce:	e005      	b.n	800e7dc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e7d0:	6839      	ldr	r1, [r7, #0]
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f000 fb4f 	bl	800ee76 <USBD_CtlError>
      break;
 800e7d8:	e000      	b.n	800e7dc <USBD_StdEPReq+0x330>
      break;
 800e7da:	bf00      	nop
  }

  return ret;
 800e7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3710      	adds	r7, #16
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
	...

0800e7e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	885b      	ldrh	r3, [r3, #2]
 800e802:	0a1b      	lsrs	r3, r3, #8
 800e804:	b29b      	uxth	r3, r3
 800e806:	3b01      	subs	r3, #1
 800e808:	2b06      	cmp	r3, #6
 800e80a:	f200 8128 	bhi.w	800ea5e <USBD_GetDescriptor+0x276>
 800e80e:	a201      	add	r2, pc, #4	; (adr r2, 800e814 <USBD_GetDescriptor+0x2c>)
 800e810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e814:	0800e831 	.word	0x0800e831
 800e818:	0800e849 	.word	0x0800e849
 800e81c:	0800e889 	.word	0x0800e889
 800e820:	0800ea5f 	.word	0x0800ea5f
 800e824:	0800ea5f 	.word	0x0800ea5f
 800e828:	0800e9ff 	.word	0x0800e9ff
 800e82c:	0800ea2b 	.word	0x0800ea2b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	7c12      	ldrb	r2, [r2, #16]
 800e83c:	f107 0108 	add.w	r1, r7, #8
 800e840:	4610      	mov	r0, r2
 800e842:	4798      	blx	r3
 800e844:	60f8      	str	r0, [r7, #12]
      break;
 800e846:	e112      	b.n	800ea6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	7c1b      	ldrb	r3, [r3, #16]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d10d      	bne.n	800e86c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e858:	f107 0208 	add.w	r2, r7, #8
 800e85c:	4610      	mov	r0, r2
 800e85e:	4798      	blx	r3
 800e860:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	3301      	adds	r3, #1
 800e866:	2202      	movs	r2, #2
 800e868:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e86a:	e100      	b.n	800ea6e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e874:	f107 0208 	add.w	r2, r7, #8
 800e878:	4610      	mov	r0, r2
 800e87a:	4798      	blx	r3
 800e87c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	3301      	adds	r3, #1
 800e882:	2202      	movs	r2, #2
 800e884:	701a      	strb	r2, [r3, #0]
      break;
 800e886:	e0f2      	b.n	800ea6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	885b      	ldrh	r3, [r3, #2]
 800e88c:	b2db      	uxtb	r3, r3
 800e88e:	2b05      	cmp	r3, #5
 800e890:	f200 80ac 	bhi.w	800e9ec <USBD_GetDescriptor+0x204>
 800e894:	a201      	add	r2, pc, #4	; (adr r2, 800e89c <USBD_GetDescriptor+0xb4>)
 800e896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e89a:	bf00      	nop
 800e89c:	0800e8b5 	.word	0x0800e8b5
 800e8a0:	0800e8e9 	.word	0x0800e8e9
 800e8a4:	0800e91d 	.word	0x0800e91d
 800e8a8:	0800e951 	.word	0x0800e951
 800e8ac:	0800e985 	.word	0x0800e985
 800e8b0:	0800e9b9 	.word	0x0800e9b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8ba:	685b      	ldr	r3, [r3, #4]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d00b      	beq.n	800e8d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8c6:	685b      	ldr	r3, [r3, #4]
 800e8c8:	687a      	ldr	r2, [r7, #4]
 800e8ca:	7c12      	ldrb	r2, [r2, #16]
 800e8cc:	f107 0108 	add.w	r1, r7, #8
 800e8d0:	4610      	mov	r0, r2
 800e8d2:	4798      	blx	r3
 800e8d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8d6:	e091      	b.n	800e9fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e8d8:	6839      	ldr	r1, [r7, #0]
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f000 facb 	bl	800ee76 <USBD_CtlError>
            err++;
 800e8e0:	7afb      	ldrb	r3, [r7, #11]
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	72fb      	strb	r3, [r7, #11]
          break;
 800e8e6:	e089      	b.n	800e9fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8ee:	689b      	ldr	r3, [r3, #8]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d00b      	beq.n	800e90c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8fa:	689b      	ldr	r3, [r3, #8]
 800e8fc:	687a      	ldr	r2, [r7, #4]
 800e8fe:	7c12      	ldrb	r2, [r2, #16]
 800e900:	f107 0108 	add.w	r1, r7, #8
 800e904:	4610      	mov	r0, r2
 800e906:	4798      	blx	r3
 800e908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e90a:	e077      	b.n	800e9fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e90c:	6839      	ldr	r1, [r7, #0]
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f000 fab1 	bl	800ee76 <USBD_CtlError>
            err++;
 800e914:	7afb      	ldrb	r3, [r7, #11]
 800e916:	3301      	adds	r3, #1
 800e918:	72fb      	strb	r3, [r7, #11]
          break;
 800e91a:	e06f      	b.n	800e9fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e922:	68db      	ldr	r3, [r3, #12]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d00b      	beq.n	800e940 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e92e:	68db      	ldr	r3, [r3, #12]
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	7c12      	ldrb	r2, [r2, #16]
 800e934:	f107 0108 	add.w	r1, r7, #8
 800e938:	4610      	mov	r0, r2
 800e93a:	4798      	blx	r3
 800e93c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e93e:	e05d      	b.n	800e9fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e940:	6839      	ldr	r1, [r7, #0]
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f000 fa97 	bl	800ee76 <USBD_CtlError>
            err++;
 800e948:	7afb      	ldrb	r3, [r7, #11]
 800e94a:	3301      	adds	r3, #1
 800e94c:	72fb      	strb	r3, [r7, #11]
          break;
 800e94e:	e055      	b.n	800e9fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e956:	691b      	ldr	r3, [r3, #16]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d00b      	beq.n	800e974 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e962:	691b      	ldr	r3, [r3, #16]
 800e964:	687a      	ldr	r2, [r7, #4]
 800e966:	7c12      	ldrb	r2, [r2, #16]
 800e968:	f107 0108 	add.w	r1, r7, #8
 800e96c:	4610      	mov	r0, r2
 800e96e:	4798      	blx	r3
 800e970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e972:	e043      	b.n	800e9fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e974:	6839      	ldr	r1, [r7, #0]
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f000 fa7d 	bl	800ee76 <USBD_CtlError>
            err++;
 800e97c:	7afb      	ldrb	r3, [r7, #11]
 800e97e:	3301      	adds	r3, #1
 800e980:	72fb      	strb	r3, [r7, #11]
          break;
 800e982:	e03b      	b.n	800e9fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e98a:	695b      	ldr	r3, [r3, #20]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d00b      	beq.n	800e9a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e996:	695b      	ldr	r3, [r3, #20]
 800e998:	687a      	ldr	r2, [r7, #4]
 800e99a:	7c12      	ldrb	r2, [r2, #16]
 800e99c:	f107 0108 	add.w	r1, r7, #8
 800e9a0:	4610      	mov	r0, r2
 800e9a2:	4798      	blx	r3
 800e9a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e9a6:	e029      	b.n	800e9fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e9a8:	6839      	ldr	r1, [r7, #0]
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f000 fa63 	bl	800ee76 <USBD_CtlError>
            err++;
 800e9b0:	7afb      	ldrb	r3, [r7, #11]
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	72fb      	strb	r3, [r7, #11]
          break;
 800e9b6:	e021      	b.n	800e9fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9be:	699b      	ldr	r3, [r3, #24]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d00b      	beq.n	800e9dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9ca:	699b      	ldr	r3, [r3, #24]
 800e9cc:	687a      	ldr	r2, [r7, #4]
 800e9ce:	7c12      	ldrb	r2, [r2, #16]
 800e9d0:	f107 0108 	add.w	r1, r7, #8
 800e9d4:	4610      	mov	r0, r2
 800e9d6:	4798      	blx	r3
 800e9d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e9da:	e00f      	b.n	800e9fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e9dc:	6839      	ldr	r1, [r7, #0]
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f000 fa49 	bl	800ee76 <USBD_CtlError>
            err++;
 800e9e4:	7afb      	ldrb	r3, [r7, #11]
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	72fb      	strb	r3, [r7, #11]
          break;
 800e9ea:	e007      	b.n	800e9fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e9ec:	6839      	ldr	r1, [r7, #0]
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f000 fa41 	bl	800ee76 <USBD_CtlError>
          err++;
 800e9f4:	7afb      	ldrb	r3, [r7, #11]
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e9fa:	bf00      	nop
      }
      break;
 800e9fc:	e037      	b.n	800ea6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	7c1b      	ldrb	r3, [r3, #16]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d109      	bne.n	800ea1a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea0e:	f107 0208 	add.w	r2, r7, #8
 800ea12:	4610      	mov	r0, r2
 800ea14:	4798      	blx	r3
 800ea16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea18:	e029      	b.n	800ea6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ea1a:	6839      	ldr	r1, [r7, #0]
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f000 fa2a 	bl	800ee76 <USBD_CtlError>
        err++;
 800ea22:	7afb      	ldrb	r3, [r7, #11]
 800ea24:	3301      	adds	r3, #1
 800ea26:	72fb      	strb	r3, [r7, #11]
      break;
 800ea28:	e021      	b.n	800ea6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	7c1b      	ldrb	r3, [r3, #16]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d10d      	bne.n	800ea4e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea3a:	f107 0208 	add.w	r2, r7, #8
 800ea3e:	4610      	mov	r0, r2
 800ea40:	4798      	blx	r3
 800ea42:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	3301      	adds	r3, #1
 800ea48:	2207      	movs	r2, #7
 800ea4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea4c:	e00f      	b.n	800ea6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ea4e:	6839      	ldr	r1, [r7, #0]
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f000 fa10 	bl	800ee76 <USBD_CtlError>
        err++;
 800ea56:	7afb      	ldrb	r3, [r7, #11]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	72fb      	strb	r3, [r7, #11]
      break;
 800ea5c:	e007      	b.n	800ea6e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ea5e:	6839      	ldr	r1, [r7, #0]
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f000 fa08 	bl	800ee76 <USBD_CtlError>
      err++;
 800ea66:	7afb      	ldrb	r3, [r7, #11]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	72fb      	strb	r3, [r7, #11]
      break;
 800ea6c:	bf00      	nop
  }

  if (err != 0U)
 800ea6e:	7afb      	ldrb	r3, [r7, #11]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d11e      	bne.n	800eab2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	88db      	ldrh	r3, [r3, #6]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d016      	beq.n	800eaaa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ea7c:	893b      	ldrh	r3, [r7, #8]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d00e      	beq.n	800eaa0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	88da      	ldrh	r2, [r3, #6]
 800ea86:	893b      	ldrh	r3, [r7, #8]
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	bf28      	it	cs
 800ea8c:	4613      	movcs	r3, r2
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ea92:	893b      	ldrh	r3, [r7, #8]
 800ea94:	461a      	mov	r2, r3
 800ea96:	68f9      	ldr	r1, [r7, #12]
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f000 fa5d 	bl	800ef58 <USBD_CtlSendData>
 800ea9e:	e009      	b.n	800eab4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800eaa0:	6839      	ldr	r1, [r7, #0]
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f000 f9e7 	bl	800ee76 <USBD_CtlError>
 800eaa8:	e004      	b.n	800eab4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f000 faae 	bl	800f00c <USBD_CtlSendStatus>
 800eab0:	e000      	b.n	800eab4 <USBD_GetDescriptor+0x2cc>
    return;
 800eab2:	bf00      	nop
  }
}
 800eab4:	3710      	adds	r7, #16
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
 800eaba:	bf00      	nop

0800eabc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	889b      	ldrh	r3, [r3, #4]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d131      	bne.n	800eb32 <USBD_SetAddress+0x76>
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	88db      	ldrh	r3, [r3, #6]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d12d      	bne.n	800eb32 <USBD_SetAddress+0x76>
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	885b      	ldrh	r3, [r3, #2]
 800eada:	2b7f      	cmp	r3, #127	; 0x7f
 800eadc:	d829      	bhi.n	800eb32 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	885b      	ldrh	r3, [r3, #2]
 800eae2:	b2db      	uxtb	r3, r3
 800eae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eae8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eaf0:	b2db      	uxtb	r3, r3
 800eaf2:	2b03      	cmp	r3, #3
 800eaf4:	d104      	bne.n	800eb00 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800eaf6:	6839      	ldr	r1, [r7, #0]
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f000 f9bc 	bl	800ee76 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eafe:	e01d      	b.n	800eb3c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	7bfa      	ldrb	r2, [r7, #15]
 800eb04:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800eb08:	7bfb      	ldrb	r3, [r7, #15]
 800eb0a:	4619      	mov	r1, r3
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f011 f8df 	bl	801fcd0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f000 fa7a 	bl	800f00c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800eb18:	7bfb      	ldrb	r3, [r7, #15]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d004      	beq.n	800eb28 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2202      	movs	r2, #2
 800eb22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb26:	e009      	b.n	800eb3c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2201      	movs	r2, #1
 800eb2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb30:	e004      	b.n	800eb3c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800eb32:	6839      	ldr	r1, [r7, #0]
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f000 f99e 	bl	800ee76 <USBD_CtlError>
  }
}
 800eb3a:	bf00      	nop
 800eb3c:	bf00      	nop
 800eb3e:	3710      	adds	r7, #16
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b084      	sub	sp, #16
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
 800eb4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	885b      	ldrh	r3, [r3, #2]
 800eb56:	b2da      	uxtb	r2, r3
 800eb58:	4b4e      	ldr	r3, [pc, #312]	; (800ec94 <USBD_SetConfig+0x150>)
 800eb5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800eb5c:	4b4d      	ldr	r3, [pc, #308]	; (800ec94 <USBD_SetConfig+0x150>)
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d905      	bls.n	800eb70 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800eb64:	6839      	ldr	r1, [r7, #0]
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f000 f985 	bl	800ee76 <USBD_CtlError>
    return USBD_FAIL;
 800eb6c:	2303      	movs	r3, #3
 800eb6e:	e08c      	b.n	800ec8a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb76:	b2db      	uxtb	r3, r3
 800eb78:	2b02      	cmp	r3, #2
 800eb7a:	d002      	beq.n	800eb82 <USBD_SetConfig+0x3e>
 800eb7c:	2b03      	cmp	r3, #3
 800eb7e:	d029      	beq.n	800ebd4 <USBD_SetConfig+0x90>
 800eb80:	e075      	b.n	800ec6e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800eb82:	4b44      	ldr	r3, [pc, #272]	; (800ec94 <USBD_SetConfig+0x150>)
 800eb84:	781b      	ldrb	r3, [r3, #0]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d020      	beq.n	800ebcc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800eb8a:	4b42      	ldr	r3, [pc, #264]	; (800ec94 <USBD_SetConfig+0x150>)
 800eb8c:	781b      	ldrb	r3, [r3, #0]
 800eb8e:	461a      	mov	r2, r3
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eb94:	4b3f      	ldr	r3, [pc, #252]	; (800ec94 <USBD_SetConfig+0x150>)
 800eb96:	781b      	ldrb	r3, [r3, #0]
 800eb98:	4619      	mov	r1, r3
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f7fe ffe7 	bl	800db6e <USBD_SetClassConfig>
 800eba0:	4603      	mov	r3, r0
 800eba2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800eba4:	7bfb      	ldrb	r3, [r7, #15]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d008      	beq.n	800ebbc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ebaa:	6839      	ldr	r1, [r7, #0]
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f000 f962 	bl	800ee76 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2202      	movs	r2, #2
 800ebb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ebba:	e065      	b.n	800ec88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f000 fa25 	bl	800f00c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2203      	movs	r2, #3
 800ebc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ebca:	e05d      	b.n	800ec88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f000 fa1d 	bl	800f00c <USBD_CtlSendStatus>
      break;
 800ebd2:	e059      	b.n	800ec88 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ebd4:	4b2f      	ldr	r3, [pc, #188]	; (800ec94 <USBD_SetConfig+0x150>)
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d112      	bne.n	800ec02 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2202      	movs	r2, #2
 800ebe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ebe4:	4b2b      	ldr	r3, [pc, #172]	; (800ec94 <USBD_SetConfig+0x150>)
 800ebe6:	781b      	ldrb	r3, [r3, #0]
 800ebe8:	461a      	mov	r2, r3
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ebee:	4b29      	ldr	r3, [pc, #164]	; (800ec94 <USBD_SetConfig+0x150>)
 800ebf0:	781b      	ldrb	r3, [r3, #0]
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f7fe ffd6 	bl	800dba6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f000 fa06 	bl	800f00c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ec00:	e042      	b.n	800ec88 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ec02:	4b24      	ldr	r3, [pc, #144]	; (800ec94 <USBD_SetConfig+0x150>)
 800ec04:	781b      	ldrb	r3, [r3, #0]
 800ec06:	461a      	mov	r2, r3
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d02a      	beq.n	800ec66 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	685b      	ldr	r3, [r3, #4]
 800ec14:	b2db      	uxtb	r3, r3
 800ec16:	4619      	mov	r1, r3
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f7fe ffc4 	bl	800dba6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ec1e:	4b1d      	ldr	r3, [pc, #116]	; (800ec94 <USBD_SetConfig+0x150>)
 800ec20:	781b      	ldrb	r3, [r3, #0]
 800ec22:	461a      	mov	r2, r3
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ec28:	4b1a      	ldr	r3, [pc, #104]	; (800ec94 <USBD_SetConfig+0x150>)
 800ec2a:	781b      	ldrb	r3, [r3, #0]
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f7fe ff9d 	bl	800db6e <USBD_SetClassConfig>
 800ec34:	4603      	mov	r3, r0
 800ec36:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ec38:	7bfb      	ldrb	r3, [r7, #15]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d00f      	beq.n	800ec5e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ec3e:	6839      	ldr	r1, [r7, #0]
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f000 f918 	bl	800ee76 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	685b      	ldr	r3, [r3, #4]
 800ec4a:	b2db      	uxtb	r3, r3
 800ec4c:	4619      	mov	r1, r3
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f7fe ffa9 	bl	800dba6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2202      	movs	r2, #2
 800ec58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ec5c:	e014      	b.n	800ec88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f000 f9d4 	bl	800f00c <USBD_CtlSendStatus>
      break;
 800ec64:	e010      	b.n	800ec88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f000 f9d0 	bl	800f00c <USBD_CtlSendStatus>
      break;
 800ec6c:	e00c      	b.n	800ec88 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ec6e:	6839      	ldr	r1, [r7, #0]
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f000 f900 	bl	800ee76 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ec76:	4b07      	ldr	r3, [pc, #28]	; (800ec94 <USBD_SetConfig+0x150>)
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	4619      	mov	r1, r3
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f7fe ff92 	bl	800dba6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ec82:	2303      	movs	r3, #3
 800ec84:	73fb      	strb	r3, [r7, #15]
      break;
 800ec86:	bf00      	nop
  }

  return ret;
 800ec88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3710      	adds	r7, #16
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
 800ec92:	bf00      	nop
 800ec94:	2000064c 	.word	0x2000064c

0800ec98 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b082      	sub	sp, #8
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
 800eca0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	88db      	ldrh	r3, [r3, #6]
 800eca6:	2b01      	cmp	r3, #1
 800eca8:	d004      	beq.n	800ecb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ecaa:	6839      	ldr	r1, [r7, #0]
 800ecac:	6878      	ldr	r0, [r7, #4]
 800ecae:	f000 f8e2 	bl	800ee76 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ecb2:	e023      	b.n	800ecfc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecba:	b2db      	uxtb	r3, r3
 800ecbc:	2b02      	cmp	r3, #2
 800ecbe:	dc02      	bgt.n	800ecc6 <USBD_GetConfig+0x2e>
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	dc03      	bgt.n	800eccc <USBD_GetConfig+0x34>
 800ecc4:	e015      	b.n	800ecf2 <USBD_GetConfig+0x5a>
 800ecc6:	2b03      	cmp	r3, #3
 800ecc8:	d00b      	beq.n	800ece2 <USBD_GetConfig+0x4a>
 800ecca:	e012      	b.n	800ecf2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	3308      	adds	r3, #8
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	4619      	mov	r1, r3
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f000 f93c 	bl	800ef58 <USBD_CtlSendData>
        break;
 800ece0:	e00c      	b.n	800ecfc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	3304      	adds	r3, #4
 800ece6:	2201      	movs	r2, #1
 800ece8:	4619      	mov	r1, r3
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f000 f934 	bl	800ef58 <USBD_CtlSendData>
        break;
 800ecf0:	e004      	b.n	800ecfc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ecf2:	6839      	ldr	r1, [r7, #0]
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f000 f8be 	bl	800ee76 <USBD_CtlError>
        break;
 800ecfa:	bf00      	nop
}
 800ecfc:	bf00      	nop
 800ecfe:	3708      	adds	r7, #8
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}

0800ed04 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
 800ed0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed14:	b2db      	uxtb	r3, r3
 800ed16:	3b01      	subs	r3, #1
 800ed18:	2b02      	cmp	r3, #2
 800ed1a:	d81e      	bhi.n	800ed5a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	88db      	ldrh	r3, [r3, #6]
 800ed20:	2b02      	cmp	r3, #2
 800ed22:	d004      	beq.n	800ed2e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ed24:	6839      	ldr	r1, [r7, #0]
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f000 f8a5 	bl	800ee76 <USBD_CtlError>
        break;
 800ed2c:	e01a      	b.n	800ed64 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2201      	movs	r2, #1
 800ed32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d005      	beq.n	800ed4a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	68db      	ldr	r3, [r3, #12]
 800ed42:	f043 0202 	orr.w	r2, r3, #2
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	330c      	adds	r3, #12
 800ed4e:	2202      	movs	r2, #2
 800ed50:	4619      	mov	r1, r3
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f000 f900 	bl	800ef58 <USBD_CtlSendData>
      break;
 800ed58:	e004      	b.n	800ed64 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ed5a:	6839      	ldr	r1, [r7, #0]
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f000 f88a 	bl	800ee76 <USBD_CtlError>
      break;
 800ed62:	bf00      	nop
  }
}
 800ed64:	bf00      	nop
 800ed66:	3708      	adds	r7, #8
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}

0800ed6c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	885b      	ldrh	r3, [r3, #2]
 800ed7a:	2b01      	cmp	r3, #1
 800ed7c:	d107      	bne.n	800ed8e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2201      	movs	r2, #1
 800ed82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f000 f940 	bl	800f00c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ed8c:	e013      	b.n	800edb6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	885b      	ldrh	r3, [r3, #2]
 800ed92:	2b02      	cmp	r3, #2
 800ed94:	d10b      	bne.n	800edae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	889b      	ldrh	r3, [r3, #4]
 800ed9a:	0a1b      	lsrs	r3, r3, #8
 800ed9c:	b29b      	uxth	r3, r3
 800ed9e:	b2da      	uxtb	r2, r3
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f000 f930 	bl	800f00c <USBD_CtlSendStatus>
}
 800edac:	e003      	b.n	800edb6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800edae:	6839      	ldr	r1, [r7, #0]
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f000 f860 	bl	800ee76 <USBD_CtlError>
}
 800edb6:	bf00      	nop
 800edb8:	3708      	adds	r7, #8
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}

0800edbe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edbe:	b580      	push	{r7, lr}
 800edc0:	b082      	sub	sp, #8
 800edc2:	af00      	add	r7, sp, #0
 800edc4:	6078      	str	r0, [r7, #4]
 800edc6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edce:	b2db      	uxtb	r3, r3
 800edd0:	3b01      	subs	r3, #1
 800edd2:	2b02      	cmp	r3, #2
 800edd4:	d80b      	bhi.n	800edee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	885b      	ldrh	r3, [r3, #2]
 800edda:	2b01      	cmp	r3, #1
 800eddc:	d10c      	bne.n	800edf8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2200      	movs	r2, #0
 800ede2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f000 f910 	bl	800f00c <USBD_CtlSendStatus>
      }
      break;
 800edec:	e004      	b.n	800edf8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800edee:	6839      	ldr	r1, [r7, #0]
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f000 f840 	bl	800ee76 <USBD_CtlError>
      break;
 800edf6:	e000      	b.n	800edfa <USBD_ClrFeature+0x3c>
      break;
 800edf8:	bf00      	nop
  }
}
 800edfa:	bf00      	nop
 800edfc:	3708      	adds	r7, #8
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}

0800ee02 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ee02:	b580      	push	{r7, lr}
 800ee04:	b084      	sub	sp, #16
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	6078      	str	r0, [r7, #4]
 800ee0a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	781a      	ldrb	r2, [r3, #0]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	781a      	ldrb	r2, [r3, #0]
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	3301      	adds	r3, #1
 800ee2a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ee2c:	68f8      	ldr	r0, [r7, #12]
 800ee2e:	f7ff fa41 	bl	800e2b4 <SWAPBYTE>
 800ee32:	4603      	mov	r3, r0
 800ee34:	461a      	mov	r2, r3
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	3301      	adds	r3, #1
 800ee44:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ee46:	68f8      	ldr	r0, [r7, #12]
 800ee48:	f7ff fa34 	bl	800e2b4 <SWAPBYTE>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	461a      	mov	r2, r3
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	3301      	adds	r3, #1
 800ee58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	3301      	adds	r3, #1
 800ee5e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ee60:	68f8      	ldr	r0, [r7, #12]
 800ee62:	f7ff fa27 	bl	800e2b4 <SWAPBYTE>
 800ee66:	4603      	mov	r3, r0
 800ee68:	461a      	mov	r2, r3
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	80da      	strh	r2, [r3, #6]
}
 800ee6e:	bf00      	nop
 800ee70:	3710      	adds	r7, #16
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}

0800ee76 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee76:	b580      	push	{r7, lr}
 800ee78:	b082      	sub	sp, #8
 800ee7a:	af00      	add	r7, sp, #0
 800ee7c:	6078      	str	r0, [r7, #4]
 800ee7e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee80:	2180      	movs	r1, #128	; 0x80
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f010 feba 	bl	801fbfc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ee88:	2100      	movs	r1, #0
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f010 feb6 	bl	801fbfc <USBD_LL_StallEP>
}
 800ee90:	bf00      	nop
 800ee92:	3708      	adds	r7, #8
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}

0800ee98 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b086      	sub	sp, #24
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	60f8      	str	r0, [r7, #12]
 800eea0:	60b9      	str	r1, [r7, #8]
 800eea2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800eea4:	2300      	movs	r3, #0
 800eea6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d036      	beq.n	800ef1c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800eeb2:	6938      	ldr	r0, [r7, #16]
 800eeb4:	f000 f836 	bl	800ef24 <USBD_GetLen>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	3301      	adds	r3, #1
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	005b      	lsls	r3, r3, #1
 800eec0:	b29a      	uxth	r2, r3
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eec6:	7dfb      	ldrb	r3, [r7, #23]
 800eec8:	68ba      	ldr	r2, [r7, #8]
 800eeca:	4413      	add	r3, r2
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	7812      	ldrb	r2, [r2, #0]
 800eed0:	701a      	strb	r2, [r3, #0]
  idx++;
 800eed2:	7dfb      	ldrb	r3, [r7, #23]
 800eed4:	3301      	adds	r3, #1
 800eed6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eed8:	7dfb      	ldrb	r3, [r7, #23]
 800eeda:	68ba      	ldr	r2, [r7, #8]
 800eedc:	4413      	add	r3, r2
 800eede:	2203      	movs	r2, #3
 800eee0:	701a      	strb	r2, [r3, #0]
  idx++;
 800eee2:	7dfb      	ldrb	r3, [r7, #23]
 800eee4:	3301      	adds	r3, #1
 800eee6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eee8:	e013      	b.n	800ef12 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800eeea:	7dfb      	ldrb	r3, [r7, #23]
 800eeec:	68ba      	ldr	r2, [r7, #8]
 800eeee:	4413      	add	r3, r2
 800eef0:	693a      	ldr	r2, [r7, #16]
 800eef2:	7812      	ldrb	r2, [r2, #0]
 800eef4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	3301      	adds	r3, #1
 800eefa:	613b      	str	r3, [r7, #16]
    idx++;
 800eefc:	7dfb      	ldrb	r3, [r7, #23]
 800eefe:	3301      	adds	r3, #1
 800ef00:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ef02:	7dfb      	ldrb	r3, [r7, #23]
 800ef04:	68ba      	ldr	r2, [r7, #8]
 800ef06:	4413      	add	r3, r2
 800ef08:	2200      	movs	r2, #0
 800ef0a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ef0c:	7dfb      	ldrb	r3, [r7, #23]
 800ef0e:	3301      	adds	r3, #1
 800ef10:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d1e7      	bne.n	800eeea <USBD_GetString+0x52>
 800ef1a:	e000      	b.n	800ef1e <USBD_GetString+0x86>
    return;
 800ef1c:	bf00      	nop
  }
}
 800ef1e:	3718      	adds	r7, #24
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ef24:	b480      	push	{r7}
 800ef26:	b085      	sub	sp, #20
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ef34:	e005      	b.n	800ef42 <USBD_GetLen+0x1e>
  {
    len++;
 800ef36:	7bfb      	ldrb	r3, [r7, #15]
 800ef38:	3301      	adds	r3, #1
 800ef3a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	3301      	adds	r3, #1
 800ef40:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d1f5      	bne.n	800ef36 <USBD_GetLen+0x12>
  }

  return len;
 800ef4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3714      	adds	r7, #20
 800ef50:	46bd      	mov	sp, r7
 800ef52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef56:	4770      	bx	lr

0800ef58 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b084      	sub	sp, #16
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	60f8      	str	r0, [r7, #12]
 800ef60:	60b9      	str	r1, [r7, #8]
 800ef62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	2202      	movs	r2, #2
 800ef68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	687a      	ldr	r2, [r7, #4]
 800ef70:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	68ba      	ldr	r2, [r7, #8]
 800ef7c:	2100      	movs	r1, #0
 800ef7e:	68f8      	ldr	r0, [r7, #12]
 800ef80:	f010 fec5 	bl	801fd0e <USBD_LL_Transmit>

  return USBD_OK;
 800ef84:	2300      	movs	r3, #0
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3710      	adds	r7, #16
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}

0800ef8e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ef8e:	b580      	push	{r7, lr}
 800ef90:	b084      	sub	sp, #16
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	60f8      	str	r0, [r7, #12]
 800ef96:	60b9      	str	r1, [r7, #8]
 800ef98:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	68ba      	ldr	r2, [r7, #8]
 800ef9e:	2100      	movs	r1, #0
 800efa0:	68f8      	ldr	r0, [r7, #12]
 800efa2:	f010 feb4 	bl	801fd0e <USBD_LL_Transmit>

  return USBD_OK;
 800efa6:	2300      	movs	r3, #0
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	3710      	adds	r7, #16
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b084      	sub	sp, #16
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	60f8      	str	r0, [r7, #12]
 800efb8:	60b9      	str	r1, [r7, #8]
 800efba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	2203      	movs	r2, #3
 800efc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	687a      	ldr	r2, [r7, #4]
 800efc8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	687a      	ldr	r2, [r7, #4]
 800efd0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	68ba      	ldr	r2, [r7, #8]
 800efd8:	2100      	movs	r1, #0
 800efda:	68f8      	ldr	r0, [r7, #12]
 800efdc:	f010 feb8 	bl	801fd50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800efe0:	2300      	movs	r3, #0
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3710      	adds	r7, #16
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}

0800efea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800efea:	b580      	push	{r7, lr}
 800efec:	b084      	sub	sp, #16
 800efee:	af00      	add	r7, sp, #0
 800eff0:	60f8      	str	r0, [r7, #12]
 800eff2:	60b9      	str	r1, [r7, #8]
 800eff4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	68ba      	ldr	r2, [r7, #8]
 800effa:	2100      	movs	r1, #0
 800effc:	68f8      	ldr	r0, [r7, #12]
 800effe:	f010 fea7 	bl	801fd50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f002:	2300      	movs	r3, #0
}
 800f004:	4618      	mov	r0, r3
 800f006:	3710      	adds	r7, #16
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}

0800f00c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b082      	sub	sp, #8
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2204      	movs	r2, #4
 800f018:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f01c:	2300      	movs	r3, #0
 800f01e:	2200      	movs	r2, #0
 800f020:	2100      	movs	r1, #0
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f010 fe73 	bl	801fd0e <USBD_LL_Transmit>

  return USBD_OK;
 800f028:	2300      	movs	r3, #0
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3708      	adds	r7, #8
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}

0800f032 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f032:	b580      	push	{r7, lr}
 800f034:	b082      	sub	sp, #8
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2205      	movs	r2, #5
 800f03e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f042:	2300      	movs	r3, #0
 800f044:	2200      	movs	r2, #0
 800f046:	2100      	movs	r1, #0
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f010 fe81 	bl	801fd50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f04e:	2300      	movs	r3, #0
}
 800f050:	4618      	mov	r0, r3
 800f052:	3708      	adds	r7, #8
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}

0800f058 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800f058:	b480      	push	{r7}
 800f05a:	b08b      	sub	sp, #44	; 0x2c
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	60f8      	str	r0, [r7, #12]
 800f060:	ed87 0a02 	vstr	s0, [r7, #8]
 800f064:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	685b      	ldr	r3, [r3, #4]
 800f06a:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	685b      	ldr	r3, [r3, #4]
 800f070:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	881b      	ldrh	r3, [r3, #0]
 800f076:	461a      	mov	r2, r3
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	885b      	ldrh	r3, [r3, #2]
 800f07c:	fb02 f303 	mul.w	r3, r2, r3
 800f080:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800f082:	69bb      	ldr	r3, [r7, #24]
 800f084:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800f086:	e010      	b.n	800f0aa <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800f088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08a:	1d1a      	adds	r2, r3, #4
 800f08c:	627a      	str	r2, [r7, #36]	; 0x24
 800f08e:	ed93 7a00 	vldr	s14, [r3]
 800f092:	6a3b      	ldr	r3, [r7, #32]
 800f094:	1d1a      	adds	r2, r3, #4
 800f096:	623a      	str	r2, [r7, #32]
 800f098:	edd7 7a02 	vldr	s15, [r7, #8]
 800f09c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0a0:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800f0a4:	69fb      	ldr	r3, [r7, #28]
 800f0a6:	3b01      	subs	r3, #1
 800f0a8:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800f0aa:	69fb      	ldr	r3, [r7, #28]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d1eb      	bne.n	800f088 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800f0b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	372c      	adds	r7, #44	; 0x2c
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c2:	4770      	bx	lr

0800f0c4 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b08b      	sub	sp, #44	; 0x2c
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	685b      	ldr	r3, [r3, #4]
 800f0d2:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	881b      	ldrh	r3, [r3, #0]
 800f0de:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	885b      	ldrh	r3, [r3, #2]
 800f0e4:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800f0e6:	89fb      	ldrh	r3, [r7, #14]
 800f0e8:	61bb      	str	r3, [r7, #24]
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	009b      	lsls	r3, r3, #2
 800f0f2:	693a      	ldr	r2, [r7, #16]
 800f0f4:	4413      	add	r3, r2
 800f0f6:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800f0f8:	89bb      	ldrh	r3, [r7, #12]
 800f0fa:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800f0fc:	e00d      	b.n	800f11a <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800f0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f100:	1d1a      	adds	r2, r3, #4
 800f102:	627a      	str	r2, [r7, #36]	; 0x24
 800f104:	681a      	ldr	r2, [r3, #0]
 800f106:	6a3b      	ldr	r3, [r7, #32]
 800f108:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800f10a:	89fb      	ldrh	r3, [r7, #14]
 800f10c:	009b      	lsls	r3, r3, #2
 800f10e:	6a3a      	ldr	r2, [r7, #32]
 800f110:	4413      	add	r3, r2
 800f112:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800f114:	69fb      	ldr	r3, [r7, #28]
 800f116:	3b01      	subs	r3, #1
 800f118:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800f11a:	69fb      	ldr	r3, [r7, #28]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d1ee      	bne.n	800f0fe <arm_mat_trans_f32+0x3a>
      }

      i++;
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	3301      	adds	r3, #1
 800f124:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800f126:	69bb      	ldr	r3, [r7, #24]
 800f128:	3b01      	subs	r3, #1
 800f12a:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800f12c:	69bb      	ldr	r3, [r7, #24]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d1dd      	bne.n	800f0ee <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f132:	2300      	movs	r3, #0
 800f134:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800f136:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f13a:	4618      	mov	r0, r3
 800f13c:	372c      	adds	r7, #44	; 0x2c
 800f13e:	46bd      	mov	sp, r7
 800f140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f144:	4770      	bx	lr

0800f146 <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 800f146:	b480      	push	{r7}
 800f148:	b087      	sub	sp, #28
 800f14a:	af00      	add	r7, sp, #0
 800f14c:	60f8      	str	r0, [r7, #12]
 800f14e:	60b9      	str	r1, [r7, #8]
 800f150:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800f152:	f04f 0300 	mov.w	r3, #0
 800f156:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800f15c:	e00d      	b.n	800f17a <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	1d1a      	adds	r2, r3, #4
 800f162:	60fa      	str	r2, [r7, #12]
 800f164:	edd3 7a00 	vldr	s15, [r3]
 800f168:	ed97 7a04 	vldr	s14, [r7, #16]
 800f16c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f170:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 800f174:	697b      	ldr	r3, [r7, #20]
 800f176:	3b01      	subs	r3, #1
 800f178:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d1ee      	bne.n	800f15e <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	ee07 3a90 	vmov	s15, r3
 800f186:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f18a:	edd7 6a04 	vldr	s13, [r7, #16]
 800f18e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	edc3 7a00 	vstr	s15, [r3]
}
 800f198:	bf00      	nop
 800f19a:	371c      	adds	r7, #28
 800f19c:	46bd      	mov	sp, r7
 800f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a2:	4770      	bx	lr

0800f1a4 <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b08a      	sub	sp, #40	; 0x28
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800f1b0:	f04f 0300 	mov.w	r3, #0
 800f1b4:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800f1ba:	e011      	b.n	800f1e0 <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	1d1a      	adds	r2, r3, #4
 800f1c0:	60fa      	str	r2, [r7, #12]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 800f1c6:	edd7 7a07 	vldr	s15, [r7, #28]
 800f1ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f1ce:	ed97 7a08 	vldr	s14, [r7, #32]
 800f1d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f1d6:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 800f1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1dc:	3b01      	subs	r3, #1
 800f1de:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 800f1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d1ea      	bne.n	800f1bc <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	ee07 3a90 	vmov	s15, r3
 800f1ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f1f0:	edd7 6a08 	vldr	s13, [r7, #32]
 800f1f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f1f8:	edc7 7a06 	vstr	s15, [r7, #24]
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 800f200:	edd7 7a06 	vldr	s15, [r7, #24]
 800f204:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f20c:	db09      	blt.n	800f222 <arm_rms_f32+0x7e>
      *pOut = sqrtf(in);
 800f20e:	ed97 0a06 	vldr	s0, [r7, #24]
 800f212:	f011 f963 	bl	80204dc <sqrtf>
 800f216:	eef0 7a40 	vmov.f32	s15, s0
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800f220:	e004      	b.n	800f22c <arm_rms_f32+0x88>
      *pOut = 0.0f;
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	f04f 0200 	mov.w	r2, #0
 800f228:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800f22a:	bf00      	nop
}
 800f22c:	bf00      	nop
 800f22e:	3728      	adds	r7, #40	; 0x28
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}

0800f234 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 800f234:	b480      	push	{r7}
 800f236:	b089      	sub	sp, #36	; 0x24
 800f238:	af00      	add	r7, sp, #0
 800f23a:	60f8      	str	r0, [r7, #12]
 800f23c:	460b      	mov	r3, r1
 800f23e:	607a      	str	r2, [r7, #4]
 800f240:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 800f242:	2300      	movs	r3, #0
 800f244:	61fb      	str	r3, [r7, #28]
 800f246:	e043      	b.n	800f2d0 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 800f248:	69fb      	ldr	r3, [r7, #28]
 800f24a:	005b      	lsls	r3, r3, #1
 800f24c:	687a      	ldr	r2, [r7, #4]
 800f24e:	4413      	add	r3, r2
 800f250:	881b      	ldrh	r3, [r3, #0]
 800f252:	089b      	lsrs	r3, r3, #2
 800f254:	b29b      	uxth	r3, r3
 800f256:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 800f258:	69fb      	ldr	r3, [r7, #28]
 800f25a:	3301      	adds	r3, #1
 800f25c:	005b      	lsls	r3, r3, #1
 800f25e:	687a      	ldr	r2, [r7, #4]
 800f260:	4413      	add	r3, r2
 800f262:	881b      	ldrh	r3, [r3, #0]
 800f264:	089b      	lsrs	r3, r3, #2
 800f266:	b29b      	uxth	r3, r3
 800f268:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 800f26a:	69bb      	ldr	r3, [r7, #24]
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	68fa      	ldr	r2, [r7, #12]
 800f270:	4413      	add	r3, r2
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 800f276:	697b      	ldr	r3, [r7, #20]
 800f278:	009b      	lsls	r3, r3, #2
 800f27a:	68fa      	ldr	r2, [r7, #12]
 800f27c:	441a      	add	r2, r3
 800f27e:	69bb      	ldr	r3, [r7, #24]
 800f280:	009b      	lsls	r3, r3, #2
 800f282:	68f9      	ldr	r1, [r7, #12]
 800f284:	440b      	add	r3, r1
 800f286:	6812      	ldr	r2, [r2, #0]
 800f288:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	009b      	lsls	r3, r3, #2
 800f28e:	68fa      	ldr	r2, [r7, #12]
 800f290:	4413      	add	r3, r2
 800f292:	693a      	ldr	r2, [r7, #16]
 800f294:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 800f296:	69bb      	ldr	r3, [r7, #24]
 800f298:	3301      	adds	r3, #1
 800f29a:	009b      	lsls	r3, r3, #2
 800f29c:	68fa      	ldr	r2, [r7, #12]
 800f29e:	4413      	add	r3, r2
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 800f2a4:	697b      	ldr	r3, [r7, #20]
 800f2a6:	3301      	adds	r3, #1
 800f2a8:	009b      	lsls	r3, r3, #2
 800f2aa:	68fa      	ldr	r2, [r7, #12]
 800f2ac:	441a      	add	r2, r3
 800f2ae:	69bb      	ldr	r3, [r7, #24]
 800f2b0:	3301      	adds	r3, #1
 800f2b2:	009b      	lsls	r3, r3, #2
 800f2b4:	68f9      	ldr	r1, [r7, #12]
 800f2b6:	440b      	add	r3, r1
 800f2b8:	6812      	ldr	r2, [r2, #0]
 800f2ba:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	3301      	adds	r3, #1
 800f2c0:	009b      	lsls	r3, r3, #2
 800f2c2:	68fa      	ldr	r2, [r7, #12]
 800f2c4:	4413      	add	r3, r2
 800f2c6:	693a      	ldr	r2, [r7, #16]
 800f2c8:	601a      	str	r2, [r3, #0]

    i += 2;
 800f2ca:	69fb      	ldr	r3, [r7, #28]
 800f2cc:	3302      	adds	r3, #2
 800f2ce:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 800f2d0:	897b      	ldrh	r3, [r7, #10]
 800f2d2:	69fa      	ldr	r2, [r7, #28]
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d3b7      	bcc.n	800f248 <arm_bitreversal_32+0x14>
  }
}
 800f2d8:	bf00      	nop
 800f2da:	bf00      	nop
 800f2dc:	3724      	adds	r7, #36	; 0x24
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e4:	4770      	bx	lr

0800f2e6 <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800f2e6:	b580      	push	{r7, lr}
 800f2e8:	b0a0      	sub	sp, #128	; 0x80
 800f2ea:	af00      	add	r7, sp, #0
 800f2ec:	6078      	str	r0, [r7, #4]
 800f2ee:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	881b      	ldrh	r3, [r3, #0]
 800f2f4:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 800f2f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f2f8:	009b      	lsls	r3, r3, #2
 800f2fa:	683a      	ldr	r2, [r7, #0]
 800f2fc:	4413      	add	r3, r2
 800f2fe:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	685b      	ldr	r3, [r3, #4]
 800f304:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 800f30a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f30c:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 800f30e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f310:	085b      	lsrs	r3, r3, #1
 800f312:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 800f314:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f316:	009b      	lsls	r3, r3, #2
 800f318:	683a      	ldr	r2, [r7, #0]
 800f31a:	4413      	add	r3, r2
 800f31c:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 800f31e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f320:	009b      	lsls	r3, r3, #2
 800f322:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f324:	4413      	add	r3, r2
 800f326:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 800f328:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f32a:	089b      	lsrs	r3, r3, #2
 800f32c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f32e:	e1b6      	b.n	800f69e <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	685b      	ldr	r3, [r3, #4]
 800f33a:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	689b      	ldr	r3, [r3, #8]
 800f340:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	68db      	ldr	r3, [r3, #12]
 800f346:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 800f348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 800f34e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f350:	685b      	ldr	r3, [r3, #4]
 800f352:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 800f354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f356:	689b      	ldr	r3, [r3, #8]
 800f358:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 800f35a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f35c:	68db      	ldr	r3, [r3, #12]
 800f35e:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 800f360:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 800f366:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 800f36c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f36e:	689b      	ldr	r3, [r3, #8]
 800f370:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 800f372:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f374:	68db      	ldr	r3, [r3, #12]
 800f376:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 800f378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 800f37e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 800f384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f386:	689b      	ldr	r3, [r3, #8]
 800f388:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 800f38a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f38c:	68db      	ldr	r3, [r3, #12]
 800f38e:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 800f390:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800f394:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	1d1a      	adds	r2, r3, #4
 800f39c:	603a      	str	r2, [r7, #0]
 800f39e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3a2:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 800f3a6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f3aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	1d1a      	adds	r2, r3, #4
 800f3b2:	603a      	str	r2, [r7, #0]
 800f3b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3b8:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 800f3bc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800f3c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	1d1a      	adds	r2, r3, #4
 800f3c8:	603a      	str	r2, [r7, #0]
 800f3ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3ce:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 800f3d2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800f3d6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	1d1a      	adds	r2, r3, #4
 800f3de:	603a      	str	r2, [r7, #0]
 800f3e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3e4:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 800f3e8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800f3ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f3f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3f4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 800f3f8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f3fc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f400:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f404:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 800f408:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800f40c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f410:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f414:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 800f418:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800f41c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f420:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f424:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 800f428:	ed97 7a06 	vldr	s14, [r7, #24]
 800f42c:	edd7 7a02 	vldr	s15, [r7, #8]
 800f430:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f432:	1d1a      	adds	r2, r3, #4
 800f434:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f43a:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 800f43e:	ed97 7a07 	vldr	s14, [r7, #28]
 800f442:	edd7 7a03 	vldr	s15, [r7, #12]
 800f446:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f448:	1d1a      	adds	r2, r3, #4
 800f44a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f44c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f450:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 800f454:	ed97 7a08 	vldr	s14, [r7, #32]
 800f458:	edd7 7a04 	vldr	s15, [r7, #16]
 800f45c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f45e:	1d1a      	adds	r2, r3, #4
 800f460:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f462:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f466:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 800f46a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800f46e:	edd7 7a05 	vldr	s15, [r7, #20]
 800f472:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f474:	1d1a      	adds	r2, r3, #4
 800f476:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f47c:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 800f480:	ed97 7a02 	vldr	s14, [r7, #8]
 800f484:	edd7 7a06 	vldr	s15, [r7, #24]
 800f488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f48c:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 800f490:	ed97 7a03 	vldr	s14, [r7, #12]
 800f494:	edd7 7a07 	vldr	s15, [r7, #28]
 800f498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f49c:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 800f4a0:	ed97 7a04 	vldr	s14, [r7, #16]
 800f4a4:	edd7 7a08 	vldr	s15, [r7, #32]
 800f4a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f4ac:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 800f4b0:	ed97 7a05 	vldr	s14, [r7, #20]
 800f4b4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f4b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f4bc:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 800f4c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f4c2:	1d1a      	adds	r2, r3, #4
 800f4c4:	673a      	str	r2, [r7, #112]	; 0x70
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 800f4ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f4cc:	1d1a      	adds	r2, r3, #4
 800f4ce:	673a      	str	r2, [r7, #112]	; 0x70
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 800f4d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f4d8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f4dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4e0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 800f4e4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f4e8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f4ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4f0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 800f4f4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f4f8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f4fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f500:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 800f504:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f508:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f50c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f510:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 800f514:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f516:	1d1a      	adds	r2, r3, #4
 800f518:	677a      	str	r2, [r7, #116]	; 0x74
 800f51a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800f51e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f522:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f526:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 800f52a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f52c:	1d1a      	adds	r2, r3, #4
 800f52e:	677a      	str	r2, [r7, #116]	; 0x74
 800f530:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800f534:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f538:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f53c:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 800f540:	edd7 7a02 	vldr	s15, [r7, #8]
 800f544:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f54c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 800f550:	edd7 7a03 	vldr	s15, [r7, #12]
 800f554:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f55c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 800f560:	edd7 7a03 	vldr	s15, [r7, #12]
 800f564:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f56c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 800f570:	edd7 7a02 	vldr	s15, [r7, #8]
 800f574:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f57c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 800f580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f582:	1d1a      	adds	r2, r3, #4
 800f584:	67ba      	str	r2, [r7, #120]	; 0x78
 800f586:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800f58a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f58e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f592:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800f596:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f598:	1d1a      	adds	r2, r3, #4
 800f59a:	67ba      	str	r2, [r7, #120]	; 0x78
 800f59c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800f5a0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f5a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5a8:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 800f5ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f5ae:	1d1a      	adds	r2, r3, #4
 800f5b0:	673a      	str	r2, [r7, #112]	; 0x70
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 800f5b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f5b8:	1d1a      	adds	r2, r3, #4
 800f5ba:	673a      	str	r2, [r7, #112]	; 0x70
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 800f5c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f5c4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f5c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5cc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 800f5d0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f5d4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f5d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5dc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 800f5e0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f5e4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f5e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5ec:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 800f5f0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f5f4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f5f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5fc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 800f600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f602:	1d1a      	adds	r2, r3, #4
 800f604:	677a      	str	r2, [r7, #116]	; 0x74
 800f606:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800f60a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f60e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f612:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800f616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f618:	1d1a      	adds	r2, r3, #4
 800f61a:	677a      	str	r2, [r7, #116]	; 0x74
 800f61c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800f620:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f624:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f628:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 800f62c:	edd7 7a04 	vldr	s15, [r7, #16]
 800f630:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f634:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f638:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 800f63c:	edd7 7a05 	vldr	s15, [r7, #20]
 800f640:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f644:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f648:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 800f64c:	edd7 7a05 	vldr	s15, [r7, #20]
 800f650:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f654:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f658:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 800f65c:	edd7 7a04 	vldr	s15, [r7, #16]
 800f660:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f664:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f668:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 800f66c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f66e:	1d1a      	adds	r2, r3, #4
 800f670:	67ba      	str	r2, [r7, #120]	; 0x78
 800f672:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800f676:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800f67a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f67e:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800f682:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f684:	1d1a      	adds	r2, r3, #4
 800f686:	67ba      	str	r2, [r7, #120]	; 0x78
 800f688:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800f68c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800f690:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f694:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 800f698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f69a:	3b01      	subs	r3, #1
 800f69c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f69e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	f47f ae45 	bne.w	800f330 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 800f6a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f6a8:	b299      	uxth	r1, r3
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	685a      	ldr	r2, [r3, #4]
 800f6ae:	2302      	movs	r3, #2
 800f6b0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800f6b2:	f000 fef1 	bl	8010498 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 800f6b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f6b8:	b299      	uxth	r1, r3
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	685a      	ldr	r2, [r3, #4]
 800f6be:	2302      	movs	r3, #2
 800f6c0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f6c2:	f000 fee9 	bl	8010498 <arm_radix8_butterfly_f32>
}
 800f6c6:	bf00      	nop
 800f6c8:	3780      	adds	r7, #128	; 0x80
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}

0800f6ce <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800f6ce:	b580      	push	{r7, lr}
 800f6d0:	b0ac      	sub	sp, #176	; 0xb0
 800f6d2:	af00      	add	r7, sp, #0
 800f6d4:	6078      	str	r0, [r7, #4]
 800f6d6:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	881b      	ldrh	r3, [r3, #0]
 800f6dc:	085b      	lsrs	r3, r3, #1
 800f6de:	b29b      	uxth	r3, r3
 800f6e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800f6e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f6e8:	009b      	lsls	r3, r3, #2
 800f6ea:	683a      	ldr	r2, [r7, #0]
 800f6ec:	4413      	add	r3, r2
 800f6ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 800f6f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f6f6:	009b      	lsls	r3, r3, #2
 800f6f8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f6fc:	4413      	add	r3, r2
 800f6fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 800f702:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f706:	009b      	lsls	r3, r3, #2
 800f708:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f70c:	4413      	add	r3, r2
 800f70e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 800f716:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f71a:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 800f71c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f720:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 800f722:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f726:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 800f728:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f72c:	3b04      	subs	r3, #4
 800f72e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 800f732:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f736:	3b04      	subs	r3, #4
 800f738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 800f73c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f740:	3b04      	subs	r3, #4
 800f742:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 800f746:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f74a:	009b      	lsls	r3, r3, #2
 800f74c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f750:	4413      	add	r3, r2
 800f752:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	685b      	ldr	r3, [r3, #4]
 800f75a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f75e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f762:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f766:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f76a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 800f76e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f772:	085b      	lsrs	r3, r3, #1
 800f774:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 800f778:	2302      	movs	r3, #2
 800f77a:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 800f77c:	2304      	movs	r3, #4
 800f77e:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 800f780:	2306      	movs	r3, #6
 800f782:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	ed93 7a00 	vldr	s14, [r3]
 800f78a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f78e:	edd3 7a00 	vldr	s15, [r3]
 800f792:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f796:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	ed93 7a00 	vldr	s14, [r3]
 800f7a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f7a4:	edd3 7a00 	vldr	s15, [r3]
 800f7a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7ac:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	3304      	adds	r3, #4
 800f7b4:	ed93 7a00 	vldr	s14, [r3]
 800f7b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f7bc:	3304      	adds	r3, #4
 800f7be:	edd3 7a00 	vldr	s15, [r3]
 800f7c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f7c6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	3304      	adds	r3, #4
 800f7ce:	ed93 7a00 	vldr	s14, [r3]
 800f7d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f7d6:	3304      	adds	r3, #4
 800f7d8:	edd3 7a00 	vldr	s15, [r3]
 800f7dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7e0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800f7e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f7e8:	3304      	adds	r3, #4
 800f7ea:	ed93 7a00 	vldr	s14, [r3]
 800f7ee:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800f7f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f7f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f7fa:	3304      	adds	r3, #4
 800f7fc:	edd3 7a00 	vldr	s15, [r3]
 800f800:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f804:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800f808:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f80c:	edd3 7a00 	vldr	s15, [r3]
 800f810:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800f814:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f818:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f81c:	edd3 7a00 	vldr	s15, [r3]
 800f820:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f824:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800f828:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f82c:	edd3 7a00 	vldr	s15, [r3]
 800f830:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800f834:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f838:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f83c:	edd3 7a00 	vldr	s15, [r3]
 800f840:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f844:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800f848:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f84c:	3304      	adds	r3, #4
 800f84e:	edd3 7a00 	vldr	s15, [r3]
 800f852:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800f856:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f85a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f85e:	3304      	adds	r3, #4
 800f860:	edd3 7a00 	vldr	s15, [r3]
 800f864:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f868:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800f86c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f870:	3304      	adds	r3, #4
 800f872:	edd3 7a00 	vldr	s15, [r3]
 800f876:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800f87a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f87e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f882:	3304      	adds	r3, #4
 800f884:	edd3 7a00 	vldr	s15, [r3]
 800f888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f88c:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800f890:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f894:	ed93 7a00 	vldr	s14, [r3]
 800f898:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800f89c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f8a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8a4:	edd3 7a00 	vldr	s15, [r3]
 800f8a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8ac:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800f8b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f8b4:	ed93 7a00 	vldr	s14, [r3]
 800f8b8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800f8bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f8c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8c4:	edd3 7a00 	vldr	s15, [r3]
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	1d1a      	adds	r2, r3, #4
 800f8cc:	603a      	str	r2, [r7, #0]
 800f8ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f8d2:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800f8d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f8da:	3304      	adds	r3, #4
 800f8dc:	ed93 7a00 	vldr	s14, [r3]
 800f8e0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800f8e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f8e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8ec:	3304      	adds	r3, #4
 800f8ee:	edd3 7a00 	vldr	s15, [r3]
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	1d1a      	adds	r2, r3, #4
 800f8f6:	603a      	str	r2, [r7, #0]
 800f8f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f8fc:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 800f900:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f904:	1d1a      	adds	r2, r3, #4
 800f906:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800f90a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f90c:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 800f90e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f912:	1d1a      	adds	r2, r3, #4
 800f914:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800f918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f91a:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 800f91c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f920:	1d1a      	adds	r2, r3, #4
 800f922:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f926:	69fa      	ldr	r2, [r7, #28]
 800f928:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 800f92a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f92e:	1d1a      	adds	r2, r3, #4
 800f930:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f934:	6a3a      	ldr	r2, [r7, #32]
 800f936:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 800f938:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f93c:	1d1a      	adds	r2, r3, #4
 800f93e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f942:	68fa      	ldr	r2, [r7, #12]
 800f944:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 800f946:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f94a:	1d1a      	adds	r2, r3, #4
 800f94c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f950:	693a      	ldr	r2, [r7, #16]
 800f952:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 800f954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f956:	009b      	lsls	r3, r3, #2
 800f958:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800f95c:	4413      	add	r3, r2
 800f95e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 800f962:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f964:	009b      	lsls	r3, r3, #2
 800f966:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f96a:	4413      	add	r3, r2
 800f96c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 800f970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f972:	009b      	lsls	r3, r3, #2
 800f974:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f978:	4413      	add	r3, r2
 800f97a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 800f97e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f982:	3b02      	subs	r3, #2
 800f984:	085b      	lsrs	r3, r3, #1
 800f986:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f98a:	e31a      	b.n	800ffc2 <arm_cfft_radix8by4_f32+0x8f4>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	ed93 7a00 	vldr	s14, [r3]
 800f992:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f996:	edd3 7a00 	vldr	s15, [r3]
 800f99a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f99e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	ed93 7a00 	vldr	s14, [r3]
 800f9a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9ac:	edd3 7a00 	vldr	s15, [r3]
 800f9b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f9b4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	3304      	adds	r3, #4
 800f9bc:	ed93 7a00 	vldr	s14, [r3]
 800f9c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9c4:	3304      	adds	r3, #4
 800f9c6:	edd3 7a00 	vldr	s15, [r3]
 800f9ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f9ce:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	3304      	adds	r3, #4
 800f9d6:	ed93 7a00 	vldr	s14, [r3]
 800f9da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9de:	3304      	adds	r3, #4
 800f9e0:	edd3 7a00 	vldr	s15, [r3]
 800f9e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f9e8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 800f9ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f9f0:	3304      	adds	r3, #4
 800f9f2:	ed93 7a00 	vldr	s14, [r3]
 800f9f6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800f9fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f9fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fa02:	3304      	adds	r3, #4
 800fa04:	edd3 7a00 	vldr	s15, [r3]
 800fa08:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa0c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 800fa10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fa14:	edd3 7a00 	vldr	s15, [r3]
 800fa18:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800fa1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fa20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fa24:	edd3 7a00 	vldr	s15, [r3]
 800fa28:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa2c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 800fa30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fa34:	edd3 7a00 	vldr	s15, [r3]
 800fa38:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800fa3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fa40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fa44:	edd3 7a00 	vldr	s15, [r3]
 800fa48:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa4c:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 800fa50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fa54:	3304      	adds	r3, #4
 800fa56:	edd3 7a00 	vldr	s15, [r3]
 800fa5a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800fa5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fa62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fa66:	3304      	adds	r3, #4
 800fa68:	edd3 7a00 	vldr	s15, [r3]
 800fa6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa70:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 800fa74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fa78:	3304      	adds	r3, #4
 800fa7a:	edd3 7a00 	vldr	s15, [r3]
 800fa7e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800fa82:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fa86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fa8a:	3304      	adds	r3, #4
 800fa8c:	edd3 7a00 	vldr	s15, [r3]
 800fa90:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa94:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 800fa98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fa9c:	ed93 7a00 	vldr	s14, [r3]
 800faa0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800faa4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800faa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800faac:	edd3 7a00 	vldr	s15, [r3]
 800fab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fab4:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 800fab8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fabc:	ed93 7a00 	vldr	s14, [r3]
 800fac0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800fac4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fac8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800facc:	edd3 7a00 	vldr	s15, [r3]
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	1d1a      	adds	r2, r3, #4
 800fad4:	603a      	str	r2, [r7, #0]
 800fad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fada:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 800fade:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fae2:	3304      	adds	r3, #4
 800fae4:	ed93 7a00 	vldr	s14, [r3]
 800fae8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800faec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800faf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800faf4:	3304      	adds	r3, #4
 800faf6:	edd3 7a00 	vldr	s15, [r3]
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	1d1a      	adds	r2, r3, #4
 800fafe:	603a      	str	r2, [r7, #0]
 800fb00:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb04:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 800fb08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fb0c:	3b04      	subs	r3, #4
 800fb0e:	ed93 7a00 	vldr	s14, [r3]
 800fb12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fb16:	3b04      	subs	r3, #4
 800fb18:	edd3 7a00 	vldr	s15, [r3]
 800fb1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb20:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800fb24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fb28:	3b04      	subs	r3, #4
 800fb2a:	ed93 7a00 	vldr	s14, [r3]
 800fb2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fb32:	3b04      	subs	r3, #4
 800fb34:	edd3 7a00 	vldr	s15, [r3]
 800fb38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb3c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 800fb40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fb44:	ed93 7a00 	vldr	s14, [r3]
 800fb48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fb4c:	edd3 7a00 	vldr	s15, [r3]
 800fb50:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb54:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 800fb58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fb5c:	ed93 7a00 	vldr	s14, [r3]
 800fb60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fb64:	edd3 7a00 	vldr	s15, [r3]
 800fb68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb6c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 800fb70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fb74:	ed93 7a00 	vldr	s14, [r3]
 800fb78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fb7c:	edd3 7a00 	vldr	s15, [r3]
 800fb80:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fb84:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800fb88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb8c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800fb90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fb94:	ed93 7a00 	vldr	s14, [r3]
 800fb98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fb9c:	edd3 7a00 	vldr	s15, [r3]
 800fba0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fba4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fba8:	3b04      	subs	r3, #4
 800fbaa:	edd3 7a00 	vldr	s15, [r3]
 800fbae:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fbb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fbb6:	3b04      	subs	r3, #4
 800fbb8:	edd3 7a00 	vldr	s15, [r3]
 800fbbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fbc0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800fbc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fbc8:	3b04      	subs	r3, #4
 800fbca:	edd3 7a00 	vldr	s15, [r3]
 800fbce:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800fbd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fbd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fbda:	3b04      	subs	r3, #4
 800fbdc:	edd3 7a00 	vldr	s15, [r3]
 800fbe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fbe4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 800fbe8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fbec:	edd3 7a00 	vldr	s15, [r3]
 800fbf0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800fbf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fbf8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fbfc:	edd3 7a00 	vldr	s15, [r3]
 800fc00:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc04:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 800fc08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fc0c:	ed93 7a00 	vldr	s14, [r3]
 800fc10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fc14:	edd3 7a00 	vldr	s15, [r3]
 800fc18:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fc1c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800fc20:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc24:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 800fc28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fc2c:	3b04      	subs	r3, #4
 800fc2e:	ed93 7a00 	vldr	s14, [r3]
 800fc32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fc36:	3b04      	subs	r3, #4
 800fc38:	edd3 7a00 	vldr	s15, [r3]
 800fc3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fc40:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800fc44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc48:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 800fc4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fc50:	ed93 7a00 	vldr	s14, [r3]
 800fc54:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800fc58:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fc5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fc60:	edd3 7a00 	vldr	s15, [r3]
 800fc64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fc68:	1f1a      	subs	r2, r3, #4
 800fc6a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800fc6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fc72:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 800fc76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fc7a:	3b04      	subs	r3, #4
 800fc7c:	ed93 7a00 	vldr	s14, [r3]
 800fc80:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800fc84:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fc88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fc8c:	3b04      	subs	r3, #4
 800fc8e:	edd3 7a00 	vldr	s15, [r3]
 800fc92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fc96:	1f1a      	subs	r2, r3, #4
 800fc98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800fc9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fca0:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 800fca4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fca8:	1d1a      	adds	r2, r3, #4
 800fcaa:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 800fcb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fcb6:	1d1a      	adds	r2, r3, #4
 800fcb8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 800fcc0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800fcc4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fcc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fccc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 800fcd0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800fcd4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fcd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcdc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 800fce0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800fce4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcec:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 800fcf0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800fcf4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fcf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcfc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 800fd00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fd04:	1d1a      	adds	r2, r3, #4
 800fd06:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800fd0a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800fd0e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800fd12:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd16:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 800fd1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fd1e:	1d1a      	adds	r2, r3, #4
 800fd20:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800fd24:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800fd28:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800fd2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd30:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 800fd34:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800fd38:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fd3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd40:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 800fd44:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800fd48:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fd4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd50:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 800fd54:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800fd58:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fd5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd60:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 800fd64:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800fd68:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fd6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd70:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 800fd74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fd78:	1f1a      	subs	r2, r3, #4
 800fd7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800fd7e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800fd82:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800fd86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd8a:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 800fd8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fd92:	1f1a      	subs	r2, r3, #4
 800fd94:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800fd98:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800fd9c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800fda0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fda4:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 800fda8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 800fdb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fdb4:	685b      	ldr	r3, [r3, #4]
 800fdb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 800fdb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fdba:	009b      	lsls	r3, r3, #2
 800fdbc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800fdc0:	4413      	add	r3, r2
 800fdc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 800fdc6:	edd7 7a07 	vldr	s15, [r7, #28]
 800fdca:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fdce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdd2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 800fdd6:	edd7 7a08 	vldr	s15, [r7, #32]
 800fdda:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fdde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fde2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 800fde6:	edd7 7a08 	vldr	s15, [r7, #32]
 800fdea:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fdee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdf2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 800fdf6:	edd7 7a07 	vldr	s15, [r7, #28]
 800fdfa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fdfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe02:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 800fe06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe0a:	1d1a      	adds	r2, r3, #4
 800fe0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800fe10:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800fe14:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800fe18:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fe1c:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 800fe20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe24:	1d1a      	adds	r2, r3, #4
 800fe26:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800fe2a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800fe2e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800fe32:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe36:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 800fe3a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800fe3e:	eef1 7a67 	vneg.f32	s15, s15
 800fe42:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fe46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe4a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 800fe4e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800fe52:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fe56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe5a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 800fe5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800fe62:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fe66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe6a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 800fe6e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800fe72:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fe76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe7a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 800fe7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fe82:	1f1a      	subs	r2, r3, #4
 800fe84:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fe88:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800fe8c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800fe90:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe94:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 800fe98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fe9c:	1f1a      	subs	r2, r3, #4
 800fe9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fea2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800fea6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800feaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800feae:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 800feb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 800feba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800febe:	685b      	ldr	r3, [r3, #4]
 800fec0:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 800fec2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fec4:	009b      	lsls	r3, r3, #2
 800fec6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800feca:	4413      	add	r3, r2
 800fecc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 800fed0:	edd7 7a03 	vldr	s15, [r7, #12]
 800fed4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fedc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 800fee0:	edd7 7a04 	vldr	s15, [r7, #16]
 800fee4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800fee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800feec:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 800fef0:	edd7 7a04 	vldr	s15, [r7, #16]
 800fef4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800fef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fefc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 800ff00:	edd7 7a03 	vldr	s15, [r7, #12]
 800ff04:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ff08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff0c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 800ff10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ff14:	1d1a      	adds	r2, r3, #4
 800ff16:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800ff1a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800ff1e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ff22:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff26:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 800ff2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ff2e:	1d1a      	adds	r2, r3, #4
 800ff30:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800ff34:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ff38:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800ff3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff40:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 800ff44:	edd7 7a06 	vldr	s15, [r7, #24]
 800ff48:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ff4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff50:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 800ff54:	edd7 7a05 	vldr	s15, [r7, #20]
 800ff58:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ff5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff60:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 800ff64:	edd7 7a05 	vldr	s15, [r7, #20]
 800ff68:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ff6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff70:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 800ff74:	edd7 7a06 	vldr	s15, [r7, #24]
 800ff78:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ff7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff80:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 800ff84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ff88:	1f1a      	subs	r2, r3, #4
 800ff8a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800ff8e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800ff92:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ff96:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff9a:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 800ff9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ffa2:	1f1a      	subs	r2, r3, #4
 800ffa4:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800ffa8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ffac:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800ffb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ffb4:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 800ffb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ffbc:	3b01      	subs	r3, #1
 800ffbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ffc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	f47f ace0 	bne.w	800f98c <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	ed93 7a00 	vldr	s14, [r3]
 800ffd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ffd6:	edd3 7a00 	vldr	s15, [r3]
 800ffda:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ffde:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	ed93 7a00 	vldr	s14, [r3]
 800ffe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ffec:	edd3 7a00 	vldr	s15, [r3]
 800fff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fff4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	3304      	adds	r3, #4
 800fffc:	ed93 7a00 	vldr	s14, [r3]
 8010000:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010004:	3304      	adds	r3, #4
 8010006:	edd3 7a00 	vldr	s15, [r3]
 801000a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801000e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	3304      	adds	r3, #4
 8010016:	ed93 7a00 	vldr	s14, [r3]
 801001a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801001e:	3304      	adds	r3, #4
 8010020:	edd3 7a00 	vldr	s15, [r3]
 8010024:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010028:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 801002c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010030:	3304      	adds	r3, #4
 8010032:	ed93 7a00 	vldr	s14, [r3]
 8010036:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801003a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801003e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010042:	3304      	adds	r3, #4
 8010044:	edd3 7a00 	vldr	s15, [r3]
 8010048:	ee77 7a67 	vsub.f32	s15, s14, s15
 801004c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8010050:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010054:	edd3 7a00 	vldr	s15, [r3]
 8010058:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 801005c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010060:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010064:	edd3 7a00 	vldr	s15, [r3]
 8010068:	ee77 7a27 	vadd.f32	s15, s14, s15
 801006c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8010070:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010074:	edd3 7a00 	vldr	s15, [r3]
 8010078:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 801007c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010080:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010084:	edd3 7a00 	vldr	s15, [r3]
 8010088:	ee77 7a67 	vsub.f32	s15, s14, s15
 801008c:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8010090:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010094:	3304      	adds	r3, #4
 8010096:	edd3 7a00 	vldr	s15, [r3]
 801009a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801009e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80100a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80100a6:	3304      	adds	r3, #4
 80100a8:	edd3 7a00 	vldr	s15, [r3]
 80100ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80100b0:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80100b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80100b8:	3304      	adds	r3, #4
 80100ba:	edd3 7a00 	vldr	s15, [r3]
 80100be:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80100c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80100c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80100ca:	3304      	adds	r3, #4
 80100cc:	edd3 7a00 	vldr	s15, [r3]
 80100d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80100d4:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80100d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80100dc:	ed93 7a00 	vldr	s14, [r3]
 80100e0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80100e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80100e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80100ec:	edd3 7a00 	vldr	s15, [r3]
 80100f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80100f4:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80100f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80100fc:	ed93 7a00 	vldr	s14, [r3]
 8010100:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010104:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010108:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801010c:	edd3 7a00 	vldr	s15, [r3]
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	1d1a      	adds	r2, r3, #4
 8010114:	603a      	str	r2, [r7, #0]
 8010116:	ee77 7a27 	vadd.f32	s15, s14, s15
 801011a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 801011e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010122:	3304      	adds	r3, #4
 8010124:	ed93 7a00 	vldr	s14, [r3]
 8010128:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801012c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010130:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010134:	3304      	adds	r3, #4
 8010136:	edd3 7a00 	vldr	s15, [r3]
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	1d1a      	adds	r2, r3, #4
 801013e:	603a      	str	r2, [r7, #0]
 8010140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010144:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8010148:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8010150:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010154:	685b      	ldr	r3, [r3, #4]
 8010156:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8010158:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801015c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010164:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8010168:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801016c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010174:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8010178:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801017c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010184:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8010188:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801018c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010194:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8010198:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801019c:	1d1a      	adds	r2, r3, #4
 801019e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80101a2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80101a6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80101aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101ae:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80101b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80101b6:	1d1a      	adds	r2, r3, #4
 80101b8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80101bc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80101c0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80101c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80101c8:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 80101cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 80101d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80101d8:	685b      	ldr	r3, [r3, #4]
 80101da:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 80101dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80101e0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80101e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101e8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 80101ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80101f0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80101f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101f8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 80101fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8010200:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010208:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 801020c:	edd7 7a07 	vldr	s15, [r7, #28]
 8010210:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010218:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 801021c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010220:	1d1a      	adds	r2, r3, #4
 8010222:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010226:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801022a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801022e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010232:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8010236:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801023a:	1d1a      	adds	r2, r3, #4
 801023c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010240:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8010244:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010248:	ee77 7a67 	vsub.f32	s15, s14, s15
 801024c:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8010250:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8010258:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801025c:	685b      	ldr	r3, [r3, #4]
 801025e:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8010260:	edd7 7a03 	vldr	s15, [r7, #12]
 8010264:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010268:	ee67 7a27 	vmul.f32	s15, s14, s15
 801026c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8010270:	edd7 7a04 	vldr	s15, [r7, #16]
 8010274:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010278:	ee67 7a27 	vmul.f32	s15, s14, s15
 801027c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8010280:	edd7 7a04 	vldr	s15, [r7, #16]
 8010284:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8010288:	ee67 7a27 	vmul.f32	s15, s14, s15
 801028c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8010290:	edd7 7a03 	vldr	s15, [r7, #12]
 8010294:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010298:	ee67 7a27 	vmul.f32	s15, s14, s15
 801029c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 80102a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80102a4:	1d1a      	adds	r2, r3, #4
 80102a6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80102aa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80102ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80102b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80102b6:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 80102ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80102be:	1d1a      	adds	r2, r3, #4
 80102c0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80102c4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80102c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80102cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80102d0:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 80102d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80102d8:	b299      	uxth	r1, r3
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	685a      	ldr	r2, [r3, #4]
 80102de:	2304      	movs	r3, #4
 80102e0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80102e2:	f000 f8d9 	bl	8010498 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 80102e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80102ea:	b299      	uxth	r1, r3
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	685a      	ldr	r2, [r3, #4]
 80102f0:	2304      	movs	r3, #4
 80102f2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80102f4:	f000 f8d0 	bl	8010498 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 80102f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80102fc:	b299      	uxth	r1, r3
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	685a      	ldr	r2, [r3, #4]
 8010302:	2304      	movs	r3, #4
 8010304:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8010306:	f000 f8c7 	bl	8010498 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 801030a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801030e:	b299      	uxth	r1, r3
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	685a      	ldr	r2, [r3, #4]
 8010314:	2304      	movs	r3, #4
 8010316:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8010318:	f000 f8be 	bl	8010498 <arm_radix8_butterfly_f32>
}
 801031c:	bf00      	nop
 801031e:	37b0      	adds	r7, #176	; 0xb0
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}

08010324 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b088      	sub	sp, #32
 8010328:	af00      	add	r7, sp, #0
 801032a:	60f8      	str	r0, [r7, #12]
 801032c:	60b9      	str	r1, [r7, #8]
 801032e:	4611      	mov	r1, r2
 8010330:	461a      	mov	r2, r3
 8010332:	460b      	mov	r3, r1
 8010334:	71fb      	strb	r3, [r7, #7]
 8010336:	4613      	mov	r3, r2
 8010338:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	881b      	ldrh	r3, [r3, #0]
 801033e:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8010340:	79fb      	ldrb	r3, [r7, #7]
 8010342:	2b01      	cmp	r3, #1
 8010344:	d117      	bne.n	8010376 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	3304      	adds	r3, #4
 801034a:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 801034c:	2300      	movs	r3, #0
 801034e:	61fb      	str	r3, [r7, #28]
 8010350:	e00d      	b.n	801036e <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8010352:	69bb      	ldr	r3, [r7, #24]
 8010354:	edd3 7a00 	vldr	s15, [r3]
 8010358:	eef1 7a67 	vneg.f32	s15, s15
 801035c:	69bb      	ldr	r3, [r7, #24]
 801035e:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8010362:	69bb      	ldr	r3, [r7, #24]
 8010364:	3308      	adds	r3, #8
 8010366:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	3301      	adds	r3, #1
 801036c:	61fb      	str	r3, [r7, #28]
 801036e:	69fa      	ldr	r2, [r7, #28]
 8010370:	697b      	ldr	r3, [r7, #20]
 8010372:	429a      	cmp	r2, r3
 8010374:	d3ed      	bcc.n	8010352 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801037c:	d040      	beq.n	8010400 <arm_cfft_f32+0xdc>
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010384:	d845      	bhi.n	8010412 <arm_cfft_f32+0xee>
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801038c:	d033      	beq.n	80103f6 <arm_cfft_f32+0xd2>
 801038e:	697b      	ldr	r3, [r7, #20]
 8010390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010394:	d83d      	bhi.n	8010412 <arm_cfft_f32+0xee>
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801039c:	d026      	beq.n	80103ec <arm_cfft_f32+0xc8>
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80103a4:	d835      	bhi.n	8010412 <arm_cfft_f32+0xee>
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80103ac:	d028      	beq.n	8010400 <arm_cfft_f32+0xdc>
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80103b4:	d82d      	bhi.n	8010412 <arm_cfft_f32+0xee>
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103bc:	d01b      	beq.n	80103f6 <arm_cfft_f32+0xd2>
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103c4:	d825      	bhi.n	8010412 <arm_cfft_f32+0xee>
 80103c6:	697b      	ldr	r3, [r7, #20]
 80103c8:	2b80      	cmp	r3, #128	; 0x80
 80103ca:	d00f      	beq.n	80103ec <arm_cfft_f32+0xc8>
 80103cc:	697b      	ldr	r3, [r7, #20]
 80103ce:	2b80      	cmp	r3, #128	; 0x80
 80103d0:	d81f      	bhi.n	8010412 <arm_cfft_f32+0xee>
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	2b40      	cmp	r3, #64	; 0x40
 80103d6:	d013      	beq.n	8010400 <arm_cfft_f32+0xdc>
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	2b40      	cmp	r3, #64	; 0x40
 80103dc:	d819      	bhi.n	8010412 <arm_cfft_f32+0xee>
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	2b10      	cmp	r3, #16
 80103e2:	d003      	beq.n	80103ec <arm_cfft_f32+0xc8>
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	2b20      	cmp	r3, #32
 80103e8:	d005      	beq.n	80103f6 <arm_cfft_f32+0xd2>
 80103ea:	e012      	b.n	8010412 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80103ec:	68b9      	ldr	r1, [r7, #8]
 80103ee:	68f8      	ldr	r0, [r7, #12]
 80103f0:	f7fe ff79 	bl	800f2e6 <arm_cfft_radix8by2_f32>
    break;
 80103f4:	e00d      	b.n	8010412 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80103f6:	68b9      	ldr	r1, [r7, #8]
 80103f8:	68f8      	ldr	r0, [r7, #12]
 80103fa:	f7ff f968 	bl	800f6ce <arm_cfft_radix8by4_f32>
    break;
 80103fe:	e008      	b.n	8010412 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8010400:	697b      	ldr	r3, [r7, #20]
 8010402:	b299      	uxth	r1, r3
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	685a      	ldr	r2, [r3, #4]
 8010408:	2301      	movs	r3, #1
 801040a:	68b8      	ldr	r0, [r7, #8]
 801040c:	f000 f844 	bl	8010498 <arm_radix8_butterfly_f32>
    break;
 8010410:	bf00      	nop
  }

  if ( bitReverseFlag )
 8010412:	79bb      	ldrb	r3, [r7, #6]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d007      	beq.n	8010428 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	8999      	ldrh	r1, [r3, #12]
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	689b      	ldr	r3, [r3, #8]
 8010420:	461a      	mov	r2, r3
 8010422:	68b8      	ldr	r0, [r7, #8]
 8010424:	f7fe ff06 	bl	800f234 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 8010428:	79fb      	ldrb	r3, [r7, #7]
 801042a:	2b01      	cmp	r3, #1
 801042c:	d130      	bne.n	8010490 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	ee07 3a90 	vmov	s15, r3
 8010434:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010438:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801043c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010440:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8010448:	2300      	movs	r3, #0
 801044a:	61fb      	str	r3, [r7, #28]
 801044c:	e01c      	b.n	8010488 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 801044e:	69bb      	ldr	r3, [r7, #24]
 8010450:	1d1a      	adds	r2, r3, #4
 8010452:	61ba      	str	r2, [r7, #24]
 8010454:	ed93 7a00 	vldr	s14, [r3]
 8010458:	edd7 7a04 	vldr	s15, [r7, #16]
 801045c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010460:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 8010464:	69bb      	ldr	r3, [r7, #24]
 8010466:	edd3 7a00 	vldr	s15, [r3]
 801046a:	eeb1 7a67 	vneg.f32	s14, s15
 801046e:	edd7 7a04 	vldr	s15, [r7, #16]
 8010472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010476:	69bb      	ldr	r3, [r7, #24]
 8010478:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 801047c:	69bb      	ldr	r3, [r7, #24]
 801047e:	3304      	adds	r3, #4
 8010480:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8010482:	69fb      	ldr	r3, [r7, #28]
 8010484:	3301      	adds	r3, #1
 8010486:	61fb      	str	r3, [r7, #28]
 8010488:	69fa      	ldr	r2, [r7, #28]
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	429a      	cmp	r2, r3
 801048e:	d3de      	bcc.n	801044e <arm_cfft_f32+0x12a>
    }
  }
}
 8010490:	bf00      	nop
 8010492:	3720      	adds	r7, #32
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}

08010498 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8010498:	b480      	push	{r7}
 801049a:	b0bd      	sub	sp, #244	; 0xf4
 801049c:	af00      	add	r7, sp, #0
 801049e:	60f8      	str	r0, [r7, #12]
 80104a0:	607a      	str	r2, [r7, #4]
 80104a2:	461a      	mov	r2, r3
 80104a4:	460b      	mov	r3, r1
 80104a6:	817b      	strh	r3, [r7, #10]
 80104a8:	4613      	mov	r3, r2
 80104aa:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 80104ac:	4b09      	ldr	r3, [pc, #36]	; (80104d4 <arm_radix8_butterfly_f32+0x3c>)
 80104ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 80104b2:	897b      	ldrh	r3, [r7, #10]
 80104b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 80104b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80104bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 80104c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80104c4:	08db      	lsrs	r3, r3, #3
 80104c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 80104ca:	2300      	movs	r3, #0
 80104cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80104d0:	e002      	b.n	80104d8 <arm_radix8_butterfly_f32+0x40>
 80104d2:	bf00      	nop
 80104d4:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 80104d8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80104dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80104e0:	4413      	add	r3, r2
 80104e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 80104e6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80104ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80104ee:	4413      	add	r3, r2
 80104f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 80104f4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80104f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80104fc:	4413      	add	r3, r2
 80104fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8010502:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8010506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801050a:	4413      	add	r3, r2
 801050c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8010510:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010518:	4413      	add	r3, r2
 801051a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 801051e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010526:	4413      	add	r3, r2
 8010528:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 801052c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010534:	4413      	add	r3, r2
 8010536:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 801053a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801053e:	00db      	lsls	r3, r3, #3
 8010540:	68fa      	ldr	r2, [r7, #12]
 8010542:	4413      	add	r3, r2
 8010544:	ed93 7a00 	vldr	s14, [r3]
 8010548:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801054c:	00db      	lsls	r3, r3, #3
 801054e:	68fa      	ldr	r2, [r7, #12]
 8010550:	4413      	add	r3, r2
 8010552:	edd3 7a00 	vldr	s15, [r3]
 8010556:	ee77 7a27 	vadd.f32	s15, s14, s15
 801055a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 801055e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010562:	00db      	lsls	r3, r3, #3
 8010564:	68fa      	ldr	r2, [r7, #12]
 8010566:	4413      	add	r3, r2
 8010568:	ed93 7a00 	vldr	s14, [r3]
 801056c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010570:	00db      	lsls	r3, r3, #3
 8010572:	68fa      	ldr	r2, [r7, #12]
 8010574:	4413      	add	r3, r2
 8010576:	edd3 7a00 	vldr	s15, [r3]
 801057a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801057e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8010582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010586:	00db      	lsls	r3, r3, #3
 8010588:	68fa      	ldr	r2, [r7, #12]
 801058a:	4413      	add	r3, r2
 801058c:	ed93 7a00 	vldr	s14, [r3]
 8010590:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010594:	00db      	lsls	r3, r3, #3
 8010596:	68fa      	ldr	r2, [r7, #12]
 8010598:	4413      	add	r3, r2
 801059a:	edd3 7a00 	vldr	s15, [r3]
 801059e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80105a2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80105a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80105aa:	00db      	lsls	r3, r3, #3
 80105ac:	68fa      	ldr	r2, [r7, #12]
 80105ae:	4413      	add	r3, r2
 80105b0:	ed93 7a00 	vldr	s14, [r3]
 80105b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80105b8:	00db      	lsls	r3, r3, #3
 80105ba:	68fa      	ldr	r2, [r7, #12]
 80105bc:	4413      	add	r3, r2
 80105be:	edd3 7a00 	vldr	s15, [r3]
 80105c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105c6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80105ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80105ce:	00db      	lsls	r3, r3, #3
 80105d0:	68fa      	ldr	r2, [r7, #12]
 80105d2:	4413      	add	r3, r2
 80105d4:	ed93 7a00 	vldr	s14, [r3]
 80105d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80105dc:	00db      	lsls	r3, r3, #3
 80105de:	68fa      	ldr	r2, [r7, #12]
 80105e0:	4413      	add	r3, r2
 80105e2:	edd3 7a00 	vldr	s15, [r3]
 80105e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80105ea:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80105ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80105f2:	00db      	lsls	r3, r3, #3
 80105f4:	68fa      	ldr	r2, [r7, #12]
 80105f6:	4413      	add	r3, r2
 80105f8:	ed93 7a00 	vldr	s14, [r3]
 80105fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010600:	00db      	lsls	r3, r3, #3
 8010602:	68fa      	ldr	r2, [r7, #12]
 8010604:	4413      	add	r3, r2
 8010606:	edd3 7a00 	vldr	s15, [r3]
 801060a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801060e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8010612:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010616:	00db      	lsls	r3, r3, #3
 8010618:	68fa      	ldr	r2, [r7, #12]
 801061a:	4413      	add	r3, r2
 801061c:	ed93 7a00 	vldr	s14, [r3]
 8010620:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010624:	00db      	lsls	r3, r3, #3
 8010626:	68fa      	ldr	r2, [r7, #12]
 8010628:	4413      	add	r3, r2
 801062a:	edd3 7a00 	vldr	s15, [r3]
 801062e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010632:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8010636:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801063a:	00db      	lsls	r3, r3, #3
 801063c:	68fa      	ldr	r2, [r7, #12]
 801063e:	4413      	add	r3, r2
 8010640:	ed93 7a00 	vldr	s14, [r3]
 8010644:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010648:	00db      	lsls	r3, r3, #3
 801064a:	68fa      	ldr	r2, [r7, #12]
 801064c:	4413      	add	r3, r2
 801064e:	edd3 7a00 	vldr	s15, [r3]
 8010652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010656:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 801065a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801065e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010666:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 801066a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801066e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010676:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 801067a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 801067e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8010682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010686:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 801068a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 801068e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8010692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010696:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 801069a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801069e:	00db      	lsls	r3, r3, #3
 80106a0:	68fa      	ldr	r2, [r7, #12]
 80106a2:	4413      	add	r3, r2
 80106a4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80106a8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80106ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80106b0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 80106b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80106b8:	00db      	lsls	r3, r3, #3
 80106ba:	68fa      	ldr	r2, [r7, #12]
 80106bc:	4413      	add	r3, r2
 80106be:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80106c2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80106c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80106ca:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80106ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80106d2:	00db      	lsls	r3, r3, #3
 80106d4:	3304      	adds	r3, #4
 80106d6:	68fa      	ldr	r2, [r7, #12]
 80106d8:	4413      	add	r3, r2
 80106da:	ed93 7a00 	vldr	s14, [r3]
 80106de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80106e2:	00db      	lsls	r3, r3, #3
 80106e4:	3304      	adds	r3, #4
 80106e6:	68fa      	ldr	r2, [r7, #12]
 80106e8:	4413      	add	r3, r2
 80106ea:	edd3 7a00 	vldr	s15, [r3]
 80106ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80106f2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80106f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80106fa:	00db      	lsls	r3, r3, #3
 80106fc:	3304      	adds	r3, #4
 80106fe:	68fa      	ldr	r2, [r7, #12]
 8010700:	4413      	add	r3, r2
 8010702:	ed93 7a00 	vldr	s14, [r3]
 8010706:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801070a:	00db      	lsls	r3, r3, #3
 801070c:	3304      	adds	r3, #4
 801070e:	68fa      	ldr	r2, [r7, #12]
 8010710:	4413      	add	r3, r2
 8010712:	edd3 7a00 	vldr	s15, [r3]
 8010716:	ee77 7a67 	vsub.f32	s15, s14, s15
 801071a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 801071e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010722:	00db      	lsls	r3, r3, #3
 8010724:	3304      	adds	r3, #4
 8010726:	68fa      	ldr	r2, [r7, #12]
 8010728:	4413      	add	r3, r2
 801072a:	ed93 7a00 	vldr	s14, [r3]
 801072e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010732:	00db      	lsls	r3, r3, #3
 8010734:	3304      	adds	r3, #4
 8010736:	68fa      	ldr	r2, [r7, #12]
 8010738:	4413      	add	r3, r2
 801073a:	edd3 7a00 	vldr	s15, [r3]
 801073e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010742:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8010746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801074a:	00db      	lsls	r3, r3, #3
 801074c:	3304      	adds	r3, #4
 801074e:	68fa      	ldr	r2, [r7, #12]
 8010750:	4413      	add	r3, r2
 8010752:	ed93 7a00 	vldr	s14, [r3]
 8010756:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801075a:	00db      	lsls	r3, r3, #3
 801075c:	3304      	adds	r3, #4
 801075e:	68fa      	ldr	r2, [r7, #12]
 8010760:	4413      	add	r3, r2
 8010762:	edd3 7a00 	vldr	s15, [r3]
 8010766:	ee77 7a67 	vsub.f32	s15, s14, s15
 801076a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 801076e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010772:	00db      	lsls	r3, r3, #3
 8010774:	3304      	adds	r3, #4
 8010776:	68fa      	ldr	r2, [r7, #12]
 8010778:	4413      	add	r3, r2
 801077a:	ed93 7a00 	vldr	s14, [r3]
 801077e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010782:	00db      	lsls	r3, r3, #3
 8010784:	3304      	adds	r3, #4
 8010786:	68fa      	ldr	r2, [r7, #12]
 8010788:	4413      	add	r3, r2
 801078a:	edd3 7a00 	vldr	s15, [r3]
 801078e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010792:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8010796:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801079a:	00db      	lsls	r3, r3, #3
 801079c:	3304      	adds	r3, #4
 801079e:	68fa      	ldr	r2, [r7, #12]
 80107a0:	4413      	add	r3, r2
 80107a2:	ed93 7a00 	vldr	s14, [r3]
 80107a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80107aa:	00db      	lsls	r3, r3, #3
 80107ac:	3304      	adds	r3, #4
 80107ae:	68fa      	ldr	r2, [r7, #12]
 80107b0:	4413      	add	r3, r2
 80107b2:	edd3 7a00 	vldr	s15, [r3]
 80107b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80107ba:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80107be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80107c2:	00db      	lsls	r3, r3, #3
 80107c4:	3304      	adds	r3, #4
 80107c6:	68fa      	ldr	r2, [r7, #12]
 80107c8:	4413      	add	r3, r2
 80107ca:	ed93 7a00 	vldr	s14, [r3]
 80107ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80107d2:	00db      	lsls	r3, r3, #3
 80107d4:	3304      	adds	r3, #4
 80107d6:	68fa      	ldr	r2, [r7, #12]
 80107d8:	4413      	add	r3, r2
 80107da:	edd3 7a00 	vldr	s15, [r3]
 80107de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107e2:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80107e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80107ea:	00db      	lsls	r3, r3, #3
 80107ec:	3304      	adds	r3, #4
 80107ee:	68fa      	ldr	r2, [r7, #12]
 80107f0:	4413      	add	r3, r2
 80107f2:	ed93 7a00 	vldr	s14, [r3]
 80107f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80107fa:	00db      	lsls	r3, r3, #3
 80107fc:	3304      	adds	r3, #4
 80107fe:	68fa      	ldr	r2, [r7, #12]
 8010800:	4413      	add	r3, r2
 8010802:	edd3 7a00 	vldr	s15, [r3]
 8010806:	ee77 7a67 	vsub.f32	s15, s14, s15
 801080a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 801080e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8010812:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8010816:	ee77 7a67 	vsub.f32	s15, s14, s15
 801081a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 801081e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8010822:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8010826:	ee77 7a27 	vadd.f32	s15, s14, s15
 801082a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 801082e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8010832:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8010836:	ee77 7a67 	vsub.f32	s15, s14, s15
 801083a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 801083e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8010842:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8010846:	ee77 7a27 	vadd.f32	s15, s14, s15
 801084a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 801084e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010852:	00db      	lsls	r3, r3, #3
 8010854:	3304      	adds	r3, #4
 8010856:	68fa      	ldr	r2, [r7, #12]
 8010858:	4413      	add	r3, r2
 801085a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801085e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8010862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010866:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 801086a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801086e:	00db      	lsls	r3, r3, #3
 8010870:	3304      	adds	r3, #4
 8010872:	68fa      	ldr	r2, [r7, #12]
 8010874:	4413      	add	r3, r2
 8010876:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801087a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801087e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010882:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8010886:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801088a:	00db      	lsls	r3, r3, #3
 801088c:	68fa      	ldr	r2, [r7, #12]
 801088e:	4413      	add	r3, r2
 8010890:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8010894:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8010898:	ee77 7a27 	vadd.f32	s15, s14, s15
 801089c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 80108a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80108a4:	00db      	lsls	r3, r3, #3
 80108a6:	68fa      	ldr	r2, [r7, #12]
 80108a8:	4413      	add	r3, r2
 80108aa:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80108ae:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80108b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80108b6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 80108ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80108be:	00db      	lsls	r3, r3, #3
 80108c0:	3304      	adds	r3, #4
 80108c2:	68fa      	ldr	r2, [r7, #12]
 80108c4:	4413      	add	r3, r2
 80108c6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80108ca:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80108ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80108d2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 80108d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80108da:	00db      	lsls	r3, r3, #3
 80108dc:	3304      	adds	r3, #4
 80108de:	68fa      	ldr	r2, [r7, #12]
 80108e0:	4413      	add	r3, r2
 80108e2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80108e6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80108ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108ee:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 80108f2:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80108f6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80108fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80108fe:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8010902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010906:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 801090a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 801090e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8010912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010916:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 801091a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801091e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8010922:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8010926:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801092a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801092e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8010932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010936:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 801093a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 801093e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8010942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010946:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 801094a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801094e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 8010952:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8010956:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 801095a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801095e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8010962:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8010966:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 801096a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801096e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8010972:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8010976:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 801097a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801097e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8010982:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8010986:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 801098a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801098e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8010992:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8010996:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801099a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801099e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 80109a2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80109a6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80109aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80109ae:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 80109b2:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80109b6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80109ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80109be:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 80109c2:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80109c6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80109ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80109ce:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 80109d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80109d6:	00db      	lsls	r3, r3, #3
 80109d8:	68fa      	ldr	r2, [r7, #12]
 80109da:	4413      	add	r3, r2
 80109dc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80109e0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80109e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80109e8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 80109ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80109f0:	00db      	lsls	r3, r3, #3
 80109f2:	68fa      	ldr	r2, [r7, #12]
 80109f4:	4413      	add	r3, r2
 80109f6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80109fa:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80109fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a02:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8010a06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010a0a:	00db      	lsls	r3, r3, #3
 8010a0c:	68fa      	ldr	r2, [r7, #12]
 8010a0e:	4413      	add	r3, r2
 8010a10:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8010a14:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8010a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a1c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8010a20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010a24:	00db      	lsls	r3, r3, #3
 8010a26:	68fa      	ldr	r2, [r7, #12]
 8010a28:	4413      	add	r3, r2
 8010a2a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8010a2e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8010a32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a36:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8010a3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010a3e:	00db      	lsls	r3, r3, #3
 8010a40:	3304      	adds	r3, #4
 8010a42:	68fa      	ldr	r2, [r7, #12]
 8010a44:	4413      	add	r3, r2
 8010a46:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8010a4a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8010a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a52:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8010a56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010a5a:	00db      	lsls	r3, r3, #3
 8010a5c:	3304      	adds	r3, #4
 8010a5e:	68fa      	ldr	r2, [r7, #12]
 8010a60:	4413      	add	r3, r2
 8010a62:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8010a66:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8010a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a6e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8010a72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010a76:	00db      	lsls	r3, r3, #3
 8010a78:	3304      	adds	r3, #4
 8010a7a:	68fa      	ldr	r2, [r7, #12]
 8010a7c:	4413      	add	r3, r2
 8010a7e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8010a82:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8010a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a8a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8010a8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010a92:	00db      	lsls	r3, r3, #3
 8010a94:	3304      	adds	r3, #4
 8010a96:	68fa      	ldr	r2, [r7, #12]
 8010a98:	4413      	add	r3, r2
 8010a9a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8010a9e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8010aa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010aa6:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8010aaa:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010aae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010ab2:	4413      	add	r3, r2
 8010ab4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8010ab8:	897b      	ldrh	r3, [r7, #10]
 8010aba:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010abe:	429a      	cmp	r2, r3
 8010ac0:	f4ff ad0a 	bcc.w	80104d8 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8010ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ac8:	2b07      	cmp	r3, #7
 8010aca:	f240 84e3 	bls.w	8011494 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8010ada:	893b      	ldrh	r3, [r7, #8]
 8010adc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8010ae0:	4413      	add	r3, r2
 8010ae2:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8010ae4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010ae6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8010aea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8010aee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010af0:	4413      	add	r3, r2
 8010af2:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8010af4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010af6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010af8:	4413      	add	r3, r2
 8010afa:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8010afc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010afe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010b00:	4413      	add	r3, r2
 8010b02:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8010b04:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010b06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010b08:	4413      	add	r3, r2
 8010b0a:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8010b0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010b0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010b10:	4413      	add	r3, r2
 8010b12:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8010b14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010b16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010b18:	4413      	add	r3, r2
 8010b1a:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8010b1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010b20:	00db      	lsls	r3, r3, #3
 8010b22:	687a      	ldr	r2, [r7, #4]
 8010b24:	4413      	add	r3, r2
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8010b2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010b2c:	00db      	lsls	r3, r3, #3
 8010b2e:	687a      	ldr	r2, [r7, #4]
 8010b30:	4413      	add	r3, r2
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8010b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b38:	00db      	lsls	r3, r3, #3
 8010b3a:	687a      	ldr	r2, [r7, #4]
 8010b3c:	4413      	add	r3, r2
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8010b42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010b44:	00db      	lsls	r3, r3, #3
 8010b46:	687a      	ldr	r2, [r7, #4]
 8010b48:	4413      	add	r3, r2
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8010b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b50:	00db      	lsls	r3, r3, #3
 8010b52:	687a      	ldr	r2, [r7, #4]
 8010b54:	4413      	add	r3, r2
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8010b5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b5c:	00db      	lsls	r3, r3, #3
 8010b5e:	687a      	ldr	r2, [r7, #4]
 8010b60:	4413      	add	r3, r2
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8010b66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010b68:	00db      	lsls	r3, r3, #3
 8010b6a:	687a      	ldr	r2, [r7, #4]
 8010b6c:	4413      	add	r3, r2
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8010b72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010b76:	00db      	lsls	r3, r3, #3
 8010b78:	3304      	adds	r3, #4
 8010b7a:	687a      	ldr	r2, [r7, #4]
 8010b7c:	4413      	add	r3, r2
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8010b82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010b84:	00db      	lsls	r3, r3, #3
 8010b86:	3304      	adds	r3, #4
 8010b88:	687a      	ldr	r2, [r7, #4]
 8010b8a:	4413      	add	r3, r2
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8010b90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b92:	00db      	lsls	r3, r3, #3
 8010b94:	3304      	adds	r3, #4
 8010b96:	687a      	ldr	r2, [r7, #4]
 8010b98:	4413      	add	r3, r2
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8010b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010ba0:	00db      	lsls	r3, r3, #3
 8010ba2:	3304      	adds	r3, #4
 8010ba4:	687a      	ldr	r2, [r7, #4]
 8010ba6:	4413      	add	r3, r2
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8010bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010bae:	00db      	lsls	r3, r3, #3
 8010bb0:	3304      	adds	r3, #4
 8010bb2:	687a      	ldr	r2, [r7, #4]
 8010bb4:	4413      	add	r3, r2
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8010bba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010bbc:	00db      	lsls	r3, r3, #3
 8010bbe:	3304      	adds	r3, #4
 8010bc0:	687a      	ldr	r2, [r7, #4]
 8010bc2:	4413      	add	r3, r2
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8010bc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010bca:	00db      	lsls	r3, r3, #3
 8010bcc:	3304      	adds	r3, #4
 8010bce:	687a      	ldr	r2, [r7, #4]
 8010bd0:	4413      	add	r3, r2
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8010bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010bda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8010bde:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010be6:	4413      	add	r3, r2
 8010be8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8010bec:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8010bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010bf4:	4413      	add	r3, r2
 8010bf6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8010bfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c02:	4413      	add	r3, r2
 8010c04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8010c08:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8010c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c10:	4413      	add	r3, r2
 8010c12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8010c16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c1e:	4413      	add	r3, r2
 8010c20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8010c24:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c2c:	4413      	add	r3, r2
 8010c2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8010c32:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c3a:	4413      	add	r3, r2
 8010c3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8010c40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010c44:	00db      	lsls	r3, r3, #3
 8010c46:	68fa      	ldr	r2, [r7, #12]
 8010c48:	4413      	add	r3, r2
 8010c4a:	ed93 7a00 	vldr	s14, [r3]
 8010c4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010c52:	00db      	lsls	r3, r3, #3
 8010c54:	68fa      	ldr	r2, [r7, #12]
 8010c56:	4413      	add	r3, r2
 8010c58:	edd3 7a00 	vldr	s15, [r3]
 8010c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c60:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8010c64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010c68:	00db      	lsls	r3, r3, #3
 8010c6a:	68fa      	ldr	r2, [r7, #12]
 8010c6c:	4413      	add	r3, r2
 8010c6e:	ed93 7a00 	vldr	s14, [r3]
 8010c72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010c76:	00db      	lsls	r3, r3, #3
 8010c78:	68fa      	ldr	r2, [r7, #12]
 8010c7a:	4413      	add	r3, r2
 8010c7c:	edd3 7a00 	vldr	s15, [r3]
 8010c80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c84:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8010c88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010c8c:	00db      	lsls	r3, r3, #3
 8010c8e:	68fa      	ldr	r2, [r7, #12]
 8010c90:	4413      	add	r3, r2
 8010c92:	ed93 7a00 	vldr	s14, [r3]
 8010c96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010c9a:	00db      	lsls	r3, r3, #3
 8010c9c:	68fa      	ldr	r2, [r7, #12]
 8010c9e:	4413      	add	r3, r2
 8010ca0:	edd3 7a00 	vldr	s15, [r3]
 8010ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ca8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8010cac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010cb0:	00db      	lsls	r3, r3, #3
 8010cb2:	68fa      	ldr	r2, [r7, #12]
 8010cb4:	4413      	add	r3, r2
 8010cb6:	ed93 7a00 	vldr	s14, [r3]
 8010cba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010cbe:	00db      	lsls	r3, r3, #3
 8010cc0:	68fa      	ldr	r2, [r7, #12]
 8010cc2:	4413      	add	r3, r2
 8010cc4:	edd3 7a00 	vldr	s15, [r3]
 8010cc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ccc:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8010cd0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010cd4:	00db      	lsls	r3, r3, #3
 8010cd6:	68fa      	ldr	r2, [r7, #12]
 8010cd8:	4413      	add	r3, r2
 8010cda:	ed93 7a00 	vldr	s14, [r3]
 8010cde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010ce2:	00db      	lsls	r3, r3, #3
 8010ce4:	68fa      	ldr	r2, [r7, #12]
 8010ce6:	4413      	add	r3, r2
 8010ce8:	edd3 7a00 	vldr	s15, [r3]
 8010cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cf0:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8010cf4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010cf8:	00db      	lsls	r3, r3, #3
 8010cfa:	68fa      	ldr	r2, [r7, #12]
 8010cfc:	4413      	add	r3, r2
 8010cfe:	ed93 7a00 	vldr	s14, [r3]
 8010d02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010d06:	00db      	lsls	r3, r3, #3
 8010d08:	68fa      	ldr	r2, [r7, #12]
 8010d0a:	4413      	add	r3, r2
 8010d0c:	edd3 7a00 	vldr	s15, [r3]
 8010d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d14:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8010d18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010d1c:	00db      	lsls	r3, r3, #3
 8010d1e:	68fa      	ldr	r2, [r7, #12]
 8010d20:	4413      	add	r3, r2
 8010d22:	ed93 7a00 	vldr	s14, [r3]
 8010d26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010d2a:	00db      	lsls	r3, r3, #3
 8010d2c:	68fa      	ldr	r2, [r7, #12]
 8010d2e:	4413      	add	r3, r2
 8010d30:	edd3 7a00 	vldr	s15, [r3]
 8010d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d38:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8010d3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010d40:	00db      	lsls	r3, r3, #3
 8010d42:	68fa      	ldr	r2, [r7, #12]
 8010d44:	4413      	add	r3, r2
 8010d46:	ed93 7a00 	vldr	s14, [r3]
 8010d4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010d4e:	00db      	lsls	r3, r3, #3
 8010d50:	68fa      	ldr	r2, [r7, #12]
 8010d52:	4413      	add	r3, r2
 8010d54:	edd3 7a00 	vldr	s15, [r3]
 8010d58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d5c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8010d60:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8010d64:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d6c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8010d70:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8010d74:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d7c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8010d80:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8010d84:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8010d88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d8c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8010d90:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8010d94:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8010d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d9c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8010da0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010da4:	00db      	lsls	r3, r3, #3
 8010da6:	68fa      	ldr	r2, [r7, #12]
 8010da8:	4413      	add	r3, r2
 8010daa:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8010dae:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8010db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010db6:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8010dba:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8010dbe:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8010dc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010dc6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8010dca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010dce:	00db      	lsls	r3, r3, #3
 8010dd0:	3304      	adds	r3, #4
 8010dd2:	68fa      	ldr	r2, [r7, #12]
 8010dd4:	4413      	add	r3, r2
 8010dd6:	ed93 7a00 	vldr	s14, [r3]
 8010dda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010dde:	00db      	lsls	r3, r3, #3
 8010de0:	3304      	adds	r3, #4
 8010de2:	68fa      	ldr	r2, [r7, #12]
 8010de4:	4413      	add	r3, r2
 8010de6:	edd3 7a00 	vldr	s15, [r3]
 8010dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010dee:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8010df2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010df6:	00db      	lsls	r3, r3, #3
 8010df8:	3304      	adds	r3, #4
 8010dfa:	68fa      	ldr	r2, [r7, #12]
 8010dfc:	4413      	add	r3, r2
 8010dfe:	ed93 7a00 	vldr	s14, [r3]
 8010e02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010e06:	00db      	lsls	r3, r3, #3
 8010e08:	3304      	adds	r3, #4
 8010e0a:	68fa      	ldr	r2, [r7, #12]
 8010e0c:	4413      	add	r3, r2
 8010e0e:	edd3 7a00 	vldr	s15, [r3]
 8010e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e16:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8010e1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010e1e:	00db      	lsls	r3, r3, #3
 8010e20:	3304      	adds	r3, #4
 8010e22:	68fa      	ldr	r2, [r7, #12]
 8010e24:	4413      	add	r3, r2
 8010e26:	ed93 7a00 	vldr	s14, [r3]
 8010e2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010e2e:	00db      	lsls	r3, r3, #3
 8010e30:	3304      	adds	r3, #4
 8010e32:	68fa      	ldr	r2, [r7, #12]
 8010e34:	4413      	add	r3, r2
 8010e36:	edd3 7a00 	vldr	s15, [r3]
 8010e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e3e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8010e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010e46:	00db      	lsls	r3, r3, #3
 8010e48:	3304      	adds	r3, #4
 8010e4a:	68fa      	ldr	r2, [r7, #12]
 8010e4c:	4413      	add	r3, r2
 8010e4e:	ed93 7a00 	vldr	s14, [r3]
 8010e52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010e56:	00db      	lsls	r3, r3, #3
 8010e58:	3304      	adds	r3, #4
 8010e5a:	68fa      	ldr	r2, [r7, #12]
 8010e5c:	4413      	add	r3, r2
 8010e5e:	edd3 7a00 	vldr	s15, [r3]
 8010e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e66:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8010e6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010e6e:	00db      	lsls	r3, r3, #3
 8010e70:	3304      	adds	r3, #4
 8010e72:	68fa      	ldr	r2, [r7, #12]
 8010e74:	4413      	add	r3, r2
 8010e76:	ed93 7a00 	vldr	s14, [r3]
 8010e7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010e7e:	00db      	lsls	r3, r3, #3
 8010e80:	3304      	adds	r3, #4
 8010e82:	68fa      	ldr	r2, [r7, #12]
 8010e84:	4413      	add	r3, r2
 8010e86:	edd3 7a00 	vldr	s15, [r3]
 8010e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010e8e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8010e92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010e96:	00db      	lsls	r3, r3, #3
 8010e98:	3304      	adds	r3, #4
 8010e9a:	68fa      	ldr	r2, [r7, #12]
 8010e9c:	4413      	add	r3, r2
 8010e9e:	ed93 7a00 	vldr	s14, [r3]
 8010ea2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010ea6:	00db      	lsls	r3, r3, #3
 8010ea8:	3304      	adds	r3, #4
 8010eaa:	68fa      	ldr	r2, [r7, #12]
 8010eac:	4413      	add	r3, r2
 8010eae:	edd3 7a00 	vldr	s15, [r3]
 8010eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010eb6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8010eba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010ebe:	00db      	lsls	r3, r3, #3
 8010ec0:	3304      	adds	r3, #4
 8010ec2:	68fa      	ldr	r2, [r7, #12]
 8010ec4:	4413      	add	r3, r2
 8010ec6:	ed93 7a00 	vldr	s14, [r3]
 8010eca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010ece:	00db      	lsls	r3, r3, #3
 8010ed0:	3304      	adds	r3, #4
 8010ed2:	68fa      	ldr	r2, [r7, #12]
 8010ed4:	4413      	add	r3, r2
 8010ed6:	edd3 7a00 	vldr	s15, [r3]
 8010eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ede:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8010ee2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010ee6:	00db      	lsls	r3, r3, #3
 8010ee8:	3304      	adds	r3, #4
 8010eea:	68fa      	ldr	r2, [r7, #12]
 8010eec:	4413      	add	r3, r2
 8010eee:	ed93 7a00 	vldr	s14, [r3]
 8010ef2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010ef6:	00db      	lsls	r3, r3, #3
 8010ef8:	3304      	adds	r3, #4
 8010efa:	68fa      	ldr	r2, [r7, #12]
 8010efc:	4413      	add	r3, r2
 8010efe:	edd3 7a00 	vldr	s15, [r3]
 8010f02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f06:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8010f0a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8010f0e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8010f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f16:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8010f1a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8010f1e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8010f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f26:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8010f2a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8010f2e:	edd7 7a08 	vldr	s15, [r7, #32]
 8010f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f36:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8010f3a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8010f3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8010f42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f46:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8010f4a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8010f4e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8010f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f56:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8010f5a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8010f5e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8010f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f66:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8010f6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010f6e:	00db      	lsls	r3, r3, #3
 8010f70:	3304      	adds	r3, #4
 8010f72:	68fa      	ldr	r2, [r7, #12]
 8010f74:	4413      	add	r3, r2
 8010f76:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8010f7a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f82:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8010f86:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8010f8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f92:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8010f96:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8010f9a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010fa2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8010fa6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8010faa:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fb2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8010fb6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8010fba:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8010fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fc2:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8010fc6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8010fca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fd2:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8010fd6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8010fda:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fe2:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8010fe6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8010fea:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8010fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ff2:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8010ff6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010ffa:	00db      	lsls	r3, r3, #3
 8010ffc:	68fa      	ldr	r2, [r7, #12]
 8010ffe:	4413      	add	r3, r2
 8011000:	ed97 7a07 	vldr	s14, [r7, #28]
 8011004:	edd7 7a06 	vldr	s15, [r7, #24]
 8011008:	ee77 7a27 	vadd.f32	s15, s14, s15
 801100c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8011010:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011014:	00db      	lsls	r3, r3, #3
 8011016:	3304      	adds	r3, #4
 8011018:	68fa      	ldr	r2, [r7, #12]
 801101a:	4413      	add	r3, r2
 801101c:	ed97 7a05 	vldr	s14, [r7, #20]
 8011020:	edd7 7a04 	vldr	s15, [r7, #16]
 8011024:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011028:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 801102c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8011030:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011038:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 801103c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8011040:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8011044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011048:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 801104c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8011050:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8011054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011058:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 801105c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8011060:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011068:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 801106c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011070:	00db      	lsls	r3, r3, #3
 8011072:	68fa      	ldr	r2, [r7, #12]
 8011074:	4413      	add	r3, r2
 8011076:	ed97 7a07 	vldr	s14, [r7, #28]
 801107a:	edd7 7a06 	vldr	s15, [r7, #24]
 801107e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011082:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8011086:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801108a:	00db      	lsls	r3, r3, #3
 801108c:	3304      	adds	r3, #4
 801108e:	68fa      	ldr	r2, [r7, #12]
 8011090:	4413      	add	r3, r2
 8011092:	ed97 7a05 	vldr	s14, [r7, #20]
 8011096:	edd7 7a04 	vldr	s15, [r7, #16]
 801109a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801109e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 80110a2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80110a6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80110aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110ae:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 80110b2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80110b6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80110ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110be:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 80110c2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80110c6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80110ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110ce:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 80110d2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80110d6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80110da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110de:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 80110e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80110e6:	00db      	lsls	r3, r3, #3
 80110e8:	68fa      	ldr	r2, [r7, #12]
 80110ea:	4413      	add	r3, r2
 80110ec:	ed97 7a07 	vldr	s14, [r7, #28]
 80110f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80110f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110f8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 80110fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011100:	00db      	lsls	r3, r3, #3
 8011102:	3304      	adds	r3, #4
 8011104:	68fa      	ldr	r2, [r7, #12]
 8011106:	4413      	add	r3, r2
 8011108:	ed97 7a05 	vldr	s14, [r7, #20]
 801110c:	edd7 7a04 	vldr	s15, [r7, #16]
 8011110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011114:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8011118:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 801111c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011124:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8011128:	ee67 7a27 	vmul.f32	s15, s14, s15
 801112c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8011130:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8011134:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011138:	ee77 7a27 	vadd.f32	s15, s14, s15
 801113c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8011140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011144:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8011148:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 801114c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011154:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8011158:	ee67 7a27 	vmul.f32	s15, s14, s15
 801115c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8011160:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8011164:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011168:	ee77 7a27 	vadd.f32	s15, s14, s15
 801116c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8011170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011174:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8011178:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 801117c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011184:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8011188:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 801118c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011194:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8011198:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 801119c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80111a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80111a4:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 80111a8:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80111ac:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80111b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111b4:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 80111b8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80111bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80111c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80111c4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 80111c8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80111cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80111d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111d4:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 80111d8:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80111dc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80111e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80111e4:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 80111e8:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80111ec:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80111f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111f4:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 80111f8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80111fc:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8011200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011204:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8011208:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 801120c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8011210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011214:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8011218:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 801121c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011224:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8011228:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 801122c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8011230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011234:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8011238:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 801123c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8011240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011244:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8011248:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 801124c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8011250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011254:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8011258:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 801125c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011260:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011264:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8011268:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 801126c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8011270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011274:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8011278:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 801127c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8011280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011284:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8011288:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 801128c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8011290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011294:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8011298:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 801129c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80112a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112a4:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 80112a8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80112ac:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80112b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112b4:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 80112b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80112bc:	00db      	lsls	r3, r3, #3
 80112be:	68fa      	ldr	r2, [r7, #12]
 80112c0:	4413      	add	r3, r2
 80112c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80112c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80112ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112ce:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 80112d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80112d6:	00db      	lsls	r3, r3, #3
 80112d8:	3304      	adds	r3, #4
 80112da:	68fa      	ldr	r2, [r7, #12]
 80112dc:	4413      	add	r3, r2
 80112de:	ed97 7a05 	vldr	s14, [r7, #20]
 80112e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80112e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80112ea:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 80112ee:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80112f2:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80112f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112fa:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 80112fe:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8011302:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8011306:	ee67 7a27 	vmul.f32	s15, s14, s15
 801130a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 801130e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8011312:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8011316:	ee67 7a27 	vmul.f32	s15, s14, s15
 801131a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 801131e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8011322:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8011326:	ee67 7a27 	vmul.f32	s15, s14, s15
 801132a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 801132e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011332:	00db      	lsls	r3, r3, #3
 8011334:	68fa      	ldr	r2, [r7, #12]
 8011336:	4413      	add	r3, r2
 8011338:	ed97 7a07 	vldr	s14, [r7, #28]
 801133c:	edd7 7a06 	vldr	s15, [r7, #24]
 8011340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011344:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8011348:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801134c:	00db      	lsls	r3, r3, #3
 801134e:	3304      	adds	r3, #4
 8011350:	68fa      	ldr	r2, [r7, #12]
 8011352:	4413      	add	r3, r2
 8011354:	ed97 7a05 	vldr	s14, [r7, #20]
 8011358:	edd7 7a04 	vldr	s15, [r7, #16]
 801135c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011360:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8011364:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8011368:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 801136c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011370:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8011374:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8011378:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 801137c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011380:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8011384:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8011388:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 801138c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011390:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8011394:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8011398:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 801139c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113a0:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 80113a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80113a8:	00db      	lsls	r3, r3, #3
 80113aa:	68fa      	ldr	r2, [r7, #12]
 80113ac:	4413      	add	r3, r2
 80113ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80113b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80113b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113ba:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 80113be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80113c2:	00db      	lsls	r3, r3, #3
 80113c4:	3304      	adds	r3, #4
 80113c6:	68fa      	ldr	r2, [r7, #12]
 80113c8:	4413      	add	r3, r2
 80113ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80113ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80113d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80113d6:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 80113da:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80113de:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80113e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113e6:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 80113ea:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80113ee:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80113f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113f6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 80113fa:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80113fe:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8011402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011406:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 801140a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801140e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8011412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011416:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 801141a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801141e:	00db      	lsls	r3, r3, #3
 8011420:	68fa      	ldr	r2, [r7, #12]
 8011422:	4413      	add	r3, r2
 8011424:	ed97 7a07 	vldr	s14, [r7, #28]
 8011428:	edd7 7a06 	vldr	s15, [r7, #24]
 801142c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011430:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8011434:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011438:	00db      	lsls	r3, r3, #3
 801143a:	3304      	adds	r3, #4
 801143c:	68fa      	ldr	r2, [r7, #12]
 801143e:	4413      	add	r3, r2
 8011440:	ed97 7a05 	vldr	s14, [r7, #20]
 8011444:	edd7 7a04 	vldr	s15, [r7, #16]
 8011448:	ee77 7a67 	vsub.f32	s15, s14, s15
 801144c:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8011450:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011454:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011458:	4413      	add	r3, r2
 801145a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 801145e:	897b      	ldrh	r3, [r7, #10]
 8011460:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8011464:	429a      	cmp	r2, r3
 8011466:	f4ff abba 	bcc.w	8010bde <arm_radix8_butterfly_f32+0x746>

         j++;
 801146a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801146e:	3301      	adds	r3, #1
 8011470:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 8011474:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8011478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801147c:	429a      	cmp	r2, r3
 801147e:	f4ff ab2c 	bcc.w	8010ada <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 8011482:	893b      	ldrh	r3, [r7, #8]
 8011484:	00db      	lsls	r3, r3, #3
 8011486:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8011488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801148c:	2b07      	cmp	r3, #7
 801148e:	f63f a813 	bhi.w	80104b8 <arm_radix8_butterfly_f32+0x20>
}
 8011492:	e000      	b.n	8011496 <arm_radix8_butterfly_f32+0xffe>
         break;
 8011494:	bf00      	nop
}
 8011496:	bf00      	nop
 8011498:	37f4      	adds	r7, #244	; 0xf4
 801149a:	46bd      	mov	sp, r7
 801149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a0:	4770      	bx	lr
 80114a2:	bf00      	nop

080114a4 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 80114a4:	b480      	push	{r7}
 80114a6:	b095      	sub	sp, #84	; 0x54
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	60f8      	str	r0, [r7, #12]
 80114ac:	60b9      	str	r1, [r7, #8]
 80114ae:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	695b      	ldr	r3, [r3, #20]
 80114b4:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	881b      	ldrh	r3, [r3, #0]
 80114c2:	3b01      	subs	r3, #1
 80114c4:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 80114c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 80114cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114ce:	685b      	ldr	r3, [r3, #4]
 80114d0:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 80114d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 80114d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114da:	685b      	ldr	r3, [r3, #4]
 80114dc:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 80114de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114e0:	1d1a      	adds	r2, r3, #4
 80114e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 80114e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114ea:	1d1a      	adds	r2, r3, #4
 80114ec:	64ba      	str	r2, [r7, #72]	; 0x48
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 80114f2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80114f6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80114fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80114fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 8011502:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8011506:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801150a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801150e:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8011512:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8011516:	edd7 7a08 	vldr	s15, [r7, #32]
 801151a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	1d1a      	adds	r2, r3, #4
 8011522:	607a      	str	r2, [r7, #4]
 8011524:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011528:	ee67 7a87 	vmul.f32	s15, s15, s14
 801152c:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8011530:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8011534:	edd7 7a08 	vldr	s15, [r7, #32]
 8011538:	ee77 7a67 	vsub.f32	s15, s14, s15
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	1d1a      	adds	r2, r3, #4
 8011540:	607a      	str	r2, [r7, #4]
 8011542:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011546:	ee67 7a87 	vmul.f32	s15, s15, s14
 801154a:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 801154e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011550:	00db      	lsls	r3, r3, #3
 8011552:	68ba      	ldr	r2, [r7, #8]
 8011554:	4413      	add	r3, r2
 8011556:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 8011558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801155a:	3308      	adds	r3, #8
 801155c:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 801155e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011560:	685b      	ldr	r3, [r3, #4]
 8011562:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 8011564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 801156a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 8011570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011572:	685b      	ldr	r3, [r3, #4]
 8011574:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 8011576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011578:	1d1a      	adds	r2, r3, #4
 801157a:	64ba      	str	r2, [r7, #72]	; 0x48
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8011580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011582:	1d1a      	adds	r2, r3, #4
 8011584:	64ba      	str	r2, [r7, #72]	; 0x48
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 801158a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801158e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8011592:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011596:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 801159a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801159e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80115a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115a6:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 80115aa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80115ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80115b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115b6:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 80115ba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80115be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80115c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115c6:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 80115ca:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80115ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80115d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115d6:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 80115da:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80115de:	edd7 7a08 	vldr	s15, [r7, #32]
 80115e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115e6:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 80115ea:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80115ee:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80115f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80115f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80115fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80115fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8011602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	1d1a      	adds	r2, r3, #4
 801160a:	607a      	str	r2, [r7, #4]
 801160c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011614:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8011618:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801161c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8011620:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011624:	edd7 7a06 	vldr	s15, [r7, #24]
 8011628:	ee37 7a27 	vadd.f32	s14, s14, s15
 801162c:	edd7 7a05 	vldr	s15, [r7, #20]
 8011630:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	1d1a      	adds	r2, r3, #4
 8011638:	607a      	str	r2, [r7, #4]
 801163a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801163e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011642:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 8011646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011648:	3308      	adds	r3, #8
 801164a:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 801164c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801164e:	3b08      	subs	r3, #8
 8011650:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8011652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011654:	3b01      	subs	r3, #1
 8011656:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 8011658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801165a:	2b00      	cmp	r3, #0
 801165c:	f73f af7f 	bgt.w	801155e <stage_rfft_f32+0xba>
}
 8011660:	bf00      	nop
 8011662:	bf00      	nop
 8011664:	3754      	adds	r7, #84	; 0x54
 8011666:	46bd      	mov	sp, r7
 8011668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166c:	4770      	bx	lr

0801166e <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 801166e:	b480      	push	{r7}
 8011670:	b095      	sub	sp, #84	; 0x54
 8011672:	af00      	add	r7, sp, #0
 8011674:	60f8      	str	r0, [r7, #12]
 8011676:	60b9      	str	r1, [r7, #8]
 8011678:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	695b      	ldr	r3, [r3, #20]
 801167e:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8011680:	68bb      	ldr	r3, [r7, #8]
 8011682:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8011684:	68bb      	ldr	r3, [r7, #8]
 8011686:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	881b      	ldrh	r3, [r3, #0]
 801168c:	3b01      	subs	r3, #1
 801168e:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 8011690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 8011696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011698:	685b      	ldr	r3, [r3, #4]
 801169a:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 801169c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801169e:	3308      	adds	r3, #8
 80116a0:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 80116a2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80116a6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80116aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	1d1a      	adds	r2, r3, #4
 80116b2:	607a      	str	r2, [r7, #4]
 80116b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80116b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80116bc:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 80116c0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80116c4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80116c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	1d1a      	adds	r2, r3, #4
 80116d0:	607a      	str	r2, [r7, #4]
 80116d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80116d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80116da:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 80116de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116e0:	00db      	lsls	r3, r3, #3
 80116e2:	68ba      	ldr	r2, [r7, #8]
 80116e4:	4413      	add	r3, r2
 80116e6:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 80116e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116ea:	3308      	adds	r3, #8
 80116ec:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 80116ee:	e07c      	b.n	80117ea <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 80116f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116f2:	685b      	ldr	r3, [r3, #4]
 80116f4:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 80116f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 80116fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 8011702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011704:	685b      	ldr	r3, [r3, #4]
 8011706:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8011708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801170a:	1d1a      	adds	r2, r3, #4
 801170c:	64ba      	str	r2, [r7, #72]	; 0x48
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8011712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011714:	1d1a      	adds	r2, r3, #4
 8011716:	64ba      	str	r2, [r7, #72]	; 0x48
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 801171c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8011720:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8011724:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011728:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 801172c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8011730:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8011734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011738:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 801173c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8011740:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011748:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 801174c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011750:	edd7 7a08 	vldr	s15, [r7, #32]
 8011754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011758:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 801175c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8011760:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011768:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 801176c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8011770:	edd7 7a08 	vldr	s15, [r7, #32]
 8011774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011778:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 801177c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8011780:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8011784:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011788:	edd7 7a07 	vldr	s15, [r7, #28]
 801178c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011790:	edd7 7a06 	vldr	s15, [r7, #24]
 8011794:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	1d1a      	adds	r2, r3, #4
 801179c:	607a      	str	r2, [r7, #4]
 801179e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80117a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80117a6:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 80117aa:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80117ae:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80117b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80117b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80117ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80117be:	edd7 7a04 	vldr	s15, [r7, #16]
 80117c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	1d1a      	adds	r2, r3, #4
 80117ca:	607a      	str	r2, [r7, #4]
 80117cc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80117d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80117d4:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 80117d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117da:	3308      	adds	r3, #8
 80117dc:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 80117de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117e0:	3b08      	subs	r3, #8
 80117e2:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80117e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117e6:	3b01      	subs	r3, #1
 80117e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 80117ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	f73f af7f 	bgt.w	80116f0 <merge_rfft_f32+0x82>
   }

}
 80117f2:	bf00      	nop
 80117f4:	bf00      	nop
 80117f6:	3754      	adds	r7, #84	; 0x54
 80117f8:	46bd      	mov	sp, r7
 80117fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fe:	4770      	bx	lr

08011800 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b086      	sub	sp, #24
 8011804:	af00      	add	r7, sp, #0
 8011806:	60f8      	str	r0, [r7, #12]
 8011808:	60b9      	str	r1, [r7, #8]
 801180a:	607a      	str	r2, [r7, #4]
 801180c:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 8011812:	78fb      	ldrb	r3, [r7, #3]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d00b      	beq.n	8011830 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8011818:	687a      	ldr	r2, [r7, #4]
 801181a:	68b9      	ldr	r1, [r7, #8]
 801181c:	68f8      	ldr	r0, [r7, #12]
 801181e:	f7ff ff26 	bl	801166e <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 8011822:	78fa      	ldrb	r2, [r7, #3]
 8011824:	2301      	movs	r3, #1
 8011826:	6879      	ldr	r1, [r7, #4]
 8011828:	6978      	ldr	r0, [r7, #20]
 801182a:	f7fe fd7b 	bl	8010324 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 801182e:	e00a      	b.n	8011846 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8011830:	78fa      	ldrb	r2, [r7, #3]
 8011832:	2301      	movs	r3, #1
 8011834:	68b9      	ldr	r1, [r7, #8]
 8011836:	6978      	ldr	r0, [r7, #20]
 8011838:	f7fe fd74 	bl	8010324 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 801183c:	687a      	ldr	r2, [r7, #4]
 801183e:	68b9      	ldr	r1, [r7, #8]
 8011840:	68f8      	ldr	r0, [r7, #12]
 8011842:	f7ff fe2f 	bl	80114a4 <stage_rfft_f32>
}
 8011846:	bf00      	nop
 8011848:	3718      	adds	r7, #24
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}

0801184e <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
 801184e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011850:	b093      	sub	sp, #76	; 0x4c
 8011852:	af0a      	add	r7, sp, #40	; 0x28
 8011854:	6178      	str	r0, [r7, #20]
 8011856:	6139      	str	r1, [r7, #16]
 8011858:	60fa      	str	r2, [r7, #12]
 801185a:	60bb      	str	r3, [r7, #8]
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 801185c:	68bb      	ldr	r3, [r7, #8]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	61fb      	str	r3, [r7, #28]

    while (batch_cnt)
 8011862:	e033      	b.n	80118cc <arm_fully_connected_s8+0x7e>
    {
        arm_nn_vec_mat_mult_t_s8(input,
 8011864:	693b      	ldr	r3, [r7, #16]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	607b      	str	r3, [r7, #4]
 801186a:	693a      	ldr	r2, [r7, #16]
 801186c:	6852      	ldr	r2, [r2, #4]
 801186e:	6939      	ldr	r1, [r7, #16]
 8011870:	6889      	ldr	r1, [r1, #8]
 8011872:	68f8      	ldr	r0, [r7, #12]
 8011874:	6800      	ldr	r0, [r0, #0]
 8011876:	68fc      	ldr	r4, [r7, #12]
 8011878:	6864      	ldr	r4, [r4, #4]
 801187a:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 801187c:	682d      	ldr	r5, [r5, #0]
 801187e:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8011880:	68f6      	ldr	r6, [r6, #12]
 8011882:	693b      	ldr	r3, [r7, #16]
 8011884:	68db      	ldr	r3, [r3, #12]
 8011886:	603b      	str	r3, [r7, #0]
 8011888:	693b      	ldr	r3, [r7, #16]
 801188a:	691b      	ldr	r3, [r3, #16]
 801188c:	9308      	str	r3, [sp, #32]
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	9307      	str	r3, [sp, #28]
 8011892:	9606      	str	r6, [sp, #24]
 8011894:	9505      	str	r5, [sp, #20]
 8011896:	9404      	str	r4, [sp, #16]
 8011898:	9003      	str	r0, [sp, #12]
 801189a:	9102      	str	r1, [sp, #8]
 801189c:	9201      	str	r2, [sp, #4]
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	9300      	str	r3, [sp, #0]
 80118a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80118a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80118a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80118aa:	f000 f822 	bl	80118f2 <arm_nn_vec_mat_mult_t_s8>
                                 quant_params->shift,
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
                                 fc_params->activation.min,
                                 fc_params->activation.max);
        input += filter_dims->n;
 80118ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	461a      	mov	r2, r3
 80118b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b6:	4413      	add	r3, r2
 80118b8:	63bb      	str	r3, [r7, #56]	; 0x38
        output += output_dims->c;
 80118ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118bc:	68db      	ldr	r3, [r3, #12]
 80118be:	461a      	mov	r2, r3
 80118c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118c2:	4413      	add	r3, r2
 80118c4:	653b      	str	r3, [r7, #80]	; 0x50
        batch_cnt--;
 80118c6:	69fb      	ldr	r3, [r7, #28]
 80118c8:	3b01      	subs	r3, #1
 80118ca:	61fb      	str	r3, [r7, #28]
    while (batch_cnt)
 80118cc:	69fb      	ldr	r3, [r7, #28]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d1c8      	bne.n	8011864 <arm_fully_connected_s8+0x16>
    }
    return (ARM_MATH_SUCCESS);
 80118d2:	2300      	movs	r3, #0
}
 80118d4:	4618      	mov	r0, r3
 80118d6:	3724      	adds	r7, #36	; 0x24
 80118d8:	46bd      	mov	sp, r7
 80118da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080118dc <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
 80118dc:	b480      	push	{r7}
 80118de:	b083      	sub	sp, #12
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
    (void)filter_dims;
    return 0;
 80118e4:	2300      	movs	r3, #0
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	370c      	adds	r7, #12
 80118ea:	46bd      	mov	sp, r7
 80118ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f0:	4770      	bx	lr

080118f2 <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 80118f2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80118f6:	f5ad 6dc6 	sub.w	sp, sp, #1584	; 0x630
 80118fa:	af00      	add	r7, sp, #0
 80118fc:	f507 64c6 	add.w	r4, r7, #1584	; 0x630
 8011900:	f2a4 54dc 	subw	r4, r4, #1500	; 0x5dc
 8011904:	6020      	str	r0, [r4, #0]
 8011906:	f507 60c6 	add.w	r0, r7, #1584	; 0x630
 801190a:	f5a0 60bc 	sub.w	r0, r0, #1504	; 0x5e0
 801190e:	6001      	str	r1, [r0, #0]
 8011910:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8011914:	f2a1 51e4 	subw	r1, r1, #1508	; 0x5e4
 8011918:	600a      	str	r2, [r1, #0]
 801191a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801191e:	f5a2 62bd 	sub.w	r2, r2, #1512	; 0x5e8
 8011922:	6013      	str	r3, [r2, #0]
        *dst = MIN(acc_0, activation_max);
        dst++;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 8011924:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8011928:	3b04      	subs	r3, #4
 801192a:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
    const int16_t lhs_offset_s16 = lhs_offset;
 801192e:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8011932:	f8a7 3612 	strh.w	r3, [r7, #1554]	; 0x612
    const int16_t rhs_offset_s16 = rhs_offset;
 8011936:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 801193a:	f8a7 3610 	strh.w	r3, [r7, #1552]	; 0x610

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 801193e:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 8011942:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 8011946:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 801194a:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 801194e:	f8d7 260c 	ldr.w	r2, [r7, #1548]	; 0x60c
 8011952:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8011956:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 801195a:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 801195e:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 8011962:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 8011966:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 801196a:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 801196e:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 8011972:	f8c7 35f8 	str.w	r3, [r7, #1528]	; 0x5f8
 8011976:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 801197a:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 801197e:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 8011982:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8011986:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 801198a:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 801198e:	2300      	movs	r3, #0
 8011990:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 8011994:	f001 bd13 	b.w	80133be <arm_nn_vec_mat_mult_t_s8+0x1acc>
    {
        const q7_t *lhs_ptr = &lhs[0];
 8011998:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801199c:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 80119a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80119a4:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	6013      	str	r3, [r2, #0]
        const q7_t *rhs_ptr = &rhs[0];
 80119ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80119b0:	f2a3 5264 	subw	r2, r3, #1380	; 0x564
 80119b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80119b8:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	6013      	str	r3, [r2, #0]

        q31_t res00 = 0;
 80119c0:	2300      	movs	r3, #0
 80119c2:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        q31_t res01 = 0;
 80119c6:	2300      	movs	r3, #0
 80119c8:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        if (bias)
 80119cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80119d0:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d01b      	beq.n	8011a12 <arm_nn_vec_mat_mult_t_s8+0x120>
        {
            res00 = *bias++;
 80119da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80119de:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80119e2:	6819      	ldr	r1, [r3, #0]
 80119e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80119e8:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 80119ec:	1d0b      	adds	r3, r1, #4
 80119ee:	6013      	str	r3, [r2, #0]
 80119f0:	680b      	ldr	r3, [r1, #0]
 80119f2:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 = *bias++;
 80119f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80119fa:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80119fe:	6819      	ldr	r1, [r3, #0]
 8011a00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a04:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 8011a08:	1d0b      	adds	r3, r1, #4
 8011a0a:	6013      	str	r3, [r2, #0]
 8011a0c:	680b      	ldr	r3, [r1, #0]
 8011a0e:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        }

        int32_t rhs_cols_idx = 0;
 8011a12:	2300      	movs	r3, #0
 8011a14:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620

        q31_t val0, val1, val2, val3, val4, val5;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8011a18:	f001 b9db 	b.w	8012dd2 <arm_nn_vec_mat_mult_t_s8+0x14e0>
 8011a1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a20:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 8011a24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8011a28:	6013      	str	r3, [r2, #0]
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 8011a2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a2e:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	461a      	mov	r2, r3
 8011a3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a3e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8011a42:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8011a44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a48:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	1d1a      	adds	r2, r3, #4
 8011a52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a56:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	601a      	str	r2, [r3, #0]

    return (val);
 8011a5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a62:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8011a66:	681b      	ldr	r3, [r3, #0]
        {
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8011a68:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 8011a6c:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8011a70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a74:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 8011a78:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8011a7c:	6013      	str	r3, [r2, #0]
 8011a7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a82:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8011a86:	6019      	str	r1, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011a88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a8c:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8011a90:	681a      	ldr	r2, [r3, #0]
 8011a92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011a96:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	fa22 f283 	sxtab16	r2, r2, r3
 8011aa0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011aa4:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8011aa8:	601a      	str	r2, [r3, #0]
  return(result);
 8011aaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011aae:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8011ab8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011abc:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8011ac0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8011ac4:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8011ac6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011aca:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	461a      	mov	r2, r3
 8011ad6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ada:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011ade:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8011ae0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ae4:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	1d1a      	adds	r2, r3, #4
 8011aee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011af2:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	601a      	str	r2, [r3, #0]
    return (val);
 8011afa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011afe:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8011b02:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8011b04:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8011b08:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8011b0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b10:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011b14:	601a      	str	r2, [r3, #0]
 8011b16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b1a:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 8011b1e:	2308      	movs	r3, #8
 8011b20:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8011b22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b26:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 8011b2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b2e:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	f003 031f 	and.w	r3, r3, #31
 8011b38:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8011b3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b3e:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d105      	bne.n	8011b54 <arm_nn_vec_mat_mult_t_s8+0x262>
    return op1;
 8011b48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b4c:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011b50:	6819      	ldr	r1, [r3, #0]
 8011b52:	e00b      	b.n	8011b6c <arm_nn_vec_mat_mult_t_s8+0x27a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011b54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b58:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8011b5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b60:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8011b64:	6812      	ldr	r2, [r2, #0]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	fa62 f103 	ror.w	r1, r2, r3
 8011b6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b70:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 8011b74:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8011b78:	6013      	str	r3, [r2, #0]
 8011b7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b7e:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8011b82:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011b84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b88:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8011b8c:	681a      	ldr	r2, [r3, #0]
 8011b8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011b92:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	fa22 f283 	sxtab16	r2, r2, r3
 8011b9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ba0:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8011ba4:	601a      	str	r2, [r3, #0]
  return(result);
 8011ba6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011baa:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 8011bb4:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8011bb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011bbc:	f5a3 723f 	sub.w	r2, r3, #764	; 0x2fc
 8011bc0:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8011bc4:	6013      	str	r3, [r2, #0]
 8011bc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011bca:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8011bce:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011bd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011bd4:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8011bd8:	681a      	ldr	r2, [r3, #0]
 8011bda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011bde:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	fa22 f283 	sxtab16	r2, r2, r3
 8011be8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011bec:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8011bf0:	601a      	str	r2, [r3, #0]
  return(result);
 8011bf2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011bf6:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 8011c00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c04:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8011c08:	681a      	ldr	r2, [r3, #0]
 8011c0a:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8011c0e:	441a      	add	r2, r3
 8011c10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c14:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8011c18:	601a      	str	r2, [r3, #0]
 8011c1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c1e:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	461a      	mov	r2, r3
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
{
    q31_t val;
    memcpy(&val, in_q7, 4);
 8011c28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c2c:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 8011c30:	601a      	str	r2, [r3, #0]

    return (val);
 8011c32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c36:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 8011c40:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8011c44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c48:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8011c4c:	601a      	str	r2, [r3, #0]
 8011c4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c52:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 8011c56:	2308      	movs	r3, #8
 8011c58:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8011c5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c5e:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 8011c62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c66:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	f003 031f 	and.w	r3, r3, #31
 8011c70:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8011c72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c76:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d105      	bne.n	8011c8c <arm_nn_vec_mat_mult_t_s8+0x39a>
    return op1;
 8011c80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c84:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8011c88:	6819      	ldr	r1, [r3, #0]
 8011c8a:	e00b      	b.n	8011ca4 <arm_nn_vec_mat_mult_t_s8+0x3b2>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011c8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c90:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8011c94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011c98:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8011c9c:	6812      	ldr	r2, [r2, #0]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	fa62 f103 	ror.w	r1, r2, r3
 8011ca4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ca8:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8011cac:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8011cb0:	6013      	str	r3, [r2, #0]
 8011cb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011cb6:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8011cba:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011cbc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011cc0:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8011cc4:	681a      	ldr	r2, [r3, #0]
 8011cc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011cca:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	fa22 f283 	sxtab16	r2, r2, r3
 8011cd4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011cd8:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8011cdc:	601a      	str	r2, [r3, #0]
  return(result);
 8011cde:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ce2:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 8011cec:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8011cf0:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8011cf4:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8011cf8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011cfc:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8011d00:	601a      	str	r2, [r3, #0]
 8011d02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d06:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8011d0a:	6019      	str	r1, [r3, #0]
 8011d0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d10:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8011d14:	6018      	str	r0, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011d16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d1a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8011d1e:	6819      	ldr	r1, [r3, #0]
 8011d20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d24:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8011d28:	681a      	ldr	r2, [r3, #0]
 8011d2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d2e:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	fb21 3202 	smlad	r2, r1, r2, r3
 8011d38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d3c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8011d40:	601a      	str	r2, [r3, #0]
  return(result);
 8011d42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d46:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 8011d50:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8011d54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d58:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8011d5c:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8011d60:	6013      	str	r3, [r2, #0]
 8011d62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d66:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8011d6a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011d6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d70:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8011d74:	681a      	ldr	r2, [r3, #0]
 8011d76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d7a:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	fa22 f283 	sxtab16	r2, r2, r3
 8011d84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d88:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8011d8c:	601a      	str	r2, [r3, #0]
  return(result);
 8011d8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011d92:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 8011d9c:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8011da0:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8011da4:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8011da8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011dac:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8011db0:	601a      	str	r2, [r3, #0]
 8011db2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011db6:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8011dba:	6019      	str	r1, [r3, #0]
 8011dbc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011dc0:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8011dc4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011dc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011dca:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8011dce:	6819      	ldr	r1, [r3, #0]
 8011dd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011dd4:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8011dd8:	681a      	ldr	r2, [r3, #0]
 8011dda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011dde:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	fb21 3202 	smlad	r2, r1, r2, r3
 8011de8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011dec:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8011df0:	601a      	str	r2, [r3, #0]
  return(result);
 8011df2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011df6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 8011e00:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8011e04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e08:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8011e0c:	601a      	str	r2, [r3, #0]
 8011e0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e12:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8011e16:	2308      	movs	r3, #8
 8011e18:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8011e1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e1e:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8011e22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e26:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	f003 031f 	and.w	r3, r3, #31
 8011e30:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8011e32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e36:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d105      	bne.n	8011e4c <arm_nn_vec_mat_mult_t_s8+0x55a>
    return op1;
 8011e40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e44:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8011e48:	6819      	ldr	r1, [r3, #0]
 8011e4a:	e00b      	b.n	8011e64 <arm_nn_vec_mat_mult_t_s8+0x572>
  return (op1 >> op2) | (op1 << (32U - op2));
 8011e4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e50:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 8011e54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e58:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8011e5c:	6812      	ldr	r2, [r2, #0]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	fa62 f103 	ror.w	r1, r2, r3
 8011e64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e68:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8011e6c:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8011e70:	6013      	str	r3, [r2, #0]
 8011e72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e76:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8011e7a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011e7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e80:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8011e84:	681a      	ldr	r2, [r3, #0]
 8011e86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e8a:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	fa22 f283 	sxtab16	r2, r2, r3
 8011e94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011e98:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8011e9c:	601a      	str	r2, [r3, #0]
  return(result);
 8011e9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ea2:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8011eac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011eb0:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8011eb4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8011eb8:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8011eba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ebe:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	461a      	mov	r2, r3
 8011eca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ece:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 8011ed2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8011ed4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ed8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	1d1a      	adds	r2, r3, #4
 8011ee2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ee6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	601a      	str	r2, [r3, #0]
    return (val);
 8011eee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ef2:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 8011ef6:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8011ef8:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 8011efc:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8011f00:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8011f04:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8011f08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f0c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011f10:	601a      	str	r2, [r3, #0]
 8011f12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f16:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8011f1a:	6019      	str	r1, [r3, #0]
 8011f1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f20:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8011f24:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011f26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f2a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011f2e:	6819      	ldr	r1, [r3, #0]
 8011f30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f34:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8011f38:	681a      	ldr	r2, [r3, #0]
 8011f3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f3e:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	fb21 3202 	smlad	r2, r1, r2, r3
 8011f48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f4c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8011f50:	601a      	str	r2, [r3, #0]
  return(result);
 8011f52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f56:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 8011f60:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8011f64:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8011f68:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8011f6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f70:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8011f74:	601a      	str	r2, [r3, #0]
 8011f76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f7a:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8011f7e:	6019      	str	r1, [r3, #0]
 8011f80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f84:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8011f88:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8011f8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f8e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8011f92:	6819      	ldr	r1, [r3, #0]
 8011f94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011f98:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8011f9c:	681a      	ldr	r2, [r3, #0]
 8011f9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011fa2:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	fb21 3202 	smlad	r2, r1, r2, r3
 8011fac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011fb0:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8011fb4:	601a      	str	r2, [r3, #0]
  return(result);
 8011fb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011fba:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 8011fc4:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8011fc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011fcc:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 8011fd0:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8011fd4:	6013      	str	r3, [r2, #0]
 8011fd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011fda:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8011fde:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011fe0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011fe4:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8011fe8:	681a      	ldr	r2, [r3, #0]
 8011fea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011fee:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	fa22 f283 	sxtab16	r2, r2, r3
 8011ff8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8011ffc:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8012000:	601a      	str	r2, [r3, #0]
  return(result);
 8012002:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012006:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8012010:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012014:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 8012018:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801201c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801201e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012022:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	461a      	mov	r2, r3
 801202e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012032:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 8012036:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012038:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801203c:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	1d1a      	adds	r2, r3, #4
 8012046:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801204a:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	601a      	str	r2, [r3, #0]
    return (val);
 8012052:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012056:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 801205a:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801205c:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8012060:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8012064:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012068:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801206c:	601a      	str	r2, [r3, #0]
 801206e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012072:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8012076:	2308      	movs	r3, #8
 8012078:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801207a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801207e:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8012082:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012086:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	f003 031f 	and.w	r3, r3, #31
 8012090:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8012092:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012096:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d105      	bne.n	80120ac <arm_nn_vec_mat_mult_t_s8+0x7ba>
    return op1;
 80120a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120a4:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80120a8:	6819      	ldr	r1, [r3, #0]
 80120aa:	e00b      	b.n	80120c4 <arm_nn_vec_mat_mult_t_s8+0x7d2>
  return (op1 >> op2) | (op1 << (32U - op2));
 80120ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120b0:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 80120b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120b8:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80120bc:	6812      	ldr	r2, [r2, #0]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	fa62 f103 	ror.w	r1, r2, r3
 80120c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120c8:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 80120cc:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80120d0:	6013      	str	r3, [r2, #0]
 80120d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120d6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80120da:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80120dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120e0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80120e4:	681a      	ldr	r2, [r3, #0]
 80120e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120ea:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	fa22 f283 	sxtab16	r2, r2, r3
 80120f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80120f8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80120fc:	601a      	str	r2, [r3, #0]
  return(result);
 80120fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012102:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 801210c:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8012110:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012114:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8012118:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 801211c:	6013      	str	r3, [r2, #0]
 801211e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012122:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8012126:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012128:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801212c:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8012130:	681a      	ldr	r2, [r3, #0]
 8012132:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012136:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	fa22 f283 	sxtab16	r2, r2, r3
 8012140:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012144:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8012148:	601a      	str	r2, [r3, #0]
  return(result);
 801214a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801214e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 8012158:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801215c:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8012160:	681a      	ldr	r2, [r3, #0]
 8012162:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8012166:	441a      	add	r2, r3
 8012168:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801216c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8012170:	601a      	str	r2, [r3, #0]
 8012172:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012176:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8012180:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012184:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 8012188:	601a      	str	r2, [r3, #0]
    return (val);
 801218a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801218e:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 8012198:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 801219c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80121a0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80121a4:	601a      	str	r2, [r3, #0]
 80121a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80121aa:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 80121ae:	2308      	movs	r3, #8
 80121b0:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80121b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80121b6:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 80121ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80121be:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	f003 031f 	and.w	r3, r3, #31
 80121c8:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80121ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80121ce:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d105      	bne.n	80121e4 <arm_nn_vec_mat_mult_t_s8+0x8f2>
    return op1;
 80121d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80121dc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80121e0:	6819      	ldr	r1, [r3, #0]
 80121e2:	e00b      	b.n	80121fc <arm_nn_vec_mat_mult_t_s8+0x90a>
  return (op1 >> op2) | (op1 << (32U - op2));
 80121e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80121e8:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 80121ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80121f0:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80121f4:	6812      	ldr	r2, [r2, #0]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	fa62 f103 	ror.w	r1, r2, r3
 80121fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012200:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 8012204:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012208:	6013      	str	r3, [r2, #0]
 801220a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801220e:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8012212:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012214:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012218:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801221c:	681a      	ldr	r2, [r3, #0]
 801221e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012222:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	fa22 f283 	sxtab16	r2, r2, r3
 801222c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012230:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8012234:	601a      	str	r2, [r3, #0]
  return(result);
 8012236:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801223a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 8012244:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8012248:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 801224c:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8012250:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012254:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8012258:	601a      	str	r2, [r3, #0]
 801225a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801225e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8012262:	6019      	str	r1, [r3, #0]
 8012264:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012268:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801226c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801226e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012272:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8012276:	6819      	ldr	r1, [r3, #0]
 8012278:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801227c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8012280:	681a      	ldr	r2, [r3, #0]
 8012282:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012286:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	fb21 3202 	smlad	r2, r1, r2, r3
 8012290:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012294:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8012298:	601a      	str	r2, [r3, #0]
  return(result);
 801229a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801229e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 80122a8:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 80122ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122b0:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 80122b4:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80122b8:	6013      	str	r3, [r2, #0]
 80122ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122be:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80122c2:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80122c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122c8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80122cc:	681a      	ldr	r2, [r3, #0]
 80122ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122d2:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	fa22 f283 	sxtab16	r2, r2, r3
 80122dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122e0:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80122e4:	601a      	str	r2, [r3, #0]
  return(result);
 80122e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80122ea:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 80122f4:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 80122f8:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 80122fc:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8012300:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012304:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012308:	601a      	str	r2, [r3, #0]
 801230a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801230e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012312:	6019      	str	r1, [r3, #0]
 8012314:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012318:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801231c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801231e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012322:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8012326:	6819      	ldr	r1, [r3, #0]
 8012328:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801232c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8012330:	681a      	ldr	r2, [r3, #0]
 8012332:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012336:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	fb21 3202 	smlad	r2, r1, r2, r3
 8012340:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012344:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8012348:	601a      	str	r2, [r3, #0]
  return(result);
 801234a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801234e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 8012358:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 801235c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012360:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8012364:	601a      	str	r2, [r3, #0]
 8012366:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801236a:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 801236e:	2308      	movs	r3, #8
 8012370:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8012372:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012376:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 801237a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801237e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	f003 031f 	and.w	r3, r3, #31
 8012388:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801238a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801238e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d105      	bne.n	80123a4 <arm_nn_vec_mat_mult_t_s8+0xab2>
    return op1;
 8012398:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801239c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80123a0:	6819      	ldr	r1, [r3, #0]
 80123a2:	e00b      	b.n	80123bc <arm_nn_vec_mat_mult_t_s8+0xaca>
  return (op1 >> op2) | (op1 << (32U - op2));
 80123a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123a8:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 80123ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123b0:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80123b4:	6812      	ldr	r2, [r2, #0]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	fa62 f103 	ror.w	r1, r2, r3
 80123bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123c0:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 80123c4:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 80123c8:	6013      	str	r3, [r2, #0]
 80123ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80123d2:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80123d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123d8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80123dc:	681a      	ldr	r2, [r3, #0]
 80123de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	fa22 f283 	sxtab16	r2, r2, r3
 80123ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123f0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80123f4:	601a      	str	r2, [r3, #0]
  return(result);
 80123f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80123fa:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8012404:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012408:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 801240c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012410:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8012412:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012416:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	461a      	mov	r2, r3
 8012422:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012426:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 801242a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801242c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012430:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	1d1a      	adds	r2, r3, #4
 801243a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801243e:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	601a      	str	r2, [r3, #0]
    return (val);
 8012446:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801244a:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 801244e:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8012450:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 8012454:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 8012458:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 801245c:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8012460:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012464:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8012468:	601a      	str	r2, [r3, #0]
 801246a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801246e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8012472:	6019      	str	r1, [r3, #0]
 8012474:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012478:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801247c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801247e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012482:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8012486:	6819      	ldr	r1, [r3, #0]
 8012488:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801248c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8012490:	681a      	ldr	r2, [r3, #0]
 8012492:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012496:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	fb21 3202 	smlad	r2, r1, r2, r3
 80124a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124a4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80124a8:	601a      	str	r2, [r3, #0]
  return(result);
 80124aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124ae:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 80124b8:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 80124bc:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 80124c0:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 80124c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124c8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80124cc:	601a      	str	r2, [r3, #0]
 80124ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124d2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80124d6:	6019      	str	r1, [r3, #0]
 80124d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124dc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80124e0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80124e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124e6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80124ea:	6819      	ldr	r1, [r3, #0]
 80124ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124f0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80124f4:	681a      	ldr	r2, [r3, #0]
 80124f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80124fa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	fb21 3202 	smlad	r2, r1, r2, r3
 8012504:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012508:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801250c:	601a      	str	r2, [r3, #0]
  return(result);
 801250e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012512:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 801251c:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8012520:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012524:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 8012528:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 801252c:	6013      	str	r3, [r2, #0]
 801252e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012532:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8012536:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012538:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801253c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8012540:	681a      	ldr	r2, [r3, #0]
 8012542:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012546:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	fa22 f283 	sxtab16	r2, r2, r3
 8012550:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012554:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8012558:	601a      	str	r2, [r3, #0]
  return(result);
 801255a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801255e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8012568:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801256c:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8012570:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8012574:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8012576:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801257a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	461a      	mov	r2, r3
 8012586:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801258a:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 801258e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012590:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012594:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	1d1a      	adds	r2, r3, #4
 801259e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125a2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	601a      	str	r2, [r3, #0]
    return (val);
 80125aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125ae:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 80125b2:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 80125b4:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 80125b8:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 80125bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125c0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80125c4:	601a      	str	r2, [r3, #0]
 80125c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125ca:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 80125ce:	2308      	movs	r3, #8
 80125d0:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80125d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125d6:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 80125da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125de:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	f003 031f 	and.w	r3, r3, #31
 80125e8:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80125ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125ee:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d105      	bne.n	8012604 <arm_nn_vec_mat_mult_t_s8+0xd12>
    return op1;
 80125f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80125fc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8012600:	6819      	ldr	r1, [r3, #0]
 8012602:	e00b      	b.n	801261c <arm_nn_vec_mat_mult_t_s8+0xd2a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012604:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012608:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 801260c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012610:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8012614:	6812      	ldr	r2, [r2, #0]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	fa62 f103 	ror.w	r1, r2, r3
 801261c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012620:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 8012624:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012628:	6013      	str	r3, [r2, #0]
 801262a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801262e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8012632:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012634:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012638:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 801263c:	681a      	ldr	r2, [r3, #0]
 801263e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012642:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	fa22 f283 	sxtab16	r2, r2, r3
 801264c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012650:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8012654:	601a      	str	r2, [r3, #0]
  return(result);
 8012656:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801265a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 8012664:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8012668:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801266c:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8012670:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012674:	6013      	str	r3, [r2, #0]
 8012676:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801267a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801267e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012680:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012684:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8012688:	681a      	ldr	r2, [r3, #0]
 801268a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801268e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	fa22 f283 	sxtab16	r2, r2, r3
 8012698:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801269c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80126a0:	601a      	str	r2, [r3, #0]
  return(result);
 80126a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126a6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 80126b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126b4:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 80126b8:	681a      	ldr	r2, [r3, #0]
 80126ba:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 80126be:	441a      	add	r2, r3
 80126c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126c4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80126c8:	601a      	str	r2, [r3, #0]
 80126ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126ce:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 80126d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126dc:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 80126e0:	601a      	str	r2, [r3, #0]
    return (val);
 80126e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126e6:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 80126f0:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 80126f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80126f8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80126fc:	601a      	str	r2, [r3, #0]
 80126fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012702:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8012706:	2308      	movs	r3, #8
 8012708:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801270a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801270e:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8012712:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012716:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	f003 031f 	and.w	r3, r3, #31
 8012720:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8012722:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012726:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d105      	bne.n	801273c <arm_nn_vec_mat_mult_t_s8+0xe4a>
    return op1;
 8012730:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012734:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8012738:	6819      	ldr	r1, [r3, #0]
 801273a:	e00b      	b.n	8012754 <arm_nn_vec_mat_mult_t_s8+0xe62>
  return (op1 >> op2) | (op1 << (32U - op2));
 801273c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012740:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 8012744:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012748:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801274c:	6812      	ldr	r2, [r2, #0]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	fa62 f103 	ror.w	r1, r2, r3
 8012754:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012758:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 801275c:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012760:	6013      	str	r3, [r2, #0]
 8012762:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012766:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801276a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801276c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012770:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8012774:	681a      	ldr	r2, [r3, #0]
 8012776:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801277a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	fa22 f283 	sxtab16	r2, r2, r3
 8012784:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012788:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 801278c:	601a      	str	r2, [r3, #0]
  return(result);
 801278e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012792:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 801279c:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 80127a0:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 80127a4:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 80127a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127ac:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80127b0:	601a      	str	r2, [r3, #0]
 80127b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127b6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80127ba:	6019      	str	r1, [r3, #0]
 80127bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127c0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80127c4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80127c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127ca:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80127ce:	6819      	ldr	r1, [r3, #0]
 80127d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127d4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80127d8:	681a      	ldr	r2, [r3, #0]
 80127da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127de:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	fb21 3202 	smlad	r2, r1, r2, r3
 80127e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127ec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80127f0:	601a      	str	r2, [r3, #0]
  return(result);
 80127f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80127f6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 8012800:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8012804:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012808:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 801280c:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012810:	6013      	str	r3, [r2, #0]
 8012812:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012816:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801281a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801281c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012820:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8012824:	681a      	ldr	r2, [r3, #0]
 8012826:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801282a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	fa22 f283 	sxtab16	r2, r2, r3
 8012834:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012838:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 801283c:	601a      	str	r2, [r3, #0]
  return(result);
 801283e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012842:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 801284c:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8012850:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8012854:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 8012858:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801285c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8012860:	601a      	str	r2, [r3, #0]
 8012862:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012866:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801286a:	6019      	str	r1, [r3, #0]
 801286c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012870:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8012874:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012876:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801287a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801287e:	6819      	ldr	r1, [r3, #0]
 8012880:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012884:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8012888:	681a      	ldr	r2, [r3, #0]
 801288a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801288e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	fb21 3202 	smlad	r2, r1, r2, r3
 8012898:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801289c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80128a0:	601a      	str	r2, [r3, #0]
  return(result);
 80128a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128a6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 80128b0:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 80128b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128b8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80128bc:	601a      	str	r2, [r3, #0]
 80128be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128c2:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 80128c6:	2308      	movs	r3, #8
 80128c8:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 80128ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128ce:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 80128d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128d6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	f003 031f 	and.w	r3, r3, #31
 80128e0:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80128e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128e6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d105      	bne.n	80128fc <arm_nn_vec_mat_mult_t_s8+0x100a>
    return op1;
 80128f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80128f4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80128f8:	6819      	ldr	r1, [r3, #0]
 80128fa:	e00b      	b.n	8012914 <arm_nn_vec_mat_mult_t_s8+0x1022>
  return (op1 >> op2) | (op1 << (32U - op2));
 80128fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012900:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 8012904:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012908:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801290c:	6812      	ldr	r2, [r2, #0]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	fa62 f103 	ror.w	r1, r2, r3
 8012914:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012918:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 801291c:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012920:	6013      	str	r3, [r2, #0]
 8012922:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012926:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801292a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801292c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012930:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8012934:	681a      	ldr	r2, [r3, #0]
 8012936:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801293a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	fa22 f283 	sxtab16	r2, r2, r3
 8012944:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012948:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801294c:	601a      	str	r2, [r3, #0]
  return(result);
 801294e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012952:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 801295c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012960:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8012964:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012968:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801296a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801296e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	461a      	mov	r2, r3
 801297a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801297e:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 8012982:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012984:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012988:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	1d1a      	adds	r2, r3, #4
 8012992:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012996:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	601a      	str	r2, [r3, #0]
    return (val);
 801299e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129a2:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 80129a6:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80129a8:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 80129ac:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 80129b0:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 80129b4:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 80129b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129bc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80129c0:	601a      	str	r2, [r3, #0]
 80129c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129c6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80129ca:	6019      	str	r1, [r3, #0]
 80129cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80129d4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80129d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80129de:	6819      	ldr	r1, [r3, #0]
 80129e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80129e8:	681a      	ldr	r2, [r3, #0]
 80129ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129ee:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	fb21 3202 	smlad	r2, r1, r2, r3
 80129f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80129fc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8012a00:	601a      	str	r2, [r3, #0]
  return(result);
 8012a02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a06:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 8012a10:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8012a14:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 8012a18:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 8012a1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a20:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8012a24:	601a      	str	r2, [r3, #0]
 8012a26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012a2e:	6019      	str	r1, [r3, #0]
 8012a30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8012a38:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012a3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a3e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8012a42:	6819      	ldr	r1, [r3, #0]
 8012a44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012a4c:	681a      	ldr	r2, [r3, #0]
 8012a4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	fb21 3202 	smlad	r2, r1, r2, r3
 8012a5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a60:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8012a64:	601a      	str	r2, [r3, #0]
  return(result);
 8012a66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a6a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 8012a74:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8012a78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a7c:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8012a80:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012a84:	6013      	str	r3, [r2, #0]
 8012a86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012a8e:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012a90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a94:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8012a98:	681a      	ldr	r2, [r3, #0]
 8012a9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012a9e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	fa22 f283 	sxtab16	r2, r2, r3
 8012aa8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012aac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8012ab0:	601a      	str	r2, [r3, #0]
  return(result);
 8012ab2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ab6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8012ac0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ac4:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8012ac8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8012acc:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 8012ace:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ad2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	461a      	mov	r2, r3
 8012ade:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ae2:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 8012ae6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8012ae8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012aec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	1d1a      	adds	r2, r3, #4
 8012af6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012afa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	601a      	str	r2, [r3, #0]
    return (val);
 8012b02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b06:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 8012b0a:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8012b0c:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8012b10:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8012b14:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012b1c:	601a      	str	r2, [r3, #0]
 8012b1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b22:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8012b26:	2308      	movs	r3, #8
 8012b28:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8012b2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b2e:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8012b32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	f003 031f 	and.w	r3, r3, #31
 8012b40:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8012b42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b46:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d105      	bne.n	8012b5c <arm_nn_vec_mat_mult_t_s8+0x126a>
    return op1;
 8012b50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b54:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012b58:	6819      	ldr	r1, [r3, #0]
 8012b5a:	e00b      	b.n	8012b74 <arm_nn_vec_mat_mult_t_s8+0x1282>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012b5c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b60:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8012b64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b68:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012b6c:	6812      	ldr	r2, [r2, #0]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	fa62 f103 	ror.w	r1, r2, r3
 8012b74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b78:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8012b7c:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012b80:	6013      	str	r3, [r2, #0]
 8012b82:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b8a:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012b8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b94:	681a      	ldr	r2, [r3, #0]
 8012b96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	fa22 f283 	sxtab16	r2, r2, r3
 8012ba4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ba8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012bac:	601a      	str	r2, [r3, #0]
  return(result);
 8012bae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012bb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 8012bbc:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 8012bc0:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012bc4:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 8012bc8:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012bcc:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
 8012bd0:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8012bd4:	fa22 f283 	sxtab16	r2, r2, r3
 8012bd8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012bdc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012be0:	601a      	str	r2, [r3, #0]
  return(result);
 8012be2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012be6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 8012bf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012bf4:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8012bf8:	681a      	ldr	r2, [r3, #0]
 8012bfa:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8012bfe:	4413      	add	r3, r2
 8012c00:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8012c04:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8012c0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c10:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8012c14:	601a      	str	r2, [r3, #0]
    return (val);
 8012c16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012c1a:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 8012c24:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 8012c28:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8012c2c:	2308      	movs	r3, #8
 8012c2e:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  op2 %= 32U;
 8012c32:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8012c36:	f003 031f 	and.w	r3, r3, #31
 8012c3a:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  if (op2 == 0U)
 8012c3e:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d102      	bne.n	8012c4c <arm_nn_vec_mat_mult_t_s8+0x135a>
    return op1;
 8012c46:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8012c4a:	e004      	b.n	8012c56 <arm_nn_vec_mat_mult_t_s8+0x1364>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012c4c:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8012c50:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8012c54:	41da      	rors	r2, r3
 8012c56:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8012c5a:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 8012c5e:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012c62:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 8012c66:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8012c6a:	fa22 f383 	sxtab16	r3, r2, r3
 8012c6e:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
  return(result);
 8012c72:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8012c76:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 8012c7a:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8012c7e:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	; 0x5c4
 8012c82:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8012c86:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 8012c8a:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 8012c8e:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012c92:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 8012c96:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8012c9a:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8012c9e:	fb21 3302 	smlad	r3, r1, r2, r3
 8012ca2:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
  return(result);
 8012ca6:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 8012caa:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 8012cae:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8012cb2:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012cb6:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8012cba:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012cbe:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 8012cc2:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8012cc6:	fa22 f383 	sxtab16	r3, r2, r3
 8012cca:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
  return(result);
 8012cce:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8012cd2:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 8012cd6:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8012cda:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 8012cde:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8012ce2:	f8c7 157c 	str.w	r1, [r7, #1404]	; 0x57c
 8012ce6:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8012cea:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012cee:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8012cf2:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8012cf6:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8012cfa:	fb21 3302 	smlad	r3, r1, r2, r3
 8012cfe:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
  return(result);
 8012d02:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8012d06:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 8012d0a:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 8012d0e:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8012d12:	2308      	movs	r3, #8
 8012d14:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  op2 %= 32U;
 8012d18:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8012d1c:	f003 031f 	and.w	r3, r3, #31
 8012d20:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  if (op2 == 0U)
 8012d24:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d102      	bne.n	8012d32 <arm_nn_vec_mat_mult_t_s8+0x1440>
    return op1;
 8012d2c:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 8012d30:	e004      	b.n	8012d3c <arm_nn_vec_mat_mult_t_s8+0x144a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8012d32:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 8012d36:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8012d3a:	41da      	rors	r2, r3
 8012d3c:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 8012d40:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 8012d44:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012d48:	f8d7 2590 	ldr.w	r2, [r7, #1424]	; 0x590
 8012d4c:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8012d50:	fa22 f383 	sxtab16	r3, r2, r3
 8012d54:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
  return(result);
 8012d58:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8012d5c:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            res01 = __SMLAD(val3, val5, res01);
 8012d60:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8012d64:	f8d7 25b4 	ldr.w	r2, [r7, #1460]	; 0x5b4
 8012d68:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8012d6c:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 8012d70:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
 8012d74:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012d78:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 8012d7c:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 8012d80:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 8012d84:	fb21 3302 	smlad	r3, r1, r2, r3
 8012d88:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
  return(result);
 8012d8c:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8012d90:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 8012d94:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8012d98:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 8012d9c:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8012da0:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 8012da4:	f8c7 25ac 	str.w	r2, [r7, #1452]	; 0x5ac
 8012da8:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8012dac:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 8012db0:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 8012db4:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8012db8:	fb21 3302 	smlad	r3, r1, r2, r3
 8012dbc:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
  return(result);
 8012dc0:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8012dc4:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 8012dc8:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8012dcc:	3310      	adds	r3, #16
 8012dce:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 8012dd2:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8012dd6:	f1a3 020f 	sub.w	r2, r3, #15
 8012dda:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8012dde:	4293      	cmp	r3, r2
 8012de0:	f6fe ae1c 	blt.w	8011a1c <arm_nn_vec_mat_mult_t_s8+0x12a>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8012de4:	e05a      	b.n	8012e9c <arm_nn_vec_mat_mult_t_s8+0x15aa>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 8012de6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012dea:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	f993 3000 	ldrsb.w	r3, [r3]
 8012df4:	461a      	mov	r2, r3
 8012df6:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8012dfa:	4413      	add	r3, r2
 8012dfc:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 8012e00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e04:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8012e08:	681a      	ldr	r2, [r3, #0]
 8012e0a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8012e0e:	4413      	add	r3, r2
 8012e10:	f993 3000 	ldrsb.w	r3, [r3]
 8012e14:	461a      	mov	r2, r3
 8012e16:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 8012e1a:	4413      	add	r3, r2
 8012e1c:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 8012e20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e24:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	f993 3000 	ldrsb.w	r3, [r3]
 8012e2e:	461a      	mov	r2, r3
 8012e30:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8012e34:	4413      	add	r3, r2
 8012e36:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc

            res00 += lhs_value * rhs_value0;
 8012e3a:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 8012e3e:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 8012e42:	fb03 f202 	mul.w	r2, r3, r2
 8012e46:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8012e4a:	4413      	add	r3, r2
 8012e4c:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 += lhs_value * rhs_value1;
 8012e50:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 8012e54:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 8012e58:	fb03 f202 	mul.w	r2, r3, r2
 8012e5c:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8012e60:	4413      	add	r3, r2
 8012e62:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            ++rhs_ptr;
 8012e66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e6a:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	1c5a      	adds	r2, r3, #1
 8012e72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e76:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 8012e7a:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 8012e7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e80:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	1c5a      	adds	r2, r3, #1
 8012e88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012e8c:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8012e90:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8012e92:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 8012e96:	3301      	adds	r3, #1
 8012e98:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 8012e9c:	f8d7 2620 	ldr.w	r2, [r7, #1568]	; 0x620
 8012ea0:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8012ea4:	429a      	cmp	r2, r3
 8012ea6:	db9e      	blt.n	8012de6 <arm_nn_vec_mat_mult_t_s8+0x14f4>
 8012ea8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012eac:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8012eb0:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8012eb4:	6013      	str	r3, [r2, #0]
 8012eb6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012eba:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 8012ebe:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 8012ec2:	6013      	str	r3, [r2, #0]
 8012ec4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ec8:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 8012ecc:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 8012ed0:	6013      	str	r3, [r2, #0]
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8012ed2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ed6:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8012ee0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ee4:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	fa03 f202 	lsl.w	r2, r3, r2
 8012eee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ef2:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8012ef6:	601a      	str	r2, [r3, #0]
 8012ef8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012efc:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8012f00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f04:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8012f0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f10:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 8012f14:	2300      	movs	r3, #0
 8012f16:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8012f18:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012f1c:	461a      	mov	r2, r3
 8012f1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012f22:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8012f24:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012f28:	461a      	mov	r2, r3
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8012f2e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012f32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012f36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f3a:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	17da      	asrs	r2, r3, #31
 8012f42:	633b      	str	r3, [r7, #48]	; 0x30
 8012f44:	637a      	str	r2, [r7, #52]	; 0x34
 8012f46:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012f4a:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	17da      	asrs	r2, r3, #31
 8012f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8012f54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f5a:	fb02 f203 	mul.w	r2, r2, r3
 8012f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f60:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8012f62:	fb04 f303 	mul.w	r3, r4, r3
 8012f66:	4413      	add	r3, r2
 8012f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f6a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8012f6c:	fba2 5604 	umull	r5, r6, r2, r4
 8012f70:	4433      	add	r3, r6
 8012f72:	461e      	mov	r6, r3
 8012f74:	1943      	adds	r3, r0, r5
 8012f76:	61bb      	str	r3, [r7, #24]
 8012f78:	eb41 0306 	adc.w	r3, r1, r6
 8012f7c:	61fb      	str	r3, [r7, #28]
 8012f7e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012f82:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8012f86:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 8012f8a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8012f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f92:	f04f 0000 	mov.w	r0, #0
 8012f96:	f04f 0100 	mov.w	r1, #0
 8012f9a:	0fd0      	lsrs	r0, r2, #31
 8012f9c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8012fa0:	17d9      	asrs	r1, r3, #31
 8012fa2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fa6:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 8012faa:	4603      	mov	r3, r0
 8012fac:	6013      	str	r3, [r2, #0]
    return result;
 8012fae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fb2:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8012fb6:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8012fb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fbc:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	dc06      	bgt.n	8012fd4 <arm_nn_vec_mat_mult_t_s8+0x16e2>
 8012fc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fca:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	425a      	negs	r2, r3
 8012fd2:	e000      	b.n	8012fd6 <arm_nn_vec_mat_mult_t_s8+0x16e4>
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fda:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8012fde:	6019      	str	r1, [r3, #0]
 8012fe0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fe4:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8012fe8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8012fea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012fee:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8012ff6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8012ffa:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8012ffe:	2201      	movs	r2, #1
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	fa02 f103 	lsl.w	r1, r2, r3
 8013006:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801300a:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 801300e:	1e4b      	subs	r3, r1, #1
 8013010:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8013012:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013016:	f5a3 7162 	sub.w	r1, r3, #904	; 0x388
 801301a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801301e:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 8013022:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013026:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 801302a:	6812      	ldr	r2, [r2, #0]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	4013      	ands	r3, r2
 8013030:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8013032:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013036:	f5a3 7160 	sub.w	r1, r3, #896	; 0x380
 801303a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801303e:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 8013042:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013046:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 801304a:	6812      	ldr	r2, [r2, #0]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	fa42 f303 	asr.w	r3, r2, r3
 8013052:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8013054:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013058:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 801305c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013060:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	105b      	asrs	r3, r3, #1
 8013068:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801306a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801306e:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	2b00      	cmp	r3, #0
 8013076:	da0a      	bge.n	801308e <arm_nn_vec_mat_mult_t_s8+0x179c>
        threshold++;
 8013078:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801307c:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8013080:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013084:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	3301      	adds	r3, #1
 801308c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801308e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013092:	f5a3 7262 	sub.w	r2, r3, #904	; 0x388
 8013096:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801309a:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 801309e:	6812      	ldr	r2, [r2, #0]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	429a      	cmp	r2, r3
 80130a4:	dd0a      	ble.n	80130bc <arm_nn_vec_mat_mult_t_s8+0x17ca>
        result++;
 80130a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130aa:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 80130ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130b2:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	3301      	adds	r3, #1
 80130ba:	6013      	str	r3, [r2, #0]
    return result;
 80130bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130c0:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80130c4:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80130c6:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 80130c8:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
 80130cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130d0:	f5a3 724c 	sub.w	r2, r3, #816	; 0x330
 80130d4:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 80130d8:	6013      	str	r3, [r2, #0]
 80130da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130de:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80130e2:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 80130e6:	6013      	str	r3, [r2, #0]
 80130e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130ec:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 80130f0:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 80130f4:	6013      	str	r3, [r2, #0]
 80130f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80130fa:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8013104:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013108:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	fa03 f202 	lsl.w	r2, r3, r2
 8013112:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013116:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 801311a:	601a      	str	r2, [r3, #0]
 801311c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013120:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 8013124:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013128:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8013130:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013134:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8013138:	2300      	movs	r3, #0
 801313a:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801313c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013140:	461a      	mov	r2, r3
 8013142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013146:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 801314a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801314e:	461a      	mov	r2, r3
 8013150:	2300      	movs	r3, #0
 8013152:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8013156:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801315a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801315e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013162:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	17da      	asrs	r2, r3, #31
 801316a:	643b      	str	r3, [r7, #64]	; 0x40
 801316c:	647a      	str	r2, [r7, #68]	; 0x44
 801316e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013172:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	17da      	asrs	r2, r3, #31
 801317a:	63bb      	str	r3, [r7, #56]	; 0x38
 801317c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801317e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013182:	fb02 f203 	mul.w	r2, r2, r3
 8013186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013188:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801318a:	fb04 f303 	mul.w	r3, r4, r3
 801318e:	4413      	add	r3, r2
 8013190:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013192:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8013194:	fba2 ab04 	umull	sl, fp, r2, r4
 8013198:	445b      	add	r3, fp
 801319a:	469b      	mov	fp, r3
 801319c:	eb10 030a 	adds.w	r3, r0, sl
 80131a0:	623b      	str	r3, [r7, #32]
 80131a2:	eb41 030b 	adc.w	r3, r1, fp
 80131a6:	627b      	str	r3, [r7, #36]	; 0x24
 80131a8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80131ac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80131b0:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 80131b4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80131b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80131bc:	f04f 0000 	mov.w	r0, #0
 80131c0:	f04f 0100 	mov.w	r1, #0
 80131c4:	0fd0      	lsrs	r0, r2, #31
 80131c6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80131ca:	17d9      	asrs	r1, r3, #31
 80131cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131d0:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 80131d4:	4603      	mov	r3, r0
 80131d6:	6013      	str	r3, [r2, #0]
    return result;
 80131d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131dc:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80131e0:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80131e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131e6:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	dc06      	bgt.n	80131fe <arm_nn_vec_mat_mult_t_s8+0x190c>
 80131f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80131f4:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	425a      	negs	r2, r3
 80131fc:	e000      	b.n	8013200 <arm_nn_vec_mat_mult_t_s8+0x190e>
 80131fe:	2200      	movs	r2, #0
 8013200:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013204:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8013208:	6019      	str	r1, [r3, #0]
 801320a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801320e:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8013212:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8013214:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013218:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 801321c:	2300      	movs	r3, #0
 801321e:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8013220:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013224:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8013228:	2201      	movs	r2, #1
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	fa02 f103 	lsl.w	r1, r2, r3
 8013230:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013234:	f5a3 7255 	sub.w	r2, r3, #852	; 0x354
 8013238:	1e4b      	subs	r3, r1, #1
 801323a:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801323c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013240:	f5a3 7156 	sub.w	r1, r3, #856	; 0x358
 8013244:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013248:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 801324c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013250:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8013254:	6812      	ldr	r2, [r2, #0]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	4013      	ands	r3, r2
 801325a:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801325c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013260:	f5a3 7154 	sub.w	r1, r3, #848	; 0x350
 8013264:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013268:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 801326c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013270:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8013274:	6812      	ldr	r2, [r2, #0]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	fa42 f303 	asr.w	r3, r2, r3
 801327c:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801327e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013282:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 8013286:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801328a:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	105b      	asrs	r3, r3, #1
 8013292:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8013294:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013298:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	da0a      	bge.n	80132b8 <arm_nn_vec_mat_mult_t_s8+0x19c6>
        threshold++;
 80132a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132a6:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 80132aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132ae:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	3301      	adds	r3, #1
 80132b6:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80132b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132bc:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 80132c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132c4:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80132c8:	6812      	ldr	r2, [r2, #0]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	429a      	cmp	r2, r3
 80132ce:	dd0a      	ble.n	80132e6 <arm_nn_vec_mat_mult_t_s8+0x19f4>
        result++;
 80132d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132d4:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 80132d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132dc:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	3301      	adds	r3, #1
 80132e4:	6013      	str	r3, [r2, #0]
    return result;
 80132e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80132ea:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80132ee:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80132f0:	bf00      	nop
        res01 = arm_nn_requantize(res01, dst_multiplier, dst_shift);
 80132f2:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Add offset
        res00 += dst_offset;
 80132f6:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 80132fa:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 80132fe:	4413      	add	r3, r2
 8013300:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 += dst_offset;
 8013304:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 8013308:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 801330c:	4413      	add	r3, r2
 801330e:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Clamp the result
        res00 = MAX(res00, activation_min);
 8013312:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 8013316:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 801331a:	4293      	cmp	r3, r2
 801331c:	bfb8      	it	lt
 801331e:	4613      	movlt	r3, r2
 8013320:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res00 = MIN(res00, activation_max);
 8013324:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 8013328:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 801332c:	4293      	cmp	r3, r2
 801332e:	bfa8      	it	ge
 8013330:	4613      	movge	r3, r2
 8013332:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 = MAX(res01, activation_min);
 8013336:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 801333a:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 801333e:	4293      	cmp	r3, r2
 8013340:	bfb8      	it	lt
 8013342:	4613      	movlt	r3, r2
 8013344:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        res01 = MIN(res01, activation_max);
 8013348:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 801334c:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 8013350:	4293      	cmp	r3, r2
 8013352:	bfa8      	it	ge
 8013354:	4613      	movge	r3, r2
 8013356:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        *dst++ = (q7_t)res00;
 801335a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801335e:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8013362:	6819      	ldr	r1, [r3, #0]
 8013364:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013368:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 801336c:	1c4b      	adds	r3, r1, #1
 801336e:	6013      	str	r3, [r2, #0]
 8013370:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8013374:	b25b      	sxtb	r3, r3
 8013376:	700b      	strb	r3, [r1, #0]
        *dst++ = (q7_t)res01;
 8013378:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801337c:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 8013380:	6819      	ldr	r1, [r3, #0]
 8013382:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013386:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 801338a:	1c4b      	adds	r3, r1, #1
 801338c:	6013      	str	r3, [r2, #0]
 801338e:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8013392:	b25b      	sxtb	r3, r3
 8013394:	700b      	strb	r3, [r1, #0]

        rhs += 2 * rhs_cols;
 8013396:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 801339a:	005b      	lsls	r3, r3, #1
 801339c:	4619      	mov	r1, r3
 801339e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133a2:	f5a3 62bc 	sub.w	r2, r3, #1504	; 0x5e0
 80133a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133aa:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	440b      	add	r3, r1
 80133b2:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 80133b4:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 80133b8:	3302      	adds	r3, #2
 80133ba:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 80133be:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 80133c2:	1e5a      	subs	r2, r3, #1
 80133c4:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 80133c8:	4293      	cmp	r3, r2
 80133ca:	f6fe aae5 	blt.w	8011998 <arm_nn_vec_mat_mult_t_s8+0xa6>
    }

    if (rhs_rows % 2)
 80133ce:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 80133d2:	f003 0301 	and.w	r3, r3, #1
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	f001 806e 	beq.w	80144b8 <arm_nn_vec_mat_mult_t_s8+0x2bc6>
    {
        const q7_t *lhs_ptr = &lhs[0];
 80133dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133e0:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 80133e4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80133e8:	f2a2 52dc 	subw	r2, r2, #1500	; 0x5dc
 80133ec:	6812      	ldr	r2, [r2, #0]
 80133ee:	601a      	str	r2, [r3, #0]
        const q7_t *rhs_ptr = &rhs[0];
 80133f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80133f4:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 80133f8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80133fc:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 8013400:	6812      	ldr	r2, [r2, #0]
 8013402:	601a      	str	r2, [r3, #0]

        q31_t res00 = 0;
 8013404:	2300      	movs	r3, #0
 8013406:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        if (bias)
 801340a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801340e:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d00d      	beq.n	8013434 <arm_nn_vec_mat_mult_t_s8+0x1b42>
        {
            res00 = *bias++;
 8013418:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801341c:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013426:	f2a2 52e4 	subw	r2, r2, #1508	; 0x5e4
 801342a:	1d19      	adds	r1, r3, #4
 801342c:	6011      	str	r1, [r2, #0]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        }

        int32_t rhs_cols_idx = 0;
 8013434:	2300      	movs	r3, #0
 8013436:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801343a:	f000 beb5 	b.w	80141a8 <arm_nn_vec_mat_mult_t_s8+0x28b6>
 801343e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013442:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 8013446:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801344a:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 801344c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013450:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	461a      	mov	r2, r3
 801345c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013460:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 8013464:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013466:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801346a:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	1d1a      	adds	r2, r3, #4
 8013474:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013478:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	601a      	str	r2, [r3, #0]
    return (val);
 8013480:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013484:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 8013488:	681b      	ldr	r3, [r3, #0]
        {
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801348a:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 801348e:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8013492:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013496:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 801349a:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 801349e:	6019      	str	r1, [r3, #0]
 80134a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134a4:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80134a8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80134aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134ae:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80134b8:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 80134bc:	6812      	ldr	r2, [r2, #0]
 80134be:	fa23 f282 	sxtab16	r2, r3, r2
 80134c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134c6:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 80134ca:	601a      	str	r2, [r3, #0]
  return(result);
 80134cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134d0:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 80134da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134de:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80134e2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80134e6:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 80134e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134ec:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	461a      	mov	r2, r3
 80134f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80134fc:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8013500:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013502:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013506:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	1d1a      	adds	r2, r3, #4
 8013510:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013514:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	601a      	str	r2, [r3, #0]
    return (val);
 801351c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013520:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8013524:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8013526:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 801352a:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 801352e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013532:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 8013536:	601a      	str	r2, [r3, #0]
 8013538:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801353c:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8013540:	2208      	movs	r2, #8
 8013542:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8013544:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013548:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 801354c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013550:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 8013554:	6812      	ldr	r2, [r2, #0]
 8013556:	f002 021f 	and.w	r2, r2, #31
 801355a:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801355c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013560:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d105      	bne.n	8013576 <arm_nn_vec_mat_mult_t_s8+0x1c84>
    return op1;
 801356a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801356e:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	e00b      	b.n	801358e <arm_nn_vec_mat_mult_t_s8+0x1c9c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013576:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801357a:	f2a3 5214 	subw	r2, r3, #1300	; 0x514
 801357e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013582:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8013586:	6812      	ldr	r2, [r2, #0]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	fa62 f303 	ror.w	r3, r2, r3
 801358e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013592:	f5a2 62a1 	sub.w	r2, r2, #1288	; 0x508
 8013596:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 801359a:	6011      	str	r1, [r2, #0]
 801359c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80135a0:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 80135a4:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80135a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135aa:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80135b4:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 80135b8:	6812      	ldr	r2, [r2, #0]
 80135ba:	fa23 f282 	sxtab16	r2, r3, r2
 80135be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135c2:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 80135c6:	601a      	str	r2, [r3, #0]
  return(result);
 80135c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135cc:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 80135d6:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 80135da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135de:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 80135e2:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 80135e6:	6019      	str	r1, [r3, #0]
 80135e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135ec:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 80135f0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80135f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80135f6:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013600:	f5a2 62a0 	sub.w	r2, r2, #1280	; 0x500
 8013604:	6812      	ldr	r2, [r2, #0]
 8013606:	fa23 f282 	sxtab16	r2, r3, r2
 801360a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801360e:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8013612:	601a      	str	r2, [r3, #0]
  return(result);
 8013614:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013618:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 8013622:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8013626:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801362a:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 801362e:	601a      	str	r2, [r3, #0]
 8013630:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013634:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8013638:	2208      	movs	r2, #8
 801363a:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801363c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013640:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8013644:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013648:	f5a2 629f 	sub.w	r2, r2, #1272	; 0x4f8
 801364c:	6812      	ldr	r2, [r2, #0]
 801364e:	f002 021f 	and.w	r2, r2, #31
 8013652:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8013654:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013658:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d105      	bne.n	801366e <arm_nn_vec_mat_mult_t_s8+0x1d7c>
    return op1;
 8013662:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013666:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	e00b      	b.n	8013686 <arm_nn_vec_mat_mult_t_s8+0x1d94>
  return (op1 >> op2) | (op1 << (32U - op2));
 801366e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013672:	f2a3 42f4 	subw	r2, r3, #1268	; 0x4f4
 8013676:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801367a:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 801367e:	6812      	ldr	r2, [r2, #0]
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	fa62 f303 	ror.w	r3, r2, r3
 8013686:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801368a:	f5a2 629d 	sub.w	r2, r2, #1256	; 0x4e8
 801368e:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8013692:	6011      	str	r1, [r2, #0]
 8013694:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013698:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 801369c:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801369e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136a2:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80136ac:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 80136b0:	6812      	ldr	r2, [r2, #0]
 80136b2:	fa23 f282 	sxtab16	r2, r3, r2
 80136b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136ba:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80136be:	601a      	str	r2, [r3, #0]
  return(result);
 80136c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136c4:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 80136ce:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 80136d2:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 80136d6:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80136da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136de:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 80136e2:	6018      	str	r0, [r3, #0]
 80136e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136e8:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 80136ec:	6019      	str	r1, [r3, #0]
 80136ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136f2:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80136f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80136f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80136fc:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013706:	f2a2 42dc 	subw	r2, r2, #1244	; 0x4dc
 801370a:	6812      	ldr	r2, [r2, #0]
 801370c:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8013710:	f5a1 619c 	sub.w	r1, r1, #1248	; 0x4e0
 8013714:	6809      	ldr	r1, [r1, #0]
 8013716:	fb23 1202 	smlad	r2, r3, r2, r1
 801371a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801371e:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 8013722:	601a      	str	r2, [r3, #0]
  return(result);
 8013724:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013728:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8013732:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 8013736:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 801373a:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 801373e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013742:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8013746:	6018      	str	r0, [r3, #0]
 8013748:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801374c:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8013750:	6019      	str	r1, [r3, #0]
 8013752:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013756:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 801375a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801375c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013760:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801376a:	f2a2 42cc 	subw	r2, r2, #1228	; 0x4cc
 801376e:	6812      	ldr	r2, [r2, #0]
 8013770:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8013774:	f5a1 619a 	sub.w	r1, r1, #1232	; 0x4d0
 8013778:	6809      	ldr	r1, [r1, #0]
 801377a:	fb23 1202 	smlad	r2, r3, r2, r1
 801377e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013782:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8013786:	601a      	str	r2, [r3, #0]
  return(result);
 8013788:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801378c:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8013796:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801379a:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 801379e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80137a2:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 80137a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137a8:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	461a      	mov	r2, r3
 80137b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137b8:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 80137bc:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80137be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137c2:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	1d1a      	adds	r2, r3, #4
 80137cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137d0:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	601a      	str	r2, [r3, #0]
    return (val);
 80137d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137dc:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 80137e0:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 80137e2:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 80137e6:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 80137ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137ee:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80137f2:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80137f6:	6019      	str	r1, [r3, #0]
 80137f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80137fc:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 8013800:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013802:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013806:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013810:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 8013814:	6812      	ldr	r2, [r2, #0]
 8013816:	fa23 f282 	sxtab16	r2, r3, r2
 801381a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801381e:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8013822:	601a      	str	r2, [r3, #0]
  return(result);
 8013824:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013828:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8013832:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013836:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 801383a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801383e:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8013840:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013844:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	461a      	mov	r2, r3
 8013850:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013854:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8013858:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801385a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801385e:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	1d1a      	adds	r2, r3, #4
 8013868:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801386c:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	601a      	str	r2, [r3, #0]
    return (val);
 8013874:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013878:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 801387c:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801387e:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8013882:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8013886:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801388a:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 801388e:	601a      	str	r2, [r3, #0]
 8013890:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013894:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8013898:	2208      	movs	r2, #8
 801389a:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 801389c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138a0:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80138a4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80138a8:	f5a2 6296 	sub.w	r2, r2, #1200	; 0x4b0
 80138ac:	6812      	ldr	r2, [r2, #0]
 80138ae:	f002 021f 	and.w	r2, r2, #31
 80138b2:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80138b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138b8:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d105      	bne.n	80138ce <arm_nn_vec_mat_mult_t_s8+0x1fdc>
    return op1;
 80138c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138c6:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	e00b      	b.n	80138e6 <arm_nn_vec_mat_mult_t_s8+0x1ff4>
  return (op1 >> op2) | (op1 << (32U - op2));
 80138ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138d2:	f2a3 42ac 	subw	r2, r3, #1196	; 0x4ac
 80138d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80138da:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80138de:	6812      	ldr	r2, [r2, #0]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	fa62 f303 	ror.w	r3, r2, r3
 80138e6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80138ea:	f5a2 6294 	sub.w	r2, r2, #1184	; 0x4a0
 80138ee:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80138f2:	6011      	str	r1, [r2, #0]
 80138f4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80138f8:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 80138fc:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80138fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013902:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801390c:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 8013910:	6812      	ldr	r2, [r2, #0]
 8013912:	fa23 f282 	sxtab16	r2, r3, r2
 8013916:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801391a:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 801391e:	601a      	str	r2, [r3, #0]
  return(result);
 8013920:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013924:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 801392e:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8013932:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013936:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 801393a:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 801393e:	6019      	str	r1, [r3, #0]
 8013940:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013944:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 8013948:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801394a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801394e:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013958:	f5a2 6293 	sub.w	r2, r2, #1176	; 0x498
 801395c:	6812      	ldr	r2, [r2, #0]
 801395e:	fa23 f282 	sxtab16	r2, r3, r2
 8013962:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013966:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 801396a:	601a      	str	r2, [r3, #0]
  return(result);
 801396c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013970:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 801397a:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 801397e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013982:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8013986:	601a      	str	r2, [r3, #0]
 8013988:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801398c:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 8013990:	2208      	movs	r2, #8
 8013992:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8013994:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013998:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 801399c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80139a0:	f5a2 6292 	sub.w	r2, r2, #1168	; 0x490
 80139a4:	6812      	ldr	r2, [r2, #0]
 80139a6:	f002 021f 	and.w	r2, r2, #31
 80139aa:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80139ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139b0:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d105      	bne.n	80139c6 <arm_nn_vec_mat_mult_t_s8+0x20d4>
    return op1;
 80139ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139be:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	e00b      	b.n	80139de <arm_nn_vec_mat_mult_t_s8+0x20ec>
  return (op1 >> op2) | (op1 << (32U - op2));
 80139c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139ca:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 80139ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139d2:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 80139d6:	6812      	ldr	r2, [r2, #0]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	fa62 f303 	ror.w	r3, r2, r3
 80139de:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80139e2:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 80139e6:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 80139ea:	6011      	str	r1, [r2, #0]
 80139ec:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80139f0:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 80139f4:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80139f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80139fa:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013a04:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 8013a08:	6812      	ldr	r2, [r2, #0]
 8013a0a:	fa23 f282 	sxtab16	r2, r3, r2
 8013a0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a12:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8013a16:	601a      	str	r2, [r3, #0]
  return(result);
 8013a18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a1c:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 8013a26:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 8013a2a:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8013a2e:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8013a32:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a36:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8013a3a:	6018      	str	r0, [r3, #0]
 8013a3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a40:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8013a44:	6019      	str	r1, [r3, #0]
 8013a46:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a4a:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8013a4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013a50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a54:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013a5e:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 8013a62:	6812      	ldr	r2, [r2, #0]
 8013a64:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8013a68:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 8013a6c:	6809      	ldr	r1, [r1, #0]
 8013a6e:	fb23 1202 	smlad	r2, r3, r2, r1
 8013a72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a76:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8013a7a:	601a      	str	r2, [r3, #0]
  return(result);
 8013a7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a80:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8013a8a:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 8013a8e:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8013a92:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8013a96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013a9a:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 8013a9e:	6018      	str	r0, [r3, #0]
 8013aa0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013aa4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8013aa8:	6019      	str	r1, [r3, #0]
 8013aaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013aae:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8013ab2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013ab4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ab8:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013ac2:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 8013ac6:	6812      	ldr	r2, [r2, #0]
 8013ac8:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8013acc:	f5a1 618d 	sub.w	r1, r1, #1128	; 0x468
 8013ad0:	6809      	ldr	r1, [r1, #0]
 8013ad2:	fb23 1202 	smlad	r2, r3, r2, r1
 8013ad6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ada:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8013ade:	601a      	str	r2, [r3, #0]
  return(result);
 8013ae0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ae4:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8013aee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013af2:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8013af6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8013afa:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8013afc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b00:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	461a      	mov	r2, r3
 8013b0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b10:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 8013b14:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013b16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b1a:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	1d1a      	adds	r2, r3, #4
 8013b24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b28:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	601a      	str	r2, [r3, #0]
    return (val);
 8013b30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b34:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 8013b38:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8013b3a:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 8013b3e:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8013b42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b46:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8013b4a:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8013b4e:	6019      	str	r1, [r3, #0]
 8013b50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b54:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 8013b58:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013b5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b5e:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013b68:	f2a2 4254 	subw	r2, r2, #1108	; 0x454
 8013b6c:	6812      	ldr	r2, [r2, #0]
 8013b6e:	fa23 f282 	sxtab16	r2, r3, r2
 8013b72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b76:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8013b7a:	601a      	str	r2, [r3, #0]
  return(result);
 8013b7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b80:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8013b8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b8e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8013b92:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8013b96:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8013b98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013b9c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	461a      	mov	r2, r3
 8013ba8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bac:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8013bb0:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013bb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bb6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	1d1a      	adds	r2, r3, #4
 8013bc0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bc4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	601a      	str	r2, [r3, #0]
    return (val);
 8013bcc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bd0:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8013bd4:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8013bd6:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8013bda:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8013bde:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013be2:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8013be6:	601a      	str	r2, [r3, #0]
 8013be8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bec:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8013bf0:	2208      	movs	r2, #8
 8013bf2:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8013bf4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013bf8:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8013bfc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013c00:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8013c04:	6812      	ldr	r2, [r2, #0]
 8013c06:	f002 021f 	and.w	r2, r2, #31
 8013c0a:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8013c0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c10:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d105      	bne.n	8013c26 <arm_nn_vec_mat_mult_t_s8+0x2334>
    return op1;
 8013c1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c1e:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	e00b      	b.n	8013c3e <arm_nn_vec_mat_mult_t_s8+0x234c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013c26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c2a:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 8013c2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c32:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8013c36:	6812      	ldr	r2, [r2, #0]
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	fa62 f303 	ror.w	r3, r2, r3
 8013c3e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013c42:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8013c46:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8013c4a:	6011      	str	r1, [r2, #0]
 8013c4c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013c50:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8013c54:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013c56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c5a:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013c64:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8013c68:	6812      	ldr	r2, [r2, #0]
 8013c6a:	fa23 f282 	sxtab16	r2, r3, r2
 8013c6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c72:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8013c76:	601a      	str	r2, [r3, #0]
  return(result);
 8013c78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c7c:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 8013c86:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8013c8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c8e:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8013c92:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8013c96:	6019      	str	r1, [r3, #0]
 8013c98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013c9c:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8013ca0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013ca2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ca6:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013cb0:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 8013cb4:	6812      	ldr	r2, [r2, #0]
 8013cb6:	fa23 f282 	sxtab16	r2, r3, r2
 8013cba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013cbe:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8013cc2:	601a      	str	r2, [r3, #0]
  return(result);
 8013cc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013cc8:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 8013cd2:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8013cd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013cda:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8013cde:	601a      	str	r2, [r3, #0]
 8013ce0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ce4:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8013ce8:	2208      	movs	r2, #8
 8013cea:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8013cec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013cf0:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8013cf4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013cf8:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
 8013cfc:	6812      	ldr	r2, [r2, #0]
 8013cfe:	f002 021f 	and.w	r2, r2, #31
 8013d02:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8013d04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d08:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d105      	bne.n	8013d1e <arm_nn_vec_mat_mult_t_s8+0x242c>
    return op1;
 8013d12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d16:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	e00b      	b.n	8013d36 <arm_nn_vec_mat_mult_t_s8+0x2444>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013d1e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d22:	f2a3 4224 	subw	r2, r3, #1060	; 0x424
 8013d26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d2a:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8013d2e:	6812      	ldr	r2, [r2, #0]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	fa62 f303 	ror.w	r3, r2, r3
 8013d36:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013d3a:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 8013d3e:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8013d42:	6011      	str	r1, [r2, #0]
 8013d44:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013d48:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 8013d4c:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013d4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d52:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013d5c:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 8013d60:	6812      	ldr	r2, [r2, #0]
 8013d62:	fa23 f282 	sxtab16	r2, r3, r2
 8013d66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d6a:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8013d6e:	601a      	str	r2, [r3, #0]
  return(result);
 8013d70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d74:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 8013d7e:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 8013d82:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8013d86:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8013d8a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d8e:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8013d92:	6018      	str	r0, [r3, #0]
 8013d94:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013d98:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8013d9c:	6019      	str	r1, [r3, #0]
 8013d9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013da2:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8013da6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013da8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013dac:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013db6:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8013dba:	6812      	ldr	r2, [r2, #0]
 8013dbc:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8013dc0:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
 8013dc4:	6809      	ldr	r1, [r1, #0]
 8013dc6:	fb23 1202 	smlad	r2, r3, r2, r1
 8013dca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013dce:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8013dd2:	601a      	str	r2, [r3, #0]
  return(result);
 8013dd4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013dd8:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 8013de2:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 8013de6:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8013dea:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8013dee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013df2:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8013df6:	6018      	str	r0, [r3, #0]
 8013df8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013dfc:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8013e00:	6019      	str	r1, [r3, #0]
 8013e02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e06:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8013e0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8013e0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e10:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013e1a:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 8013e1e:	6812      	ldr	r2, [r2, #0]
 8013e20:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8013e24:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 8013e28:	6809      	ldr	r1, [r1, #0]
 8013e2a:	fb23 1202 	smlad	r2, r3, r2, r1
 8013e2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e32:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8013e36:	601a      	str	r2, [r3, #0]
  return(result);
 8013e38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e3c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8013e46:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e4a:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8013e4e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8013e52:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8013e54:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e58:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	461a      	mov	r2, r3
 8013e64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e68:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8013e6c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013e6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e72:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	1d1a      	adds	r2, r3, #4
 8013e7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e80:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	601a      	str	r2, [r3, #0]
    return (val);
 8013e88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e8c:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8013e90:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 8013e92:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 8013e96:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8013e9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013e9e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8013ea2:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8013ea6:	6019      	str	r1, [r3, #0]
 8013ea8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013eac:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8013eb0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013eb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013eb6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013ec0:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 8013ec4:	6812      	ldr	r2, [r2, #0]
 8013ec6:	fa23 f282 	sxtab16	r2, r3, r2
 8013eca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ece:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8013ed2:	601a      	str	r2, [r3, #0]
  return(result);
 8013ed4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ed8:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8013ee2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ee6:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8013eea:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8013eee:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8013ef0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ef4:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	461a      	mov	r2, r3
 8013f00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f04:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8013f08:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013f0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f0e:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	1d1a      	adds	r2, r3, #4
 8013f18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f1c:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	601a      	str	r2, [r3, #0]
    return (val);
 8013f24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f28:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 8013f2c:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 8013f2e:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 8013f32:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8013f36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f3a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8013f3e:	601a      	str	r2, [r3, #0]
 8013f40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f44:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8013f48:	2208      	movs	r2, #8
 8013f4a:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8013f4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f50:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8013f54:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013f58:	f5a2 7278 	sub.w	r2, r2, #992	; 0x3e0
 8013f5c:	6812      	ldr	r2, [r2, #0]
 8013f5e:	f002 021f 	and.w	r2, r2, #31
 8013f62:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8013f64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f68:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d105      	bne.n	8013f7e <arm_nn_vec_mat_mult_t_s8+0x268c>
    return op1;
 8013f72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f76:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	e00b      	b.n	8013f96 <arm_nn_vec_mat_mult_t_s8+0x26a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8013f7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f82:	f5a3 7277 	sub.w	r2, r3, #988	; 0x3dc
 8013f86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013f8a:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8013f8e:	6812      	ldr	r2, [r2, #0]
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	fa62 f303 	ror.w	r3, r2, r3
 8013f96:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013f9a:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8013f9e:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8013fa2:	6011      	str	r1, [r2, #0]
 8013fa4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013fa8:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 8013fac:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013fae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fb2:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8013fbc:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 8013fc0:	6812      	ldr	r2, [r2, #0]
 8013fc2:	fa23 f282 	sxtab16	r2, r3, r2
 8013fc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fca:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8013fce:	601a      	str	r2, [r3, #0]
  return(result);
 8013fd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fd4:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 8013fde:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 8013fe2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013fe6:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8013fea:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8013fee:	6019      	str	r1, [r3, #0]
 8013ff0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ff4:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8013ff8:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013ffa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8013ffe:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014008:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 801400c:	6812      	ldr	r2, [r2, #0]
 801400e:	fa23 f282 	sxtab16	r2, r3, r2
 8014012:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014016:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801401a:	601a      	str	r2, [r3, #0]
  return(result);
 801401c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014020:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 801402a:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 801402e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014032:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8014036:	601a      	str	r2, [r3, #0]
 8014038:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801403c:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8014040:	2208      	movs	r2, #8
 8014042:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8014044:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014048:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 801404c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014050:	f5a2 7270 	sub.w	r2, r2, #960	; 0x3c0
 8014054:	6812      	ldr	r2, [r2, #0]
 8014056:	f002 021f 	and.w	r2, r2, #31
 801405a:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 801405c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014060:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d105      	bne.n	8014076 <arm_nn_vec_mat_mult_t_s8+0x2784>
    return op1;
 801406a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801406e:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	e00b      	b.n	801408e <arm_nn_vec_mat_mult_t_s8+0x279c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8014076:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801407a:	f5a3 726f 	sub.w	r2, r3, #956	; 0x3bc
 801407e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014082:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8014086:	6812      	ldr	r2, [r2, #0]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	fa62 f303 	ror.w	r3, r2, r3
 801408e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014092:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 8014096:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 801409a:	6011      	str	r1, [r2, #0]
 801409c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80140a0:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 80140a4:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80140a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140aa:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80140b4:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 80140b8:	6812      	ldr	r2, [r2, #0]
 80140ba:	fa23 f282 	sxtab16	r2, r3, r2
 80140be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140c2:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 80140c6:	601a      	str	r2, [r3, #0]
  return(result);
 80140c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140cc:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 80140d6:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 80140da:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 80140de:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80140e2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140e6:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 80140ea:	6018      	str	r0, [r3, #0]
 80140ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140f0:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80140f4:	6019      	str	r1, [r3, #0]
 80140f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80140fa:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 80140fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014100:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014104:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801410e:	f5a2 7269 	sub.w	r2, r2, #932	; 0x3a4
 8014112:	6812      	ldr	r2, [r2, #0]
 8014114:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014118:	f5a1 716a 	sub.w	r1, r1, #936	; 0x3a8
 801411c:	6809      	ldr	r1, [r1, #0]
 801411e:	fb23 1202 	smlad	r2, r3, r2, r1
 8014122:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014126:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 801412a:	601a      	str	r2, [r3, #0]
  return(result);
 801412c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014130:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 801413a:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 801413e:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8014142:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014146:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801414a:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 801414e:	6018      	str	r0, [r3, #0]
 8014150:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014154:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 8014158:	6019      	str	r1, [r3, #0]
 801415a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801415e:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8014162:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8014164:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014168:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014172:	f5a2 7265 	sub.w	r2, r2, #916	; 0x394
 8014176:	6812      	ldr	r2, [r2, #0]
 8014178:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 801417c:	f5a1 7166 	sub.w	r1, r1, #920	; 0x398
 8014180:	6809      	ldr	r1, [r1, #0]
 8014182:	fb23 1202 	smlad	r2, r3, r2, r1
 8014186:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801418a:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801418e:	601a      	str	r2, [r3, #0]
  return(result);
 8014190:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014194:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801419e:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 80141a2:	3310      	adds	r3, #16
 80141a4:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 80141a8:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 80141ac:	3b0f      	subs	r3, #15
 80141ae:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 80141b2:	429a      	cmp	r2, r3
 80141b4:	f6ff a943 	blt.w	801343e <arm_nn_vec_mat_mult_t_s8+0x1b4c>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 80141b8:	e03f      	b.n	801423a <arm_nn_vec_mat_mult_t_s8+0x2948>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 80141ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80141be:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	f993 3000 	ldrsb.w	r3, [r3]
 80141c8:	461a      	mov	r2, r3
 80141ca:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 80141ce:	4413      	add	r3, r2
 80141d0:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 80141d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80141d8:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	f993 3000 	ldrsb.w	r3, [r3]
 80141e2:	461a      	mov	r2, r3
 80141e4:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 80141e8:	4413      	add	r3, r2
 80141ea:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

            res00 += lhs_value * rhs_value0;
 80141ee:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 80141f2:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 80141f6:	fb02 f303 	mul.w	r3, r2, r3
 80141fa:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 80141fe:	4413      	add	r3, r2
 8014200:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

            ++rhs_ptr;
 8014204:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014208:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	1c5a      	adds	r2, r3, #1
 8014210:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014214:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 8014218:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 801421a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801421e:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	1c5a      	adds	r2, r3, #1
 8014226:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801422a:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 801422e:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 8014230:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 8014234:	3301      	adds	r3, #1
 8014236:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 801423a:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 801423e:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8014242:	429a      	cmp	r2, r3
 8014244:	dbb9      	blt.n	80141ba <arm_nn_vec_mat_mult_t_s8+0x28c8>
 8014246:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801424a:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 801424e:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014252:	601a      	str	r2, [r3, #0]
 8014254:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014258:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 801425c:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 8014260:	601a      	str	r2, [r3, #0]
 8014262:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014266:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 801426a:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 801426e:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014270:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014274:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801427e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014282:	f5a2 62a6 	sub.w	r2, r2, #1328	; 0x530
 8014286:	6812      	ldr	r2, [r2, #0]
 8014288:	409a      	lsls	r2, r3
 801428a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801428e:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 8014292:	601a      	str	r2, [r3, #0]
 8014294:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014298:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 801429c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80142a0:	f2a2 5234 	subw	r2, r2, #1332	; 0x534
 80142a4:	6812      	ldr	r2, [r2, #0]
 80142a6:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80142a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80142ac:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 80142b0:	2200      	movs	r2, #0
 80142b2:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 80142b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80142b8:	461a      	mov	r2, r3
 80142ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80142be:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 80142c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80142c6:	461a      	mov	r2, r3
 80142c8:	2300      	movs	r3, #0
 80142ca:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80142ce:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80142d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80142d6:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80142da:	f2a1 513c 	subw	r1, r1, #1340	; 0x53c
 80142de:	6809      	ldr	r1, [r1, #0]
 80142e0:	17c8      	asrs	r0, r1, #31
 80142e2:	6139      	str	r1, [r7, #16]
 80142e4:	6178      	str	r0, [r7, #20]
 80142e6:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80142ea:	f5a1 61a8 	sub.w	r1, r1, #1344	; 0x540
 80142ee:	6809      	ldr	r1, [r1, #0]
 80142f0:	17c8      	asrs	r0, r1, #31
 80142f2:	60b9      	str	r1, [r7, #8]
 80142f4:	60f8      	str	r0, [r7, #12]
 80142f6:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80142fa:	4631      	mov	r1, r6
 80142fc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8014300:	4650      	mov	r0, sl
 8014302:	fb00 f001 	mul.w	r0, r0, r1
 8014306:	4659      	mov	r1, fp
 8014308:	462c      	mov	r4, r5
 801430a:	fb04 f101 	mul.w	r1, r4, r1
 801430e:	4401      	add	r1, r0
 8014310:	4628      	mov	r0, r5
 8014312:	4654      	mov	r4, sl
 8014314:	fba0 8904 	umull	r8, r9, r0, r4
 8014318:	4449      	add	r1, r9
 801431a:	4689      	mov	r9, r1
 801431c:	eb12 0108 	adds.w	r1, r2, r8
 8014320:	6039      	str	r1, [r7, #0]
 8014322:	eb43 0309 	adc.w	r3, r3, r9
 8014326:	607b      	str	r3, [r7, #4]
 8014328:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801432c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8014330:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 8014334:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014338:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801433c:	f04f 0200 	mov.w	r2, #0
 8014340:	f04f 0300 	mov.w	r3, #0
 8014344:	0fc2      	lsrs	r2, r0, #31
 8014346:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801434a:	17cb      	asrs	r3, r1, #31
 801434c:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8014350:	f2a1 5144 	subw	r1, r1, #1348	; 0x544
 8014354:	4613      	mov	r3, r2
 8014356:	600b      	str	r3, [r1, #0]
    return result;
 8014358:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801435c:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8014360:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8014362:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014366:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	2b00      	cmp	r3, #0
 801436e:	dc06      	bgt.n	801437e <arm_nn_vec_mat_mult_t_s8+0x2a8c>
 8014370:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014374:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	425b      	negs	r3, r3
 801437c:	e000      	b.n	8014380 <arm_nn_vec_mat_mult_t_s8+0x2a8e>
 801437e:	2300      	movs	r3, #0
 8014380:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014384:	f5a2 62a9 	sub.w	r2, r2, #1352	; 0x548
 8014388:	6011      	str	r1, [r2, #0]
 801438a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801438e:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 8014392:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8014394:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014398:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 801439c:	2200      	movs	r2, #0
 801439e:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80143a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143a4:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 80143a8:	2201      	movs	r2, #1
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	409a      	lsls	r2, r3
 80143ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143b2:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 80143b6:	3a01      	subs	r2, #1
 80143b8:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 80143ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143be:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80143c2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80143c6:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 80143ca:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80143ce:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 80143d2:	6809      	ldr	r1, [r1, #0]
 80143d4:	6812      	ldr	r2, [r2, #0]
 80143d6:	400a      	ands	r2, r1
 80143d8:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 80143da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80143de:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 80143e2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80143e6:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 80143ea:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 80143ee:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 80143f2:	6809      	ldr	r1, [r1, #0]
 80143f4:	6812      	ldr	r2, [r2, #0]
 80143f6:	fa41 f202 	asr.w	r2, r1, r2
 80143fa:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 80143fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014400:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8014404:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8014408:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 801440c:	6812      	ldr	r2, [r2, #0]
 801440e:	1052      	asrs	r2, r2, #1
 8014410:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8014412:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014416:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	2b00      	cmp	r3, #0
 801441e:	da0a      	bge.n	8014436 <arm_nn_vec_mat_mult_t_s8+0x2b44>
        threshold++;
 8014420:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014424:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8014428:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801442c:	f2a2 525c 	subw	r2, r2, #1372	; 0x55c
 8014430:	6812      	ldr	r2, [r2, #0]
 8014432:	3201      	adds	r2, #1
 8014434:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8014436:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801443a:	f5a3 62ab 	sub.w	r2, r3, #1368	; 0x558
 801443e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014442:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8014446:	6812      	ldr	r2, [r2, #0]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	429a      	cmp	r2, r3
 801444c:	dd0a      	ble.n	8014464 <arm_nn_vec_mat_mult_t_s8+0x2b72>
        result++;
 801444e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014452:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8014456:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 801445a:	f5a2 62aa 	sub.w	r2, r2, #1360	; 0x550
 801445e:	6812      	ldr	r2, [r2, #0]
 8014460:	3201      	adds	r2, #1
 8014462:	601a      	str	r2, [r3, #0]
    return result;
 8014464:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8014468:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 801446c:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801446e:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 8014470:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Add offset
        res00 += dst_offset;
 8014474:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014478:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 801447c:	4413      	add	r3, r2
 801447e:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Clamp the result
        res00 = MAX(res00, activation_min);
 8014482:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014486:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 801448a:	4293      	cmp	r3, r2
 801448c:	bfb8      	it	lt
 801448e:	4613      	movlt	r3, r2
 8014490:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        res00 = MIN(res00, activation_max);
 8014494:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8014498:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 801449c:	4293      	cmp	r3, r2
 801449e:	bfa8      	it	ge
 80144a0:	4613      	movge	r3, r2
 80144a2:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        *dst = (q7_t)res00;
 80144a6:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 80144aa:	b25a      	sxtb	r2, r3
 80144ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80144b0:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	701a      	strb	r2, [r3, #0]

        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
 80144b8:	2300      	movs	r3, #0
}
 80144ba:	4618      	mov	r0, r3
 80144bc:	f507 67c6 	add.w	r7, r7, #1584	; 0x630
 80144c0:	46bd      	mov	sp, r7
 80144c2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80144c6:	4770      	bx	lr

080144c8 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 80144c8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80144cc:	f6ad 1da8 	subw	sp, sp, #2472	; 0x9a8
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	f607 14a8 	addw	r4, r7, #2472	; 0x9a8
 80144d6:	f5a4 7471 	sub.w	r4, r4, #964	; 0x3c4
 80144da:	6020      	str	r0, [r4, #0]
 80144dc:	f607 10a8 	addw	r0, r7, #2472	; 0x9a8
 80144e0:	f5a0 7072 	sub.w	r0, r0, #968	; 0x3c8
 80144e4:	6001      	str	r1, [r0, #0]
 80144e6:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 80144ea:	f5a1 7173 	sub.w	r1, r1, #972	; 0x3cc
 80144ee:	600a      	str	r2, [r1, #0]
 80144f0:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 80144f4:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 80144f8:	6013      	str	r3, [r2, #0]

        input += row_size;
        output += row_size;
    }
#else
    const int32_t mask = (1 << shift);
 80144fa:	2201      	movs	r2, #1
 80144fc:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 8014500:	fa02 f303 	lsl.w	r3, r2, r3
 8014504:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994

    int32_t col = 0;
 8014508:	2300      	movs	r3, #0
 801450a:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 801450e:	2300      	movs	r3, #0
 8014510:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 8014514:	f004 b863 	b.w	80185de <arm_softmax_s8+0x4116>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 8014518:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801451c:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	781b      	ldrb	r3, [r3, #0]
 8014524:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f

        for (col = 1; col < row_size; ++col)
 8014528:	2301      	movs	r3, #1
 801452a:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 801452e:	e015      	b.n	801455c <arm_softmax_s8+0x94>
        {
            max = MAX(max, input[col]);
 8014530:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8014534:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014538:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	4413      	add	r3, r2
 8014540:	f993 2000 	ldrsb.w	r2, [r3]
 8014544:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 8014548:	4293      	cmp	r3, r2
 801454a:	bfb8      	it	lt
 801454c:	4613      	movlt	r3, r2
 801454e:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f
        for (col = 1; col < row_size; ++col)
 8014552:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8014556:	3301      	adds	r3, #1
 8014558:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 801455c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014560:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014564:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	429a      	cmp	r2, r3
 801456c:	dbe0      	blt.n	8014530 <arm_softmax_s8+0x68>
        }

        int32_t diff = 0;
 801456e:	2300      	movs	r3, #0
 8014570:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
        int32_t sum = 0;
 8014574:	2300      	movs	r3, #0
 8014576:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998

        for (col = 0; col < row_size; ++col)
 801457a:	2300      	movs	r3, #0
 801457c:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8014580:	f001 ba24 	b.w	80159cc <arm_softmax_s8+0x1504>
        {
            diff = input[col] - max;
 8014584:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8014588:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801458c:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	4413      	add	r3, r2
 8014594:	f993 3000 	ldrsb.w	r3, [r3]
 8014598:	461a      	mov	r2, r3
 801459a:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 801459e:	1ad3      	subs	r3, r2, r3
 80145a0:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 80145a4:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 80145a8:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 80145ac:	429a      	cmp	r2, r3
 80145ae:	f2c1 8208 	blt.w	80159c2 <arm_softmax_s8+0x14fa>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 80145b2:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 80145b6:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 80145ba:	fb03 f202 	mul.w	r2, r3, r2
 80145be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80145c2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80145c6:	601a      	str	r2, [r3, #0]
 80145c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80145cc:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 80145d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80145d4:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80145dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80145e0:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80145e4:	2300      	movs	r3, #0
 80145e6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80145e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80145ec:	f04f 0300 	mov.w	r3, #0
 80145f0:	f607 0138 	addw	r1, r7, #2104	; 0x838
 80145f4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80145f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80145fc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	0fdb      	lsrs	r3, r3, #31
 8014604:	b2da      	uxtb	r2, r3
 8014606:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801460a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	0fdb      	lsrs	r3, r3, #31
 8014612:	b2db      	uxtb	r3, r3
 8014614:	4053      	eors	r3, r2
 8014616:	b2db      	uxtb	r3, r3
 8014618:	2b00      	cmp	r3, #0
 801461a:	d012      	beq.n	8014642 <arm_softmax_s8+0x17a>
        mult = 1 - mult;
 801461c:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8014620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014624:	2100      	movs	r1, #0
 8014626:	f1d2 0001 	rsbs	r0, r2, #1
 801462a:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
 801462e:	eb61 0303 	sbc.w	r3, r1, r3
 8014632:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8014636:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 801463a:	f607 0238 	addw	r2, r7, #2104	; 0x838
 801463e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8014642:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014646:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	17da      	asrs	r2, r3, #31
 801464e:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8014652:	f8c7 2464 	str.w	r2, [r7, #1124]	; 0x464
 8014656:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801465a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	17da      	asrs	r2, r3, #31
 8014662:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8014666:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 801466a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 801466e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014672:	460b      	mov	r3, r1
 8014674:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 8014678:	fb02 f203 	mul.w	r2, r2, r3
 801467c:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8014680:	f507 648c 	add.w	r4, r7, #1120	; 0x460
 8014684:	e9c4 0100 	strd	r0, r1, [r4]
 8014688:	4601      	mov	r1, r0
 801468a:	fb01 f303 	mul.w	r3, r1, r3
 801468e:	4413      	add	r3, r2
 8014690:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8014694:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 8014698:	fba2 1201 	umull	r1, r2, r2, r1
 801469c:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
 80146a0:	460a      	mov	r2, r1
 80146a2:	f8c7 2588 	str.w	r2, [r7, #1416]	; 0x588
 80146a6:	f8d7 258c 	ldr.w	r2, [r7, #1420]	; 0x58c
 80146aa:	4413      	add	r3, r2
 80146ac:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 80146b0:	f607 0338 	addw	r3, r7, #2104	; 0x838
 80146b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146b8:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 80146bc:	1851      	adds	r1, r2, r1
 80146be:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 80146c2:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 80146c6:	414b      	adcs	r3, r1
 80146c8:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 80146cc:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 80146d0:	f607 0238 	addw	r2, r7, #2104	; 0x838
 80146d4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80146d8:	f607 0338 	addw	r3, r7, #2104	; 0x838
 80146dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	da0a      	bge.n	80146fa <arm_softmax_s8+0x232>
 80146e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80146e8:	1851      	adds	r1, r2, r1
 80146ea:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 80146ee:	f143 0300 	adc.w	r3, r3, #0
 80146f2:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 80146f6:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 80146fa:	f04f 0000 	mov.w	r0, #0
 80146fe:	f04f 0100 	mov.w	r1, #0
 8014702:	0fd0      	lsrs	r0, r2, #31
 8014704:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014708:	17d9      	asrs	r1, r3, #31
 801470a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801470e:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8014712:	4603      	mov	r3, r0
 8014714:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8014716:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801471a:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 801471e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014722:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8014726:	6812      	ldr	r2, [r2, #0]
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	429a      	cmp	r2, r3
 801472c:	d10e      	bne.n	801474c <arm_softmax_s8+0x284>
 801472e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014732:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801473c:	d106      	bne.n	801474c <arm_softmax_s8+0x284>
        result = Q31_MAX;
 801473e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014742:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8014746:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801474a:	6013      	str	r3, [r2, #0]
    return result;
 801474c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014750:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968

// @note The following functions are used only for softmax layer, scaled bits = 5 assumed

__STATIC_FORCEINLINE int32_t arm_nn_exp_on_negative_values(int32_t val)
{
    int32_t mask = 0;
 801475a:	2300      	movs	r3, #0
 801475c:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    int32_t shift = 24;
 8014760:	2318      	movs	r3, #24
 8014762:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960

    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8014766:	2201      	movs	r2, #1
 8014768:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 801476c:	fa02 f303 	lsl.w	r3, r2, r3
 8014770:	1e5a      	subs	r2, r3, #1
 8014772:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8014776:	ea02 0103 	and.w	r1, r2, r3
 801477a:	2201      	movs	r2, #1
 801477c:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 8014780:	fa02 f303 	lsl.w	r3, r2, r3
 8014784:	1acb      	subs	r3, r1, r3
 8014786:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
    const int32_t remainder = val_mod_minus_quarter - val;
 801478a:	f8d7 295c 	ldr.w	r2, [r7, #2396]	; 0x95c
 801478e:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8014792:	1ad3      	subs	r3, r2, r3
 8014794:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 8014798:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 801479c:	015b      	lsls	r3, r3, #5
 801479e:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 80147a2:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 80147a6:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 80147aa:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 80147ae:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 80147b2:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
    q31_t result = 0;
 80147b6:	2300      	movs	r3, #0
 80147b8:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    q63_t mult = 1 << 30;
 80147bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80147c0:	f04f 0300 	mov.w	r3, #0
 80147c4:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 80147c8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80147cc:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 80147d0:	0fdb      	lsrs	r3, r3, #31
 80147d2:	b2da      	uxtb	r2, r3
 80147d4:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 80147d8:	0fdb      	lsrs	r3, r3, #31
 80147da:	b2db      	uxtb	r3, r3
 80147dc:	4053      	eors	r3, r2
 80147de:	b2db      	uxtb	r3, r3
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d012      	beq.n	801480a <arm_softmax_s8+0x342>
        mult = 1 - mult;
 80147e4:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80147e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147ec:	2100      	movs	r1, #0
 80147ee:	f1d2 0001 	rsbs	r0, r2, #1
 80147f2:	f8c7 0318 	str.w	r0, [r7, #792]	; 0x318
 80147f6:	eb61 0303 	sbc.w	r3, r1, r3
 80147fa:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 80147fe:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 8014802:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8014806:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801480a:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 801480e:	17da      	asrs	r2, r3, #31
 8014810:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 8014814:	f8c7 24dc 	str.w	r2, [r7, #1244]	; 0x4dc
 8014818:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 801481c:	17da      	asrs	r2, r3, #31
 801481e:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 8014822:	f8c7 24d4 	str.w	r2, [r7, #1236]	; 0x4d4
 8014826:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801482a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801482e:	460b      	mov	r3, r1
 8014830:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 8014834:	fb02 f203 	mul.w	r2, r2, r3
 8014838:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 801483c:	f507 649b 	add.w	r4, r7, #1240	; 0x4d8
 8014840:	e9c4 0100 	strd	r0, r1, [r4]
 8014844:	4601      	mov	r1, r0
 8014846:	fb01 f303 	mul.w	r3, r1, r3
 801484a:	4413      	add	r3, r2
 801484c:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 8014850:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 8014854:	fba2 8901 	umull	r8, r9, r2, r1
 8014858:	444b      	add	r3, r9
 801485a:	4699      	mov	r9, r3
 801485c:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8014860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014864:	eb12 0108 	adds.w	r1, r2, r8
 8014868:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 801486c:	eb43 0309 	adc.w	r3, r3, r9
 8014870:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8014874:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 8014878:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 801487c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8014880:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8014884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014888:	2b00      	cmp	r3, #0
 801488a:	da0a      	bge.n	80148a2 <arm_softmax_s8+0x3da>
 801488c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014890:	1851      	adds	r1, r2, r1
 8014892:	f8c7 1308 	str.w	r1, [r7, #776]	; 0x308
 8014896:	f143 0300 	adc.w	r3, r3, #0
 801489a:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 801489e:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 80148a2:	f04f 0000 	mov.w	r0, #0
 80148a6:	f04f 0100 	mov.w	r1, #0
 80148aa:	0fd0      	lsrs	r0, r2, #31
 80148ac:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80148b0:	17d9      	asrs	r1, r3, #31
 80148b2:	4602      	mov	r2, r0
 80148b4:	460b      	mov	r3, r1
 80148b6:	4613      	mov	r3, r2
 80148b8:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80148bc:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 80148c0:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 80148c4:	429a      	cmp	r2, r3
 80148c6:	d108      	bne.n	80148da <arm_softmax_s8+0x412>
 80148c8:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 80148cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80148d0:	d103      	bne.n	80148da <arm_softmax_s8+0x412>
        result = Q31_MAX;
 80148d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80148d6:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    return result;
 80148da:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
    const int32_t x2 = MUL_SAT(x, x);
 80148de:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 80148e2:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 80148e6:	f8c7 3938 	str.w	r3, [r7, #2360]	; 0x938
 80148ea:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 80148ee:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
    q31_t result = 0;
 80148f2:	2300      	movs	r3, #0
 80148f4:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    q63_t mult = 1 << 30;
 80148f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80148fc:	f04f 0300 	mov.w	r3, #0
 8014900:	f607 1128 	addw	r1, r7, #2344	; 0x928
 8014904:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8014908:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 801490c:	0fdb      	lsrs	r3, r3, #31
 801490e:	b2da      	uxtb	r2, r3
 8014910:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8014914:	0fdb      	lsrs	r3, r3, #31
 8014916:	b2db      	uxtb	r3, r3
 8014918:	4053      	eors	r3, r2
 801491a:	b2db      	uxtb	r3, r3
 801491c:	2b00      	cmp	r3, #0
 801491e:	d012      	beq.n	8014946 <arm_softmax_s8+0x47e>
        mult = 1 - mult;
 8014920:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8014924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014928:	2100      	movs	r1, #0
 801492a:	f1d2 0001 	rsbs	r0, r2, #1
 801492e:	f8c7 0300 	str.w	r0, [r7, #768]	; 0x300
 8014932:	eb61 0303 	sbc.w	r3, r1, r3
 8014936:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 801493a:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 801493e:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8014942:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8014946:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 801494a:	17da      	asrs	r2, r3, #31
 801494c:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 8014950:	f8c7 24cc 	str.w	r2, [r7, #1228]	; 0x4cc
 8014954:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8014958:	17da      	asrs	r2, r3, #31
 801495a:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 801495e:	f8c7 24c4 	str.w	r2, [r7, #1220]	; 0x4c4
 8014962:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8014966:	e9d3 0100 	ldrd	r0, r1, [r3]
 801496a:	460b      	mov	r3, r1
 801496c:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 8014970:	fb02 f203 	mul.w	r2, r2, r3
 8014974:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 8014978:	f507 6499 	add.w	r4, r7, #1224	; 0x4c8
 801497c:	e9c4 0100 	strd	r0, r1, [r4]
 8014980:	4601      	mov	r1, r0
 8014982:	fb01 f303 	mul.w	r3, r1, r3
 8014986:	4413      	add	r3, r2
 8014988:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 801498c:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 8014990:	fba2 ab01 	umull	sl, fp, r2, r1
 8014994:	445b      	add	r3, fp
 8014996:	469b      	mov	fp, r3
 8014998:	f607 1328 	addw	r3, r7, #2344	; 0x928
 801499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149a0:	eb12 010a 	adds.w	r1, r2, sl
 80149a4:	f8c7 12f8 	str.w	r1, [r7, #760]	; 0x2f8
 80149a8:	eb43 030b 	adc.w	r3, r3, fp
 80149ac:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 80149b0:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 80149b4:	f607 1228 	addw	r2, r7, #2344	; 0x928
 80149b8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80149bc:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80149c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	da0a      	bge.n	80149de <arm_softmax_s8+0x516>
 80149c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80149cc:	1851      	adds	r1, r2, r1
 80149ce:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 80149d2:	f143 0300 	adc.w	r3, r3, #0
 80149d6:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 80149da:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 80149de:	f04f 0000 	mov.w	r0, #0
 80149e2:	f04f 0100 	mov.w	r1, #0
 80149e6:	0fd0      	lsrs	r0, r2, #31
 80149e8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80149ec:	17d9      	asrs	r1, r3, #31
 80149ee:	4602      	mov	r2, r0
 80149f0:	460b      	mov	r3, r1
 80149f2:	4613      	mov	r3, r2
 80149f4:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80149f8:	f8d7 2938 	ldr.w	r2, [r7, #2360]	; 0x938
 80149fc:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 8014a00:	429a      	cmp	r2, r3
 8014a02:	d108      	bne.n	8014a16 <arm_softmax_s8+0x54e>
 8014a04:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 8014a08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014a0c:	d103      	bne.n	8014a16 <arm_softmax_s8+0x54e>
        result = Q31_MAX;
 8014a0e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014a12:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    return result;
 8014a16:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 8014a1a:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
    q31_t result = 0;
 8014a1e:	2300      	movs	r3, #0
 8014a20:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    const q31_t remainder_mask = (1 << exponent) - 1;
 8014a24:	2304      	movs	r3, #4
 8014a26:	3b01      	subs	r3, #1
 8014a28:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
    int32_t remainder = remainder_mask & dividend;
 8014a2c:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 8014a30:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8014a34:	4013      	ands	r3, r2
 8014a36:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    result = dividend >> exponent;
 8014a3a:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8014a3e:	109b      	asrs	r3, r3, #2
 8014a40:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    q31_t threshold = remainder_mask >> 1;
 8014a44:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8014a48:	105b      	asrs	r3, r3, #1
 8014a4a:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (result < 0)
 8014a4e:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	da04      	bge.n	8014a60 <arm_softmax_s8+0x598>
        threshold++;
 8014a56:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 8014a5a:	3301      	adds	r3, #1
 8014a5c:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (remainder > threshold)
 8014a60:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 8014a64:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 8014a68:	429a      	cmp	r2, r3
 8014a6a:	dd04      	ble.n	8014a76 <arm_softmax_s8+0x5ae>
        result++;
 8014a6c:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8014a70:	3301      	adds	r3, #1
 8014a72:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    return result;
 8014a76:	f8d7 4920 	ldr.w	r4, [r7, #2336]	; 0x920
 8014a7a:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 8014a7e:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 8014a82:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 8014a86:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
    q31_t result = 0;
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    q63_t mult = 1 << 30;
 8014a90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014a94:	f04f 0300 	mov.w	r3, #0
 8014a98:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 8014a9c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8014aa0:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8014aa4:	0fdb      	lsrs	r3, r3, #31
 8014aa6:	b2da      	uxtb	r2, r3
 8014aa8:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 8014aac:	0fdb      	lsrs	r3, r3, #31
 8014aae:	b2db      	uxtb	r3, r3
 8014ab0:	4053      	eors	r3, r2
 8014ab2:	b2db      	uxtb	r3, r3
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d012      	beq.n	8014ade <arm_softmax_s8+0x616>
        mult = 1 - mult;
 8014ab8:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8014abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ac0:	2100      	movs	r1, #0
 8014ac2:	f1d2 0001 	rsbs	r0, r2, #1
 8014ac6:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
 8014aca:	eb61 0303 	sbc.w	r3, r1, r3
 8014ace:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8014ad2:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8014ad6:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 8014ada:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 8014ade:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8014ae2:	17da      	asrs	r2, r3, #31
 8014ae4:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 8014ae8:	f8c7 24bc 	str.w	r2, [r7, #1212]	; 0x4bc
 8014aec:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 8014af0:	17da      	asrs	r2, r3, #31
 8014af2:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 8014af6:	f8c7 24b4 	str.w	r2, [r7, #1204]	; 0x4b4
 8014afa:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8014afe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014b02:	460b      	mov	r3, r1
 8014b04:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 8014b08:	fb02 f203 	mul.w	r2, r2, r3
 8014b0c:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8014b10:	f507 6c97 	add.w	ip, r7, #1208	; 0x4b8
 8014b14:	e9cc 0100 	strd	r0, r1, [ip]
 8014b18:	4601      	mov	r1, r0
 8014b1a:	fb01 f303 	mul.w	r3, r1, r3
 8014b1e:	4413      	add	r3, r2
 8014b20:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 8014b24:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	; 0x4b0
 8014b28:	fba2 5601 	umull	r5, r6, r2, r1
 8014b2c:	4433      	add	r3, r6
 8014b2e:	461e      	mov	r6, r3
 8014b30:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8014b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b38:	1951      	adds	r1, r2, r5
 8014b3a:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 8014b3e:	4173      	adcs	r3, r6
 8014b40:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8014b44:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 8014b48:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 8014b4c:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 8014b50:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8014b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	da0a      	bge.n	8014b72 <arm_softmax_s8+0x6aa>
 8014b5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014b60:	1851      	adds	r1, r2, r1
 8014b62:	f8c7 12d8 	str.w	r1, [r7, #728]	; 0x2d8
 8014b66:	f143 0300 	adc.w	r3, r3, #0
 8014b6a:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8014b6e:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8014b72:	f04f 0000 	mov.w	r0, #0
 8014b76:	f04f 0100 	mov.w	r1, #0
 8014b7a:	0fd0      	lsrs	r0, r2, #31
 8014b7c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014b80:	17d9      	asrs	r1, r3, #31
 8014b82:	4602      	mov	r2, r0
 8014b84:	460b      	mov	r3, r1
 8014b86:	4613      	mov	r3, r2
 8014b88:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8014b8c:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 8014b90:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 8014b94:	429a      	cmp	r2, r3
 8014b96:	d108      	bne.n	8014baa <arm_softmax_s8+0x6e2>
 8014b98:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 8014b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014ba0:	d103      	bne.n	8014baa <arm_softmax_s8+0x6e2>
        result = Q31_MAX;
 8014ba2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014ba6:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    return result;
 8014baa:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908

    int32_t result = 1895147668 +
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8014bae:	4423      	add	r3, r4
 8014bb0:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
    q31_t result = 0;
 8014bb4:	2300      	movs	r3, #0
 8014bb6:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    q63_t mult = 1 << 30;
 8014bba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014bbe:	f04f 0300 	mov.w	r3, #0
 8014bc2:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 8014bc6:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8014bca:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 8014bce:	0fdb      	lsrs	r3, r3, #31
 8014bd0:	b2da      	uxtb	r2, r3
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	4053      	eors	r3, r2
 8014bd6:	b2db      	uxtb	r3, r3
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d012      	beq.n	8014c02 <arm_softmax_s8+0x73a>
        mult = 1 - mult;
 8014bdc:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8014be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014be4:	2100      	movs	r1, #0
 8014be6:	f1d2 0001 	rsbs	r0, r2, #1
 8014bea:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
 8014bee:	eb61 0303 	sbc.w	r3, r1, r3
 8014bf2:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8014bf6:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 8014bfa:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 8014bfe:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8014c02:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 8014c06:	17da      	asrs	r2, r3, #31
 8014c08:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 8014c0c:	f8c7 24ac 	str.w	r2, [r7, #1196]	; 0x4ac
 8014c10:	a3f0      	add	r3, pc, #960	; (adr r3, 8014fd4 <arm_softmax_s8+0xb0c>)
 8014c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c16:	f8d7 14ac 	ldr.w	r1, [r7, #1196]	; 0x4ac
 8014c1a:	fb02 f001 	mul.w	r0, r2, r1
 8014c1e:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	; 0x4a8
 8014c22:	fb01 f103 	mul.w	r1, r1, r3
 8014c26:	4401      	add	r1, r0
 8014c28:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	; 0x4a8
 8014c2c:	fba0 2302 	umull	r2, r3, r0, r2
 8014c30:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 8014c34:	4613      	mov	r3, r2
 8014c36:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 8014c3a:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 8014c3e:	18cb      	adds	r3, r1, r3
 8014c40:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 8014c44:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8014c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c4c:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 8014c50:	1851      	adds	r1, r2, r1
 8014c52:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 8014c56:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 8014c5a:	414b      	adcs	r3, r1
 8014c5c:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8014c60:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 8014c64:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 8014c68:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8014c6c:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8014c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	da0a      	bge.n	8014c8e <arm_softmax_s8+0x7c6>
 8014c78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014c7c:	1851      	adds	r1, r2, r1
 8014c7e:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8014c82:	f143 0300 	adc.w	r3, r3, #0
 8014c86:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8014c8a:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8014c8e:	f04f 0000 	mov.w	r0, #0
 8014c92:	f04f 0100 	mov.w	r1, #0
 8014c96:	0fd0      	lsrs	r0, r2, #31
 8014c98:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014c9c:	17d9      	asrs	r1, r3, #31
 8014c9e:	4602      	mov	r2, r0
 8014ca0:	460b      	mov	r3, r1
 8014ca2:	4613      	mov	r3, r2
 8014ca4:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8014ca8:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 8014cac:	4bc6      	ldr	r3, [pc, #792]	; (8014fc8 <arm_softmax_s8+0xb00>)
 8014cae:	429a      	cmp	r2, r3
 8014cb0:	d108      	bne.n	8014cc4 <arm_softmax_s8+0x7fc>
 8014cb2:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 8014cb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014cba:	d103      	bne.n	8014cc4 <arm_softmax_s8+0x7fc>
        result = Q31_MAX;
 8014cbc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014cc0:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    return result;
 8014cc4:	f8d7 28f8 	ldr.w	r2, [r7, #2296]	; 0x8f8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8014cc8:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 8014ccc:	4413      	add	r3, r2
 8014cce:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
    q31_t result = 0;
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    const q31_t remainder_mask = (1 << exponent) - 1;
 8014cd8:	2302      	movs	r3, #2
 8014cda:	3b01      	subs	r3, #1
 8014cdc:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
    int32_t remainder = remainder_mask & dividend;
 8014ce0:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	; 0x8ec
 8014ce4:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 8014ce8:	4013      	ands	r3, r2
 8014cea:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
    result = dividend >> exponent;
 8014cee:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 8014cf2:	105b      	asrs	r3, r3, #1
 8014cf4:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    q31_t threshold = remainder_mask >> 1;
 8014cf8:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 8014cfc:	105b      	asrs	r3, r3, #1
 8014cfe:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (result < 0)
 8014d02:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	da04      	bge.n	8014d14 <arm_softmax_s8+0x84c>
        threshold++;
 8014d0a:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 8014d0e:	3301      	adds	r3, #1
 8014d10:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (remainder > threshold)
 8014d14:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 8014d18:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 8014d1c:	429a      	cmp	r2, r3
 8014d1e:	dd04      	ble.n	8014d2a <arm_softmax_s8+0x862>
        result++;
 8014d20:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 8014d24:	3301      	adds	r3, #1
 8014d26:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    return result;
 8014d2a:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8014d2e:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 8014d32:	4413      	add	r3, r2
 8014d34:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
    q31_t result = 0;
 8014d38:	2300      	movs	r3, #0
 8014d3a:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    q63_t mult = 1 << 30;
 8014d3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014d42:	f04f 0300 	mov.w	r3, #0
 8014d46:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 8014d4a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8014d4e:	2200      	movs	r2, #0
 8014d50:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 8014d54:	0fdb      	lsrs	r3, r3, #31
 8014d56:	b2db      	uxtb	r3, r3
 8014d58:	4053      	eors	r3, r2
 8014d5a:	b2db      	uxtb	r3, r3
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d012      	beq.n	8014d86 <arm_softmax_s8+0x8be>
        mult = 1 - mult;
 8014d60:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8014d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d68:	2100      	movs	r1, #0
 8014d6a:	f1d2 0001 	rsbs	r0, r2, #1
 8014d6e:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
 8014d72:	eb61 0303 	sbc.w	r3, r1, r3
 8014d76:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8014d7a:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 8014d7e:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8014d82:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8014d86:	a18c      	add	r1, pc, #560	; (adr r1, 8014fb8 <arm_softmax_s8+0xaf0>)
 8014d88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014d8c:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 8014d90:	17da      	asrs	r2, r3, #31
 8014d92:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 8014d96:	f8c7 24a4 	str.w	r2, [r7, #1188]	; 0x4a4
 8014d9a:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8014d9e:	fb03 f201 	mul.w	r2, r3, r1
 8014da2:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8014da6:	fb00 f303 	mul.w	r3, r0, r3
 8014daa:	4413      	add	r3, r2
 8014dac:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8014db0:	fba0 1202 	umull	r1, r2, r0, r2
 8014db4:	f8c7 25cc 	str.w	r2, [r7, #1484]	; 0x5cc
 8014db8:	460a      	mov	r2, r1
 8014dba:	f8c7 25c8 	str.w	r2, [r7, #1480]	; 0x5c8
 8014dbe:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 8014dc2:	4413      	add	r3, r2
 8014dc4:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 8014dc8:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8014dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dd0:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8014dd4:	1851      	adds	r1, r2, r1
 8014dd6:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 8014dda:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 8014dde:	414b      	adcs	r3, r1
 8014de0:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8014de4:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 8014de8:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 8014dec:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8014df0:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8014df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	da0a      	bge.n	8014e12 <arm_softmax_s8+0x94a>
 8014dfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014e00:	1851      	adds	r1, r2, r1
 8014e02:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 8014e06:	f143 0300 	adc.w	r3, r3, #0
 8014e0a:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8014e0e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8014e12:	f04f 0000 	mov.w	r0, #0
 8014e16:	f04f 0100 	mov.w	r1, #0
 8014e1a:	0fd0      	lsrs	r0, r2, #31
 8014e1c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014e20:	17d9      	asrs	r1, r3, #31
 8014e22:	4602      	mov	r2, r0
 8014e24:	460b      	mov	r3, r1
 8014e26:	4613      	mov	r3, r2
 8014e28:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    return result;
 8014e2c:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
    int32_t result = 1895147668 +
 8014e30:	4b66      	ldr	r3, [pc, #408]	; (8014fcc <arm_softmax_s8+0xb04>)
 8014e32:	4413      	add	r3, r2
 8014e34:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    {                                                                                                                  \
        mask = MASK_IF_NON_ZERO(remainder & (1 << shift++));                                                           \
        result = SELECT_USING_MASK(mask, MUL_SAT(result, x), result);                                                  \
    }

    SELECT_IF_NON_ZERO(1672461947)
 8014e38:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8014e3c:	1c53      	adds	r3, r2, #1
 8014e3e:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8014e42:	2301      	movs	r3, #1
 8014e44:	fa03 f202 	lsl.w	r2, r3, r2
 8014e48:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8014e4c:	4013      	ands	r3, r2
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d002      	beq.n	8014e58 <arm_softmax_s8+0x990>
 8014e52:	f04f 33ff 	mov.w	r3, #4294967295
 8014e56:	e000      	b.n	8014e5a <arm_softmax_s8+0x992>
 8014e58:	2300      	movs	r3, #0
 8014e5a:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8014e5e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8014e62:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
    q31_t result = 0;
 8014e66:	2300      	movs	r3, #0
 8014e68:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    q63_t mult = 1 << 30;
 8014e6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014e70:	f04f 0300 	mov.w	r3, #0
 8014e74:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8014e78:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8014e7c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8014e80:	0fdb      	lsrs	r3, r3, #31
 8014e82:	b2da      	uxtb	r2, r3
 8014e84:	2300      	movs	r3, #0
 8014e86:	4053      	eors	r3, r2
 8014e88:	b2db      	uxtb	r3, r3
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d012      	beq.n	8014eb4 <arm_softmax_s8+0x9ec>
        mult = 1 - mult;
 8014e8e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8014e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e96:	2100      	movs	r1, #0
 8014e98:	f1d2 0001 	rsbs	r0, r2, #1
 8014e9c:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
 8014ea0:	eb61 0303 	sbc.w	r3, r1, r3
 8014ea4:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8014ea8:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 8014eac:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8014eb0:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8014eb4:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8014eb8:	17da      	asrs	r2, r3, #31
 8014eba:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 8014ebe:	f8c7 249c 	str.w	r2, [r7, #1180]	; 0x49c
 8014ec2:	a33f      	add	r3, pc, #252	; (adr r3, 8014fc0 <arm_softmax_s8+0xaf8>)
 8014ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ec8:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 8014ecc:	fb02 f001 	mul.w	r0, r2, r1
 8014ed0:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 8014ed4:	fb01 f103 	mul.w	r1, r1, r3
 8014ed8:	4401      	add	r1, r0
 8014eda:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 8014ede:	fba0 2302 	umull	r2, r3, r0, r2
 8014ee2:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8014ee6:	4613      	mov	r3, r2
 8014ee8:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 8014eec:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 8014ef0:	18cb      	adds	r3, r1, r3
 8014ef2:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8014ef6:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8014efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014efe:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 8014f02:	1851      	adds	r1, r2, r1
 8014f04:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 8014f08:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8014f0c:	414b      	adcs	r3, r1
 8014f0e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8014f12:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 8014f16:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 8014f1a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8014f1e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8014f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	da0a      	bge.n	8014f40 <arm_softmax_s8+0xa78>
 8014f2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014f2e:	1851      	adds	r1, r2, r1
 8014f30:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 8014f34:	f143 0300 	adc.w	r3, r3, #0
 8014f38:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8014f3c:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8014f40:	f04f 0000 	mov.w	r0, #0
 8014f44:	f04f 0100 	mov.w	r1, #0
 8014f48:	0fd0      	lsrs	r0, r2, #31
 8014f4a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014f4e:	17d9      	asrs	r1, r3, #31
 8014f50:	4602      	mov	r2, r0
 8014f52:	460b      	mov	r3, r1
 8014f54:	4613      	mov	r3, r2
 8014f56:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8014f5a:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 8014f5e:	4b1c      	ldr	r3, [pc, #112]	; (8014fd0 <arm_softmax_s8+0xb08>)
 8014f60:	429a      	cmp	r2, r3
 8014f62:	d108      	bne.n	8014f76 <arm_softmax_s8+0xaae>
 8014f64:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 8014f68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014f6c:	d103      	bne.n	8014f76 <arm_softmax_s8+0xaae>
        result = Q31_MAX;
 8014f6e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014f72:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    return result;
 8014f76:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
    SELECT_IF_NON_ZERO(1672461947)
 8014f7a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8014f7e:	ea02 0103 	and.w	r1, r2, r3
 8014f82:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8014f86:	43da      	mvns	r2, r3
 8014f88:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8014f8c:	4013      	ands	r3, r2
 8014f8e:	404b      	eors	r3, r1
 8014f90:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(1302514674)
 8014f94:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8014f98:	1c53      	adds	r3, r2, #1
 8014f9a:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8014f9e:	2301      	movs	r3, #1
 8014fa0:	fa03 f202 	lsl.w	r2, r3, r2
 8014fa4:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8014fa8:	4013      	ands	r3, r2
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d016      	beq.n	8014fdc <arm_softmax_s8+0xb14>
 8014fae:	f04f 33ff 	mov.w	r3, #4294967295
 8014fb2:	e014      	b.n	8014fde <arm_softmax_s8+0xb16>
 8014fb4:	f3af 8000 	nop.w
 8014fb8:	70f5a894 	.word	0x70f5a894
 8014fbc:	00000000 	.word	0x00000000
 8014fc0:	63afbe7b 	.word	0x63afbe7b
 8014fc4:	00000000 	.word	0x00000000
 8014fc8:	2aaaaaab 	.word	0x2aaaaaab
 8014fcc:	70f5a894 	.word	0x70f5a894
 8014fd0:	63afbe7b 	.word	0x63afbe7b
 8014fd4:	2aaaaaab 	.word	0x2aaaaaab
 8014fd8:	00000000 	.word	0x00000000
 8014fdc:	2300      	movs	r3, #0
 8014fde:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8014fe2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8014fe6:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
    q31_t result = 0;
 8014fea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8014fee:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8014ff6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014ffa:	f04f 0300 	mov.w	r3, #0
 8014ffe:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 8015002:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015006:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 801500a:	0fdb      	lsrs	r3, r3, #31
 801500c:	b2da      	uxtb	r2, r3
 801500e:	2300      	movs	r3, #0
 8015010:	4053      	eors	r3, r2
 8015012:	b2db      	uxtb	r3, r3
 8015014:	2b00      	cmp	r3, #0
 8015016:	d012      	beq.n	801503e <arm_softmax_s8+0xb76>
        mult = 1 - mult;
 8015018:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 801501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015020:	2100      	movs	r1, #0
 8015022:	f1d2 0001 	rsbs	r0, r2, #1
 8015026:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
 801502a:	eb61 0303 	sbc.w	r3, r1, r3
 801502e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8015032:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 8015036:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 801503a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801503e:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 8015042:	17da      	asrs	r2, r3, #31
 8015044:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 8015048:	f8c7 2494 	str.w	r2, [r7, #1172]	; 0x494
 801504c:	a3a8      	add	r3, pc, #672	; (adr r3, 80152f0 <arm_softmax_s8+0xe28>)
 801504e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015052:	f8d7 1494 	ldr.w	r1, [r7, #1172]	; 0x494
 8015056:	fb02 f001 	mul.w	r0, r2, r1
 801505a:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 801505e:	fb01 f103 	mul.w	r1, r1, r3
 8015062:	4401      	add	r1, r0
 8015064:	f8d7 0490 	ldr.w	r0, [r7, #1168]	; 0x490
 8015068:	fba0 2302 	umull	r2, r3, r0, r2
 801506c:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 8015070:	4613      	mov	r3, r2
 8015072:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8015076:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 801507a:	18cb      	adds	r3, r1, r3
 801507c:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 8015080:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8015084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015088:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 801508c:	1851      	adds	r1, r2, r1
 801508e:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 8015092:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8015096:	414b      	adcs	r3, r1
 8015098:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 801509c:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 80150a0:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 80150a4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80150a8:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 80150ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	da0a      	bge.n	80150ca <arm_softmax_s8+0xc02>
 80150b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80150b8:	1851      	adds	r1, r2, r1
 80150ba:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 80150be:	f143 0300 	adc.w	r3, r3, #0
 80150c2:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 80150c6:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80150ca:	f04f 0000 	mov.w	r0, #0
 80150ce:	f04f 0100 	mov.w	r1, #0
 80150d2:	0fd0      	lsrs	r0, r2, #31
 80150d4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80150d8:	17d9      	asrs	r1, r3, #31
 80150da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80150de:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 80150e2:	4603      	mov	r3, r0
 80150e4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80150e6:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 80150ea:	4b7f      	ldr	r3, [pc, #508]	; (80152e8 <arm_softmax_s8+0xe20>)
 80150ec:	429a      	cmp	r2, r3
 80150ee:	d10b      	bne.n	8015108 <arm_softmax_s8+0xc40>
 80150f0:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 80150f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80150f8:	d106      	bne.n	8015108 <arm_softmax_s8+0xc40>
        result = Q31_MAX;
 80150fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80150fe:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8015102:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015106:	6013      	str	r3, [r2, #0]
    return result;
 8015108:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801510c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8015110:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8015112:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015116:	ea02 0103 	and.w	r1, r2, r3
 801511a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801511e:	43da      	mvns	r2, r3
 8015120:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015124:	4013      	ands	r3, r2
 8015126:	404b      	eors	r3, r1
 8015128:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(790015084)
 801512c:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 8015130:	1c53      	adds	r3, r2, #1
 8015132:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8015136:	2301      	movs	r3, #1
 8015138:	fa03 f202 	lsl.w	r2, r3, r2
 801513c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8015140:	4013      	ands	r3, r2
 8015142:	2b00      	cmp	r3, #0
 8015144:	d002      	beq.n	801514c <arm_softmax_s8+0xc84>
 8015146:	f04f 33ff 	mov.w	r3, #4294967295
 801514a:	e000      	b.n	801514e <arm_softmax_s8+0xc86>
 801514c:	2300      	movs	r3, #0
 801514e:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8015152:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015156:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 801515a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801515e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8015160:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015164:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8015168:	2300      	movs	r3, #0
 801516a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801516c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015170:	f04f 0300 	mov.w	r3, #0
 8015174:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 8015178:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801517c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015180:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	0fdb      	lsrs	r3, r3, #31
 8015188:	b2da      	uxtb	r2, r3
 801518a:	2300      	movs	r3, #0
 801518c:	4053      	eors	r3, r2
 801518e:	b2db      	uxtb	r3, r3
 8015190:	2b00      	cmp	r3, #0
 8015192:	d012      	beq.n	80151ba <arm_softmax_s8+0xcf2>
        mult = 1 - mult;
 8015194:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8015198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801519c:	2100      	movs	r1, #0
 801519e:	f1d2 0001 	rsbs	r0, r2, #1
 80151a2:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
 80151a6:	eb61 0303 	sbc.w	r3, r1, r3
 80151aa:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80151ae:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 80151b2:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 80151b6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80151ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80151be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	17da      	asrs	r2, r3, #31
 80151c6:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 80151ca:	f8c7 248c 	str.w	r2, [r7, #1164]	; 0x48c
 80151ce:	a344      	add	r3, pc, #272	; (adr r3, 80152e0 <arm_softmax_s8+0xe18>)
 80151d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151d4:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 80151d8:	fb02 f001 	mul.w	r0, r2, r1
 80151dc:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
 80151e0:	fb01 f103 	mul.w	r1, r1, r3
 80151e4:	4401      	add	r1, r0
 80151e6:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 80151ea:	fba0 2302 	umull	r2, r3, r0, r2
 80151ee:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 80151f2:	4613      	mov	r3, r2
 80151f4:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 80151f8:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 80151fc:	18cb      	adds	r3, r1, r3
 80151fe:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8015202:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8015206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801520a:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 801520e:	1851      	adds	r1, r2, r1
 8015210:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 8015214:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8015218:	414b      	adcs	r3, r1
 801521a:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 801521e:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 8015222:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 8015226:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801522a:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 801522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015232:	2b00      	cmp	r3, #0
 8015234:	da0a      	bge.n	801524c <arm_softmax_s8+0xd84>
 8015236:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801523a:	1851      	adds	r1, r2, r1
 801523c:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 8015240:	f143 0300 	adc.w	r3, r3, #0
 8015244:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8015248:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 801524c:	f04f 0000 	mov.w	r0, #0
 8015250:	f04f 0100 	mov.w	r1, #0
 8015254:	0fd0      	lsrs	r0, r2, #31
 8015256:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801525a:	17d9      	asrs	r1, r3, #31
 801525c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015260:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8015264:	4603      	mov	r3, r0
 8015266:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015268:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801526c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015270:	681a      	ldr	r2, [r3, #0]
 8015272:	4b1e      	ldr	r3, [pc, #120]	; (80152ec <arm_softmax_s8+0xe24>)
 8015274:	429a      	cmp	r2, r3
 8015276:	d10e      	bne.n	8015296 <arm_softmax_s8+0xdce>
 8015278:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801527c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015286:	d106      	bne.n	8015296 <arm_softmax_s8+0xdce>
        result = Q31_MAX;
 8015288:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801528c:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8015290:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015294:	6013      	str	r3, [r2, #0]
    return result;
 8015296:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801529a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801529e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 80152a0:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80152a4:	ea02 0103 	and.w	r1, r2, r3
 80152a8:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80152ac:	43da      	mvns	r2, r3
 80152ae:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80152b2:	4013      	ands	r3, r2
 80152b4:	404b      	eors	r3, r1
 80152b6:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(290630308)
 80152ba:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 80152be:	1c53      	adds	r3, r2, #1
 80152c0:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 80152c4:	2301      	movs	r3, #1
 80152c6:	fa03 f202 	lsl.w	r2, r3, r2
 80152ca:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80152ce:	4013      	ands	r3, r2
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d011      	beq.n	80152f8 <arm_softmax_s8+0xe30>
 80152d4:	f04f 33ff 	mov.w	r3, #4294967295
 80152d8:	e00f      	b.n	80152fa <arm_softmax_s8+0xe32>
 80152da:	bf00      	nop
 80152dc:	f3af 8000 	nop.w
 80152e0:	2f16ac6c 	.word	0x2f16ac6c
 80152e4:	00000000 	.word	0x00000000
 80152e8:	4da2cbf2 	.word	0x4da2cbf2
 80152ec:	2f16ac6c 	.word	0x2f16ac6c
 80152f0:	4da2cbf2 	.word	0x4da2cbf2
 80152f4:	00000000 	.word	0x00000000
 80152f8:	2300      	movs	r3, #0
 80152fa:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 80152fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015302:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8015306:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801530a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801530c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015310:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8015314:	2300      	movs	r3, #0
 8015316:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015318:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801531c:	f04f 0300 	mov.w	r3, #0
 8015320:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 8015324:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015328:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801532c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	0fdb      	lsrs	r3, r3, #31
 8015334:	b2da      	uxtb	r2, r3
 8015336:	2300      	movs	r3, #0
 8015338:	4053      	eors	r3, r2
 801533a:	b2db      	uxtb	r3, r3
 801533c:	2b00      	cmp	r3, #0
 801533e:	d012      	beq.n	8015366 <arm_softmax_s8+0xe9e>
        mult = 1 - mult;
 8015340:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8015344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015348:	2100      	movs	r1, #0
 801534a:	f1d2 0001 	rsbs	r0, r2, #1
 801534e:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 8015352:	eb61 0303 	sbc.w	r3, r1, r3
 8015356:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 801535a:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 801535e:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8015362:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015366:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801536a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	17da      	asrs	r2, r3, #31
 8015372:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8015376:	f8c7 2484 	str.w	r2, [r7, #1156]	; 0x484
 801537a:	a3ab      	add	r3, pc, #684	; (adr r3, 8015628 <arm_softmax_s8+0x1160>)
 801537c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015380:	f8d7 1484 	ldr.w	r1, [r7, #1156]	; 0x484
 8015384:	fb02 f001 	mul.w	r0, r2, r1
 8015388:	f8d7 1480 	ldr.w	r1, [r7, #1152]	; 0x480
 801538c:	fb01 f103 	mul.w	r1, r1, r3
 8015390:	4401      	add	r1, r0
 8015392:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 8015396:	fba0 2302 	umull	r2, r3, r0, r2
 801539a:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 801539e:	4613      	mov	r3, r2
 80153a0:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 80153a4:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 80153a8:	18cb      	adds	r3, r1, r3
 80153aa:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 80153ae:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80153b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153b6:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 80153ba:	1851      	adds	r1, r2, r1
 80153bc:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 80153c0:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 80153c4:	414b      	adcs	r3, r1
 80153c6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80153ca:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 80153ce:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80153d2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80153d6:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80153da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	da0a      	bge.n	80153f8 <arm_softmax_s8+0xf30>
 80153e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80153e6:	1851      	adds	r1, r2, r1
 80153e8:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 80153ec:	f143 0300 	adc.w	r3, r3, #0
 80153f0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80153f4:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80153f8:	f04f 0000 	mov.w	r0, #0
 80153fc:	f04f 0100 	mov.w	r1, #0
 8015400:	0fd0      	lsrs	r0, r2, #31
 8015402:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015406:	17d9      	asrs	r1, r3, #31
 8015408:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801540c:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8015410:	4603      	mov	r3, r0
 8015412:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015414:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015418:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801541c:	681a      	ldr	r2, [r3, #0]
 801541e:	4b80      	ldr	r3, [pc, #512]	; (8015620 <arm_softmax_s8+0x1158>)
 8015420:	429a      	cmp	r2, r3
 8015422:	d10e      	bne.n	8015442 <arm_softmax_s8+0xf7a>
 8015424:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015428:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015432:	d106      	bne.n	8015442 <arm_softmax_s8+0xf7a>
        result = Q31_MAX;
 8015434:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015438:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 801543c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015440:	6013      	str	r3, [r2, #0]
    return result;
 8015442:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015446:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801544a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 801544c:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015450:	ea02 0103 	and.w	r1, r2, r3
 8015454:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015458:	43da      	mvns	r2, r3
 801545a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 801545e:	4013      	ands	r3, r2
 8015460:	404b      	eors	r3, r1
 8015462:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(39332535)
 8015466:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 801546a:	1c53      	adds	r3, r2, #1
 801546c:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 8015470:	2301      	movs	r3, #1
 8015472:	fa03 f202 	lsl.w	r2, r3, r2
 8015476:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 801547a:	4013      	ands	r3, r2
 801547c:	2b00      	cmp	r3, #0
 801547e:	d002      	beq.n	8015486 <arm_softmax_s8+0xfbe>
 8015480:	f04f 33ff 	mov.w	r3, #4294967295
 8015484:	e000      	b.n	8015488 <arm_softmax_s8+0xfc0>
 8015486:	2300      	movs	r3, #0
 8015488:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 801548c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015490:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8015494:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015498:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801549a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801549e:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 80154a2:	2300      	movs	r3, #0
 80154a4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80154a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80154aa:	f04f 0300 	mov.w	r3, #0
 80154ae:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 80154b2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80154b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80154ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	0fdb      	lsrs	r3, r3, #31
 80154c2:	b2da      	uxtb	r2, r3
 80154c4:	2300      	movs	r3, #0
 80154c6:	4053      	eors	r3, r2
 80154c8:	b2db      	uxtb	r3, r3
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d012      	beq.n	80154f4 <arm_softmax_s8+0x102c>
        mult = 1 - mult;
 80154ce:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80154d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154d6:	2100      	movs	r1, #0
 80154d8:	f1d2 0001 	rsbs	r0, r2, #1
 80154dc:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 80154e0:	eb61 0303 	sbc.w	r3, r1, r3
 80154e4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80154e8:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 80154ec:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 80154f0:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80154f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80154f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	17da      	asrs	r2, r3, #31
 8015500:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8015504:	f8c7 247c 	str.w	r2, [r7, #1148]	; 0x47c
 8015508:	a343      	add	r3, pc, #268	; (adr r3, 8015618 <arm_softmax_s8+0x1150>)
 801550a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801550e:	f8d7 147c 	ldr.w	r1, [r7, #1148]	; 0x47c
 8015512:	fb02 f001 	mul.w	r0, r2, r1
 8015516:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 801551a:	fb01 f103 	mul.w	r1, r1, r3
 801551e:	4401      	add	r1, r0
 8015520:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 8015524:	fba0 2302 	umull	r2, r3, r0, r2
 8015528:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 801552c:	4613      	mov	r3, r2
 801552e:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 8015532:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8015536:	18cb      	adds	r3, r1, r3
 8015538:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 801553c:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8015540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015544:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 8015548:	1851      	adds	r1, r2, r1
 801554a:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 801554e:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 8015552:	414b      	adcs	r3, r1
 8015554:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8015558:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 801555c:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 8015560:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015564:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8015568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801556c:	2b00      	cmp	r3, #0
 801556e:	da0a      	bge.n	8015586 <arm_softmax_s8+0x10be>
 8015570:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015574:	1851      	adds	r1, r2, r1
 8015576:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 801557a:	f143 0300 	adc.w	r3, r3, #0
 801557e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8015582:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8015586:	f04f 0000 	mov.w	r0, #0
 801558a:	f04f 0100 	mov.w	r1, #0
 801558e:	0fd0      	lsrs	r0, r2, #31
 8015590:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015594:	17d9      	asrs	r1, r3, #31
 8015596:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801559a:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 801559e:	4603      	mov	r3, r0
 80155a0:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80155a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80155a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80155aa:	681a      	ldr	r2, [r3, #0]
 80155ac:	4b1d      	ldr	r3, [pc, #116]	; (8015624 <arm_softmax_s8+0x115c>)
 80155ae:	429a      	cmp	r2, r3
 80155b0:	d10e      	bne.n	80155d0 <arm_softmax_s8+0x1108>
 80155b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80155b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80155c0:	d106      	bne.n	80155d0 <arm_softmax_s8+0x1108>
        result = Q31_MAX;
 80155c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80155c6:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 80155ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80155ce:	6013      	str	r3, [r2, #0]
    return result;
 80155d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80155d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80155d8:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 80155da:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80155de:	ea02 0103 	and.w	r1, r2, r3
 80155e2:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 80155e6:	43da      	mvns	r2, r3
 80155e8:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80155ec:	4013      	ands	r3, r2
 80155ee:	404b      	eors	r3, r1
 80155f0:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(720401)
 80155f4:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 80155f8:	1c53      	adds	r3, r2, #1
 80155fa:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 80155fe:	2301      	movs	r3, #1
 8015600:	fa03 f202 	lsl.w	r2, r3, r2
 8015604:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 8015608:	4013      	ands	r3, r2
 801560a:	2b00      	cmp	r3, #0
 801560c:	d010      	beq.n	8015630 <arm_softmax_s8+0x1168>
 801560e:	f04f 33ff 	mov.w	r3, #4294967295
 8015612:	e00e      	b.n	8015632 <arm_softmax_s8+0x116a>
 8015614:	f3af 8000 	nop.w
 8015618:	02582ab7 	.word	0x02582ab7
 801561c:	00000000 	.word	0x00000000
 8015620:	1152aaa4 	.word	0x1152aaa4
 8015624:	02582ab7 	.word	0x02582ab7
 8015628:	1152aaa4 	.word	0x1152aaa4
 801562c:	00000000 	.word	0x00000000
 8015630:	2300      	movs	r3, #0
 8015632:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8015636:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801563a:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 801563e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015642:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8015644:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015648:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 801564c:	2300      	movs	r3, #0
 801564e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015650:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015654:	f04f 0300 	mov.w	r3, #0
 8015658:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 801565c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015660:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015664:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	0fdb      	lsrs	r3, r3, #31
 801566c:	b2da      	uxtb	r2, r3
 801566e:	2300      	movs	r3, #0
 8015670:	4053      	eors	r3, r2
 8015672:	b2db      	uxtb	r3, r3
 8015674:	2b00      	cmp	r3, #0
 8015676:	d012      	beq.n	801569e <arm_softmax_s8+0x11d6>
        mult = 1 - mult;
 8015678:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015680:	2100      	movs	r1, #0
 8015682:	f1d2 0001 	rsbs	r0, r2, #1
 8015686:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
 801568a:	eb61 0303 	sbc.w	r3, r1, r3
 801568e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8015692:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 8015696:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 801569a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801569e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80156a2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	17da      	asrs	r2, r3, #31
 80156aa:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 80156ae:	f8c7 2474 	str.w	r2, [r7, #1140]	; 0x474
 80156b2:	4ad3      	ldr	r2, [pc, #844]	; (8015a00 <arm_softmax_s8+0x1538>)
 80156b4:	f04f 0300 	mov.w	r3, #0
 80156b8:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 80156bc:	fb02 f001 	mul.w	r0, r2, r1
 80156c0:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 80156c4:	fb01 f103 	mul.w	r1, r1, r3
 80156c8:	4401      	add	r1, r0
 80156ca:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 80156ce:	fba0 2302 	umull	r2, r3, r0, r2
 80156d2:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 80156d6:	4613      	mov	r3, r2
 80156d8:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 80156dc:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 80156e0:	18cb      	adds	r3, r1, r3
 80156e2:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 80156e6:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 80156ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ee:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 80156f2:	1851      	adds	r1, r2, r1
 80156f4:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 80156f8:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 80156fc:	414b      	adcs	r3, r1
 80156fe:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8015702:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 8015706:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 801570a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801570e:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8015712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015716:	2b00      	cmp	r3, #0
 8015718:	da0a      	bge.n	8015730 <arm_softmax_s8+0x1268>
 801571a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801571e:	1851      	adds	r1, r2, r1
 8015720:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 8015724:	f143 0300 	adc.w	r3, r3, #0
 8015728:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 801572c:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 8015730:	f04f 0000 	mov.w	r0, #0
 8015734:	f04f 0100 	mov.w	r1, #0
 8015738:	0fd0      	lsrs	r0, r2, #31
 801573a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801573e:	17d9      	asrs	r1, r3, #31
 8015740:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015744:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8015748:	4603      	mov	r3, r0
 801574a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801574c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015750:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015754:	681a      	ldr	r2, [r3, #0]
 8015756:	4baa      	ldr	r3, [pc, #680]	; (8015a00 <arm_softmax_s8+0x1538>)
 8015758:	429a      	cmp	r2, r3
 801575a:	d10e      	bne.n	801577a <arm_softmax_s8+0x12b2>
 801575c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015760:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801576a:	d106      	bne.n	801577a <arm_softmax_s8+0x12b2>
        result = Q31_MAX;
 801576c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015770:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8015774:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015778:	6013      	str	r3, [r2, #0]
    return result;
 801577a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801577e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8015782:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 8015784:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015788:	ea02 0103 	and.w	r1, r2, r3
 801578c:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015790:	43da      	mvns	r2, r3
 8015792:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015796:	4013      	ands	r3, r2
 8015798:	404b      	eors	r3, r1
 801579a:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(242)
 801579e:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 80157a2:	1c53      	adds	r3, r2, #1
 80157a4:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 80157a8:	2301      	movs	r3, #1
 80157aa:	fa03 f202 	lsl.w	r2, r3, r2
 80157ae:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 80157b2:	4013      	ands	r3, r2
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d002      	beq.n	80157be <arm_softmax_s8+0x12f6>
 80157b8:	f04f 33ff 	mov.w	r3, #4294967295
 80157bc:	e000      	b.n	80157c0 <arm_softmax_s8+0x12f8>
 80157be:	2300      	movs	r3, #0
 80157c0:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 80157c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80157c8:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 80157cc:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80157d0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80157d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80157d6:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 80157da:	2300      	movs	r3, #0
 80157dc:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80157de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80157e2:	f04f 0300 	mov.w	r3, #0
 80157e6:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 80157ea:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80157ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80157f2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	0fdb      	lsrs	r3, r3, #31
 80157fa:	b2da      	uxtb	r2, r3
 80157fc:	2300      	movs	r3, #0
 80157fe:	4053      	eors	r3, r2
 8015800:	b2db      	uxtb	r3, r3
 8015802:	2b00      	cmp	r3, #0
 8015804:	d012      	beq.n	801582c <arm_softmax_s8+0x1364>
        mult = 1 - mult;
 8015806:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 801580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801580e:	2100      	movs	r1, #0
 8015810:	f1d2 0001 	rsbs	r0, r2, #1
 8015814:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
 8015818:	eb61 0303 	sbc.w	r3, r1, r3
 801581c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8015820:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 8015824:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 8015828:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801582c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015830:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	17da      	asrs	r2, r3, #31
 8015838:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 801583c:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 8015840:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 8015844:	f04f 0300 	mov.w	r3, #0
 8015848:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 801584c:	fb02 f001 	mul.w	r0, r2, r1
 8015850:	f8d7 1468 	ldr.w	r1, [r7, #1128]	; 0x468
 8015854:	fb01 f103 	mul.w	r1, r1, r3
 8015858:	4401      	add	r1, r0
 801585a:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 801585e:	fba0 2302 	umull	r2, r3, r0, r2
 8015862:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 8015866:	4613      	mov	r3, r2
 8015868:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 801586c:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8015870:	18cb      	adds	r3, r1, r3
 8015872:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 8015876:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 801587a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801587e:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 8015882:	1851      	adds	r1, r2, r1
 8015884:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8015888:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 801588c:	414b      	adcs	r3, r1
 801588e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8015892:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 8015896:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 801589a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801589e:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 80158a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	da0a      	bge.n	80158c0 <arm_softmax_s8+0x13f8>
 80158aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80158ae:	1851      	adds	r1, r2, r1
 80158b0:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 80158b4:	f143 0300 	adc.w	r3, r3, #0
 80158b8:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80158bc:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 80158c0:	f04f 0000 	mov.w	r0, #0
 80158c4:	f04f 0100 	mov.w	r1, #0
 80158c8:	0fd0      	lsrs	r0, r2, #31
 80158ca:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80158ce:	17d9      	asrs	r1, r3, #31
 80158d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80158d4:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 80158d8:	4603      	mov	r3, r0
 80158da:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80158dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80158e0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80158e4:	681b      	ldr	r3, [r3, #0]
 80158e6:	2bf2      	cmp	r3, #242	; 0xf2
 80158e8:	d10e      	bne.n	8015908 <arm_softmax_s8+0x1440>
 80158ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80158ee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80158f8:	d106      	bne.n	8015908 <arm_softmax_s8+0x1440>
        result = Q31_MAX;
 80158fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80158fe:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8015902:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015906:	6013      	str	r3, [r2, #0]
    return result;
 8015908:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801590c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8015910:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 8015912:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015916:	ea02 0103 	and.w	r1, r2, r3
 801591a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801591e:	43da      	mvns	r2, r3
 8015920:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015924:	4013      	ands	r3, r2
 8015926:	404b      	eors	r3, r1
 8015928:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4

#undef SELECT_IF_NON_ZERO

    mask = MASK_IF_ZERO(val);
 801592c:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 8015930:	2b00      	cmp	r3, #0
 8015932:	d102      	bne.n	801593a <arm_softmax_s8+0x1472>
 8015934:	f04f 33ff 	mov.w	r3, #4294967295
 8015938:	e000      	b.n	801593c <arm_softmax_s8+0x1474>
 801593a:	2300      	movs	r3, #0
 801593c:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 8015940:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 8015944:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8015948:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801594c:	43da      	mvns	r2, r3
 801594e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8015952:	4013      	ands	r3, r2
 8015954:	404b      	eors	r3, r1
 8015956:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
    q31_t result = 0;
 801595a:	2300      	movs	r3, #0
 801595c:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    const q31_t remainder_mask = (1 << exponent) - 1;
 8015960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015964:	3b01      	subs	r3, #1
 8015966:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
    int32_t remainder = remainder_mask & dividend;
 801596a:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 801596e:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 8015972:	4013      	ands	r3, r2
 8015974:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
    result = dividend >> exponent;
 8015978:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 801597c:	131b      	asrs	r3, r3, #12
 801597e:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    q31_t threshold = remainder_mask >> 1;
 8015982:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 8015986:	105b      	asrs	r3, r3, #1
 8015988:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (result < 0)
 801598c:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 8015990:	2b00      	cmp	r3, #0
 8015992:	da04      	bge.n	801599e <arm_softmax_s8+0x14d6>
        threshold++;
 8015994:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8015998:	3301      	adds	r3, #1
 801599a:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (remainder > threshold)
 801599e:	f8d7 2970 	ldr.w	r2, [r7, #2416]	; 0x970
 80159a2:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80159a6:	429a      	cmp	r2, r3
 80159a8:	dd04      	ble.n	80159b4 <arm_softmax_s8+0x14ec>
        result++;
 80159aa:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 80159ae:	3301      	adds	r3, #1
 80159b0:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    return result;
 80159b4:	f8d7 2978 	ldr.w	r2, [r7, #2424]	; 0x978
 80159b8:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 80159bc:	4413      	add	r3, r2
 80159be:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
        for (col = 0; col < row_size; ++col)
 80159c2:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 80159c6:	3301      	adds	r3, #1
 80159c8:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 80159cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80159d0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80159d4:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	429a      	cmp	r2, r3
 80159dc:	f6fe add2 	blt.w	8014584 <arm_softmax_s8+0xbc>
            }
        }

        const int32_t headroom = __CLZ(sum);
 80159e0:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 80159e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80159e8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80159ec:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 80159ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80159f2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d103      	bne.n	8015a04 <arm_softmax_s8+0x153c>
    return 32U;
 80159fc:	2320      	movs	r3, #32
 80159fe:	e009      	b.n	8015a14 <arm_softmax_s8+0x154c>
 8015a00:	000afe11 	.word	0x000afe11
  return __builtin_clz(value);
 8015a04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015a08:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	fab3 f383 	clz	r3, r3
 8015a12:	b2db      	uxtb	r3, r3
 8015a14:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 8015a18:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8015a1c:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8015a20:	f8c7 3988 	str.w	r3, [r7, #2440]	; 0x988
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 8015a24:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 8015a28:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 8015a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8015a30:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8015a34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015a38:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8015a3c:	601a      	str	r2, [r3, #0]
    return result;
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 8015a3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015a42:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	17da      	asrs	r2, r3, #31
 8015a4a:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8015a4e:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 8015a52:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015a56:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 8015a5a:	4602      	mov	r2, r0
 8015a5c:	18d3      	adds	r3, r2, r3
 8015a5e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8015a62:	460b      	mov	r3, r1
 8015a64:	f143 0300 	adc.w	r3, r3, #0
 8015a68:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8015a6c:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 8015a70:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8015a74:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 8015a78:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8015a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	db04      	blt.n	8015a8e <arm_softmax_s8+0x15c6>
 8015a84:	f04f 0001 	mov.w	r0, #1
 8015a88:	f04f 0100 	mov.w	r1, #0
 8015a8c:	e003      	b.n	8015a96 <arm_softmax_s8+0x15ce>
 8015a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8015a92:	f04f 31ff 	mov.w	r1, #4294967295
 8015a96:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8015a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a9e:	1884      	adds	r4, r0, r2
 8015aa0:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 8015aa4:	eb41 0303 	adc.w	r3, r1, r3
 8015aa8:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8015aac:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 8015ab0:	460b      	mov	r3, r1
 8015ab2:	0fdb      	lsrs	r3, r3, #31
 8015ab4:	2200      	movs	r2, #0
 8015ab6:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8015aba:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 8015abe:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8015ac2:	4602      	mov	r2, r0
 8015ac4:	189b      	adds	r3, r3, r2
 8015ac6:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8015aca:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8015ace:	460a      	mov	r2, r1
 8015ad0:	4153      	adcs	r3, r2
 8015ad2:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8015ad6:	f04f 0200 	mov.w	r2, #0
 8015ada:	f04f 0300 	mov.w	r3, #0
 8015ade:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 8015ae2:	084a      	lsrs	r2, r1, #1
 8015ae4:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 8015ae8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8015aec:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 8015af0:	104b      	asrs	r3, r1, #1
 8015af2:	4610      	mov	r0, r2
 8015af4:	4619      	mov	r1, r3
 8015af6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015afa:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 8015afe:	4603      	mov	r3, r0
 8015b00:	6013      	str	r3, [r2, #0]
 8015b02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b06:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 8015b0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b0e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8015b16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b1a:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8015b1e:	2300      	movs	r3, #0
 8015b20:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015b22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015b26:	f04f 0300 	mov.w	r3, #0
 8015b2a:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 8015b2e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015b32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b36:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	0fdb      	lsrs	r3, r3, #31
 8015b3e:	b2da      	uxtb	r2, r3
 8015b40:	2301      	movs	r3, #1
 8015b42:	4053      	eors	r3, r2
 8015b44:	b2db      	uxtb	r3, r3
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d012      	beq.n	8015b70 <arm_softmax_s8+0x16a8>
        mult = 1 - mult;
 8015b4a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8015b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b52:	2100      	movs	r1, #0
 8015b54:	f1d2 0001 	rsbs	r0, r2, #1
 8015b58:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
 8015b5c:	eb61 0303 	sbc.w	r3, r1, r3
 8015b60:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8015b64:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8015b68:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8015b6c:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015b70:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015b74:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	17da      	asrs	r2, r3, #31
 8015b7c:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8015b80:	f8c7 2454 	str.w	r2, [r7, #1108]	; 0x454
 8015b84:	f60f 53a0 	addw	r3, pc, #3488	; 0xda0
 8015b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b8c:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 8015b90:	fb02 f001 	mul.w	r0, r2, r1
 8015b94:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 8015b98:	fb01 f103 	mul.w	r1, r1, r3
 8015b9c:	4401      	add	r1, r0
 8015b9e:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 8015ba2:	fba0 2302 	umull	r2, r3, r0, r2
 8015ba6:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8015baa:	4613      	mov	r3, r2
 8015bac:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
 8015bb0:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8015bb4:	18cb      	adds	r3, r1, r3
 8015bb6:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8015bba:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8015bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bc2:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 8015bc6:	1851      	adds	r1, r2, r1
 8015bc8:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 8015bcc:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 8015bd0:	414b      	adcs	r3, r1
 8015bd2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8015bd6:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8015bda:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8015bde:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015be2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8015be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	da0a      	bge.n	8015c04 <arm_softmax_s8+0x173c>
 8015bee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015bf2:	1851      	adds	r1, r2, r1
 8015bf4:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 8015bf8:	f143 0300 	adc.w	r3, r3, #0
 8015bfc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8015c00:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8015c04:	f04f 0000 	mov.w	r0, #0
 8015c08:	f04f 0100 	mov.w	r1, #0
 8015c0c:	0fd0      	lsrs	r0, r2, #31
 8015c0e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015c12:	17d9      	asrs	r1, r3, #31
 8015c14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015c18:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8015c1c:	4603      	mov	r3, r0
 8015c1e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015c20:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015c24:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 8015c2e:	d10e      	bne.n	8015c4e <arm_softmax_s8+0x1786>
 8015c30:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015c34:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015c3e:	d106      	bne.n	8015c4e <arm_softmax_s8+0x1786>
        result = Q31_MAX;
 8015c40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015c44:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 8015c48:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015c4c:	6013      	str	r3, [r2, #0]
    return result;
 8015c4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015c52:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8015c56:	6819      	ldr	r1, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 8015c58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015c5c:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8015c60:	f101 335a 	add.w	r3, r1, #1515870810	; 0x5a5a5a5a
 8015c64:	6013      	str	r3, [r2, #0]

    const int32_t shift = (1 << 29);
 8015c66:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015c6a:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 8015c6e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8015c72:	6013      	str	r3, [r2, #0]
 8015c74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015c78:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8015c7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015c80:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	6013      	str	r3, [r2, #0]
 8015c88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015c8c:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 8015c90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015c94:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8015c9c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ca0:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015ca8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015cac:	f04f 0300 	mov.w	r3, #0
 8015cb0:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 8015cb4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015cb8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015cbc:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	0fdb      	lsrs	r3, r3, #31
 8015cc4:	b2da      	uxtb	r2, r3
 8015cc6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015cca:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	0fdb      	lsrs	r3, r3, #31
 8015cd2:	b2db      	uxtb	r3, r3
 8015cd4:	4053      	eors	r3, r2
 8015cd6:	b2db      	uxtb	r3, r3
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d012      	beq.n	8015d02 <arm_softmax_s8+0x183a>
        mult = 1 - mult;
 8015cdc:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8015ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ce4:	2100      	movs	r1, #0
 8015ce6:	f1d2 0001 	rsbs	r0, r2, #1
 8015cea:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
 8015cee:	eb61 0303 	sbc.w	r3, r1, r3
 8015cf2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8015cf6:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8015cfa:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 8015cfe:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015d02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015d06:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	17da      	asrs	r2, r3, #31
 8015d0e:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 8015d12:	f8c7 244c 	str.w	r2, [r7, #1100]	; 0x44c
 8015d16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015d1a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	17da      	asrs	r2, r3, #31
 8015d22:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8015d26:	f8c7 2444 	str.w	r2, [r7, #1092]	; 0x444
 8015d2a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8015d2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015d32:	460b      	mov	r3, r1
 8015d34:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8015d38:	fb02 f203 	mul.w	r2, r2, r3
 8015d3c:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8015d40:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 8015d44:	e9c4 0100 	strd	r0, r1, [r4]
 8015d48:	4601      	mov	r1, r0
 8015d4a:	fb01 f303 	mul.w	r3, r1, r3
 8015d4e:	4413      	add	r3, r2
 8015d50:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8015d54:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 8015d58:	fba2 1201 	umull	r1, r2, r2, r1
 8015d5c:	f8c7 257c 	str.w	r2, [r7, #1404]	; 0x57c
 8015d60:	460a      	mov	r2, r1
 8015d62:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 8015d66:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8015d6a:	4413      	add	r3, r2
 8015d6c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8015d70:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8015d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d78:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8015d7c:	1851      	adds	r1, r2, r1
 8015d7e:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 8015d82:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8015d86:	414b      	adcs	r3, r1
 8015d88:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8015d8c:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 8015d90:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 8015d94:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015d98:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8015d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	da0a      	bge.n	8015dba <arm_softmax_s8+0x18f2>
 8015da4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015da8:	1851      	adds	r1, r2, r1
 8015daa:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 8015dae:	f143 0300 	adc.w	r3, r3, #0
 8015db2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8015db6:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8015dba:	f04f 0000 	mov.w	r0, #0
 8015dbe:	f04f 0100 	mov.w	r1, #0
 8015dc2:	0fd0      	lsrs	r0, r2, #31
 8015dc4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015dc8:	17d9      	asrs	r1, r3, #31
 8015dca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015dce:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8015dd2:	4603      	mov	r3, r0
 8015dd4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015dd6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015dda:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 8015dde:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015de2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8015de6:	6812      	ldr	r2, [r2, #0]
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	429a      	cmp	r2, r3
 8015dec:	d10e      	bne.n	8015e0c <arm_softmax_s8+0x1944>
 8015dee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015df2:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015dfc:	d106      	bne.n	8015e0c <arm_softmax_s8+0x1944>
        result = Q31_MAX;
 8015dfe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e02:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8015e06:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015e0a:	6013      	str	r3, [r2, #0]
    return result;
 8015e0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e10:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8015e14:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8015e16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e1a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	1a99      	subs	r1, r3, r2
 8015e22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e26:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8015e2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e2e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	6013      	str	r3, [r2, #0]
 8015e36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e3a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8015e3e:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8015e40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e44:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8015e48:	2300      	movs	r3, #0
 8015e4a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8015e4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015e50:	f04f 0300 	mov.w	r3, #0
 8015e54:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 8015e58:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8015e5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e60:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	0fdb      	lsrs	r3, r3, #31
 8015e68:	b2da      	uxtb	r2, r3
 8015e6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015e6e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	0fdb      	lsrs	r3, r3, #31
 8015e76:	b2db      	uxtb	r3, r3
 8015e78:	4053      	eors	r3, r2
 8015e7a:	b2db      	uxtb	r3, r3
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d012      	beq.n	8015ea6 <arm_softmax_s8+0x19de>
        mult = 1 - mult;
 8015e80:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8015e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e88:	2100      	movs	r1, #0
 8015e8a:	f1d2 0001 	rsbs	r0, r2, #1
 8015e8e:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
 8015e92:	eb61 0303 	sbc.w	r3, r1, r3
 8015e96:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8015e9a:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 8015e9e:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 8015ea2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8015ea6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015eaa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	17da      	asrs	r2, r3, #31
 8015eb2:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 8015eb6:	f8c7 243c 	str.w	r2, [r7, #1084]	; 0x43c
 8015eba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ebe:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	17da      	asrs	r2, r3, #31
 8015ec6:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8015eca:	f8c7 2434 	str.w	r2, [r7, #1076]	; 0x434
 8015ece:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8015ed2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015ed6:	460b      	mov	r3, r1
 8015ed8:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8015edc:	fb02 f203 	mul.w	r2, r2, r3
 8015ee0:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8015ee4:	f507 6487 	add.w	r4, r7, #1080	; 0x438
 8015ee8:	e9c4 0100 	strd	r0, r1, [r4]
 8015eec:	4601      	mov	r1, r0
 8015eee:	fb01 f303 	mul.w	r3, r1, r3
 8015ef2:	4413      	add	r3, r2
 8015ef4:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8015ef8:	f8d7 1430 	ldr.w	r1, [r7, #1072]	; 0x430
 8015efc:	fba2 1201 	umull	r1, r2, r2, r1
 8015f00:	f8c7 2574 	str.w	r2, [r7, #1396]	; 0x574
 8015f04:	460a      	mov	r2, r1
 8015f06:	f8c7 2570 	str.w	r2, [r7, #1392]	; 0x570
 8015f0a:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8015f0e:	4413      	add	r3, r2
 8015f10:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8015f14:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8015f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f1c:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 8015f20:	1851      	adds	r1, r2, r1
 8015f22:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 8015f26:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 8015f2a:	414b      	adcs	r3, r1
 8015f2c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8015f30:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 8015f34:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 8015f38:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8015f3c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8015f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	da0a      	bge.n	8015f5e <arm_softmax_s8+0x1a96>
 8015f48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015f4c:	1851      	adds	r1, r2, r1
 8015f4e:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 8015f52:	f143 0300 	adc.w	r3, r3, #0
 8015f56:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8015f5a:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8015f5e:	f04f 0000 	mov.w	r0, #0
 8015f62:	f04f 0100 	mov.w	r1, #0
 8015f66:	0fd0      	lsrs	r0, r2, #31
 8015f68:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8015f6c:	17d9      	asrs	r1, r3, #31
 8015f6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f72:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8015f76:	4603      	mov	r3, r0
 8015f78:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8015f7a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f7e:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 8015f82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f86:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8015f8a:	6812      	ldr	r2, [r2, #0]
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	429a      	cmp	r2, r3
 8015f90:	d10e      	bne.n	8015fb0 <arm_softmax_s8+0x1ae8>
 8015f92:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015f96:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015fa0:	d106      	bne.n	8015fb0 <arm_softmax_s8+0x1ae8>
        result = Q31_MAX;
 8015fa2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015fa6:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8015faa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015fae:	6013      	str	r3, [r2, #0]
    return result;
 8015fb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015fb4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8015fb8:	681a      	ldr	r2, [r3, #0]
 8015fba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015fbe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8015fc2:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8015fc4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8015fc8:	4619      	mov	r1, r3
 8015fca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015fce:	f5a3 72ec 	sub.w	r2, r3, #472	; 0x1d8
 8015fd2:	1e4b      	subs	r3, r1, #1
 8015fd4:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8015fd6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015fda:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8015fde:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015fe2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	009b      	lsls	r3, r3, #2
 8015fea:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8015fec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ff0:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8015ff4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8015ff8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8015ffc:	6812      	ldr	r2, [r2, #0]
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	429a      	cmp	r2, r3
 8016002:	dd02      	ble.n	801600a <arm_softmax_s8+0x1b42>
 8016004:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8016008:	e000      	b.n	801600c <arm_softmax_s8+0x1b44>
 801600a:	2000      	movs	r0, #0
 801600c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016010:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8016014:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016018:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 801601c:	6812      	ldr	r2, [r2, #0]
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	429a      	cmp	r2, r3
 8016022:	dd01      	ble.n	8016028 <arm_softmax_s8+0x1b60>
 8016024:	2200      	movs	r2, #0
 8016026:	e001      	b.n	801602c <arm_softmax_s8+0x1b64>
 8016028:	f04f 32ff 	mov.w	r2, #4294967295
 801602c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016030:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	ea02 0103 	and.w	r1, r2, r3
 801603a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801603e:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 8016042:	ea81 0300 	eor.w	r3, r1, r0
 8016046:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8016048:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801604c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	425a      	negs	r2, r3
 8016054:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016058:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	4293      	cmp	r3, r2
 8016060:	da02      	bge.n	8016068 <arm_softmax_s8+0x1ba0>
 8016062:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8016066:	e000      	b.n	801606a <arm_softmax_s8+0x1ba2>
 8016068:	2000      	movs	r0, #0
 801606a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801606e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	425a      	negs	r2, r3
 8016076:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801607a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	4293      	cmp	r3, r2
 8016082:	da01      	bge.n	8016088 <arm_softmax_s8+0x1bc0>
 8016084:	2200      	movs	r2, #0
 8016086:	e001      	b.n	801608c <arm_softmax_s8+0x1bc4>
 8016088:	f04f 32ff 	mov.w	r2, #4294967295
 801608c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016090:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	ea02 0103 	and.w	r1, r2, r3
 801609a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801609e:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 80160a2:	ea81 0300 	eor.w	r3, r1, r0
 80160a6:	6013      	str	r3, [r2, #0]
    return result;
 80160a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80160ac:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80160b0:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80160b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80160b6:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 80160ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80160be:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	440b      	add	r3, r1
 80160c6:	6013      	str	r3, [r2, #0]
 80160c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80160cc:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 80160d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80160d4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	6013      	str	r3, [r2, #0]
 80160dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80160e0:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 80160e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80160e8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80160f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80160f4:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 80160f8:	2300      	movs	r3, #0
 80160fa:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80160fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016100:	f04f 0300 	mov.w	r3, #0
 8016104:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8016108:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801610c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016110:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	0fdb      	lsrs	r3, r3, #31
 8016118:	b2da      	uxtb	r2, r3
 801611a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801611e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	0fdb      	lsrs	r3, r3, #31
 8016126:	b2db      	uxtb	r3, r3
 8016128:	4053      	eors	r3, r2
 801612a:	b2db      	uxtb	r3, r3
 801612c:	2b00      	cmp	r3, #0
 801612e:	d012      	beq.n	8016156 <arm_softmax_s8+0x1c8e>
        mult = 1 - mult;
 8016130:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8016134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016138:	2100      	movs	r1, #0
 801613a:	f1d2 0001 	rsbs	r0, r2, #1
 801613e:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 8016142:	eb61 0303 	sbc.w	r3, r1, r3
 8016146:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 801614a:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 801614e:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 8016152:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016156:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801615a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	17da      	asrs	r2, r3, #31
 8016162:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 8016166:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 801616a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801616e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	17da      	asrs	r2, r3, #31
 8016176:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 801617a:	f8c7 2424 	str.w	r2, [r7, #1060]	; 0x424
 801617e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8016182:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016186:	460b      	mov	r3, r1
 8016188:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 801618c:	fb02 f203 	mul.w	r2, r2, r3
 8016190:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8016194:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 8016198:	e9c4 0100 	strd	r0, r1, [r4]
 801619c:	4601      	mov	r1, r0
 801619e:	fb01 f303 	mul.w	r3, r1, r3
 80161a2:	4413      	add	r3, r2
 80161a4:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80161a8:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 80161ac:	fba2 1201 	umull	r1, r2, r2, r1
 80161b0:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
 80161b4:	460a      	mov	r2, r1
 80161b6:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
 80161ba:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 80161be:	4413      	add	r3, r2
 80161c0:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80161c4:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 80161c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161cc:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 80161d0:	1851      	adds	r1, r2, r1
 80161d2:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 80161d6:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 80161da:	414b      	adcs	r3, r1
 80161dc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80161e0:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 80161e4:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 80161e8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80161ec:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 80161f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	da0a      	bge.n	801620e <arm_softmax_s8+0x1d46>
 80161f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80161fc:	1851      	adds	r1, r2, r1
 80161fe:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 8016202:	f143 0300 	adc.w	r3, r3, #0
 8016206:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 801620a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 801620e:	f04f 0000 	mov.w	r0, #0
 8016212:	f04f 0100 	mov.w	r1, #0
 8016216:	0fd0      	lsrs	r0, r2, #31
 8016218:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801621c:	17d9      	asrs	r1, r3, #31
 801621e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016222:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 8016226:	4603      	mov	r3, r0
 8016228:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801622a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801622e:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8016232:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016236:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801623a:	6812      	ldr	r2, [r2, #0]
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	429a      	cmp	r2, r3
 8016240:	d10e      	bne.n	8016260 <arm_softmax_s8+0x1d98>
 8016242:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016246:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016250:	d106      	bne.n	8016260 <arm_softmax_s8+0x1d98>
        result = Q31_MAX;
 8016252:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016256:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 801625a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801625e:	6013      	str	r3, [r2, #0]
    return result;
 8016260:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016264:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8016268:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801626a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801626e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	1a99      	subs	r1, r3, r2
 8016276:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801627a:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 801627e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016282:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	6013      	str	r3, [r2, #0]
 801628a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801628e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8016292:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8016294:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016298:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 801629c:	2300      	movs	r3, #0
 801629e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80162a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80162a4:	f04f 0300 	mov.w	r3, #0
 80162a8:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 80162ac:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80162b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162b4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	0fdb      	lsrs	r3, r3, #31
 80162bc:	b2da      	uxtb	r2, r3
 80162be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162c2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	0fdb      	lsrs	r3, r3, #31
 80162ca:	b2db      	uxtb	r3, r3
 80162cc:	4053      	eors	r3, r2
 80162ce:	b2db      	uxtb	r3, r3
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d012      	beq.n	80162fa <arm_softmax_s8+0x1e32>
        mult = 1 - mult;
 80162d4:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 80162d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162dc:	2100      	movs	r1, #0
 80162de:	f1d2 0001 	rsbs	r0, r2, #1
 80162e2:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 80162e6:	eb61 0303 	sbc.w	r3, r1, r3
 80162ea:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80162ee:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 80162f2:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 80162f6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80162fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80162fe:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	17da      	asrs	r2, r3, #31
 8016306:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 801630a:	f8c7 241c 	str.w	r2, [r7, #1052]	; 0x41c
 801630e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016312:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	17da      	asrs	r2, r3, #31
 801631a:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 801631e:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
 8016322:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8016326:	e9d3 0100 	ldrd	r0, r1, [r3]
 801632a:	460b      	mov	r3, r1
 801632c:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8016330:	fb02 f203 	mul.w	r2, r2, r3
 8016334:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8016338:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 801633c:	e9c4 0100 	strd	r0, r1, [r4]
 8016340:	4601      	mov	r1, r0
 8016342:	fb01 f303 	mul.w	r3, r1, r3
 8016346:	4413      	add	r3, r2
 8016348:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 801634c:	f8d7 1410 	ldr.w	r1, [r7, #1040]	; 0x410
 8016350:	fba2 1201 	umull	r1, r2, r2, r1
 8016354:	f8c7 2564 	str.w	r2, [r7, #1380]	; 0x564
 8016358:	460a      	mov	r2, r1
 801635a:	f8c7 2560 	str.w	r2, [r7, #1376]	; 0x560
 801635e:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 8016362:	4413      	add	r3, r2
 8016364:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 8016368:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 801636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016370:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 8016374:	1851      	adds	r1, r2, r1
 8016376:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 801637a:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 801637e:	414b      	adcs	r3, r1
 8016380:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8016384:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8016388:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 801638c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016390:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8016394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016398:	2b00      	cmp	r3, #0
 801639a:	da0a      	bge.n	80163b2 <arm_softmax_s8+0x1eea>
 801639c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80163a0:	1851      	adds	r1, r2, r1
 80163a2:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 80163a6:	f143 0300 	adc.w	r3, r3, #0
 80163aa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80163ae:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 80163b2:	f04f 0000 	mov.w	r0, #0
 80163b6:	f04f 0100 	mov.w	r1, #0
 80163ba:	0fd0      	lsrs	r0, r2, #31
 80163bc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80163c0:	17d9      	asrs	r1, r3, #31
 80163c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80163c6:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 80163ca:	4603      	mov	r3, r0
 80163cc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80163ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80163d2:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 80163d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80163da:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80163de:	6812      	ldr	r2, [r2, #0]
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	429a      	cmp	r2, r3
 80163e4:	d10e      	bne.n	8016404 <arm_softmax_s8+0x1f3c>
 80163e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80163ea:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80163f4:	d106      	bne.n	8016404 <arm_softmax_s8+0x1f3c>
        result = Q31_MAX;
 80163f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80163fa:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 80163fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016402:	6013      	str	r3, [r2, #0]
    return result;
 8016404:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016408:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 801640c:	681a      	ldr	r2, [r3, #0]
 801640e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016412:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016416:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8016418:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 801641c:	4619      	mov	r1, r3
 801641e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016422:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8016426:	1e4b      	subs	r3, r1, #1
 8016428:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 801642a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801642e:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8016432:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016436:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	009b      	lsls	r3, r3, #2
 801643e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8016440:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016444:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8016448:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801644c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8016450:	6812      	ldr	r2, [r2, #0]
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	429a      	cmp	r2, r3
 8016456:	dd02      	ble.n	801645e <arm_softmax_s8+0x1f96>
 8016458:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801645c:	e000      	b.n	8016460 <arm_softmax_s8+0x1f98>
 801645e:	2000      	movs	r0, #0
 8016460:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016464:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8016468:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801646c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8016470:	6812      	ldr	r2, [r2, #0]
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	429a      	cmp	r2, r3
 8016476:	dd01      	ble.n	801647c <arm_softmax_s8+0x1fb4>
 8016478:	2200      	movs	r2, #0
 801647a:	e001      	b.n	8016480 <arm_softmax_s8+0x1fb8>
 801647c:	f04f 32ff 	mov.w	r2, #4294967295
 8016480:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016484:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	ea02 0103 	and.w	r1, r2, r3
 801648e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016492:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8016496:	ea81 0300 	eor.w	r3, r1, r0
 801649a:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 801649c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80164a0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	425a      	negs	r2, r3
 80164a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80164ac:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	4293      	cmp	r3, r2
 80164b4:	da02      	bge.n	80164bc <arm_softmax_s8+0x1ff4>
 80164b6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80164ba:	e000      	b.n	80164be <arm_softmax_s8+0x1ff6>
 80164bc:	2000      	movs	r0, #0
 80164be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80164c2:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	425a      	negs	r2, r3
 80164ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80164ce:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	4293      	cmp	r3, r2
 80164d6:	da01      	bge.n	80164dc <arm_softmax_s8+0x2014>
 80164d8:	2200      	movs	r2, #0
 80164da:	e001      	b.n	80164e0 <arm_softmax_s8+0x2018>
 80164dc:	f04f 32ff 	mov.w	r2, #4294967295
 80164e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80164e4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	ea02 0103 	and.w	r1, r2, r3
 80164ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80164f2:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 80164f6:	ea81 0300 	eor.w	r3, r1, r0
 80164fa:	6013      	str	r3, [r2, #0]
    return result;
 80164fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016500:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8016504:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8016506:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801650a:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 801650e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016512:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	440b      	add	r3, r1
 801651a:	6013      	str	r3, [r2, #0]
 801651c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016520:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8016524:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016528:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	6013      	str	r3, [r2, #0]
 8016530:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016534:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 8016538:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801653c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8016544:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016548:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 801654c:	2300      	movs	r3, #0
 801654e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016550:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016554:	f04f 0300 	mov.w	r3, #0
 8016558:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 801655c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016560:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016564:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	0fdb      	lsrs	r3, r3, #31
 801656c:	b2da      	uxtb	r2, r3
 801656e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016572:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	0fdb      	lsrs	r3, r3, #31
 801657a:	b2db      	uxtb	r3, r3
 801657c:	4053      	eors	r3, r2
 801657e:	b2db      	uxtb	r3, r3
 8016580:	2b00      	cmp	r3, #0
 8016582:	d012      	beq.n	80165aa <arm_softmax_s8+0x20e2>
        mult = 1 - mult;
 8016584:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8016588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801658c:	2100      	movs	r1, #0
 801658e:	f1d2 0001 	rsbs	r0, r2, #1
 8016592:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 8016596:	eb61 0303 	sbc.w	r3, r1, r3
 801659a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 801659e:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80165a2:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 80165a6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80165aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80165ae:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	17da      	asrs	r2, r3, #31
 80165b6:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 80165ba:	f8c7 240c 	str.w	r2, [r7, #1036]	; 0x40c
 80165be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80165c2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	17da      	asrs	r2, r3, #31
 80165ca:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 80165ce:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 80165d2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80165d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80165da:	460b      	mov	r3, r1
 80165dc:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 80165e0:	fb02 f203 	mul.w	r2, r2, r3
 80165e4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80165e8:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 80165ec:	e9c4 0100 	strd	r0, r1, [r4]
 80165f0:	4601      	mov	r1, r0
 80165f2:	fb01 f303 	mul.w	r3, r1, r3
 80165f6:	4413      	add	r3, r2
 80165f8:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 80165fc:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 8016600:	fba2 1201 	umull	r1, r2, r2, r1
 8016604:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 8016608:	460a      	mov	r2, r1
 801660a:	f8c7 2558 	str.w	r2, [r7, #1368]	; 0x558
 801660e:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8016612:	4413      	add	r3, r2
 8016614:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8016618:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 801661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016620:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 8016624:	1851      	adds	r1, r2, r1
 8016626:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 801662a:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 801662e:	414b      	adcs	r3, r1
 8016630:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8016634:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8016638:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 801663c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016640:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8016644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016648:	2b00      	cmp	r3, #0
 801664a:	da0a      	bge.n	8016662 <arm_softmax_s8+0x219a>
 801664c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016650:	1851      	adds	r1, r2, r1
 8016652:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 8016656:	f143 0300 	adc.w	r3, r3, #0
 801665a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 801665e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8016662:	f04f 0000 	mov.w	r0, #0
 8016666:	f04f 0100 	mov.w	r1, #0
 801666a:	0fd0      	lsrs	r0, r2, #31
 801666c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016670:	17d9      	asrs	r1, r3, #31
 8016672:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016676:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 801667a:	4603      	mov	r3, r0
 801667c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801667e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016682:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8016686:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801668a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801668e:	6812      	ldr	r2, [r2, #0]
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	429a      	cmp	r2, r3
 8016694:	d10e      	bne.n	80166b4 <arm_softmax_s8+0x21ec>
 8016696:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801669a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80166a4:	d106      	bne.n	80166b4 <arm_softmax_s8+0x21ec>
        result = Q31_MAX;
 80166a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80166aa:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 80166ae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80166b2:	6013      	str	r3, [r2, #0]
    return result;
 80166b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80166b8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80166bc:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80166be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80166c2:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	1a99      	subs	r1, r3, r2
 80166ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80166ce:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 80166d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80166d6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	6013      	str	r3, [r2, #0]
 80166de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80166e2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80166e6:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 80166e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80166ec:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 80166f0:	2300      	movs	r3, #0
 80166f2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80166f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80166f8:	f04f 0300 	mov.w	r3, #0
 80166fc:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 8016700:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016704:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016708:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	0fdb      	lsrs	r3, r3, #31
 8016710:	b2da      	uxtb	r2, r3
 8016712:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016716:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	0fdb      	lsrs	r3, r3, #31
 801671e:	b2db      	uxtb	r3, r3
 8016720:	4053      	eors	r3, r2
 8016722:	b2db      	uxtb	r3, r3
 8016724:	2b00      	cmp	r3, #0
 8016726:	d012      	beq.n	801674e <arm_softmax_s8+0x2286>
        mult = 1 - mult;
 8016728:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 801672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016730:	2100      	movs	r1, #0
 8016732:	f1d2 0001 	rsbs	r0, r2, #1
 8016736:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
 801673a:	eb61 0303 	sbc.w	r3, r1, r3
 801673e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8016742:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 8016746:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 801674a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801674e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016752:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	17da      	asrs	r2, r3, #31
 801675a:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 801675e:	f8c7 23fc 	str.w	r2, [r7, #1020]	; 0x3fc
 8016762:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016766:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	17da      	asrs	r2, r3, #31
 801676e:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 8016772:	f8c7 23f4 	str.w	r2, [r7, #1012]	; 0x3f4
 8016776:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 801677a:	460b      	mov	r3, r1
 801677c:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8016780:	fb02 f203 	mul.w	r2, r2, r3
 8016784:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8016788:	e9c7 01fe 	strd	r0, r1, [r7, #1016]	; 0x3f8
 801678c:	4601      	mov	r1, r0
 801678e:	fb01 f303 	mul.w	r3, r1, r3
 8016792:	4413      	add	r3, r2
 8016794:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 8016798:	f8d7 13f0 	ldr.w	r1, [r7, #1008]	; 0x3f0
 801679c:	fba2 1201 	umull	r1, r2, r2, r1
 80167a0:	f8c7 2554 	str.w	r2, [r7, #1364]	; 0x554
 80167a4:	460a      	mov	r2, r1
 80167a6:	f8c7 2550 	str.w	r2, [r7, #1360]	; 0x550
 80167aa:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 80167ae:	4413      	add	r3, r2
 80167b0:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 80167b4:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 80167b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167bc:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 80167c0:	1851      	adds	r1, r2, r1
 80167c2:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 80167c6:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 80167ca:	414b      	adcs	r3, r1
 80167cc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80167d0:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 80167d4:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 80167d8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80167dc:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 80167e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	da0a      	bge.n	80167fe <arm_softmax_s8+0x2336>
 80167e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80167ec:	1851      	adds	r1, r2, r1
 80167ee:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 80167f2:	f143 0300 	adc.w	r3, r3, #0
 80167f6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80167fa:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80167fe:	f04f 0000 	mov.w	r0, #0
 8016802:	f04f 0100 	mov.w	r1, #0
 8016806:	0fd0      	lsrs	r0, r2, #31
 8016808:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801680c:	17d9      	asrs	r1, r3, #31
 801680e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016812:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 8016816:	4603      	mov	r3, r0
 8016818:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801681a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801681e:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 8016822:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016826:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801682a:	6812      	ldr	r2, [r2, #0]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	429a      	cmp	r2, r3
 8016830:	d10e      	bne.n	8016850 <arm_softmax_s8+0x2388>
 8016832:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016836:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016840:	d106      	bne.n	8016850 <arm_softmax_s8+0x2388>
        result = Q31_MAX;
 8016842:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016846:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 801684a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801684e:	6013      	str	r3, [r2, #0]
    return result;
 8016850:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016854:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8016858:	681a      	ldr	r2, [r3, #0]
 801685a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801685e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8016862:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8016864:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8016868:	4619      	mov	r1, r3
 801686a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801686e:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 8016872:	1e4b      	subs	r3, r1, #1
 8016874:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8016876:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801687a:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 801687e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016882:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	009b      	lsls	r3, r3, #2
 801688a:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 801688c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016890:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 8016894:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016898:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801689c:	6812      	ldr	r2, [r2, #0]
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	429a      	cmp	r2, r3
 80168a2:	dd02      	ble.n	80168aa <arm_softmax_s8+0x23e2>
 80168a4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80168a8:	e000      	b.n	80168ac <arm_softmax_s8+0x23e4>
 80168aa:	2000      	movs	r0, #0
 80168ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168b0:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 80168b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168b8:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80168bc:	6812      	ldr	r2, [r2, #0]
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	429a      	cmp	r2, r3
 80168c2:	dd01      	ble.n	80168c8 <arm_softmax_s8+0x2400>
 80168c4:	2200      	movs	r2, #0
 80168c6:	e001      	b.n	80168cc <arm_softmax_s8+0x2404>
 80168c8:	f04f 32ff 	mov.w	r2, #4294967295
 80168cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	ea02 0103 	and.w	r1, r2, r3
 80168da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168de:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 80168e2:	ea81 0300 	eor.w	r3, r1, r0
 80168e6:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 80168e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168ec:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	425a      	negs	r2, r3
 80168f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80168f8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	4293      	cmp	r3, r2
 8016900:	da02      	bge.n	8016908 <arm_softmax_s8+0x2440>
 8016902:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8016906:	e000      	b.n	801690a <arm_softmax_s8+0x2442>
 8016908:	2000      	movs	r0, #0
 801690a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801690e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	425a      	negs	r2, r3
 8016916:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801691a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	4293      	cmp	r3, r2
 8016922:	da05      	bge.n	8016930 <arm_softmax_s8+0x2468>
 8016924:	2200      	movs	r2, #0
 8016926:	e005      	b.n	8016934 <arm_softmax_s8+0x246c>
 8016928:	c3c3c3c4 	.word	0xc3c3c3c4
 801692c:	ffffffff 	.word	0xffffffff
 8016930:	f04f 32ff 	mov.w	r2, #4294967295
 8016934:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016938:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	ea02 0103 	and.w	r1, r2, r3
 8016942:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016946:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 801694a:	ea81 0300 	eor.w	r3, r1, r0
 801694e:	6013      	str	r3, [r2, #0]
    return result;
 8016950:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016954:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8016958:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801695a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801695e:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8016962:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016966:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	440b      	add	r3, r1
 801696e:	6013      	str	r3, [r2, #0]
 8016970:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016974:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 8016978:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801697c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 8016984:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016988:	4619      	mov	r1, r3
 801698a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801698e:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 8016992:	1e4b      	subs	r3, r1, #1
 8016994:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 8016996:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801699a:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 801699e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80169a2:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	005b      	lsls	r3, r3, #1
 80169aa:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80169ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80169b0:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 80169b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80169b8:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80169bc:	6812      	ldr	r2, [r2, #0]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	429a      	cmp	r2, r3
 80169c2:	dd02      	ble.n	80169ca <arm_softmax_s8+0x2502>
 80169c4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80169c8:	e000      	b.n	80169cc <arm_softmax_s8+0x2504>
 80169ca:	2000      	movs	r0, #0
 80169cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80169d0:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 80169d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80169d8:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80169dc:	6812      	ldr	r2, [r2, #0]
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	429a      	cmp	r2, r3
 80169e2:	dd01      	ble.n	80169e8 <arm_softmax_s8+0x2520>
 80169e4:	2200      	movs	r2, #0
 80169e6:	e001      	b.n	80169ec <arm_softmax_s8+0x2524>
 80169e8:	f04f 32ff 	mov.w	r2, #4294967295
 80169ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80169f0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	ea02 0103 	and.w	r1, r2, r3
 80169fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80169fe:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8016a02:	ea81 0300 	eor.w	r3, r1, r0
 8016a06:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8016a08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a0c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	425a      	negs	r2, r3
 8016a14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a18:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	4293      	cmp	r3, r2
 8016a20:	da02      	bge.n	8016a28 <arm_softmax_s8+0x2560>
 8016a22:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8016a26:	e000      	b.n	8016a2a <arm_softmax_s8+0x2562>
 8016a28:	2000      	movs	r0, #0
 8016a2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a2e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	425a      	negs	r2, r3
 8016a36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a3a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	4293      	cmp	r3, r2
 8016a42:	da01      	bge.n	8016a48 <arm_softmax_s8+0x2580>
 8016a44:	2200      	movs	r2, #0
 8016a46:	e001      	b.n	8016a4c <arm_softmax_s8+0x2584>
 8016a48:	f04f 32ff 	mov.w	r2, #4294967295
 8016a4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a50:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	ea02 0103 	and.w	r1, r2, r3
 8016a5a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a5e:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8016a62:	ea81 0300 	eor.w	r3, r1, r0
 8016a66:	6013      	str	r3, [r2, #0]
    return result;
 8016a68:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a6c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8016a70:	681b      	ldr	r3, [r3, #0]

    return MUL_POW2(x, 1);
 8016a72:	bf00      	nop
 8016a74:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984

        for (col = 0; col < row_size; ++col)
 8016a78:	2300      	movs	r3, #0
 8016a7a:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 8016a7e:	f001 bd85 	b.w	801858c <arm_softmax_s8+0x40c4>
        {
            diff = input[col] - max;
 8016a82:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8016a86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016a8a:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	4413      	add	r3, r2
 8016a92:	f993 3000 	ldrsb.w	r3, [r3]
 8016a96:	461a      	mov	r2, r3
 8016a98:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 8016a9c:	1ad3      	subs	r3, r2, r3
 8016a9e:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 8016aa2:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 8016aa6:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 8016aaa:	429a      	cmp	r2, r3
 8016aac:	f2c1 8562 	blt.w	8018574 <arm_softmax_s8+0x40ac>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 8016ab0:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 8016ab4:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 8016ab8:	fb03 f202 	mul.w	r2, r3, r2
 8016abc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ac0:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8016ac4:	601a      	str	r2, [r3, #0]
 8016ac6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016aca:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 8016ace:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ad2:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8016ada:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ade:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016ae6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016aea:	f04f 0300 	mov.w	r3, #0
 8016aee:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 8016af2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016af6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016afa:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	0fdb      	lsrs	r3, r3, #31
 8016b02:	b2da      	uxtb	r2, r3
 8016b04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b08:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	0fdb      	lsrs	r3, r3, #31
 8016b10:	b2db      	uxtb	r3, r3
 8016b12:	4053      	eors	r3, r2
 8016b14:	b2db      	uxtb	r3, r3
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d012      	beq.n	8016b40 <arm_softmax_s8+0x2678>
        mult = 1 - mult;
 8016b1a:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8016b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b22:	2100      	movs	r1, #0
 8016b24:	f1d2 0001 	rsbs	r0, r2, #1
 8016b28:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
 8016b2c:	eb61 0303 	sbc.w	r3, r1, r3
 8016b30:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8016b34:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8016b38:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8016b3c:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016b40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b44:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	17da      	asrs	r2, r3, #31
 8016b4c:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8016b50:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 8016b54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016b58:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	17da      	asrs	r2, r3, #31
 8016b60:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8016b64:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 8016b68:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 8016b6c:	460b      	mov	r3, r1
 8016b6e:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 8016b72:	fb02 f203 	mul.w	r2, r2, r3
 8016b76:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8016b7a:	e9c7 01d8 	strd	r0, r1, [r7, #864]	; 0x360
 8016b7e:	4601      	mov	r1, r0
 8016b80:	fb01 f303 	mul.w	r3, r1, r3
 8016b84:	4413      	add	r3, r2
 8016b86:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8016b8a:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 8016b8e:	fba2 1201 	umull	r1, r2, r2, r1
 8016b92:	f8c7 24e4 	str.w	r2, [r7, #1252]	; 0x4e4
 8016b96:	460a      	mov	r2, r1
 8016b98:	f8c7 24e0 	str.w	r2, [r7, #1248]	; 0x4e0
 8016b9c:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 8016ba0:	4413      	add	r3, r2
 8016ba2:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8016ba6:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8016baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bae:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 8016bb2:	1851      	adds	r1, r2, r1
 8016bb4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8016bb8:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	; 0x4e4
 8016bbc:	414b      	adcs	r3, r1
 8016bbe:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8016bc2:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8016bc6:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8016bca:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016bce:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8016bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	da0a      	bge.n	8016bf0 <arm_softmax_s8+0x2728>
 8016bda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016bde:	1851      	adds	r1, r2, r1
 8016be0:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8016be4:	f143 0300 	adc.w	r3, r3, #0
 8016be8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8016bec:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8016bf0:	f04f 0000 	mov.w	r0, #0
 8016bf4:	f04f 0100 	mov.w	r1, #0
 8016bf8:	0fd0      	lsrs	r0, r2, #31
 8016bfa:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016bfe:	17d9      	asrs	r1, r3, #31
 8016c00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c04:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8016c08:	4603      	mov	r3, r0
 8016c0a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016c0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c10:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 8016c14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c18:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8016c1c:	6812      	ldr	r2, [r2, #0]
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	429a      	cmp	r2, r3
 8016c22:	d10e      	bne.n	8016c42 <arm_softmax_s8+0x277a>
 8016c24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c28:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016c32:	d106      	bne.n	8016c42 <arm_softmax_s8+0x277a>
        result = Q31_MAX;
 8016c34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c38:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 8016c3c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016c40:	6013      	str	r3, [r2, #0]
    return result;
 8016c42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c46:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8016c4a:	681a      	ldr	r2, [r3, #0]
 8016c4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c50:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8016c54:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 8016c56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c5a:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8016c5e:	2300      	movs	r3, #0
 8016c60:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 8016c62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c66:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8016c6a:	2318      	movs	r3, #24
 8016c6c:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8016c6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c72:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8016c76:	2201      	movs	r2, #1
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8016c7e:	1e5a      	subs	r2, r3, #1
 8016c80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c84:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	ea02 0003 	and.w	r0, r2, r3
 8016c8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016c92:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8016c96:	2201      	movs	r2, #1
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	fa02 f103 	lsl.w	r1, r2, r3
 8016c9e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ca2:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 8016ca6:	1a43      	subs	r3, r0, r1
 8016ca8:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 8016caa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016cae:	f5a3 7127 	sub.w	r1, r3, #668	; 0x29c
 8016cb2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016cb6:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 8016cba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016cbe:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8016cc2:	6812      	ldr	r2, [r2, #0]
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	1ad3      	subs	r3, r2, r3
 8016cc8:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 8016cca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016cce:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	0159      	lsls	r1, r3, #5
 8016cd6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016cda:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 8016cde:	f101 5380 	add.w	r3, r1, #268435456	; 0x10000000
 8016ce2:	6013      	str	r3, [r2, #0]
 8016ce4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ce8:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8016cec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016cf0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	6013      	str	r3, [r2, #0]
 8016cf8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016cfc:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 8016d00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d04:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8016d0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d10:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8016d14:	2300      	movs	r3, #0
 8016d16:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016d18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016d1c:	f04f 0300 	mov.w	r3, #0
 8016d20:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 8016d24:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016d28:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d2c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	0fdb      	lsrs	r3, r3, #31
 8016d34:	b2da      	uxtb	r2, r3
 8016d36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d3a:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	0fdb      	lsrs	r3, r3, #31
 8016d42:	b2db      	uxtb	r3, r3
 8016d44:	4053      	eors	r3, r2
 8016d46:	b2db      	uxtb	r3, r3
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d012      	beq.n	8016d72 <arm_softmax_s8+0x28aa>
        mult = 1 - mult;
 8016d4c:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8016d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d54:	2100      	movs	r1, #0
 8016d56:	f1d2 0001 	rsbs	r0, r2, #1
 8016d5a:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 8016d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8016d62:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8016d66:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8016d6a:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8016d6e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016d72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d76:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	17da      	asrs	r2, r3, #31
 8016d7e:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8016d82:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 8016d86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016d8a:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	17da      	asrs	r2, r3, #31
 8016d92:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8016d96:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 8016d9a:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 8016d9e:	460b      	mov	r3, r1
 8016da0:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8016da4:	fb02 f203 	mul.w	r2, r2, r3
 8016da8:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8016dac:	e9c7 01f6 	strd	r0, r1, [r7, #984]	; 0x3d8
 8016db0:	4601      	mov	r1, r0
 8016db2:	fb01 f303 	mul.w	r3, r1, r3
 8016db6:	4413      	add	r3, r2
 8016db8:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8016dbc:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 8016dc0:	fba2 1201 	umull	r1, r2, r2, r1
 8016dc4:	f8c7 2544 	str.w	r2, [r7, #1348]	; 0x544
 8016dc8:	460a      	mov	r2, r1
 8016dca:	f8c7 2540 	str.w	r2, [r7, #1344]	; 0x540
 8016dce:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8016dd2:	4413      	add	r3, r2
 8016dd4:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8016dd8:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8016ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016de0:	f8d7 1540 	ldr.w	r1, [r7, #1344]	; 0x540
 8016de4:	1851      	adds	r1, r2, r1
 8016de6:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8016dea:	f8d7 1544 	ldr.w	r1, [r7, #1348]	; 0x544
 8016dee:	414b      	adcs	r3, r1
 8016df0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8016df4:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8016df8:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 8016dfc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016e00:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8016e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	da0a      	bge.n	8016e22 <arm_softmax_s8+0x295a>
 8016e0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016e10:	1851      	adds	r1, r2, r1
 8016e12:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8016e16:	f143 0300 	adc.w	r3, r3, #0
 8016e1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8016e1e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8016e22:	f04f 0000 	mov.w	r0, #0
 8016e26:	f04f 0100 	mov.w	r1, #0
 8016e2a:	0fd0      	lsrs	r0, r2, #31
 8016e2c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016e30:	17d9      	asrs	r1, r3, #31
 8016e32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e36:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8016e3a:	4603      	mov	r3, r0
 8016e3c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016e3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e42:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 8016e46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e4a:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8016e4e:	6812      	ldr	r2, [r2, #0]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	429a      	cmp	r2, r3
 8016e54:	d10e      	bne.n	8016e74 <arm_softmax_s8+0x29ac>
 8016e56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e5a:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016e64:	d106      	bne.n	8016e74 <arm_softmax_s8+0x29ac>
        result = Q31_MAX;
 8016e66:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e6a:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 8016e6e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016e72:	6013      	str	r3, [r2, #0]
    return result;
 8016e74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e78:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8016e7c:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 8016e7e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e82:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8016e86:	601a      	str	r2, [r3, #0]
 8016e88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e8c:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8016e90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016e94:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	6013      	str	r3, [r2, #0]
 8016e9c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ea0:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 8016ea4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ea8:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8016eb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016eb4:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8016eb8:	2300      	movs	r3, #0
 8016eba:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8016ebc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016ec0:	f04f 0300 	mov.w	r3, #0
 8016ec4:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 8016ec8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8016ecc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ed0:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	0fdb      	lsrs	r3, r3, #31
 8016ed8:	b2da      	uxtb	r2, r3
 8016eda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ede:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	0fdb      	lsrs	r3, r3, #31
 8016ee6:	b2db      	uxtb	r3, r3
 8016ee8:	4053      	eors	r3, r2
 8016eea:	b2db      	uxtb	r3, r3
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d012      	beq.n	8016f16 <arm_softmax_s8+0x2a4e>
        mult = 1 - mult;
 8016ef0:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8016ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ef8:	2100      	movs	r1, #0
 8016efa:	f1d2 0001 	rsbs	r0, r2, #1
 8016efe:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8016f02:	eb61 0303 	sbc.w	r3, r1, r3
 8016f06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8016f0a:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8016f0e:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8016f12:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8016f16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f1a:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	17da      	asrs	r2, r3, #31
 8016f22:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8016f26:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 8016f2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016f2e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	17da      	asrs	r2, r3, #31
 8016f36:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 8016f3a:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 8016f3e:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 8016f42:	460b      	mov	r3, r1
 8016f44:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8016f48:	fb02 f203 	mul.w	r2, r2, r3
 8016f4c:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8016f50:	e9c7 01f2 	strd	r0, r1, [r7, #968]	; 0x3c8
 8016f54:	4601      	mov	r1, r0
 8016f56:	fb01 f303 	mul.w	r3, r1, r3
 8016f5a:	4413      	add	r3, r2
 8016f5c:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8016f60:	f8d7 13c0 	ldr.w	r1, [r7, #960]	; 0x3c0
 8016f64:	fba2 1201 	umull	r1, r2, r2, r1
 8016f68:	f8c7 253c 	str.w	r2, [r7, #1340]	; 0x53c
 8016f6c:	460a      	mov	r2, r1
 8016f6e:	f8c7 2538 	str.w	r2, [r7, #1336]	; 0x538
 8016f72:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 8016f76:	4413      	add	r3, r2
 8016f78:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8016f7c:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8016f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f84:	f8d7 1538 	ldr.w	r1, [r7, #1336]	; 0x538
 8016f88:	1851      	adds	r1, r2, r1
 8016f8a:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8016f8e:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 8016f92:	414b      	adcs	r3, r1
 8016f94:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8016f98:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8016f9c:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8016fa0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8016fa4:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8016fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	da0a      	bge.n	8016fc6 <arm_softmax_s8+0x2afe>
 8016fb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016fb4:	1851      	adds	r1, r2, r1
 8016fb6:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8016fba:	f143 0300 	adc.w	r3, r3, #0
 8016fbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8016fc2:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8016fc6:	f04f 0000 	mov.w	r0, #0
 8016fca:	f04f 0100 	mov.w	r1, #0
 8016fce:	0fd0      	lsrs	r0, r2, #31
 8016fd0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8016fd4:	17d9      	asrs	r1, r3, #31
 8016fd6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fda:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8016fde:	4603      	mov	r3, r0
 8016fe0:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8016fe2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fe6:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8016fea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016fee:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8016ff2:	6812      	ldr	r2, [r2, #0]
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	429a      	cmp	r2, r3
 8016ff8:	d10e      	bne.n	8017018 <arm_softmax_s8+0x2b50>
 8016ffa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8016ffe:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017008:	d106      	bne.n	8017018 <arm_softmax_s8+0x2b50>
        result = Q31_MAX;
 801700a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801700e:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8017012:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017016:	6013      	str	r3, [r2, #0]
    return result;
 8017018:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801701c:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8017020:	681a      	ldr	r2, [r3, #0]
 8017022:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017026:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 801702a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801702c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017030:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 8017034:	2300      	movs	r3, #0
 8017036:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8017038:	2104      	movs	r1, #4
 801703a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801703e:	f5a3 7237 	sub.w	r2, r3, #732	; 0x2dc
 8017042:	1e4b      	subs	r3, r1, #1
 8017044:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8017046:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801704a:	f5a3 7138 	sub.w	r1, r3, #736	; 0x2e0
 801704e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017052:	f5a3 7235 	sub.w	r2, r3, #724	; 0x2d4
 8017056:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801705a:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 801705e:	6812      	ldr	r2, [r2, #0]
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	4013      	ands	r3, r2
 8017064:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8017066:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801706a:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 801706e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017072:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	109b      	asrs	r3, r3, #2
 801707a:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 801707c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017080:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8017084:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017088:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	105b      	asrs	r3, r3, #1
 8017090:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8017092:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017096:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	2b00      	cmp	r3, #0
 801709e:	da0a      	bge.n	80170b6 <arm_softmax_s8+0x2bee>
        threshold++;
 80170a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80170a4:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 80170a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80170ac:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	3301      	adds	r3, #1
 80170b4:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80170b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80170ba:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 80170be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80170c2:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80170c6:	6812      	ldr	r2, [r2, #0]
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	429a      	cmp	r2, r3
 80170cc:	dd0a      	ble.n	80170e4 <arm_softmax_s8+0x2c1c>
        result++;
 80170ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80170d2:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 80170d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80170da:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	3301      	adds	r3, #1
 80170e2:	6013      	str	r3, [r2, #0]
    return result;
 80170e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80170e8:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80170ec:	681c      	ldr	r4, [r3, #0]
 80170ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80170f2:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 80170f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80170fa:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	6013      	str	r3, [r2, #0]
 8017102:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017106:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 801710a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801710e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017116:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801711a:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 801711e:	2300      	movs	r3, #0
 8017120:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017122:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017126:	f04f 0300 	mov.w	r3, #0
 801712a:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 801712e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017132:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017136:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	0fdb      	lsrs	r3, r3, #31
 801713e:	b2da      	uxtb	r2, r3
 8017140:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017144:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	0fdb      	lsrs	r3, r3, #31
 801714c:	b2db      	uxtb	r3, r3
 801714e:	4053      	eors	r3, r2
 8017150:	b2db      	uxtb	r3, r3
 8017152:	2b00      	cmp	r3, #0
 8017154:	d012      	beq.n	801717c <arm_softmax_s8+0x2cb4>
        mult = 1 - mult;
 8017156:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801715e:	2100      	movs	r1, #0
 8017160:	f1d2 0001 	rsbs	r0, r2, #1
 8017164:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8017168:	eb61 0303 	sbc.w	r3, r1, r3
 801716c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8017170:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8017174:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8017178:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 801717c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017180:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	17da      	asrs	r2, r3, #31
 8017188:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 801718c:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 8017190:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017194:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	17da      	asrs	r2, r3, #31
 801719c:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 80171a0:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 80171a4:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 80171a8:	460b      	mov	r3, r1
 80171aa:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 80171ae:	fb02 f203 	mul.w	r2, r2, r3
 80171b2:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80171b6:	e9c7 01ee 	strd	r0, r1, [r7, #952]	; 0x3b8
 80171ba:	4601      	mov	r1, r0
 80171bc:	fb01 f303 	mul.w	r3, r1, r3
 80171c0:	4413      	add	r3, r2
 80171c2:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 80171c6:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 80171ca:	fba2 1201 	umull	r1, r2, r2, r1
 80171ce:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
 80171d2:	460a      	mov	r2, r1
 80171d4:	f8c7 2530 	str.w	r2, [r7, #1328]	; 0x530
 80171d8:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 80171dc:	4413      	add	r3, r2
 80171de:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 80171e2:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 80171e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171ea:	f8d7 1530 	ldr.w	r1, [r7, #1328]	; 0x530
 80171ee:	1851      	adds	r1, r2, r1
 80171f0:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80171f4:	f8d7 1534 	ldr.w	r1, [r7, #1332]	; 0x534
 80171f8:	414b      	adcs	r3, r1
 80171fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80171fe:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8017202:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8017206:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 801720a:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017212:	2b00      	cmp	r3, #0
 8017214:	da0a      	bge.n	801722c <arm_softmax_s8+0x2d64>
 8017216:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801721a:	1851      	adds	r1, r2, r1
 801721c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8017220:	f143 0300 	adc.w	r3, r3, #0
 8017224:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8017228:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 801722c:	f04f 0000 	mov.w	r0, #0
 8017230:	f04f 0100 	mov.w	r1, #0
 8017234:	0fd0      	lsrs	r0, r2, #31
 8017236:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801723a:	17d9      	asrs	r1, r3, #31
 801723c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017240:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8017244:	4603      	mov	r3, r0
 8017246:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017248:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801724c:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 8017250:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017254:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8017258:	6812      	ldr	r2, [r2, #0]
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	429a      	cmp	r2, r3
 801725e:	d10e      	bne.n	801727e <arm_softmax_s8+0x2db6>
 8017260:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017264:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801726e:	d106      	bne.n	801727e <arm_softmax_s8+0x2db6>
        result = Q31_MAX;
 8017270:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017274:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8017278:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801727c:	6013      	str	r3, [r2, #0]
    return result;
 801727e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017282:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8017286:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8017288:	18e2      	adds	r2, r4, r3
 801728a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801728e:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8017292:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8017294:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017298:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 801729c:	2300      	movs	r3, #0
 801729e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80172a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80172a4:	f04f 0300 	mov.w	r3, #0
 80172a8:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 80172ac:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80172b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172b4:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	0fdb      	lsrs	r3, r3, #31
 80172bc:	b2da      	uxtb	r2, r3
 80172be:	2300      	movs	r3, #0
 80172c0:	4053      	eors	r3, r2
 80172c2:	b2db      	uxtb	r3, r3
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d012      	beq.n	80172ee <arm_softmax_s8+0x2e26>
        mult = 1 - mult;
 80172c8:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80172cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172d0:	2100      	movs	r1, #0
 80172d2:	f1d2 0001 	rsbs	r0, r2, #1
 80172d6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 80172da:	eb61 0303 	sbc.w	r3, r1, r3
 80172de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80172e2:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 80172e6:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80172ea:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80172ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80172f2:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80172f6:	681b      	ldr	r3, [r3, #0]
 80172f8:	17da      	asrs	r2, r3, #31
 80172fa:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 80172fe:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 8017302:	a3c9      	add	r3, pc, #804	; (adr r3, 8017628 <arm_softmax_s8+0x3160>)
 8017304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017308:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 801730c:	fb02 f001 	mul.w	r0, r2, r1
 8017310:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 8017314:	fb01 f103 	mul.w	r1, r1, r3
 8017318:	4401      	add	r1, r0
 801731a:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 801731e:	fba0 2302 	umull	r2, r3, r0, r2
 8017322:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8017326:	4613      	mov	r3, r2
 8017328:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 801732c:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8017330:	18cb      	adds	r3, r1, r3
 8017332:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8017336:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 801733a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801733e:	f8d7 1528 	ldr.w	r1, [r7, #1320]	; 0x528
 8017342:	1851      	adds	r1, r2, r1
 8017344:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8017348:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 801734c:	414b      	adcs	r3, r1
 801734e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8017352:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8017356:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 801735a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801735e:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8017362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017366:	2b00      	cmp	r3, #0
 8017368:	da0a      	bge.n	8017380 <arm_softmax_s8+0x2eb8>
 801736a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801736e:	1851      	adds	r1, r2, r1
 8017370:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8017374:	f143 0300 	adc.w	r3, r3, #0
 8017378:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801737c:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8017380:	f04f 0000 	mov.w	r0, #0
 8017384:	f04f 0100 	mov.w	r1, #0
 8017388:	0fd0      	lsrs	r0, r2, #31
 801738a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801738e:	17d9      	asrs	r1, r3, #31
 8017390:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017394:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8017398:	4603      	mov	r3, r0
 801739a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801739c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80173a0:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80173a4:	681a      	ldr	r2, [r3, #0]
 80173a6:	4b9e      	ldr	r3, [pc, #632]	; (8017620 <arm_softmax_s8+0x3158>)
 80173a8:	429a      	cmp	r2, r3
 80173aa:	d10e      	bne.n	80173ca <arm_softmax_s8+0x2f02>
 80173ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80173b0:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80173ba:	d106      	bne.n	80173ca <arm_softmax_s8+0x2f02>
        result = Q31_MAX;
 80173bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80173c0:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80173c4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80173c8:	6013      	str	r3, [r2, #0]
    return result;
 80173ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80173ce:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 80173d2:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 80173d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80173d8:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	441a      	add	r2, r3
 80173e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80173e4:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80173e8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80173ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80173ee:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 80173f2:	2300      	movs	r3, #0
 80173f4:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80173f6:	2102      	movs	r1, #2
 80173f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80173fc:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8017400:	1e4b      	subs	r3, r1, #1
 8017402:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8017404:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017408:	f5a3 7146 	sub.w	r1, r3, #792	; 0x318
 801740c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017410:	f5a3 7243 	sub.w	r2, r3, #780	; 0x30c
 8017414:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017418:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 801741c:	6812      	ldr	r2, [r2, #0]
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	4013      	ands	r3, r2
 8017422:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8017424:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017428:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 801742c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017430:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	105b      	asrs	r3, r3, #1
 8017438:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 801743a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801743e:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8017442:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017446:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	105b      	asrs	r3, r3, #1
 801744e:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8017450:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017454:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	2b00      	cmp	r3, #0
 801745c:	da0a      	bge.n	8017474 <arm_softmax_s8+0x2fac>
        threshold++;
 801745e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017462:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 8017466:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801746a:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	3301      	adds	r3, #1
 8017472:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8017474:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017478:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 801747c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017480:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8017484:	6812      	ldr	r2, [r2, #0]
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	429a      	cmp	r2, r3
 801748a:	dd0a      	ble.n	80174a2 <arm_softmax_s8+0x2fda>
        result++;
 801748c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017490:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8017494:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017498:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	3301      	adds	r3, #1
 80174a0:	6013      	str	r3, [r2, #0]
    return result;
 80174a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174a6:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80174aa:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 80174ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174b0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	441a      	add	r2, r3
 80174b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174bc:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80174c0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80174c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174c6:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 80174ca:	2300      	movs	r3, #0
 80174cc:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80174ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80174d2:	f04f 0300 	mov.w	r3, #0
 80174d6:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 80174da:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80174de:	2200      	movs	r2, #0
 80174e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80174e4:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	0fdb      	lsrs	r3, r3, #31
 80174ec:	b2db      	uxtb	r3, r3
 80174ee:	4053      	eors	r3, r2
 80174f0:	b2db      	uxtb	r3, r3
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d012      	beq.n	801751c <arm_softmax_s8+0x3054>
        mult = 1 - mult;
 80174f6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80174fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174fe:	2100      	movs	r1, #0
 8017500:	f1d2 0001 	rsbs	r0, r2, #1
 8017504:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8017508:	eb61 0303 	sbc.w	r3, r1, r3
 801750c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8017510:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8017514:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8017518:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801751c:	a13e      	add	r1, pc, #248	; (adr r1, 8017618 <arm_softmax_s8+0x3150>)
 801751e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017522:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017526:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	17da      	asrs	r2, r3, #31
 801752e:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 8017532:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 8017536:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 801753a:	fb03 f201 	mul.w	r2, r3, r1
 801753e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8017542:	fb00 f303 	mul.w	r3, r0, r3
 8017546:	4413      	add	r3, r2
 8017548:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 801754c:	fba0 1202 	umull	r1, r2, r0, r2
 8017550:	f8c7 2524 	str.w	r2, [r7, #1316]	; 0x524
 8017554:	460a      	mov	r2, r1
 8017556:	f8c7 2520 	str.w	r2, [r7, #1312]	; 0x520
 801755a:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 801755e:	4413      	add	r3, r2
 8017560:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8017564:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801756c:	f8d7 1520 	ldr.w	r1, [r7, #1312]	; 0x520
 8017570:	1851      	adds	r1, r2, r1
 8017572:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8017576:	f8d7 1524 	ldr.w	r1, [r7, #1316]	; 0x524
 801757a:	414b      	adcs	r3, r1
 801757c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8017580:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8017584:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8017588:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801758c:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8017590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017594:	2b00      	cmp	r3, #0
 8017596:	da0a      	bge.n	80175ae <arm_softmax_s8+0x30e6>
 8017598:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801759c:	1851      	adds	r1, r2, r1
 801759e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80175a2:	f143 0300 	adc.w	r3, r3, #0
 80175a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80175aa:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80175ae:	f04f 0000 	mov.w	r0, #0
 80175b2:	f04f 0100 	mov.w	r1, #0
 80175b6:	0fd0      	lsrs	r0, r2, #31
 80175b8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80175bc:	17d9      	asrs	r1, r3, #31
 80175be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80175c2:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 80175c6:	4603      	mov	r3, r0
 80175c8:	6013      	str	r3, [r2, #0]
    return result;
 80175ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80175ce:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 80175d2:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 80175d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80175d8:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80175dc:	4b11      	ldr	r3, [pc, #68]	; (8017624 <arm_softmax_s8+0x315c>)
 80175de:	440b      	add	r3, r1
 80175e0:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 80175e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80175e6:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80175ea:	6819      	ldr	r1, [r3, #0]
 80175ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80175f0:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80175f4:	1c4b      	adds	r3, r1, #1
 80175f6:	6013      	str	r3, [r2, #0]
 80175f8:	2301      	movs	r3, #1
 80175fa:	fa03 f201 	lsl.w	r2, r3, r1
 80175fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017602:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	4013      	ands	r3, r2
 801760a:	2b00      	cmp	r3, #0
 801760c:	d010      	beq.n	8017630 <arm_softmax_s8+0x3168>
 801760e:	f04f 32ff 	mov.w	r2, #4294967295
 8017612:	e00e      	b.n	8017632 <arm_softmax_s8+0x316a>
 8017614:	f3af 8000 	nop.w
 8017618:	70f5a894 	.word	0x70f5a894
 801761c:	00000000 	.word	0x00000000
 8017620:	2aaaaaab 	.word	0x2aaaaaab
 8017624:	70f5a894 	.word	0x70f5a894
 8017628:	2aaaaaab 	.word	0x2aaaaaab
 801762c:	00000000 	.word	0x00000000
 8017630:	2200      	movs	r2, #0
 8017632:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017636:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801763a:	601a      	str	r2, [r3, #0]
 801763c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017640:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8017644:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017648:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017650:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017654:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8017658:	2300      	movs	r3, #0
 801765a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801765c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017660:	f04f 0300 	mov.w	r3, #0
 8017664:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8017668:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801766c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017670:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	0fdb      	lsrs	r3, r3, #31
 8017678:	b2da      	uxtb	r2, r3
 801767a:	2300      	movs	r3, #0
 801767c:	4053      	eors	r3, r2
 801767e:	b2db      	uxtb	r3, r3
 8017680:	2b00      	cmp	r3, #0
 8017682:	d012      	beq.n	80176aa <arm_softmax_s8+0x31e2>
        mult = 1 - mult;
 8017684:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8017688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801768c:	2100      	movs	r1, #0
 801768e:	f1d2 0001 	rsbs	r0, r2, #1
 8017692:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 8017696:	eb61 0303 	sbc.w	r3, r1, r3
 801769a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801769e:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80176a2:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 80176a6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80176aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80176ae:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	17da      	asrs	r2, r3, #31
 80176b6:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 80176ba:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 80176be:	a3c4      	add	r3, pc, #784	; (adr r3, 80179d0 <arm_softmax_s8+0x3508>)
 80176c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176c4:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 80176c8:	fb02 f001 	mul.w	r0, r2, r1
 80176cc:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 80176d0:	fb01 f103 	mul.w	r1, r1, r3
 80176d4:	4401      	add	r1, r0
 80176d6:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 80176da:	fba0 2302 	umull	r2, r3, r0, r2
 80176de:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 80176e2:	4613      	mov	r3, r2
 80176e4:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 80176e8:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80176ec:	18cb      	adds	r3, r1, r3
 80176ee:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 80176f2:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 80176f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176fa:	f8d7 1518 	ldr.w	r1, [r7, #1304]	; 0x518
 80176fe:	1851      	adds	r1, r2, r1
 8017700:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8017704:	f8d7 151c 	ldr.w	r1, [r7, #1308]	; 0x51c
 8017708:	414b      	adcs	r3, r1
 801770a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801770e:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8017712:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8017716:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801771a:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 801771e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017722:	2b00      	cmp	r3, #0
 8017724:	da0a      	bge.n	801773c <arm_softmax_s8+0x3274>
 8017726:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801772a:	1851      	adds	r1, r2, r1
 801772c:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8017730:	f143 0300 	adc.w	r3, r3, #0
 8017734:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8017738:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 801773c:	f04f 0000 	mov.w	r0, #0
 8017740:	f04f 0100 	mov.w	r1, #0
 8017744:	0fd0      	lsrs	r0, r2, #31
 8017746:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801774a:	17d9      	asrs	r1, r3, #31
 801774c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017750:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8017754:	4603      	mov	r3, r0
 8017756:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017758:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801775c:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8017760:	681a      	ldr	r2, [r3, #0]
 8017762:	4b99      	ldr	r3, [pc, #612]	; (80179c8 <arm_softmax_s8+0x3500>)
 8017764:	429a      	cmp	r2, r3
 8017766:	d10e      	bne.n	8017786 <arm_softmax_s8+0x32be>
 8017768:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801776c:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017776:	d106      	bne.n	8017786 <arm_softmax_s8+0x32be>
        result = Q31_MAX;
 8017778:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801777c:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 8017780:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017784:	6013      	str	r3, [r2, #0]
    return result;
 8017786:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801778a:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 801778e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 8017790:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017794:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	ea02 0003 	and.w	r0, r2, r3
 801779e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177a2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	43da      	mvns	r2, r3
 80177aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177ae:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	ea02 0103 	and.w	r1, r2, r3
 80177b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177bc:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80177c0:	ea80 0301 	eor.w	r3, r0, r1
 80177c4:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 80177c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177ca:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80177ce:	6819      	ldr	r1, [r3, #0]
 80177d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177d4:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80177d8:	1c4b      	adds	r3, r1, #1
 80177da:	6013      	str	r3, [r2, #0]
 80177dc:	2301      	movs	r3, #1
 80177de:	fa03 f201 	lsl.w	r2, r3, r1
 80177e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177e6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	4013      	ands	r3, r2
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d002      	beq.n	80177f8 <arm_softmax_s8+0x3330>
 80177f2:	f04f 32ff 	mov.w	r2, #4294967295
 80177f6:	e000      	b.n	80177fa <arm_softmax_s8+0x3332>
 80177f8:	2200      	movs	r2, #0
 80177fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80177fe:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017802:	601a      	str	r2, [r3, #0]
 8017804:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017808:	f5a3 7253 	sub.w	r2, r3, #844	; 0x34c
 801780c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017810:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017814:	681b      	ldr	r3, [r3, #0]
 8017816:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017818:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801781c:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8017820:	2300      	movs	r3, #0
 8017822:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017828:	f04f 0300 	mov.w	r3, #0
 801782c:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8017830:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017834:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017838:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	0fdb      	lsrs	r3, r3, #31
 8017840:	b2da      	uxtb	r2, r3
 8017842:	2300      	movs	r3, #0
 8017844:	4053      	eors	r3, r2
 8017846:	b2db      	uxtb	r3, r3
 8017848:	2b00      	cmp	r3, #0
 801784a:	d012      	beq.n	8017872 <arm_softmax_s8+0x33aa>
        mult = 1 - mult;
 801784c:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8017850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017854:	2100      	movs	r1, #0
 8017856:	f1d2 0001 	rsbs	r0, r2, #1
 801785a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 801785e:	eb61 0303 	sbc.w	r3, r1, r3
 8017862:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8017866:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 801786a:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 801786e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8017872:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017876:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	17da      	asrs	r2, r3, #31
 801787e:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 8017882:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 8017886:	a34e      	add	r3, pc, #312	; (adr r3, 80179c0 <arm_softmax_s8+0x34f8>)
 8017888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801788c:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 8017890:	fb02 f001 	mul.w	r0, r2, r1
 8017894:	f8d7 1390 	ldr.w	r1, [r7, #912]	; 0x390
 8017898:	fb01 f103 	mul.w	r1, r1, r3
 801789c:	4401      	add	r1, r0
 801789e:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 80178a2:	fba0 2302 	umull	r2, r3, r0, r2
 80178a6:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 80178aa:	4613      	mov	r3, r2
 80178ac:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 80178b0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80178b4:	18cb      	adds	r3, r1, r3
 80178b6:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 80178ba:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80178be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178c2:	f8d7 1510 	ldr.w	r1, [r7, #1296]	; 0x510
 80178c6:	1851      	adds	r1, r2, r1
 80178c8:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80178cc:	f8d7 1514 	ldr.w	r1, [r7, #1300]	; 0x514
 80178d0:	414b      	adcs	r3, r1
 80178d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80178d6:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80178da:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 80178de:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80178e2:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80178e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	da0a      	bge.n	8017904 <arm_softmax_s8+0x343c>
 80178ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80178f2:	1851      	adds	r1, r2, r1
 80178f4:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80178f8:	f143 0300 	adc.w	r3, r3, #0
 80178fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8017900:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8017904:	f04f 0000 	mov.w	r0, #0
 8017908:	f04f 0100 	mov.w	r1, #0
 801790c:	0fd0      	lsrs	r0, r2, #31
 801790e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017912:	17d9      	asrs	r1, r3, #31
 8017914:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017918:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 801791c:	4603      	mov	r3, r0
 801791e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017920:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017924:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8017928:	681a      	ldr	r2, [r3, #0]
 801792a:	4b28      	ldr	r3, [pc, #160]	; (80179cc <arm_softmax_s8+0x3504>)
 801792c:	429a      	cmp	r2, r3
 801792e:	d10e      	bne.n	801794e <arm_softmax_s8+0x3486>
 8017930:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017934:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801793e:	d106      	bne.n	801794e <arm_softmax_s8+0x3486>
        result = Q31_MAX;
 8017940:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017944:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8017948:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801794c:	6013      	str	r3, [r2, #0]
    return result;
 801794e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017952:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8017956:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 8017958:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801795c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	ea02 0003 	and.w	r0, r2, r3
 8017966:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801796a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	43da      	mvns	r2, r3
 8017972:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017976:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	ea02 0103 	and.w	r1, r2, r3
 8017980:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017984:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8017988:	ea80 0301 	eor.w	r3, r0, r1
 801798c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 801798e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017992:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8017996:	6819      	ldr	r1, [r3, #0]
 8017998:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801799c:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80179a0:	1c4b      	adds	r3, r1, #1
 80179a2:	6013      	str	r3, [r2, #0]
 80179a4:	2301      	movs	r3, #1
 80179a6:	fa03 f201 	lsl.w	r2, r3, r1
 80179aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179ae:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	4013      	ands	r3, r2
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d00e      	beq.n	80179d8 <arm_softmax_s8+0x3510>
 80179ba:	f04f 32ff 	mov.w	r2, #4294967295
 80179be:	e00c      	b.n	80179da <arm_softmax_s8+0x3512>
 80179c0:	4da2cbf2 	.word	0x4da2cbf2
 80179c4:	00000000 	.word	0x00000000
 80179c8:	63afbe7b 	.word	0x63afbe7b
 80179cc:	4da2cbf2 	.word	0x4da2cbf2
 80179d0:	63afbe7b 	.word	0x63afbe7b
 80179d4:	00000000 	.word	0x00000000
 80179d8:	2200      	movs	r2, #0
 80179da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179de:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80179e2:	601a      	str	r2, [r3, #0]
 80179e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179e8:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 80179ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179f0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80179f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80179fc:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8017a00:	2300      	movs	r3, #0
 8017a02:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017a04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017a08:	f04f 0300 	mov.w	r3, #0
 8017a0c:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8017a10:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017a14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a18:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	0fdb      	lsrs	r3, r3, #31
 8017a20:	b2da      	uxtb	r2, r3
 8017a22:	2300      	movs	r3, #0
 8017a24:	4053      	eors	r3, r2
 8017a26:	b2db      	uxtb	r3, r3
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d012      	beq.n	8017a52 <arm_softmax_s8+0x358a>
        mult = 1 - mult;
 8017a2c:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8017a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a34:	2100      	movs	r1, #0
 8017a36:	f1d2 0001 	rsbs	r0, r2, #1
 8017a3a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 8017a3e:	eb61 0303 	sbc.w	r3, r1, r3
 8017a42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8017a46:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8017a4a:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8017a4e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8017a52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017a56:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	17da      	asrs	r2, r3, #31
 8017a5e:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 8017a62:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 8017a66:	a3c0      	add	r3, pc, #768	; (adr r3, 8017d68 <arm_softmax_s8+0x38a0>)
 8017a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a6c:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 8017a70:	fb02 f001 	mul.w	r0, r2, r1
 8017a74:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8017a78:	fb01 f103 	mul.w	r1, r1, r3
 8017a7c:	4401      	add	r1, r0
 8017a7e:	f8d7 0388 	ldr.w	r0, [r7, #904]	; 0x388
 8017a82:	fba0 2302 	umull	r2, r3, r0, r2
 8017a86:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8017a8a:	4613      	mov	r3, r2
 8017a8c:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 8017a90:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8017a94:	18cb      	adds	r3, r1, r3
 8017a96:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8017a9a:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8017a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017aa2:	f8d7 1508 	ldr.w	r1, [r7, #1288]	; 0x508
 8017aa6:	1851      	adds	r1, r2, r1
 8017aa8:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8017aac:	f8d7 150c 	ldr.w	r1, [r7, #1292]	; 0x50c
 8017ab0:	414b      	adcs	r3, r1
 8017ab2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017ab6:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8017aba:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8017abe:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017ac2:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8017ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	da08      	bge.n	8017ae0 <arm_softmax_s8+0x3618>
 8017ace:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017ad2:	1851      	adds	r1, r2, r1
 8017ad4:	67b9      	str	r1, [r7, #120]	; 0x78
 8017ad6:	f143 0300 	adc.w	r3, r3, #0
 8017ada:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017adc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8017ae0:	f04f 0000 	mov.w	r0, #0
 8017ae4:	f04f 0100 	mov.w	r1, #0
 8017ae8:	0fd0      	lsrs	r0, r2, #31
 8017aea:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017aee:	17d9      	asrs	r1, r3, #31
 8017af0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017af4:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8017af8:	4603      	mov	r3, r0
 8017afa:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017afc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b00:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8017b04:	681a      	ldr	r2, [r3, #0]
 8017b06:	4b96      	ldr	r3, [pc, #600]	; (8017d60 <arm_softmax_s8+0x3898>)
 8017b08:	429a      	cmp	r2, r3
 8017b0a:	d10e      	bne.n	8017b2a <arm_softmax_s8+0x3662>
 8017b0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b10:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8017b14:	681b      	ldr	r3, [r3, #0]
 8017b16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017b1a:	d106      	bne.n	8017b2a <arm_softmax_s8+0x3662>
        result = Q31_MAX;
 8017b1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b20:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8017b24:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017b28:	6013      	str	r3, [r2, #0]
    return result;
 8017b2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b2e:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8017b32:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 8017b34:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b38:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017b3c:	681b      	ldr	r3, [r3, #0]
 8017b3e:	ea02 0003 	and.w	r0, r2, r3
 8017b42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b46:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	43da      	mvns	r2, r3
 8017b4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b52:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	ea02 0103 	and.w	r1, r2, r3
 8017b5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b60:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8017b64:	ea80 0301 	eor.w	r3, r0, r1
 8017b68:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 8017b6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b6e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8017b72:	6819      	ldr	r1, [r3, #0]
 8017b74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b78:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8017b7c:	1c4b      	adds	r3, r1, #1
 8017b7e:	6013      	str	r3, [r2, #0]
 8017b80:	2301      	movs	r3, #1
 8017b82:	fa03 f201 	lsl.w	r2, r3, r1
 8017b86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017b8a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	4013      	ands	r3, r2
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d002      	beq.n	8017b9c <arm_softmax_s8+0x36d4>
 8017b96:	f04f 32ff 	mov.w	r2, #4294967295
 8017b9a:	e000      	b.n	8017b9e <arm_softmax_s8+0x36d6>
 8017b9c:	2200      	movs	r2, #0
 8017b9e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ba2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017ba6:	601a      	str	r2, [r3, #0]
 8017ba8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bac:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 8017bb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bb4:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017bbc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bc0:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017bc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017bcc:	f04f 0300 	mov.w	r3, #0
 8017bd0:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8017bd4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017bd8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017bdc:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	0fdb      	lsrs	r3, r3, #31
 8017be4:	b2da      	uxtb	r2, r3
 8017be6:	2300      	movs	r3, #0
 8017be8:	4053      	eors	r3, r2
 8017bea:	b2db      	uxtb	r3, r3
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d010      	beq.n	8017c12 <arm_softmax_s8+0x374a>
        mult = 1 - mult;
 8017bf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bf8:	2100      	movs	r1, #0
 8017bfa:	f1d2 0001 	rsbs	r0, r2, #1
 8017bfe:	6738      	str	r0, [r7, #112]	; 0x70
 8017c00:	eb61 0303 	sbc.w	r3, r1, r3
 8017c04:	677b      	str	r3, [r7, #116]	; 0x74
 8017c06:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8017c0a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017c0e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8017c12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017c16:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	17da      	asrs	r2, r3, #31
 8017c1e:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 8017c22:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 8017c26:	a34c      	add	r3, pc, #304	; (adr r3, 8017d58 <arm_softmax_s8+0x3890>)
 8017c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c2c:	f8d7 1384 	ldr.w	r1, [r7, #900]	; 0x384
 8017c30:	fb02 f001 	mul.w	r0, r2, r1
 8017c34:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 8017c38:	fb01 f103 	mul.w	r1, r1, r3
 8017c3c:	4401      	add	r1, r0
 8017c3e:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 8017c42:	fba0 2302 	umull	r2, r3, r0, r2
 8017c46:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8017c4a:	4613      	mov	r3, r2
 8017c4c:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8017c50:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 8017c54:	18cb      	adds	r3, r1, r3
 8017c56:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8017c5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c62:	f8d7 1500 	ldr.w	r1, [r7, #1280]	; 0x500
 8017c66:	1851      	adds	r1, r2, r1
 8017c68:	66b9      	str	r1, [r7, #104]	; 0x68
 8017c6a:	f8d7 1504 	ldr.w	r1, [r7, #1284]	; 0x504
 8017c6e:	414b      	adcs	r3, r1
 8017c70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8017c72:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8017c76:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8017c7a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017c7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8017c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	da08      	bge.n	8017c9c <arm_softmax_s8+0x37d4>
 8017c8a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017c8e:	1851      	adds	r1, r2, r1
 8017c90:	6639      	str	r1, [r7, #96]	; 0x60
 8017c92:	f143 0300 	adc.w	r3, r3, #0
 8017c96:	667b      	str	r3, [r7, #100]	; 0x64
 8017c98:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8017c9c:	f04f 0000 	mov.w	r0, #0
 8017ca0:	f04f 0100 	mov.w	r1, #0
 8017ca4:	0fd0      	lsrs	r0, r2, #31
 8017ca6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017caa:	17d9      	asrs	r1, r3, #31
 8017cac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017cb0:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8017cb4:	4603      	mov	r3, r0
 8017cb6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017cb8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017cbc:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8017cc0:	681a      	ldr	r2, [r3, #0]
 8017cc2:	4b28      	ldr	r3, [pc, #160]	; (8017d64 <arm_softmax_s8+0x389c>)
 8017cc4:	429a      	cmp	r2, r3
 8017cc6:	d10e      	bne.n	8017ce6 <arm_softmax_s8+0x381e>
 8017cc8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ccc:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017cd6:	d106      	bne.n	8017ce6 <arm_softmax_s8+0x381e>
        result = Q31_MAX;
 8017cd8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017cdc:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8017ce0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017ce4:	6013      	str	r3, [r2, #0]
    return result;
 8017ce6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017cea:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8017cee:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8017cf0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017cf4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	ea02 0003 	and.w	r0, r2, r3
 8017cfe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d02:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	43da      	mvns	r2, r3
 8017d0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d0e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	ea02 0103 	and.w	r1, r2, r3
 8017d18:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d1c:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8017d20:	ea80 0301 	eor.w	r3, r0, r1
 8017d24:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 8017d26:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d2a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8017d2e:	6819      	ldr	r1, [r3, #0]
 8017d30:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d34:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8017d38:	1c4b      	adds	r3, r1, #1
 8017d3a:	6013      	str	r3, [r2, #0]
 8017d3c:	2301      	movs	r3, #1
 8017d3e:	fa03 f201 	lsl.w	r2, r3, r1
 8017d42:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d46:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	4013      	ands	r3, r2
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d00e      	beq.n	8017d70 <arm_softmax_s8+0x38a8>
 8017d52:	f04f 32ff 	mov.w	r2, #4294967295
 8017d56:	e00c      	b.n	8017d72 <arm_softmax_s8+0x38aa>
 8017d58:	1152aaa4 	.word	0x1152aaa4
 8017d5c:	00000000 	.word	0x00000000
 8017d60:	2f16ac6c 	.word	0x2f16ac6c
 8017d64:	1152aaa4 	.word	0x1152aaa4
 8017d68:	2f16ac6c 	.word	0x2f16ac6c
 8017d6c:	00000000 	.word	0x00000000
 8017d70:	2200      	movs	r2, #0
 8017d72:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d76:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017d7a:	601a      	str	r2, [r3, #0]
 8017d7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d80:	f5a3 725f 	sub.w	r2, r3, #892	; 0x37c
 8017d84:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d88:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017d90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017d94:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8017d98:	2300      	movs	r3, #0
 8017d9a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017d9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017da0:	f04f 0300 	mov.w	r3, #0
 8017da4:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 8017da8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017dac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017db0:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	0fdb      	lsrs	r3, r3, #31
 8017db8:	b2da      	uxtb	r2, r3
 8017dba:	2300      	movs	r3, #0
 8017dbc:	4053      	eors	r3, r2
 8017dbe:	b2db      	uxtb	r3, r3
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d010      	beq.n	8017de6 <arm_softmax_s8+0x391e>
        mult = 1 - mult;
 8017dc4:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8017dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017dcc:	2100      	movs	r1, #0
 8017dce:	f1d2 0001 	rsbs	r0, r2, #1
 8017dd2:	65b8      	str	r0, [r7, #88]	; 0x58
 8017dd4:	eb61 0303 	sbc.w	r3, r1, r3
 8017dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017dda:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8017dde:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8017de2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8017de6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017dea:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	17da      	asrs	r2, r3, #31
 8017df2:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8017df6:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 8017dfa:	a3bd      	add	r3, pc, #756	; (adr r3, 80180f0 <arm_softmax_s8+0x3c28>)
 8017dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e00:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8017e04:	fb02 f001 	mul.w	r0, r2, r1
 8017e08:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 8017e0c:	fb01 f103 	mul.w	r1, r1, r3
 8017e10:	4401      	add	r1, r0
 8017e12:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 8017e16:	fba0 2302 	umull	r2, r3, r0, r2
 8017e1a:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8017e1e:	4613      	mov	r3, r2
 8017e20:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 8017e24:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8017e28:	18cb      	adds	r3, r1, r3
 8017e2a:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8017e2e:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8017e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e36:	f8d7 14f8 	ldr.w	r1, [r7, #1272]	; 0x4f8
 8017e3a:	1851      	adds	r1, r2, r1
 8017e3c:	6539      	str	r1, [r7, #80]	; 0x50
 8017e3e:	f8d7 14fc 	ldr.w	r1, [r7, #1276]	; 0x4fc
 8017e42:	414b      	adcs	r3, r1
 8017e44:	657b      	str	r3, [r7, #84]	; 0x54
 8017e46:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8017e4a:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8017e4e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8017e52:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8017e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	da08      	bge.n	8017e70 <arm_softmax_s8+0x39a8>
 8017e5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017e62:	1851      	adds	r1, r2, r1
 8017e64:	64b9      	str	r1, [r7, #72]	; 0x48
 8017e66:	f143 0300 	adc.w	r3, r3, #0
 8017e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017e6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8017e70:	f04f 0000 	mov.w	r0, #0
 8017e74:	f04f 0100 	mov.w	r1, #0
 8017e78:	0fd0      	lsrs	r0, r2, #31
 8017e7a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8017e7e:	17d9      	asrs	r1, r3, #31
 8017e80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e84:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8017e88:	4603      	mov	r3, r0
 8017e8a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8017e8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017e90:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8017e94:	681a      	ldr	r2, [r3, #0]
 8017e96:	4b94      	ldr	r3, [pc, #592]	; (80180e8 <arm_softmax_s8+0x3c20>)
 8017e98:	429a      	cmp	r2, r3
 8017e9a:	d10e      	bne.n	8017eba <arm_softmax_s8+0x39f2>
 8017e9c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ea0:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017eaa:	d106      	bne.n	8017eba <arm_softmax_s8+0x39f2>
        result = Q31_MAX;
 8017eac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017eb0:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8017eb4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017eb8:	6013      	str	r3, [r2, #0]
    return result;
 8017eba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ebe:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8017ec2:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 8017ec4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ec8:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	ea02 0003 	and.w	r0, r2, r3
 8017ed2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ed6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	43da      	mvns	r2, r3
 8017ede:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ee2:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017ee6:	681b      	ldr	r3, [r3, #0]
 8017ee8:	ea02 0103 	and.w	r1, r2, r3
 8017eec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017ef0:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8017ef4:	ea80 0301 	eor.w	r3, r0, r1
 8017ef8:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 8017efa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017efe:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8017f02:	6819      	ldr	r1, [r3, #0]
 8017f04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f08:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8017f0c:	1c4b      	adds	r3, r1, #1
 8017f0e:	6013      	str	r3, [r2, #0]
 8017f10:	2301      	movs	r3, #1
 8017f12:	fa03 f201 	lsl.w	r2, r3, r1
 8017f16:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f1a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	4013      	ands	r3, r2
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d002      	beq.n	8017f2c <arm_softmax_s8+0x3a64>
 8017f26:	f04f 32ff 	mov.w	r2, #4294967295
 8017f2a:	e000      	b.n	8017f2e <arm_softmax_s8+0x3a66>
 8017f2c:	2200      	movs	r2, #0
 8017f2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f32:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8017f36:	601a      	str	r2, [r3, #0]
 8017f38:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f3c:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8017f40:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f44:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8017f4c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f50:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8017f54:	2300      	movs	r3, #0
 8017f56:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8017f58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017f5c:	f04f 0300 	mov.w	r3, #0
 8017f60:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 8017f64:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8017f68:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017f6c:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	0fdb      	lsrs	r3, r3, #31
 8017f74:	b2da      	uxtb	r2, r3
 8017f76:	2300      	movs	r3, #0
 8017f78:	4053      	eors	r3, r2
 8017f7a:	b2db      	uxtb	r3, r3
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d010      	beq.n	8017fa2 <arm_softmax_s8+0x3ada>
        mult = 1 - mult;
 8017f80:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8017f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f88:	2100      	movs	r1, #0
 8017f8a:	f1d2 0001 	rsbs	r0, r2, #1
 8017f8e:	6438      	str	r0, [r7, #64]	; 0x40
 8017f90:	eb61 0303 	sbc.w	r3, r1, r3
 8017f94:	647b      	str	r3, [r7, #68]	; 0x44
 8017f96:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8017f9a:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8017f9e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8017fa2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8017fa6:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	17da      	asrs	r2, r3, #31
 8017fae:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 8017fb2:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 8017fb6:	4a4d      	ldr	r2, [pc, #308]	; (80180ec <arm_softmax_s8+0x3c24>)
 8017fb8:	f04f 0300 	mov.w	r3, #0
 8017fbc:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 8017fc0:	fb02 f001 	mul.w	r0, r2, r1
 8017fc4:	f8d7 1370 	ldr.w	r1, [r7, #880]	; 0x370
 8017fc8:	fb01 f103 	mul.w	r1, r1, r3
 8017fcc:	4401      	add	r1, r0
 8017fce:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8017fd2:	fba0 2302 	umull	r2, r3, r0, r2
 8017fd6:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8017fda:	4613      	mov	r3, r2
 8017fdc:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 8017fe0:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8017fe4:	18cb      	adds	r3, r1, r3
 8017fe6:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8017fea:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8017fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ff2:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	; 0x4f0
 8017ff6:	1851      	adds	r1, r2, r1
 8017ff8:	63b9      	str	r1, [r7, #56]	; 0x38
 8017ffa:	f8d7 14f4 	ldr.w	r1, [r7, #1268]	; 0x4f4
 8017ffe:	414b      	adcs	r3, r1
 8018000:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018002:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8018006:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 801800a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801800e:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8018012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018016:	2b00      	cmp	r3, #0
 8018018:	da08      	bge.n	801802c <arm_softmax_s8+0x3b64>
 801801a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801801e:	1851      	adds	r1, r2, r1
 8018020:	6339      	str	r1, [r7, #48]	; 0x30
 8018022:	f143 0300 	adc.w	r3, r3, #0
 8018026:	637b      	str	r3, [r7, #52]	; 0x34
 8018028:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801802c:	f04f 0000 	mov.w	r0, #0
 8018030:	f04f 0100 	mov.w	r1, #0
 8018034:	0fd0      	lsrs	r0, r2, #31
 8018036:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801803a:	17d9      	asrs	r1, r3, #31
 801803c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018040:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8018044:	4603      	mov	r3, r0
 8018046:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018048:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801804c:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8018050:	681a      	ldr	r2, [r3, #0]
 8018052:	4b26      	ldr	r3, [pc, #152]	; (80180ec <arm_softmax_s8+0x3c24>)
 8018054:	429a      	cmp	r2, r3
 8018056:	d10e      	bne.n	8018076 <arm_softmax_s8+0x3bae>
 8018058:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801805c:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018066:	d106      	bne.n	8018076 <arm_softmax_s8+0x3bae>
        result = Q31_MAX;
 8018068:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801806c:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8018070:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018074:	6013      	str	r3, [r2, #0]
    return result;
 8018076:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801807a:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 801807e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 8018080:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018084:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	ea02 0003 	and.w	r0, r2, r3
 801808e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018092:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	43da      	mvns	r2, r3
 801809a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801809e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80180a2:	681b      	ldr	r3, [r3, #0]
 80180a4:	ea02 0103 	and.w	r1, r2, r3
 80180a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80180ac:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80180b0:	ea80 0301 	eor.w	r3, r0, r1
 80180b4:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 80180b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80180ba:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80180be:	6819      	ldr	r1, [r3, #0]
 80180c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80180c4:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80180c8:	1c4b      	adds	r3, r1, #1
 80180ca:	6013      	str	r3, [r2, #0]
 80180cc:	2301      	movs	r3, #1
 80180ce:	fa03 f201 	lsl.w	r2, r3, r1
 80180d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80180d6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80180da:	681b      	ldr	r3, [r3, #0]
 80180dc:	4013      	ands	r3, r2
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d00a      	beq.n	80180f8 <arm_softmax_s8+0x3c30>
 80180e2:	f04f 32ff 	mov.w	r2, #4294967295
 80180e6:	e008      	b.n	80180fa <arm_softmax_s8+0x3c32>
 80180e8:	02582ab7 	.word	0x02582ab7
 80180ec:	000afe11 	.word	0x000afe11
 80180f0:	02582ab7 	.word	0x02582ab7
 80180f4:	00000000 	.word	0x00000000
 80180f8:	2200      	movs	r2, #0
 80180fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80180fe:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018102:	601a      	str	r2, [r3, #0]
 8018104:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018108:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 801810c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018110:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018118:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801811c:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8018120:	2300      	movs	r3, #0
 8018122:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8018124:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018128:	f04f 0300 	mov.w	r3, #0
 801812c:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8018130:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8018134:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018138:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801813c:	681b      	ldr	r3, [r3, #0]
 801813e:	0fdb      	lsrs	r3, r3, #31
 8018140:	b2da      	uxtb	r2, r3
 8018142:	2300      	movs	r3, #0
 8018144:	4053      	eors	r3, r2
 8018146:	b2db      	uxtb	r3, r3
 8018148:	2b00      	cmp	r3, #0
 801814a:	d010      	beq.n	801816e <arm_softmax_s8+0x3ca6>
        mult = 1 - mult;
 801814c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8018150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018154:	2100      	movs	r1, #0
 8018156:	f1d2 0001 	rsbs	r0, r2, #1
 801815a:	62b8      	str	r0, [r7, #40]	; 0x28
 801815c:	eb61 0303 	sbc.w	r3, r1, r3
 8018160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018162:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8018166:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 801816a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801816e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018172:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	17da      	asrs	r2, r3, #31
 801817a:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 801817e:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 8018182:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 8018186:	f04f 0300 	mov.w	r3, #0
 801818a:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 801818e:	fb02 f001 	mul.w	r0, r2, r1
 8018192:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 8018196:	fb01 f103 	mul.w	r1, r1, r3
 801819a:	4401      	add	r1, r0
 801819c:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 80181a0:	fba0 2302 	umull	r2, r3, r0, r2
 80181a4:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 80181a8:	4613      	mov	r3, r2
 80181aa:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 80181ae:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80181b2:	18cb      	adds	r3, r1, r3
 80181b4:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 80181b8:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80181bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181c0:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 80181c4:	1851      	adds	r1, r2, r1
 80181c6:	6239      	str	r1, [r7, #32]
 80181c8:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	; 0x4ec
 80181cc:	414b      	adcs	r3, r1
 80181ce:	627b      	str	r3, [r7, #36]	; 0x24
 80181d0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80181d4:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80181d8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80181dc:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80181e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	da08      	bge.n	80181fa <arm_softmax_s8+0x3d32>
 80181e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80181ec:	1851      	adds	r1, r2, r1
 80181ee:	61b9      	str	r1, [r7, #24]
 80181f0:	f143 0300 	adc.w	r3, r3, #0
 80181f4:	61fb      	str	r3, [r7, #28]
 80181f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80181fa:	f04f 0000 	mov.w	r0, #0
 80181fe:	f04f 0100 	mov.w	r1, #0
 8018202:	0fd0      	lsrs	r0, r2, #31
 8018204:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8018208:	17d9      	asrs	r1, r3, #31
 801820a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801820e:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8018212:	4603      	mov	r3, r0
 8018214:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018216:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801821a:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	2bf2      	cmp	r3, #242	; 0xf2
 8018222:	d10e      	bne.n	8018242 <arm_softmax_s8+0x3d7a>
 8018224:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018228:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018232:	d106      	bne.n	8018242 <arm_softmax_s8+0x3d7a>
        result = Q31_MAX;
 8018234:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018238:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 801823c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018240:	6013      	str	r3, [r2, #0]
    return result;
 8018242:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018246:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 801824a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 801824c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018250:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	ea02 0003 	and.w	r0, r2, r3
 801825a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801825e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	43da      	mvns	r2, r3
 8018266:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801826a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	ea02 0103 	and.w	r1, r2, r3
 8018274:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018278:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 801827c:	ea80 0301 	eor.w	r3, r0, r1
 8018280:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 8018282:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018286:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	2b00      	cmp	r3, #0
 801828e:	d102      	bne.n	8018296 <arm_softmax_s8+0x3dce>
 8018290:	f04f 32ff 	mov.w	r2, #4294967295
 8018294:	e000      	b.n	8018298 <arm_softmax_s8+0x3dd0>
 8018296:	2200      	movs	r2, #0
 8018298:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801829c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80182a0:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 80182a2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182a6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80182aa:	681b      	ldr	r3, [r3, #0]
 80182ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80182b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182b4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	43da      	mvns	r2, r3
 80182bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182c0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	4013      	ands	r3, r2
 80182c8:	4059      	eors	r1, r3
 80182ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182ce:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 80182d2:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 80182d6:	6013      	str	r3, [r2, #0]
 80182d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182dc:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80182e0:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 80182e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80182e6:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 80182ea:	2300      	movs	r3, #0
 80182ec:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80182ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80182f2:	f04f 0300 	mov.w	r3, #0
 80182f6:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 80182fa:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80182fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018302:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	0fdb      	lsrs	r3, r3, #31
 801830a:	b2da      	uxtb	r2, r3
 801830c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018310:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	0fdb      	lsrs	r3, r3, #31
 8018318:	b2db      	uxtb	r3, r3
 801831a:	4053      	eors	r3, r2
 801831c:	b2db      	uxtb	r3, r3
 801831e:	2b00      	cmp	r3, #0
 8018320:	d010      	beq.n	8018344 <arm_softmax_s8+0x3e7c>
        mult = 1 - mult;
 8018322:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8018326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801832a:	2100      	movs	r1, #0
 801832c:	f1d2 0001 	rsbs	r0, r2, #1
 8018330:	6138      	str	r0, [r7, #16]
 8018332:	eb61 0303 	sbc.w	r3, r1, r3
 8018336:	617b      	str	r3, [r7, #20]
 8018338:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801833c:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8018340:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8018344:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018348:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	17da      	asrs	r2, r3, #31
 8018350:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8018354:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
 8018358:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801835c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	17da      	asrs	r2, r3, #31
 8018364:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8018368:	f8c7 23e4 	str.w	r2, [r7, #996]	; 0x3e4
 801836c:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 8018370:	460b      	mov	r3, r1
 8018372:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8018376:	fb02 f203 	mul.w	r2, r2, r3
 801837a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 801837e:	e9c7 01fa 	strd	r0, r1, [r7, #1000]	; 0x3e8
 8018382:	4601      	mov	r1, r0
 8018384:	fb01 f303 	mul.w	r3, r1, r3
 8018388:	4413      	add	r3, r2
 801838a:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 801838e:	f8d7 13e0 	ldr.w	r1, [r7, #992]	; 0x3e0
 8018392:	fba2 1201 	umull	r1, r2, r2, r1
 8018396:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
 801839a:	460a      	mov	r2, r1
 801839c:	f8c7 2548 	str.w	r2, [r7, #1352]	; 0x548
 80183a0:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 80183a4:	4413      	add	r3, r2
 80183a6:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 80183aa:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80183ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183b2:	f8d7 1548 	ldr.w	r1, [r7, #1352]	; 0x548
 80183b6:	1851      	adds	r1, r2, r1
 80183b8:	60b9      	str	r1, [r7, #8]
 80183ba:	f8d7 154c 	ldr.w	r1, [r7, #1356]	; 0x54c
 80183be:	414b      	adcs	r3, r1
 80183c0:	60fb      	str	r3, [r7, #12]
 80183c2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80183c6:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 80183ca:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80183ce:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80183d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	da08      	bge.n	80183ec <arm_softmax_s8+0x3f24>
 80183da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80183de:	1851      	adds	r1, r2, r1
 80183e0:	6039      	str	r1, [r7, #0]
 80183e2:	f143 0300 	adc.w	r3, r3, #0
 80183e6:	607b      	str	r3, [r7, #4]
 80183e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80183ec:	f04f 0000 	mov.w	r0, #0
 80183f0:	f04f 0100 	mov.w	r1, #0
 80183f4:	0fd0      	lsrs	r0, r2, #31
 80183f6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80183fa:	17d9      	asrs	r1, r3, #31
 80183fc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018400:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8018404:	4603      	mov	r3, r0
 8018406:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8018408:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801840c:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8018410:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018414:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8018418:	6812      	ldr	r2, [r2, #0]
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	429a      	cmp	r2, r3
 801841e:	d10e      	bne.n	801843e <arm_softmax_s8+0x3f76>
 8018420:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018424:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801842e:	d106      	bne.n	801843e <arm_softmax_s8+0x3f76>
        result = Q31_MAX;
 8018430:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018434:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8018438:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801843c:	6013      	str	r3, [r2, #0]
    return result;
 801843e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018442:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8018446:	681a      	ldr	r2, [r3, #0]
 8018448:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801844c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8018450:	601a      	str	r2, [r3, #0]
 8018452:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018456:	f5a3 7219 	sub.w	r2, r3, #612	; 0x264
 801845a:	f8d7 3988 	ldr.w	r3, [r7, #2440]	; 0x988
 801845e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018460:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018464:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8018468:	2300      	movs	r3, #0
 801846a:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801846c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018470:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8018474:	2201      	movs	r2, #1
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	fa02 f103 	lsl.w	r1, r2, r3
 801847c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018480:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 8018484:	1e4b      	subs	r3, r1, #1
 8018486:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8018488:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801848c:	f5a3 711c 	sub.w	r1, r3, #624	; 0x270
 8018490:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018494:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8018498:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801849c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80184a0:	6812      	ldr	r2, [r2, #0]
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	4013      	ands	r3, r2
 80184a6:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80184a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184ac:	f5a3 711a 	sub.w	r1, r3, #616	; 0x268
 80184b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184b4:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80184b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184bc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80184c0:	6812      	ldr	r2, [r2, #0]
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	fa42 f303 	asr.w	r3, r2, r3
 80184c8:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 80184ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184ce:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 80184d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184d6:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	105b      	asrs	r3, r3, #1
 80184de:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80184e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184e4:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	da0a      	bge.n	8018504 <arm_softmax_s8+0x403c>
        threshold++;
 80184ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184f2:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 80184f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80184fa:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80184fe:	681b      	ldr	r3, [r3, #0]
 8018500:	3301      	adds	r3, #1
 8018502:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8018504:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018508:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 801850c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018510:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8018514:	6812      	ldr	r2, [r2, #0]
 8018516:	681b      	ldr	r3, [r3, #0]
 8018518:	429a      	cmp	r2, r3
 801851a:	dd0a      	ble.n	8018532 <arm_softmax_s8+0x406a>
        result++;
 801851c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018520:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 8018524:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018528:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	3301      	adds	r3, #1
 8018530:	6013      	str	r3, [r2, #0]
    return result;
 8018532:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018536:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 801853a:	681b      	ldr	r3, [r3, #0]
                const int32_t res =
 801853c:	3b80      	subs	r3, #128	; 0x80
 801853e:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 8018542:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8018546:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 801854a:	db09      	blt.n	8018560 <arm_softmax_s8+0x4098>
 801854c:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8018550:	2b7e      	cmp	r3, #126	; 0x7e
 8018552:	dc03      	bgt.n	801855c <arm_softmax_s8+0x4094>
 8018554:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8018558:	b259      	sxtb	r1, r3
 801855a:	e003      	b.n	8018564 <arm_softmax_s8+0x409c>
 801855c:	217f      	movs	r1, #127	; 0x7f
 801855e:	e001      	b.n	8018564 <arm_softmax_s8+0x409c>
 8018560:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8018564:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8018568:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 801856c:	441a      	add	r2, r3
 801856e:	460b      	mov	r3, r1
 8018570:	7013      	strb	r3, [r2, #0]
 8018572:	e006      	b.n	8018582 <arm_softmax_s8+0x40ba>
            }
            else
            {
                output[col] = -128;
 8018574:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8018578:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 801857c:	441a      	add	r2, r3
 801857e:	2380      	movs	r3, #128	; 0x80
 8018580:	7013      	strb	r3, [r2, #0]
        for (col = 0; col < row_size; ++col)
 8018582:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8018586:	3301      	adds	r3, #1
 8018588:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 801858c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8018590:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8018594:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	429a      	cmp	r2, r3
 801859c:	f6fe aa71 	blt.w	8016a82 <arm_softmax_s8+0x25ba>
            }
        }
        input += row_size;
 80185a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80185a4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80185a8:	6819      	ldr	r1, [r3, #0]
 80185aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80185ae:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 80185b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80185b6:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	440b      	add	r3, r1
 80185be:	6013      	str	r3, [r2, #0]
        output += row_size;
 80185c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80185c4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80185c8:	681a      	ldr	r2, [r3, #0]
 80185ca:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 80185ce:	4413      	add	r3, r2
 80185d0:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 80185d4:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 80185d8:	3301      	adds	r3, #1
 80185da:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 80185de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80185e2:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80185e6:	f8d7 29a0 	ldr.w	r2, [r7, #2464]	; 0x9a0
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	429a      	cmp	r2, r3
 80185ee:	f6fb af93 	blt.w	8014518 <arm_softmax_s8+0x50>
    }

#endif
}
 80185f2:	bf00      	nop
 80185f4:	bf00      	nop
 80185f6:	f607 17a8 	addw	r7, r7, #2472	; 0x9a8
 80185fa:	46bd      	mov	sp, r7
 80185fc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8018600:	4770      	bx	lr
 8018602:	bf00      	nop

08018604 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 8018604:	b480      	push	{r7}
 8018606:	b089      	sub	sp, #36	; 0x24
 8018608:	af00      	add	r7, sp, #0
 801860a:	60f8      	str	r0, [r7, #12]
 801860c:	60b9      	str	r1, [r7, #8]
 801860e:	607a      	str	r2, [r7, #4]
 8018610:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8018618:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 801861a:	683b      	ldr	r3, [r7, #0]
 801861c:	00db      	lsls	r3, r3, #3
 801861e:	68fa      	ldr	r2, [r7, #12]
 8018620:	4413      	add	r3, r2
 8018622:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 8018624:	69fb      	ldr	r3, [r7, #28]
 8018626:	ed93 7a00 	vldr	s14, [r3]
 801862a:	69bb      	ldr	r3, [r7, #24]
 801862c:	edd3 7a00 	vldr	s15, [r3]
 8018630:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018634:	69fb      	ldr	r3, [r7, #28]
 8018636:	edd3 6a01 	vldr	s13, [r3, #4]
 801863a:	69bb      	ldr	r3, [r7, #24]
 801863c:	edd3 7a01 	vldr	s15, [r3, #4]
 8018640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018648:	edc7 7a04 	vstr	s15, [r7, #16]
 801864c:	69fb      	ldr	r3, [r7, #28]
 801864e:	ed93 7a00 	vldr	s14, [r3]
 8018652:	69bb      	ldr	r3, [r7, #24]
 8018654:	edd3 7a01 	vldr	s15, [r3, #4]
 8018658:	ee27 7a27 	vmul.f32	s14, s14, s15
 801865c:	69fb      	ldr	r3, [r7, #28]
 801865e:	edd3 6a01 	vldr	s13, [r3, #4]
 8018662:	69bb      	ldr	r3, [r7, #24]
 8018664:	edd3 7a00 	vldr	s15, [r3]
 8018668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801866c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018670:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 8018674:	68bb      	ldr	r3, [r7, #8]
 8018676:	00db      	lsls	r3, r3, #3
 8018678:	69ba      	ldr	r2, [r7, #24]
 801867a:	4413      	add	r3, r2
 801867c:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	ed93 7a00 	vldr	s14, [r3]
 8018684:	edd7 7a04 	vldr	s15, [r7, #16]
 8018688:	ee77 7a67 	vsub.f32	s15, s14, s15
 801868c:	69fb      	ldr	r3, [r7, #28]
 801868e:	edc3 7a00 	vstr	s15, [r3]
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	ed93 7a01 	vldr	s14, [r3, #4]
 8018698:	edd7 7a05 	vldr	s15, [r7, #20]
 801869c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80186a0:	69fb      	ldr	r3, [r7, #28]
 80186a2:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	ed93 7a00 	vldr	s14, [r3]
 80186ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80186b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	edc3 7a00 	vstr	s15, [r3]
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80186c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80186c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 80186ce:	69fb      	ldr	r3, [r7, #28]
 80186d0:	3308      	adds	r3, #8
 80186d2:	61fb      	str	r3, [r7, #28]
        ++Fout;
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	3308      	adds	r3, #8
 80186d8:	60fb      	str	r3, [r7, #12]
    }while (--m);
 80186da:	683b      	ldr	r3, [r7, #0]
 80186dc:	3b01      	subs	r3, #1
 80186de:	603b      	str	r3, [r7, #0]
 80186e0:	683b      	ldr	r3, [r7, #0]
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	bf14      	ite	ne
 80186e6:	2301      	movne	r3, #1
 80186e8:	2300      	moveq	r3, #0
 80186ea:	b2db      	uxtb	r3, r3
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d000      	beq.n	80186f2 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0xee>
    do{
 80186f0:	e798      	b.n	8018624 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0x20>
}
 80186f2:	bf00      	nop
 80186f4:	3724      	adds	r7, #36	; 0x24
 80186f6:	46bd      	mov	sp, r7
 80186f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186fc:	4770      	bx	lr

080186fe <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 80186fe:	b480      	push	{r7}
 8018700:	b097      	sub	sp, #92	; 0x5c
 8018702:	af00      	add	r7, sp, #0
 8018704:	60f8      	str	r0, [r7, #12]
 8018706:	60b9      	str	r1, [r7, #8]
 8018708:	607a      	str	r2, [r7, #4]
 801870a:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 801870c:	683b      	ldr	r3, [r7, #0]
 801870e:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 8018710:	683b      	ldr	r3, [r7, #0]
 8018712:	005b      	lsls	r3, r3, #1
 8018714:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 8018716:	683a      	ldr	r2, [r7, #0]
 8018718:	4613      	mov	r3, r2
 801871a:	005b      	lsls	r3, r3, #1
 801871c:	4413      	add	r3, r2
 801871e:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8018726:	657b      	str	r3, [r7, #84]	; 0x54
 8018728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801872a:	653b      	str	r3, [r7, #80]	; 0x50
 801872c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801872e:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 8018730:	683b      	ldr	r3, [r7, #0]
 8018732:	00db      	lsls	r3, r3, #3
 8018734:	68fa      	ldr	r2, [r7, #12]
 8018736:	4413      	add	r3, r2
 8018738:	ed93 7a00 	vldr	s14, [r3]
 801873c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801873e:	edd3 7a00 	vldr	s15, [r3]
 8018742:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018746:	683b      	ldr	r3, [r7, #0]
 8018748:	00db      	lsls	r3, r3, #3
 801874a:	68fa      	ldr	r2, [r7, #12]
 801874c:	4413      	add	r3, r2
 801874e:	edd3 6a01 	vldr	s13, [r3, #4]
 8018752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018754:	edd3 7a01 	vldr	s15, [r3, #4]
 8018758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801875c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018760:	edc7 7a04 	vstr	s15, [r7, #16]
 8018764:	683b      	ldr	r3, [r7, #0]
 8018766:	00db      	lsls	r3, r3, #3
 8018768:	68fa      	ldr	r2, [r7, #12]
 801876a:	4413      	add	r3, r2
 801876c:	ed93 7a00 	vldr	s14, [r3]
 8018770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018772:	edd3 7a01 	vldr	s15, [r3, #4]
 8018776:	ee27 7a27 	vmul.f32	s14, s14, s15
 801877a:	683b      	ldr	r3, [r7, #0]
 801877c:	00db      	lsls	r3, r3, #3
 801877e:	68fa      	ldr	r2, [r7, #12]
 8018780:	4413      	add	r3, r2
 8018782:	edd3 6a01 	vldr	s13, [r3, #4]
 8018786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018788:	edd3 7a00 	vldr	s15, [r3]
 801878c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018794:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 8018798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801879a:	00db      	lsls	r3, r3, #3
 801879c:	68fa      	ldr	r2, [r7, #12]
 801879e:	4413      	add	r3, r2
 80187a0:	ed93 7a00 	vldr	s14, [r3]
 80187a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80187a6:	edd3 7a00 	vldr	s15, [r3]
 80187aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80187ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80187b0:	00db      	lsls	r3, r3, #3
 80187b2:	68fa      	ldr	r2, [r7, #12]
 80187b4:	4413      	add	r3, r2
 80187b6:	edd3 6a01 	vldr	s13, [r3, #4]
 80187ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80187bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80187c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80187c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80187c8:	edc7 7a06 	vstr	s15, [r7, #24]
 80187cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80187ce:	00db      	lsls	r3, r3, #3
 80187d0:	68fa      	ldr	r2, [r7, #12]
 80187d2:	4413      	add	r3, r2
 80187d4:	ed93 7a00 	vldr	s14, [r3]
 80187d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80187da:	edd3 7a01 	vldr	s15, [r3, #4]
 80187de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80187e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80187e4:	00db      	lsls	r3, r3, #3
 80187e6:	68fa      	ldr	r2, [r7, #12]
 80187e8:	4413      	add	r3, r2
 80187ea:	edd3 6a01 	vldr	s13, [r3, #4]
 80187ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80187f0:	edd3 7a00 	vldr	s15, [r3]
 80187f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80187f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80187fc:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 8018800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018802:	00db      	lsls	r3, r3, #3
 8018804:	68fa      	ldr	r2, [r7, #12]
 8018806:	4413      	add	r3, r2
 8018808:	ed93 7a00 	vldr	s14, [r3]
 801880c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801880e:	edd3 7a00 	vldr	s15, [r3]
 8018812:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018818:	00db      	lsls	r3, r3, #3
 801881a:	68fa      	ldr	r2, [r7, #12]
 801881c:	4413      	add	r3, r2
 801881e:	edd3 6a01 	vldr	s13, [r3, #4]
 8018822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018824:	edd3 7a01 	vldr	s15, [r3, #4]
 8018828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801882c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018830:	edc7 7a08 	vstr	s15, [r7, #32]
 8018834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018836:	00db      	lsls	r3, r3, #3
 8018838:	68fa      	ldr	r2, [r7, #12]
 801883a:	4413      	add	r3, r2
 801883c:	ed93 7a00 	vldr	s14, [r3]
 8018840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018842:	edd3 7a01 	vldr	s15, [r3, #4]
 8018846:	ee27 7a27 	vmul.f32	s14, s14, s15
 801884a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801884c:	00db      	lsls	r3, r3, #3
 801884e:	68fa      	ldr	r2, [r7, #12]
 8018850:	4413      	add	r3, r2
 8018852:	edd3 6a01 	vldr	s13, [r3, #4]
 8018856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018858:	edd3 7a00 	vldr	s15, [r3]
 801885c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018864:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 8018868:	68fb      	ldr	r3, [r7, #12]
 801886a:	ed93 7a00 	vldr	s14, [r3]
 801886e:	edd7 7a06 	vldr	s15, [r7, #24]
 8018872:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018876:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 801887a:	68fb      	ldr	r3, [r7, #12]
 801887c:	ed93 7a01 	vldr	s14, [r3, #4]
 8018880:	edd7 7a07 	vldr	s15, [r7, #28]
 8018884:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018888:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 801888c:	68fb      	ldr	r3, [r7, #12]
 801888e:	ed93 7a00 	vldr	s14, [r3]
 8018892:	edd7 7a06 	vldr	s15, [r7, #24]
 8018896:	ee77 7a27 	vadd.f32	s15, s14, s15
 801889a:	68fb      	ldr	r3, [r7, #12]
 801889c:	edc3 7a00 	vstr	s15, [r3]
 80188a0:	68fb      	ldr	r3, [r7, #12]
 80188a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80188a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80188aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 80188b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80188b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80188bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80188c0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80188c4:	ed97 7a05 	vldr	s14, [r7, #20]
 80188c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80188cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80188d0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 80188d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80188d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80188dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80188e0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80188e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80188e8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80188ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80188f0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 80188f4:	68fb      	ldr	r3, [r7, #12]
 80188f6:	ed93 7a00 	vldr	s14, [r3]
 80188fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80188fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018900:	00db      	lsls	r3, r3, #3
 8018902:	68fa      	ldr	r2, [r7, #12]
 8018904:	4413      	add	r3, r2
 8018906:	ee77 7a67 	vsub.f32	s15, s14, s15
 801890a:	edc3 7a00 	vstr	s15, [r3]
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	ed93 7a01 	vldr	s14, [r3, #4]
 8018914:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801891a:	00db      	lsls	r3, r3, #3
 801891c:	68fa      	ldr	r2, [r7, #12]
 801891e:	4413      	add	r3, r2
 8018920:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018924:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 8018928:	68bb      	ldr	r3, [r7, #8]
 801892a:	00db      	lsls	r3, r3, #3
 801892c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801892e:	4413      	add	r3, r2
 8018930:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 8018932:	68bb      	ldr	r3, [r7, #8]
 8018934:	011b      	lsls	r3, r3, #4
 8018936:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018938:	4413      	add	r3, r2
 801893a:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 801893c:	68ba      	ldr	r2, [r7, #8]
 801893e:	4613      	mov	r3, r2
 8018940:	005b      	lsls	r3, r3, #1
 8018942:	4413      	add	r3, r2
 8018944:	00db      	lsls	r3, r3, #3
 8018946:	461a      	mov	r2, r3
 8018948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801894a:	4413      	add	r3, r2
 801894c:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 801894e:	68fb      	ldr	r3, [r7, #12]
 8018950:	ed93 7a00 	vldr	s14, [r3]
 8018954:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8018958:	ee77 7a27 	vadd.f32	s15, s14, s15
 801895c:	68fb      	ldr	r3, [r7, #12]
 801895e:	edc3 7a00 	vstr	s15, [r3]
 8018962:	68fb      	ldr	r3, [r7, #12]
 8018964:	ed93 7a01 	vldr	s14, [r3, #4]
 8018968:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801896c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	685b      	ldr	r3, [r3, #4]
 801897a:	2b00      	cmp	r3, #0
 801897c:	d030      	beq.n	80189e0 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 801897e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8018982:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8018986:	683b      	ldr	r3, [r7, #0]
 8018988:	00db      	lsls	r3, r3, #3
 801898a:	68fa      	ldr	r2, [r7, #12]
 801898c:	4413      	add	r3, r2
 801898e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018992:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 8018996:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801899a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801899e:	683b      	ldr	r3, [r7, #0]
 80189a0:	00db      	lsls	r3, r3, #3
 80189a2:	68fa      	ldr	r2, [r7, #12]
 80189a4:	4413      	add	r3, r2
 80189a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80189aa:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 80189ae:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80189b2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80189b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80189b8:	00db      	lsls	r3, r3, #3
 80189ba:	68fa      	ldr	r2, [r7, #12]
 80189bc:	4413      	add	r3, r2
 80189be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80189c2:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 80189c6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80189ca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80189ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80189d0:	00db      	lsls	r3, r3, #3
 80189d2:	68fa      	ldr	r2, [r7, #12]
 80189d4:	4413      	add	r3, r2
 80189d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80189da:	edc3 7a01 	vstr	s15, [r3, #4]
 80189de:	e02f      	b.n	8018a40 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 80189e0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80189e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80189e8:	683b      	ldr	r3, [r7, #0]
 80189ea:	00db      	lsls	r3, r3, #3
 80189ec:	68fa      	ldr	r2, [r7, #12]
 80189ee:	4413      	add	r3, r2
 80189f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80189f4:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 80189f8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80189fc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018a00:	683b      	ldr	r3, [r7, #0]
 8018a02:	00db      	lsls	r3, r3, #3
 8018a04:	68fa      	ldr	r2, [r7, #12]
 8018a06:	4413      	add	r3, r2
 8018a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018a0c:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 8018a10:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8018a14:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8018a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a1a:	00db      	lsls	r3, r3, #3
 8018a1c:	68fa      	ldr	r2, [r7, #12]
 8018a1e:	4413      	add	r3, r2
 8018a20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018a24:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 8018a28:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8018a2c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a32:	00db      	lsls	r3, r3, #3
 8018a34:	68fa      	ldr	r2, [r7, #12]
 8018a36:	4413      	add	r3, r2
 8018a38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018a3c:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	3308      	adds	r3, #8
 8018a44:	60fb      	str	r3, [r7, #12]
    }while(--k);
 8018a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018a48:	3b01      	subs	r3, #1
 8018a4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8018a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	bf14      	ite	ne
 8018a52:	2301      	movne	r3, #1
 8018a54:	2300      	moveq	r3, #0
 8018a56:	b2db      	uxtb	r3, r3
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d000      	beq.n	8018a5e <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x360>
    do {
 8018a5c:	e668      	b.n	8018730 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x32>
}
 8018a5e:	bf00      	nop
 8018a60:	375c      	adds	r7, #92	; 0x5c
 8018a62:	46bd      	mov	sp, r7
 8018a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a68:	4770      	bx	lr
	...

08018a6c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 8018a6c:	b5b0      	push	{r4, r5, r7, lr}
 8018a6e:	b094      	sub	sp, #80	; 0x50
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	60f8      	str	r0, [r7, #12]
 8018a74:	60b9      	str	r1, [r7, #8]
 8018a76:	607a      	str	r2, [r7, #4]
 8018a78:	603b      	str	r3, [r7, #0]
     size_t k=m;
 8018a7a:	683b      	ldr	r3, [r7, #0]
 8018a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 8018a7e:	683b      	ldr	r3, [r7, #0]
 8018a80:	005b      	lsls	r3, r3, #1
 8018a82:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 8018a84:	68bb      	ldr	r3, [r7, #8]
 8018a86:	683a      	ldr	r2, [r7, #0]
 8018a88:	fb02 f303 	mul.w	r3, r2, r3
 8018a8c:	6879      	ldr	r1, [r7, #4]
 8018a8e:	3321      	adds	r3, #33	; 0x21
 8018a90:	f107 0210 	add.w	r2, r7, #16
 8018a94:	00db      	lsls	r3, r3, #3
 8018a96:	440b      	add	r3, r1
 8018a98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018a9c:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8018aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8018aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018aaa:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 8018aac:	683b      	ldr	r3, [r7, #0]
 8018aae:	00db      	lsls	r3, r3, #3
 8018ab0:	68fa      	ldr	r2, [r7, #12]
 8018ab2:	4413      	add	r3, r2
 8018ab4:	ed93 7a00 	vldr	s14, [r3]
 8018ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018aba:	edd3 7a00 	vldr	s15, [r3]
 8018abe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018ac2:	683b      	ldr	r3, [r7, #0]
 8018ac4:	00db      	lsls	r3, r3, #3
 8018ac6:	68fa      	ldr	r2, [r7, #12]
 8018ac8:	4413      	add	r3, r2
 8018aca:	edd3 6a01 	vldr	s13, [r3, #4]
 8018ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018ad0:	edd3 7a01 	vldr	s15, [r3, #4]
 8018ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018ad8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018adc:	edc7 7a08 	vstr	s15, [r7, #32]
 8018ae0:	683b      	ldr	r3, [r7, #0]
 8018ae2:	00db      	lsls	r3, r3, #3
 8018ae4:	68fa      	ldr	r2, [r7, #12]
 8018ae6:	4413      	add	r3, r2
 8018ae8:	ed93 7a00 	vldr	s14, [r3]
 8018aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018aee:	edd3 7a01 	vldr	s15, [r3, #4]
 8018af2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018af6:	683b      	ldr	r3, [r7, #0]
 8018af8:	00db      	lsls	r3, r3, #3
 8018afa:	68fa      	ldr	r2, [r7, #12]
 8018afc:	4413      	add	r3, r2
 8018afe:	edd3 6a01 	vldr	s13, [r3, #4]
 8018b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018b04:	edd3 7a00 	vldr	s15, [r3]
 8018b08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018b10:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 8018b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018b16:	00db      	lsls	r3, r3, #3
 8018b18:	68fa      	ldr	r2, [r7, #12]
 8018b1a:	4413      	add	r3, r2
 8018b1c:	ed93 7a00 	vldr	s14, [r3]
 8018b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018b22:	edd3 7a00 	vldr	s15, [r3]
 8018b26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018b2c:	00db      	lsls	r3, r3, #3
 8018b2e:	68fa      	ldr	r2, [r7, #12]
 8018b30:	4413      	add	r3, r2
 8018b32:	edd3 6a01 	vldr	s13, [r3, #4]
 8018b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018b38:	edd3 7a01 	vldr	s15, [r3, #4]
 8018b3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018b44:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8018b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018b4a:	00db      	lsls	r3, r3, #3
 8018b4c:	68fa      	ldr	r2, [r7, #12]
 8018b4e:	4413      	add	r3, r2
 8018b50:	ed93 7a00 	vldr	s14, [r3]
 8018b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018b56:	edd3 7a01 	vldr	s15, [r3, #4]
 8018b5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018b60:	00db      	lsls	r3, r3, #3
 8018b62:	68fa      	ldr	r2, [r7, #12]
 8018b64:	4413      	add	r3, r2
 8018b66:	edd3 6a01 	vldr	s13, [r3, #4]
 8018b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018b6c:	edd3 7a00 	vldr	s15, [r3]
 8018b70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018b78:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 8018b7c:	ed97 7a08 	vldr	s14, [r7, #32]
 8018b80:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8018b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018b88:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8018b8c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8018b90:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018b98:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 8018b9c:	ed97 7a08 	vldr	s14, [r7, #32]
 8018ba0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8018ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018ba8:	edc7 7a06 	vstr	s15, [r7, #24]
 8018bac:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8018bb0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8018bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018bb8:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 8018bbc:	68bb      	ldr	r3, [r7, #8]
 8018bbe:	00db      	lsls	r3, r3, #3
 8018bc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018bc2:	4413      	add	r3, r2
 8018bc4:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 8018bc6:	68bb      	ldr	r3, [r7, #8]
 8018bc8:	011b      	lsls	r3, r3, #4
 8018bca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018bcc:	4413      	add	r3, r2
 8018bce:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 8018bd0:	68fb      	ldr	r3, [r7, #12]
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	f7e7 fcc1 	bl	800055c <__aeabi_f2d>
 8018bda:	4604      	mov	r4, r0
 8018bdc:	460d      	mov	r5, r1
 8018bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018be0:	4618      	mov	r0, r3
 8018be2:	f7e7 fcbb 	bl	800055c <__aeabi_f2d>
 8018be6:	f04f 0200 	mov.w	r2, #0
 8018bea:	4b57      	ldr	r3, [pc, #348]	; (8018d48 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 8018bec:	f7e7 fd0e 	bl	800060c <__aeabi_dmul>
 8018bf0:	4602      	mov	r2, r0
 8018bf2:	460b      	mov	r3, r1
 8018bf4:	4620      	mov	r0, r4
 8018bf6:	4629      	mov	r1, r5
 8018bf8:	f7e7 fb50 	bl	800029c <__aeabi_dsub>
 8018bfc:	4602      	mov	r2, r0
 8018bfe:	460b      	mov	r3, r1
 8018c00:	4610      	mov	r0, r2
 8018c02:	4619      	mov	r1, r3
 8018c04:	683b      	ldr	r3, [r7, #0]
 8018c06:	00db      	lsls	r3, r3, #3
 8018c08:	68fa      	ldr	r2, [r7, #12]
 8018c0a:	18d4      	adds	r4, r2, r3
 8018c0c:	f7e7 fff6 	bl	8000bfc <__aeabi_d2f>
 8018c10:	4603      	mov	r3, r0
 8018c12:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 8018c14:	68fb      	ldr	r3, [r7, #12]
 8018c16:	685b      	ldr	r3, [r3, #4]
 8018c18:	4618      	mov	r0, r3
 8018c1a:	f7e7 fc9f 	bl	800055c <__aeabi_f2d>
 8018c1e:	4604      	mov	r4, r0
 8018c20:	460d      	mov	r5, r1
 8018c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c24:	4618      	mov	r0, r3
 8018c26:	f7e7 fc99 	bl	800055c <__aeabi_f2d>
 8018c2a:	f04f 0200 	mov.w	r2, #0
 8018c2e:	4b46      	ldr	r3, [pc, #280]	; (8018d48 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 8018c30:	f7e7 fcec 	bl	800060c <__aeabi_dmul>
 8018c34:	4602      	mov	r2, r0
 8018c36:	460b      	mov	r3, r1
 8018c38:	4620      	mov	r0, r4
 8018c3a:	4629      	mov	r1, r5
 8018c3c:	f7e7 fb2e 	bl	800029c <__aeabi_dsub>
 8018c40:	4602      	mov	r2, r0
 8018c42:	460b      	mov	r3, r1
 8018c44:	4610      	mov	r0, r2
 8018c46:	4619      	mov	r1, r3
 8018c48:	683b      	ldr	r3, [r7, #0]
 8018c4a:	00db      	lsls	r3, r3, #3
 8018c4c:	68fa      	ldr	r2, [r7, #12]
 8018c4e:	18d4      	adds	r4, r2, r3
 8018c50:	f7e7 ffd4 	bl	8000bfc <__aeabi_d2f>
 8018c54:	4603      	mov	r3, r0
 8018c56:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 8018c58:	ed97 7a06 	vldr	s14, [r7, #24]
 8018c5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8018c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018c64:	edc7 7a06 	vstr	s15, [r7, #24]
 8018c68:	ed97 7a07 	vldr	s14, [r7, #28]
 8018c6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8018c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018c74:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 8018c78:	68fb      	ldr	r3, [r7, #12]
 8018c7a:	ed93 7a00 	vldr	s14, [r3]
 8018c7e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8018c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018c86:	68fb      	ldr	r3, [r7, #12]
 8018c88:	edc3 7a00 	vstr	s15, [r3]
 8018c8c:	68fb      	ldr	r3, [r7, #12]
 8018c8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8018c92:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8018c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 8018ca0:	683b      	ldr	r3, [r7, #0]
 8018ca2:	00db      	lsls	r3, r3, #3
 8018ca4:	68fa      	ldr	r2, [r7, #12]
 8018ca6:	4413      	add	r3, r2
 8018ca8:	ed93 7a00 	vldr	s14, [r3]
 8018cac:	edd7 7a07 	vldr	s15, [r7, #28]
 8018cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018cb2:	00db      	lsls	r3, r3, #3
 8018cb4:	68fa      	ldr	r2, [r7, #12]
 8018cb6:	4413      	add	r3, r2
 8018cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018cbc:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 8018cc0:	683b      	ldr	r3, [r7, #0]
 8018cc2:	00db      	lsls	r3, r3, #3
 8018cc4:	68fa      	ldr	r2, [r7, #12]
 8018cc6:	4413      	add	r3, r2
 8018cc8:	ed93 7a01 	vldr	s14, [r3, #4]
 8018ccc:	edd7 7a06 	vldr	s15, [r7, #24]
 8018cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018cd2:	00db      	lsls	r3, r3, #3
 8018cd4:	68fa      	ldr	r2, [r7, #12]
 8018cd6:	4413      	add	r3, r2
 8018cd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018cdc:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 8018ce0:	683b      	ldr	r3, [r7, #0]
 8018ce2:	00db      	lsls	r3, r3, #3
 8018ce4:	68fa      	ldr	r2, [r7, #12]
 8018ce6:	4413      	add	r3, r2
 8018ce8:	ed93 7a00 	vldr	s14, [r3]
 8018cec:	edd7 7a07 	vldr	s15, [r7, #28]
 8018cf0:	683b      	ldr	r3, [r7, #0]
 8018cf2:	00db      	lsls	r3, r3, #3
 8018cf4:	68fa      	ldr	r2, [r7, #12]
 8018cf6:	4413      	add	r3, r2
 8018cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018cfc:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 8018d00:	683b      	ldr	r3, [r7, #0]
 8018d02:	00db      	lsls	r3, r3, #3
 8018d04:	68fa      	ldr	r2, [r7, #12]
 8018d06:	4413      	add	r3, r2
 8018d08:	ed93 7a01 	vldr	s14, [r3, #4]
 8018d0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8018d10:	683b      	ldr	r3, [r7, #0]
 8018d12:	00db      	lsls	r3, r3, #3
 8018d14:	68fa      	ldr	r2, [r7, #12]
 8018d16:	4413      	add	r3, r2
 8018d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018d1c:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	3308      	adds	r3, #8
 8018d24:	60fb      	str	r3, [r7, #12]
     }while(--k);
 8018d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018d28:	3b01      	subs	r3, #1
 8018d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	bf14      	ite	ne
 8018d32:	2301      	movne	r3, #1
 8018d34:	2300      	moveq	r3, #0
 8018d36:	b2db      	uxtb	r3, r3
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d000      	beq.n	8018d3e <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2d2>
     do{
 8018d3c:	e6b6      	b.n	8018aac <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x40>
}
 8018d3e:	bf00      	nop
 8018d40:	3750      	adds	r7, #80	; 0x50
 8018d42:	46bd      	mov	sp, r7
 8018d44:	bdb0      	pop	{r4, r5, r7, pc}
 8018d46:	bf00      	nop
 8018d48:	3fe00000 	.word	0x3fe00000

08018d4c <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 8018d4c:	b480      	push	{r7}
 8018d4e:	b0ab      	sub	sp, #172	; 0xac
 8018d50:	af00      	add	r7, sp, #0
 8018d52:	60f8      	str	r0, [r7, #12]
 8018d54:	60b9      	str	r1, [r7, #8]
 8018d56:	607a      	str	r2, [r7, #4]
 8018d58:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8018d60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 8018d64:	683b      	ldr	r3, [r7, #0]
 8018d66:	68ba      	ldr	r2, [r7, #8]
 8018d68:	fb02 f303 	mul.w	r3, r2, r3
 8018d6c:	00db      	lsls	r3, r3, #3
 8018d6e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8018d72:	441a      	add	r2, r3
 8018d74:	f107 0318 	add.w	r3, r7, #24
 8018d78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018d7c:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 8018d80:	683b      	ldr	r3, [r7, #0]
 8018d82:	68ba      	ldr	r2, [r7, #8]
 8018d84:	fb02 f303 	mul.w	r3, r2, r3
 8018d88:	011b      	lsls	r3, r3, #4
 8018d8a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8018d8e:	441a      	add	r2, r3
 8018d90:	f107 0310 	add.w	r3, r7, #16
 8018d94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018d98:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 8018d9c:	68fb      	ldr	r3, [r7, #12]
 8018d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 8018da2:	683b      	ldr	r3, [r7, #0]
 8018da4:	00db      	lsls	r3, r3, #3
 8018da6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8018daa:	4413      	add	r3, r2
 8018dac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 8018db0:	683b      	ldr	r3, [r7, #0]
 8018db2:	011b      	lsls	r3, r3, #4
 8018db4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8018db8:	4413      	add	r3, r2
 8018dba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 8018dbe:	683a      	ldr	r2, [r7, #0]
 8018dc0:	4613      	mov	r3, r2
 8018dc2:	005b      	lsls	r3, r3, #1
 8018dc4:	4413      	add	r3, r2
 8018dc6:	00db      	lsls	r3, r3, #3
 8018dc8:	461a      	mov	r2, r3
 8018dca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018dce:	4413      	add	r3, r2
 8018dd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 8018dd4:	683b      	ldr	r3, [r7, #0]
 8018dd6:	015b      	lsls	r3, r3, #5
 8018dd8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8018ddc:	4413      	add	r3, r2
 8018dde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8018de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 8018dec:	2300      	movs	r3, #0
 8018dee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8018df2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8018df6:	683b      	ldr	r3, [r7, #0]
 8018df8:	429a      	cmp	r2, r3
 8018dfa:	f280 82a9 	bge.w	8019350 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0x604>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 8018dfe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8018e02:	f107 0320 	add.w	r3, r7, #32
 8018e06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018e0a:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 8018e0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018e12:	ed93 7a00 	vldr	s14, [r3]
 8018e16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018e1a:	68ba      	ldr	r2, [r7, #8]
 8018e1c:	fb02 f303 	mul.w	r3, r2, r3
 8018e20:	00db      	lsls	r3, r3, #3
 8018e22:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018e26:	4413      	add	r3, r2
 8018e28:	edd3 7a00 	vldr	s15, [r3]
 8018e2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018e30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018e34:	edd3 6a01 	vldr	s13, [r3, #4]
 8018e38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018e3c:	68ba      	ldr	r2, [r7, #8]
 8018e3e:	fb02 f303 	mul.w	r3, r2, r3
 8018e42:	00db      	lsls	r3, r3, #3
 8018e44:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018e48:	4413      	add	r3, r2
 8018e4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8018e4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018e56:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8018e5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018e5e:	ed93 7a00 	vldr	s14, [r3]
 8018e62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018e66:	68ba      	ldr	r2, [r7, #8]
 8018e68:	fb02 f303 	mul.w	r3, r2, r3
 8018e6c:	00db      	lsls	r3, r3, #3
 8018e6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018e72:	4413      	add	r3, r2
 8018e74:	edd3 7a01 	vldr	s15, [r3, #4]
 8018e78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018e7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018e80:	edd3 6a01 	vldr	s13, [r3, #4]
 8018e84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018e88:	68ba      	ldr	r2, [r7, #8]
 8018e8a:	fb02 f303 	mul.w	r3, r2, r3
 8018e8e:	00db      	lsls	r3, r3, #3
 8018e90:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018e94:	4413      	add	r3, r2
 8018e96:	edd3 7a00 	vldr	s15, [r3]
 8018e9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018ea2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 8018ea6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018eaa:	ed93 7a00 	vldr	s14, [r3]
 8018eae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018eb2:	68ba      	ldr	r2, [r7, #8]
 8018eb4:	fb02 f303 	mul.w	r3, r2, r3
 8018eb8:	011b      	lsls	r3, r3, #4
 8018eba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018ebe:	4413      	add	r3, r2
 8018ec0:	edd3 7a00 	vldr	s15, [r3]
 8018ec4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018ecc:	edd3 6a01 	vldr	s13, [r3, #4]
 8018ed0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018ed4:	68ba      	ldr	r2, [r7, #8]
 8018ed6:	fb02 f303 	mul.w	r3, r2, r3
 8018eda:	011b      	lsls	r3, r3, #4
 8018edc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018ee0:	4413      	add	r3, r2
 8018ee2:	edd3 7a01 	vldr	s15, [r3, #4]
 8018ee6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018eea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018eee:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8018ef2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018ef6:	ed93 7a00 	vldr	s14, [r3]
 8018efa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018efe:	68ba      	ldr	r2, [r7, #8]
 8018f00:	fb02 f303 	mul.w	r3, r2, r3
 8018f04:	011b      	lsls	r3, r3, #4
 8018f06:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018f0a:	4413      	add	r3, r2
 8018f0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8018f10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018f14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018f18:	edd3 6a01 	vldr	s13, [r3, #4]
 8018f1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018f20:	68ba      	ldr	r2, [r7, #8]
 8018f22:	fb02 f303 	mul.w	r3, r2, r3
 8018f26:	011b      	lsls	r3, r3, #4
 8018f28:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018f2c:	4413      	add	r3, r2
 8018f2e:	edd3 7a00 	vldr	s15, [r3]
 8018f32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018f3a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 8018f3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018f42:	ed93 7a00 	vldr	s14, [r3]
 8018f46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018f4a:	68ba      	ldr	r2, [r7, #8]
 8018f4c:	fb03 f202 	mul.w	r2, r3, r2
 8018f50:	4613      	mov	r3, r2
 8018f52:	005b      	lsls	r3, r3, #1
 8018f54:	4413      	add	r3, r2
 8018f56:	00db      	lsls	r3, r3, #3
 8018f58:	461a      	mov	r2, r3
 8018f5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018f5e:	4413      	add	r3, r2
 8018f60:	edd3 7a00 	vldr	s15, [r3]
 8018f64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018f6c:	edd3 6a01 	vldr	s13, [r3, #4]
 8018f70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018f74:	68ba      	ldr	r2, [r7, #8]
 8018f76:	fb03 f202 	mul.w	r2, r3, r2
 8018f7a:	4613      	mov	r3, r2
 8018f7c:	005b      	lsls	r3, r3, #1
 8018f7e:	4413      	add	r3, r2
 8018f80:	00db      	lsls	r3, r3, #3
 8018f82:	461a      	mov	r2, r3
 8018f84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018f88:	4413      	add	r3, r2
 8018f8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8018f8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018f96:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8018f9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018f9e:	ed93 7a00 	vldr	s14, [r3]
 8018fa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018fa6:	68ba      	ldr	r2, [r7, #8]
 8018fa8:	fb03 f202 	mul.w	r2, r3, r2
 8018fac:	4613      	mov	r3, r2
 8018fae:	005b      	lsls	r3, r3, #1
 8018fb0:	4413      	add	r3, r2
 8018fb2:	00db      	lsls	r3, r3, #3
 8018fb4:	461a      	mov	r2, r3
 8018fb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018fba:	4413      	add	r3, r2
 8018fbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8018fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018fc8:	edd3 6a01 	vldr	s13, [r3, #4]
 8018fcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018fd0:	68ba      	ldr	r2, [r7, #8]
 8018fd2:	fb03 f202 	mul.w	r2, r3, r2
 8018fd6:	4613      	mov	r3, r2
 8018fd8:	005b      	lsls	r3, r3, #1
 8018fda:	4413      	add	r3, r2
 8018fdc:	00db      	lsls	r3, r3, #3
 8018fde:	461a      	mov	r2, r3
 8018fe0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018fe4:	4413      	add	r3, r2
 8018fe6:	edd3 7a00 	vldr	s15, [r3]
 8018fea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018ff2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 8018ff6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018ffa:	ed93 7a00 	vldr	s14, [r3]
 8018ffe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019002:	68ba      	ldr	r2, [r7, #8]
 8019004:	fb02 f303 	mul.w	r3, r2, r3
 8019008:	015b      	lsls	r3, r3, #5
 801900a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801900e:	4413      	add	r3, r2
 8019010:	edd3 7a00 	vldr	s15, [r3]
 8019014:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019018:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801901c:	edd3 6a01 	vldr	s13, [r3, #4]
 8019020:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019024:	68ba      	ldr	r2, [r7, #8]
 8019026:	fb02 f303 	mul.w	r3, r2, r3
 801902a:	015b      	lsls	r3, r3, #5
 801902c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8019030:	4413      	add	r3, r2
 8019032:	edd3 7a01 	vldr	s15, [r3, #4]
 8019036:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801903a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801903e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8019042:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019046:	ed93 7a00 	vldr	s14, [r3]
 801904a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801904e:	68ba      	ldr	r2, [r7, #8]
 8019050:	fb02 f303 	mul.w	r3, r2, r3
 8019054:	015b      	lsls	r3, r3, #5
 8019056:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801905a:	4413      	add	r3, r2
 801905c:	edd3 7a01 	vldr	s15, [r3, #4]
 8019060:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019064:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019068:	edd3 6a01 	vldr	s13, [r3, #4]
 801906c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019070:	68ba      	ldr	r2, [r7, #8]
 8019072:	fb02 f303 	mul.w	r3, r2, r3
 8019076:	015b      	lsls	r3, r3, #5
 8019078:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801907c:	4413      	add	r3, r2
 801907e:	edd3 7a00 	vldr	s15, [r3]
 8019082:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019086:	ee77 7a27 	vadd.f32	s15, s14, s15
 801908a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 801908e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8019092:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8019096:	ee77 7a27 	vadd.f32	s15, s14, s15
 801909a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 801909e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80190a2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80190a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80190aa:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 80190ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80190b2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80190b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80190ba:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 80190be:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80190c2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80190c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80190ca:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 80190ce:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80190d2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80190d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80190da:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 80190de:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80190e2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80190e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80190ea:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 80190ee:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80190f2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80190f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80190fa:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 80190fe:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8019102:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8019106:	ee77 7a67 	vsub.f32	s15, s14, s15
 801910a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 801910e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019112:	ed93 7a00 	vldr	s14, [r3]
 8019116:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 801911a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 801911e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8019122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019126:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801912a:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 801912e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019132:	ed93 7a01 	vldr	s14, [r3, #4]
 8019136:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 801913a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801913e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8019142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019146:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801914a:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 801914e:	ed97 7a08 	vldr	s14, [r7, #32]
 8019152:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8019156:	edd7 7a06 	vldr	s15, [r7, #24]
 801915a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801915e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019162:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8019166:	edd7 7a04 	vldr	s15, [r7, #16]
 801916a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801916e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019172:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 8019176:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801917a:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 801917e:	edd7 7a06 	vldr	s15, [r7, #24]
 8019182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019186:	ee37 7a27 	vadd.f32	s14, s14, s15
 801918a:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 801918e:	edd7 7a04 	vldr	s15, [r7, #16]
 8019192:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019196:	ee77 7a27 	vadd.f32	s15, s14, s15
 801919a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 801919e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80191a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80191a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80191aa:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80191ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80191b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80191b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80191ba:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 80191be:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80191c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80191c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80191ca:	eeb1 7a67 	vneg.f32	s14, s15
 80191ce:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80191d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80191d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80191da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80191de:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 80191e2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80191e6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80191ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80191ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80191f2:	edc3 7a00 	vstr	s15, [r3]
 80191f6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80191fa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80191fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019202:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019206:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 801920a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801920e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8019212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019216:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801921a:	edc3 7a00 	vstr	s15, [r3]
 801921e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8019222:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8019226:	ee77 7a27 	vadd.f32	s15, s14, s15
 801922a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801922e:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 8019232:	ed97 7a08 	vldr	s14, [r7, #32]
 8019236:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 801923a:	edd7 7a04 	vldr	s15, [r7, #16]
 801923e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019242:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019246:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 801924a:	edd7 7a06 	vldr	s15, [r7, #24]
 801924e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019256:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 801925a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801925e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8019262:	edd7 7a04 	vldr	s15, [r7, #16]
 8019266:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801926a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801926e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8019272:	edd7 7a06 	vldr	s15, [r7, #24]
 8019276:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801927a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801927e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 8019282:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8019286:	edd7 7a07 	vldr	s15, [r7, #28]
 801928a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801928e:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8019292:	edd7 7a05 	vldr	s15, [r7, #20]
 8019296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801929a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801929e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 80192a2:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80192a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80192aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80192ae:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80192b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80192b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80192ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80192be:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 80192c2:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80192c6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80192ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80192ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80192d2:	edc3 7a00 	vstr	s15, [r3]
 80192d6:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80192da:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80192de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80192e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80192e6:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 80192ea:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80192ee:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80192f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80192f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80192fa:	edc3 7a00 	vstr	s15, [r3]
 80192fe:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8019302:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8019306:	ee77 7a67 	vsub.f32	s15, s14, s15
 801930a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801930e:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 8019312:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019316:	3308      	adds	r3, #8
 8019318:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801931c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019320:	3308      	adds	r3, #8
 8019322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8019326:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801932a:	3308      	adds	r3, #8
 801932c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8019330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019334:	3308      	adds	r3, #8
 8019336:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801933a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801933e:	3308      	adds	r3, #8
 8019340:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 8019344:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019348:	3301      	adds	r3, #1
 801934a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801934e:	e550      	b.n	8018df2 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0xa6>
    }
}
 8019350:	bf00      	nop
 8019352:	37ac      	adds	r7, #172	; 0xac
 8019354:	46bd      	mov	sp, r7
 8019356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801935a:	4770      	bx	lr

0801935c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 801935c:	b580      	push	{r7, lr}
 801935e:	b08e      	sub	sp, #56	; 0x38
 8019360:	af00      	add	r7, sp, #0
 8019362:	60f8      	str	r0, [r7, #12]
 8019364:	60b9      	str	r1, [r7, #8]
 8019366:	607a      	str	r2, [r7, #4]
 8019368:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8019370:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 8019378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801937a:	00db      	lsls	r3, r3, #3
 801937c:	4618      	mov	r0, r3
 801937e:	f000 fe8b 	bl	801a098 <_Z9ei_mallocj>
 8019382:	61b8      	str	r0, [r7, #24]

    for ( u=0; u<m; ++u ) {
 8019384:	2300      	movs	r3, #0
 8019386:	637b      	str	r3, [r7, #52]	; 0x34
 8019388:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801938a:	683b      	ldr	r3, [r7, #0]
 801938c:	429a      	cmp	r2, r3
 801938e:	f280 80b6 	bge.w	80194fe <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x1a2>
        k=u;
 8019392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019394:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8019396:	2300      	movs	r3, #0
 8019398:	62fb      	str	r3, [r7, #44]	; 0x2c
 801939a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801939c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801939e:	429a      	cmp	r2, r3
 80193a0:	da14      	bge.n	80193cc <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x70>
            scratch[q1] = Fout[ k  ];
 80193a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193a4:	00db      	lsls	r3, r3, #3
 80193a6:	68fa      	ldr	r2, [r7, #12]
 80193a8:	18d1      	adds	r1, r2, r3
 80193aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193ac:	00db      	lsls	r3, r3, #3
 80193ae:	69ba      	ldr	r2, [r7, #24]
 80193b0:	4413      	add	r3, r2
 80193b2:	460a      	mov	r2, r1
 80193b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80193b8:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 80193bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80193be:	683b      	ldr	r3, [r7, #0]
 80193c0:	4413      	add	r3, r2
 80193c2:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 80193c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193c6:	3301      	adds	r3, #1
 80193c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80193ca:	e7e6      	b.n	801939a <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x3e>
        }

        k=u;
 80193cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80193ce:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 80193d0:	2300      	movs	r3, #0
 80193d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80193d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80193d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193d8:	429a      	cmp	r2, r3
 80193da:	f280 808c 	bge.w	80194f6 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x19a>
            int twidx=0;
 80193de:	2300      	movs	r3, #0
 80193e0:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 80193e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193e4:	00db      	lsls	r3, r3, #3
 80193e6:	68fa      	ldr	r2, [r7, #12]
 80193e8:	4413      	add	r3, r2
 80193ea:	69ba      	ldr	r2, [r7, #24]
 80193ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80193f0:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 80193f4:	2301      	movs	r3, #1
 80193f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80193f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80193fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193fc:	429a      	cmp	r2, r3
 80193fe:	da72      	bge.n	80194e6 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x18a>
                twidx += fstride * k;
 8019400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019402:	68ba      	ldr	r2, [r7, #8]
 8019404:	fb03 f202 	mul.w	r2, r3, r2
 8019408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801940a:	4413      	add	r3, r2
 801940c:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 801940e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019410:	69fb      	ldr	r3, [r7, #28]
 8019412:	429a      	cmp	r2, r3
 8019414:	db03      	blt.n	801941e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xc2>
 8019416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019418:	69fb      	ldr	r3, [r7, #28]
 801941a:	1ad3      	subs	r3, r2, r3
 801941c:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 801941e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019420:	00db      	lsls	r3, r3, #3
 8019422:	69ba      	ldr	r2, [r7, #24]
 8019424:	4413      	add	r3, r2
 8019426:	ed93 7a00 	vldr	s14, [r3]
 801942a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801942c:	00db      	lsls	r3, r3, #3
 801942e:	6a3a      	ldr	r2, [r7, #32]
 8019430:	4413      	add	r3, r2
 8019432:	edd3 7a00 	vldr	s15, [r3]
 8019436:	ee27 7a27 	vmul.f32	s14, s14, s15
 801943a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801943c:	00db      	lsls	r3, r3, #3
 801943e:	69ba      	ldr	r2, [r7, #24]
 8019440:	4413      	add	r3, r2
 8019442:	edd3 6a01 	vldr	s13, [r3, #4]
 8019446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019448:	00db      	lsls	r3, r3, #3
 801944a:	6a3a      	ldr	r2, [r7, #32]
 801944c:	4413      	add	r3, r2
 801944e:	edd3 7a01 	vldr	s15, [r3, #4]
 8019452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019456:	ee77 7a67 	vsub.f32	s15, s14, s15
 801945a:	edc7 7a04 	vstr	s15, [r7, #16]
 801945e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019460:	00db      	lsls	r3, r3, #3
 8019462:	69ba      	ldr	r2, [r7, #24]
 8019464:	4413      	add	r3, r2
 8019466:	ed93 7a00 	vldr	s14, [r3]
 801946a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801946c:	00db      	lsls	r3, r3, #3
 801946e:	6a3a      	ldr	r2, [r7, #32]
 8019470:	4413      	add	r3, r2
 8019472:	edd3 7a01 	vldr	s15, [r3, #4]
 8019476:	ee27 7a27 	vmul.f32	s14, s14, s15
 801947a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801947c:	00db      	lsls	r3, r3, #3
 801947e:	69ba      	ldr	r2, [r7, #24]
 8019480:	4413      	add	r3, r2
 8019482:	edd3 6a01 	vldr	s13, [r3, #4]
 8019486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019488:	00db      	lsls	r3, r3, #3
 801948a:	6a3a      	ldr	r2, [r7, #32]
 801948c:	4413      	add	r3, r2
 801948e:	edd3 7a00 	vldr	s15, [r3]
 8019492:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019496:	ee77 7a27 	vadd.f32	s15, s14, s15
 801949a:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 801949e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194a0:	00db      	lsls	r3, r3, #3
 80194a2:	68fa      	ldr	r2, [r7, #12]
 80194a4:	4413      	add	r3, r2
 80194a6:	ed93 7a00 	vldr	s14, [r3]
 80194aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80194ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194b0:	00db      	lsls	r3, r3, #3
 80194b2:	68fa      	ldr	r2, [r7, #12]
 80194b4:	4413      	add	r3, r2
 80194b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80194ba:	edc3 7a00 	vstr	s15, [r3]
 80194be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194c0:	00db      	lsls	r3, r3, #3
 80194c2:	68fa      	ldr	r2, [r7, #12]
 80194c4:	4413      	add	r3, r2
 80194c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80194ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80194ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194d0:	00db      	lsls	r3, r3, #3
 80194d2:	68fa      	ldr	r2, [r7, #12]
 80194d4:	4413      	add	r3, r2
 80194d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80194da:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 80194de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194e0:	3301      	adds	r3, #1
 80194e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80194e4:	e788      	b.n	80193f8 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x9c>
            }
            k += m;
 80194e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80194e8:	683b      	ldr	r3, [r7, #0]
 80194ea:	4413      	add	r3, r2
 80194ec:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 80194ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194f0:	3301      	adds	r3, #1
 80194f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80194f4:	e76e      	b.n	80193d4 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x78>
    for ( u=0; u<m; ++u ) {
 80194f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194f8:	3301      	adds	r3, #1
 80194fa:	637b      	str	r3, [r7, #52]	; 0x34
 80194fc:	e744      	b.n	8019388 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x2c>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 80194fe:	69b8      	ldr	r0, [r7, #24]
 8019500:	f000 fde4 	bl	801a0cc <_Z7ei_freePv>
}
 8019504:	bf00      	nop
 8019506:	3738      	adds	r7, #56	; 0x38
 8019508:	46bd      	mov	sp, r7
 801950a:	bd80      	pop	{r7, pc}

0801950c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 801950c:	b580      	push	{r7, lr}
 801950e:	b08a      	sub	sp, #40	; 0x28
 8019510:	af02      	add	r7, sp, #8
 8019512:	60f8      	str	r0, [r7, #12]
 8019514:	60b9      	str	r1, [r7, #8]
 8019516:	607a      	str	r2, [r7, #4]
 8019518:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 801951a:	68fb      	ldr	r3, [r7, #12]
 801951c:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 801951e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019520:	1d1a      	adds	r2, r3, #4
 8019522:	62ba      	str	r2, [r7, #40]	; 0x28
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 8019528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801952a:	1d1a      	adds	r2, r3, #4
 801952c:	62ba      	str	r2, [r7, #40]	; 0x28
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 8019532:	69bb      	ldr	r3, [r7, #24]
 8019534:	697a      	ldr	r2, [r7, #20]
 8019536:	fb02 f303 	mul.w	r3, r2, r3
 801953a:	00db      	lsls	r3, r3, #3
 801953c:	68fa      	ldr	r2, [r7, #12]
 801953e:	4413      	add	r3, r2
 8019540:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 8019542:	697b      	ldr	r3, [r7, #20]
 8019544:	2b01      	cmp	r3, #1
 8019546:	d11a      	bne.n	801957e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
        do{
            *Fout = *f;
 8019548:	68fb      	ldr	r3, [r7, #12]
 801954a:	68ba      	ldr	r2, [r7, #8]
 801954c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019550:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 8019554:	683b      	ldr	r3, [r7, #0]
 8019556:	687a      	ldr	r2, [r7, #4]
 8019558:	fb02 f303 	mul.w	r3, r2, r3
 801955c:	00db      	lsls	r3, r3, #3
 801955e:	68ba      	ldr	r2, [r7, #8]
 8019560:	4413      	add	r3, r2
 8019562:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 8019564:	68fb      	ldr	r3, [r7, #12]
 8019566:	3308      	adds	r3, #8
 8019568:	60fb      	str	r3, [r7, #12]
 801956a:	68fa      	ldr	r2, [r7, #12]
 801956c:	693b      	ldr	r3, [r7, #16]
 801956e:	429a      	cmp	r2, r3
 8019570:	bf14      	ite	ne
 8019572:	2301      	movne	r3, #1
 8019574:	2300      	moveq	r3, #0
 8019576:	b2db      	uxtb	r3, r3
 8019578:	2b00      	cmp	r3, #0
 801957a:	d024      	beq.n	80195c6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 801957c:	e7e4      	b.n	8019548 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3c>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 801957e:	69bb      	ldr	r3, [r7, #24]
 8019580:	687a      	ldr	r2, [r7, #4]
 8019582:	fb03 f202 	mul.w	r2, r3, r2
 8019586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019588:	9301      	str	r3, [sp, #4]
 801958a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801958c:	9300      	str	r3, [sp, #0]
 801958e:	683b      	ldr	r3, [r7, #0]
 8019590:	68b9      	ldr	r1, [r7, #8]
 8019592:	68f8      	ldr	r0, [r7, #12]
 8019594:	f7ff ffba 	bl	801950c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
            f += fstride*in_stride;
 8019598:	683b      	ldr	r3, [r7, #0]
 801959a:	687a      	ldr	r2, [r7, #4]
 801959c:	fb02 f303 	mul.w	r3, r2, r3
 80195a0:	00db      	lsls	r3, r3, #3
 80195a2:	68ba      	ldr	r2, [r7, #8]
 80195a4:	4413      	add	r3, r2
 80195a6:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 80195a8:	697b      	ldr	r3, [r7, #20]
 80195aa:	00db      	lsls	r3, r3, #3
 80195ac:	68fa      	ldr	r2, [r7, #12]
 80195ae:	4413      	add	r3, r2
 80195b0:	60fb      	str	r3, [r7, #12]
 80195b2:	68fa      	ldr	r2, [r7, #12]
 80195b4:	693b      	ldr	r3, [r7, #16]
 80195b6:	429a      	cmp	r2, r3
 80195b8:	bf14      	ite	ne
 80195ba:	2301      	movne	r3, #1
 80195bc:	2300      	moveq	r3, #0
 80195be:	b2db      	uxtb	r3, r3
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d000      	beq.n	80195c6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 80195c4:	e7db      	b.n	801957e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
    }

    Fout=Fout_beg;
 80195c6:	69fb      	ldr	r3, [r7, #28]
 80195c8:	60fb      	str	r3, [r7, #12]

    // recombine the p smaller DFTs
    switch (p) {
 80195ca:	69bb      	ldr	r3, [r7, #24]
 80195cc:	3b02      	subs	r3, #2
 80195ce:	2b03      	cmp	r3, #3
 80195d0:	d826      	bhi.n	8019620 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x114>
 80195d2:	a201      	add	r2, pc, #4	; (adr r2, 80195d8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xcc>)
 80195d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80195d8:	080195e9 	.word	0x080195e9
 80195dc:	080195f7 	.word	0x080195f7
 80195e0:	08019605 	.word	0x08019605
 80195e4:	08019613 	.word	0x08019613
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 80195e8:	697b      	ldr	r3, [r7, #20]
 80195ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80195ec:	6879      	ldr	r1, [r7, #4]
 80195ee:	68f8      	ldr	r0, [r7, #12]
 80195f0:	f7ff f808 	bl	8018604 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>
 80195f4:	e01d      	b.n	8019632 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 80195f6:	697b      	ldr	r3, [r7, #20]
 80195f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80195fa:	6879      	ldr	r1, [r7, #4]
 80195fc:	68f8      	ldr	r0, [r7, #12]
 80195fe:	f7ff fa35 	bl	8018a6c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>
 8019602:	e016      	b.n	8019632 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 8019604:	697b      	ldr	r3, [r7, #20]
 8019606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019608:	6879      	ldr	r1, [r7, #4]
 801960a:	68f8      	ldr	r0, [r7, #12]
 801960c:	f7ff f877 	bl	80186fe <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>
 8019610:	e00f      	b.n	8019632 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 8019612:	697b      	ldr	r3, [r7, #20]
 8019614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019616:	6879      	ldr	r1, [r7, #4]
 8019618:	68f8      	ldr	r0, [r7, #12]
 801961a:	f7ff fb97 	bl	8018d4c <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>
 801961e:	e008      	b.n	8019632 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 8019620:	69bb      	ldr	r3, [r7, #24]
 8019622:	9300      	str	r3, [sp, #0]
 8019624:	697b      	ldr	r3, [r7, #20]
 8019626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019628:	6879      	ldr	r1, [r7, #4]
 801962a:	68f8      	ldr	r0, [r7, #12]
 801962c:	f7ff fe96 	bl	801935c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
 8019630:	bf00      	nop
    }
}
 8019632:	bf00      	nop
 8019634:	3720      	adds	r7, #32
 8019636:	46bd      	mov	sp, r7
 8019638:	bd80      	pop	{r7, pc}
 801963a:	bf00      	nop

0801963c <_ZL9kf_factoriPi>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 801963c:	b580      	push	{r7, lr}
 801963e:	b086      	sub	sp, #24
 8019640:	af00      	add	r7, sp, #0
 8019642:	6078      	str	r0, [r7, #4]
 8019644:	6039      	str	r1, [r7, #0]
    int p=4;
 8019646:	2304      	movs	r3, #4
 8019648:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 801964a:	6878      	ldr	r0, [r7, #4]
 801964c:	f7e6 ff74 	bl	8000538 <__aeabi_i2d>
 8019650:	4602      	mov	r2, r0
 8019652:	460b      	mov	r3, r1
 8019654:	ec43 2b10 	vmov	d0, r2, r3
 8019658:	f006 feb0 	bl	80203bc <sqrt>
 801965c:	eeb0 7a40 	vmov.f32	s14, s0
 8019660:	eef0 7a60 	vmov.f32	s15, s1
 8019664:	eeb0 0a47 	vmov.f32	s0, s14
 8019668:	eef0 0a67 	vmov.f32	s1, s15
 801966c:	f006 fc60 	bl	801ff30 <floor>
 8019670:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	697a      	ldr	r2, [r7, #20]
 8019678:	fb93 f2f2 	sdiv	r2, r3, r2
 801967c:	6979      	ldr	r1, [r7, #20]
 801967e:	fb01 f202 	mul.w	r2, r1, r2
 8019682:	1a9b      	subs	r3, r3, r2
 8019684:	2b00      	cmp	r3, #0
 8019686:	d01e      	beq.n	80196c6 <_ZL9kf_factoriPi+0x8a>
            switch (p) {
 8019688:	697b      	ldr	r3, [r7, #20]
 801968a:	2b02      	cmp	r3, #2
 801968c:	d005      	beq.n	801969a <_ZL9kf_factoriPi+0x5e>
 801968e:	697b      	ldr	r3, [r7, #20]
 8019690:	2b04      	cmp	r3, #4
 8019692:	d105      	bne.n	80196a0 <_ZL9kf_factoriPi+0x64>
                case 4: p = 2; break;
 8019694:	2302      	movs	r3, #2
 8019696:	617b      	str	r3, [r7, #20]
 8019698:	e006      	b.n	80196a8 <_ZL9kf_factoriPi+0x6c>
                case 2: p = 3; break;
 801969a:	2303      	movs	r3, #3
 801969c:	617b      	str	r3, [r7, #20]
 801969e:	e003      	b.n	80196a8 <_ZL9kf_factoriPi+0x6c>
                default: p += 2; break;
 80196a0:	697b      	ldr	r3, [r7, #20]
 80196a2:	3302      	adds	r3, #2
 80196a4:	617b      	str	r3, [r7, #20]
 80196a6:	bf00      	nop
            }
            if (p > floor_sqrt)
 80196a8:	6978      	ldr	r0, [r7, #20]
 80196aa:	f7e6 ff45 	bl	8000538 <__aeabi_i2d>
 80196ae:	4602      	mov	r2, r0
 80196b0:	460b      	mov	r3, r1
 80196b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80196b6:	f7e7 fa1b 	bl	8000af0 <__aeabi_dcmplt>
 80196ba:	4603      	mov	r3, r0
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d001      	beq.n	80196c4 <_ZL9kf_factoriPi+0x88>
                p = n;          /* no more factors, skip to end */
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	617b      	str	r3, [r7, #20]
        while (n % p) {
 80196c4:	e7d6      	b.n	8019674 <_ZL9kf_factoriPi+0x38>
        }
        n /= p;
 80196c6:	687a      	ldr	r2, [r7, #4]
 80196c8:	697b      	ldr	r3, [r7, #20]
 80196ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80196ce:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 80196d0:	683b      	ldr	r3, [r7, #0]
 80196d2:	1d1a      	adds	r2, r3, #4
 80196d4:	603a      	str	r2, [r7, #0]
 80196d6:	697a      	ldr	r2, [r7, #20]
 80196d8:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 80196da:	683b      	ldr	r3, [r7, #0]
 80196dc:	1d1a      	adds	r2, r3, #4
 80196de:	603a      	str	r2, [r7, #0]
 80196e0:	687a      	ldr	r2, [r7, #4]
 80196e2:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	2b01      	cmp	r3, #1
 80196e8:	dd00      	ble.n	80196ec <_ZL9kf_factoriPi+0xb0>
    do {
 80196ea:	e7c3      	b.n	8019674 <_ZL9kf_factoriPi+0x38>
}
 80196ec:	bf00      	nop
 80196ee:	3718      	adds	r7, #24
 80196f0:	46bd      	mov	sp, r7
 80196f2:	bd80      	pop	{r7, pc}
 80196f4:	0000      	movs	r0, r0
	...

080196f8 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 80196f8:	b5b0      	push	{r4, r5, r7, lr}
 80196fa:	b090      	sub	sp, #64	; 0x40
 80196fc:	af00      	add	r7, sp, #0
 80196fe:	60f8      	str	r0, [r7, #12]
 8019700:	60b9      	str	r1, [r7, #8]
 8019702:	607a      	str	r2, [r7, #4]
 8019704:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 8019706:	2300      	movs	r3, #0
 8019708:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 801970a:	68fb      	ldr	r3, [r7, #12]
 801970c:	3321      	adds	r3, #33	; 0x21
    size_t memneeded = sizeof(struct kiss_fft_state)
 801970e:	00db      	lsls	r3, r3, #3
 8019710:	637b      	str	r3, [r7, #52]	; 0x34

    if ( lenmem==NULL ) {
 8019712:	683b      	ldr	r3, [r7, #0]
 8019714:	2b00      	cmp	r3, #0
 8019716:	d104      	bne.n	8019722 <kiss_fft_alloc+0x2a>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 8019718:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801971a:	f000 fcbd 	bl	801a098 <_Z9ei_mallocj>
 801971e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8019720:	e00c      	b.n	801973c <kiss_fft_alloc+0x44>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	2b00      	cmp	r3, #0
 8019726:	d006      	beq.n	8019736 <kiss_fft_alloc+0x3e>
 8019728:	683b      	ldr	r3, [r7, #0]
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801972e:	429a      	cmp	r2, r3
 8019730:	d801      	bhi.n	8019736 <kiss_fft_alloc+0x3e>
            st = (kiss_fft_cfg)mem;
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	63fb      	str	r3, [r7, #60]	; 0x3c
        *lenmem = memneeded;
 8019736:	683b      	ldr	r3, [r7, #0]
 8019738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801973a:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 801973c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801973e:	2b00      	cmp	r3, #0
 8019740:	f000 80a0 	beq.w	8019884 <kiss_fft_alloc+0x18c>
        int i;
        st->nfft=nfft;
 8019744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019746:	68fa      	ldr	r2, [r7, #12]
 8019748:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 801974a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801974c:	68ba      	ldr	r2, [r7, #8]
 801974e:	605a      	str	r2, [r3, #4]
        if (inverse_fft)
 8019750:	68bb      	ldr	r3, [r7, #8]
 8019752:	2b00      	cmp	r3, #0
 8019754:	d048      	beq.n	80197e8 <kiss_fft_alloc+0xf0>
        {
            for (i=0;i<nfft;++i) {
 8019756:	2300      	movs	r3, #0
 8019758:	63bb      	str	r3, [r7, #56]	; 0x38
 801975a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801975c:	68fb      	ldr	r3, [r7, #12]
 801975e:	429a      	cmp	r2, r3
 8019760:	f280 808a 	bge.w	8019878 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 8019764:	a34e      	add	r3, pc, #312	; (adr r3, 80198a0 <kiss_fft_alloc+0x1a8>)
 8019766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801976a:	e9c7 2306 	strd	r2, r3, [r7, #24]
                double phase = 2*pi*i / nfft;
 801976e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019770:	f7e6 fee2 	bl	8000538 <__aeabi_i2d>
 8019774:	a34c      	add	r3, pc, #304	; (adr r3, 80198a8 <kiss_fft_alloc+0x1b0>)
 8019776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801977a:	f7e6 ff47 	bl	800060c <__aeabi_dmul>
 801977e:	4602      	mov	r2, r0
 8019780:	460b      	mov	r3, r1
 8019782:	4614      	mov	r4, r2
 8019784:	461d      	mov	r5, r3
 8019786:	68f8      	ldr	r0, [r7, #12]
 8019788:	f7e6 fed6 	bl	8000538 <__aeabi_i2d>
 801978c:	4602      	mov	r2, r0
 801978e:	460b      	mov	r3, r1
 8019790:	4620      	mov	r0, r4
 8019792:	4629      	mov	r1, r5
 8019794:	f7e7 f864 	bl	8000860 <__aeabi_ddiv>
 8019798:	4602      	mov	r2, r0
 801979a:	460b      	mov	r3, r1
 801979c:	e9c7 2304 	strd	r2, r3, [r7, #16]
                kf_cexp(st->twiddles+i, phase );
 80197a0:	ed97 0b04 	vldr	d0, [r7, #16]
 80197a4:	f006 fb70 	bl	801fe88 <cos>
 80197a8:	ec51 0b10 	vmov	r0, r1, d0
 80197ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80197ae:	f503 7284 	add.w	r2, r3, #264	; 0x108
 80197b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197b4:	00db      	lsls	r3, r3, #3
 80197b6:	18d4      	adds	r4, r2, r3
 80197b8:	f7e7 fa20 	bl	8000bfc <__aeabi_d2f>
 80197bc:	4603      	mov	r3, r0
 80197be:	6023      	str	r3, [r4, #0]
 80197c0:	ed97 0b04 	vldr	d0, [r7, #16]
 80197c4:	f006 fcb4 	bl	8020130 <sin>
 80197c8:	ec51 0b10 	vmov	r0, r1, d0
 80197cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80197ce:	f503 7284 	add.w	r2, r3, #264	; 0x108
 80197d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197d4:	00db      	lsls	r3, r3, #3
 80197d6:	18d4      	adds	r4, r2, r3
 80197d8:	f7e7 fa10 	bl	8000bfc <__aeabi_d2f>
 80197dc:	4603      	mov	r3, r0
 80197de:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 80197e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197e2:	3301      	adds	r3, #1
 80197e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80197e6:	e7b8      	b.n	801975a <kiss_fft_alloc+0x62>
            }
        } else {
            for (i=0;i<nfft;++i) {
 80197e8:	2300      	movs	r3, #0
 80197ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80197ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80197ee:	68fb      	ldr	r3, [r7, #12]
 80197f0:	429a      	cmp	r2, r3
 80197f2:	da41      	bge.n	8019878 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 80197f4:	a32a      	add	r3, pc, #168	; (adr r3, 80198a0 <kiss_fft_alloc+0x1a8>)
 80197f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                double phase = -2*pi*i / nfft;
 80197fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019800:	f7e6 fe9a 	bl	8000538 <__aeabi_i2d>
 8019804:	a32a      	add	r3, pc, #168	; (adr r3, 80198b0 <kiss_fft_alloc+0x1b8>)
 8019806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801980a:	f7e6 feff 	bl	800060c <__aeabi_dmul>
 801980e:	4602      	mov	r2, r0
 8019810:	460b      	mov	r3, r1
 8019812:	4614      	mov	r4, r2
 8019814:	461d      	mov	r5, r3
 8019816:	68f8      	ldr	r0, [r7, #12]
 8019818:	f7e6 fe8e 	bl	8000538 <__aeabi_i2d>
 801981c:	4602      	mov	r2, r0
 801981e:	460b      	mov	r3, r1
 8019820:	4620      	mov	r0, r4
 8019822:	4629      	mov	r1, r5
 8019824:	f7e7 f81c 	bl	8000860 <__aeabi_ddiv>
 8019828:	4602      	mov	r2, r0
 801982a:	460b      	mov	r3, r1
 801982c:	e9c7 2308 	strd	r2, r3, [r7, #32]
                kf_cexp(st->twiddles+i, phase );
 8019830:	ed97 0b08 	vldr	d0, [r7, #32]
 8019834:	f006 fb28 	bl	801fe88 <cos>
 8019838:	ec51 0b10 	vmov	r0, r1, d0
 801983c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801983e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8019842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019844:	00db      	lsls	r3, r3, #3
 8019846:	18d4      	adds	r4, r2, r3
 8019848:	f7e7 f9d8 	bl	8000bfc <__aeabi_d2f>
 801984c:	4603      	mov	r3, r0
 801984e:	6023      	str	r3, [r4, #0]
 8019850:	ed97 0b08 	vldr	d0, [r7, #32]
 8019854:	f006 fc6c 	bl	8020130 <sin>
 8019858:	ec51 0b10 	vmov	r0, r1, d0
 801985c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801985e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8019862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019864:	00db      	lsls	r3, r3, #3
 8019866:	18d4      	adds	r4, r2, r3
 8019868:	f7e7 f9c8 	bl	8000bfc <__aeabi_d2f>
 801986c:	4603      	mov	r3, r0
 801986e:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 8019870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019872:	3301      	adds	r3, #1
 8019874:	63bb      	str	r3, [r7, #56]	; 0x38
 8019876:	e7b9      	b.n	80197ec <kiss_fft_alloc+0xf4>
            }
        }

        kf_factor(nfft,st->factors);
 8019878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801987a:	3308      	adds	r3, #8
 801987c:	4619      	mov	r1, r3
 801987e:	68f8      	ldr	r0, [r7, #12]
 8019880:	f7ff fedc 	bl	801963c <_ZL9kf_factoriPi>
    }

    if (memallocated != NULL) {
 8019884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019886:	2b00      	cmp	r3, #0
 8019888:	d002      	beq.n	8019890 <kiss_fft_alloc+0x198>
        *memallocated = memneeded;
 801988a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801988c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801988e:	601a      	str	r2, [r3, #0]
    }

    return st;
 8019890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8019892:	4618      	mov	r0, r3
 8019894:	3740      	adds	r7, #64	; 0x40
 8019896:	46bd      	mov	sp, r7
 8019898:	bdb0      	pop	{r4, r5, r7, pc}
 801989a:	bf00      	nop
 801989c:	f3af 8000 	nop.w
 80198a0:	54442d18 	.word	0x54442d18
 80198a4:	400921fb 	.word	0x400921fb
 80198a8:	54442d18 	.word	0x54442d18
 80198ac:	401921fb 	.word	0x401921fb
 80198b0:	54442d18 	.word	0x54442d18
 80198b4:	c01921fb 	.word	0xc01921fb

080198b8 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 80198b8:	b580      	push	{r7, lr}
 80198ba:	b088      	sub	sp, #32
 80198bc:	af02      	add	r7, sp, #8
 80198be:	60f8      	str	r0, [r7, #12]
 80198c0:	60b9      	str	r1, [r7, #8]
 80198c2:	607a      	str	r2, [r7, #4]
 80198c4:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 80198c6:	68ba      	ldr	r2, [r7, #8]
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	429a      	cmp	r2, r3
 80198cc:	d11d      	bne.n	801990a <kiss_fft_stride+0x52>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 80198ce:	68fb      	ldr	r3, [r7, #12]
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	00db      	lsls	r3, r3, #3
 80198d4:	4618      	mov	r0, r3
 80198d6:	f000 fbdf 	bl	801a098 <_Z9ei_mallocj>
 80198da:	6178      	str	r0, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 80198dc:	68fb      	ldr	r3, [r7, #12]
 80198de:	3308      	adds	r3, #8
 80198e0:	68fa      	ldr	r2, [r7, #12]
 80198e2:	9201      	str	r2, [sp, #4]
 80198e4:	9300      	str	r3, [sp, #0]
 80198e6:	683b      	ldr	r3, [r7, #0]
 80198e8:	2201      	movs	r2, #1
 80198ea:	68b9      	ldr	r1, [r7, #8]
 80198ec:	6978      	ldr	r0, [r7, #20]
 80198ee:	f7ff fe0d 	bl	801950c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 80198f2:	68fb      	ldr	r3, [r7, #12]
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	00db      	lsls	r3, r3, #3
 80198f8:	461a      	mov	r2, r3
 80198fa:	6979      	ldr	r1, [r7, #20]
 80198fc:	6878      	ldr	r0, [r7, #4]
 80198fe:	f009 f87f 	bl	8022a00 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 8019902:	6978      	ldr	r0, [r7, #20]
 8019904:	f000 fbe2 	bl	801a0cc <_Z7ei_freePv>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 8019908:	e00a      	b.n	8019920 <kiss_fft_stride+0x68>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 801990a:	68fb      	ldr	r3, [r7, #12]
 801990c:	3308      	adds	r3, #8
 801990e:	68fa      	ldr	r2, [r7, #12]
 8019910:	9201      	str	r2, [sp, #4]
 8019912:	9300      	str	r3, [sp, #0]
 8019914:	683b      	ldr	r3, [r7, #0]
 8019916:	2201      	movs	r2, #1
 8019918:	68b9      	ldr	r1, [r7, #8]
 801991a:	6878      	ldr	r0, [r7, #4]
 801991c:	f7ff fdf6 	bl	801950c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 8019920:	bf00      	nop
 8019922:	3718      	adds	r7, #24
 8019924:	46bd      	mov	sp, r7
 8019926:	bd80      	pop	{r7, pc}

08019928 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 8019928:	b580      	push	{r7, lr}
 801992a:	b084      	sub	sp, #16
 801992c:	af00      	add	r7, sp, #0
 801992e:	60f8      	str	r0, [r7, #12]
 8019930:	60b9      	str	r1, [r7, #8]
 8019932:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 8019934:	2301      	movs	r3, #1
 8019936:	687a      	ldr	r2, [r7, #4]
 8019938:	68b9      	ldr	r1, [r7, #8]
 801993a:	68f8      	ldr	r0, [r7, #12]
 801993c:	f7ff ffbc 	bl	80198b8 <kiss_fft_stride>
}
 8019940:	bf00      	nop
 8019942:	3710      	adds	r7, #16
 8019944:	46bd      	mov	sp, r7
 8019946:	bd80      	pop	{r7, pc}

08019948 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 8019948:	b5b0      	push	{r4, r5, r7, lr}
 801994a:	b090      	sub	sp, #64	; 0x40
 801994c:	af02      	add	r7, sp, #8
 801994e:	60f8      	str	r0, [r7, #12]
 8019950:	60b9      	str	r1, [r7, #8]
 8019952:	607a      	str	r2, [r7, #4]
 8019954:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 8019956:	2300      	movs	r3, #0
 8019958:	633b      	str	r3, [r7, #48]	; 0x30
    size_t subsize = 0, memneeded;
 801995a:	2300      	movs	r3, #0
 801995c:	617b      	str	r3, [r7, #20]

    if (nfft & 1) {
 801995e:	68fb      	ldr	r3, [r7, #12]
 8019960:	f003 0301 	and.w	r3, r3, #1
 8019964:	2b00      	cmp	r3, #0
 8019966:	d004      	beq.n	8019972 <kiss_fftr_alloc+0x2a>
        ei_printf("FFT length must be even\n");
 8019968:	4885      	ldr	r0, [pc, #532]	; (8019b80 <kiss_fftr_alloc+0x238>)
 801996a:	f7ec f9ec 	bl	8005d46 <_Z9ei_printfPKcz>
        return NULL;
 801996e:	2300      	movs	r3, #0
 8019970:	e0f9      	b.n	8019b66 <kiss_fftr_alloc+0x21e>
    }
    nfft >>= 1;
 8019972:	68fb      	ldr	r3, [r7, #12]
 8019974:	105b      	asrs	r3, r3, #1
 8019976:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 8019978:	f107 0314 	add.w	r3, r7, #20
 801997c:	2200      	movs	r2, #0
 801997e:	9200      	str	r2, [sp, #0]
 8019980:	2200      	movs	r2, #0
 8019982:	68b9      	ldr	r1, [r7, #8]
 8019984:	68f8      	ldr	r0, [r7, #12]
 8019986:	f7ff feb7 	bl	80196f8 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 801998a:	68fa      	ldr	r2, [r7, #12]
 801998c:	4613      	mov	r3, r2
 801998e:	005b      	lsls	r3, r3, #1
 8019990:	4413      	add	r3, r2
 8019992:	0fda      	lsrs	r2, r3, #31
 8019994:	4413      	add	r3, r2
 8019996:	105b      	asrs	r3, r3, #1
 8019998:	00da      	lsls	r2, r3, #3
 801999a:	697b      	ldr	r3, [r7, #20]
 801999c:	4413      	add	r3, r2
 801999e:	330c      	adds	r3, #12
 80199a0:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (lenmem == NULL) {
 80199a2:	683b      	ldr	r3, [r7, #0]
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d104      	bne.n	80199b2 <kiss_fftr_alloc+0x6a>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 80199a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80199aa:	f000 fb75 	bl	801a098 <_Z9ei_mallocj>
 80199ae:	6338      	str	r0, [r7, #48]	; 0x30
 80199b0:	e009      	b.n	80199c6 <kiss_fftr_alloc+0x7e>
    } else {
        if (*lenmem >= memneeded)
 80199b2:	683b      	ldr	r3, [r7, #0]
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80199b8:	429a      	cmp	r2, r3
 80199ba:	d801      	bhi.n	80199c0 <kiss_fftr_alloc+0x78>
            st = (kiss_fftr_cfg) mem;
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	633b      	str	r3, [r7, #48]	; 0x30
        *lenmem = memneeded;
 80199c0:	683b      	ldr	r3, [r7, #0]
 80199c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80199c4:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 80199c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d101      	bne.n	80199d0 <kiss_fftr_alloc+0x88>
        return NULL;
 80199cc:	2300      	movs	r3, #0
 80199ce:	e0ca      	b.n	8019b66 <kiss_fftr_alloc+0x21e>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 80199d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199d2:	f103 020c 	add.w	r2, r3, #12
 80199d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199d8:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 80199da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199dc:	681a      	ldr	r2, [r3, #0]
 80199de:	697b      	ldr	r3, [r7, #20]
 80199e0:	441a      	add	r2, r3
 80199e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199e4:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 80199e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199e8:	685a      	ldr	r2, [r3, #4]
 80199ea:	68fb      	ldr	r3, [r7, #12]
 80199ec:	00db      	lsls	r3, r3, #3
 80199ee:	441a      	add	r2, r3
 80199f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199f2:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 80199f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199f6:	681a      	ldr	r2, [r3, #0]
 80199f8:	f107 0314 	add.w	r3, r7, #20
 80199fc:	2100      	movs	r1, #0
 80199fe:	9100      	str	r1, [sp, #0]
 8019a00:	68b9      	ldr	r1, [r7, #8]
 8019a02:	68f8      	ldr	r0, [r7, #12]
 8019a04:	f7ff fe78 	bl	80196f8 <kiss_fft_alloc>

    if (inverse_fft) {
 8019a08:	68bb      	ldr	r3, [r7, #8]
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d052      	beq.n	8019ab4 <kiss_fftr_alloc+0x16c>
        for (i = 0; i < nfft/2; ++i) {
 8019a0e:	2300      	movs	r3, #0
 8019a10:	637b      	str	r3, [r7, #52]	; 0x34
 8019a12:	68fb      	ldr	r3, [r7, #12]
 8019a14:	0fda      	lsrs	r2, r3, #31
 8019a16:	4413      	add	r3, r2
 8019a18:	105b      	asrs	r3, r3, #1
 8019a1a:	461a      	mov	r2, r3
 8019a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a1e:	4293      	cmp	r3, r2
 8019a20:	f280 809a 	bge.w	8019b58 <kiss_fftr_alloc+0x210>
            double phase =
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 8019a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a26:	3301      	adds	r3, #1
 8019a28:	4618      	mov	r0, r3
 8019a2a:	f7e6 fd85 	bl	8000538 <__aeabi_i2d>
 8019a2e:	4604      	mov	r4, r0
 8019a30:	460d      	mov	r5, r1
 8019a32:	68f8      	ldr	r0, [r7, #12]
 8019a34:	f7e6 fd80 	bl	8000538 <__aeabi_i2d>
 8019a38:	4602      	mov	r2, r0
 8019a3a:	460b      	mov	r3, r1
 8019a3c:	4620      	mov	r0, r4
 8019a3e:	4629      	mov	r1, r5
 8019a40:	f7e6 ff0e 	bl	8000860 <__aeabi_ddiv>
 8019a44:	4602      	mov	r2, r0
 8019a46:	460b      	mov	r3, r1
 8019a48:	4610      	mov	r0, r2
 8019a4a:	4619      	mov	r1, r3
 8019a4c:	f04f 0200 	mov.w	r2, #0
 8019a50:	4b4c      	ldr	r3, [pc, #304]	; (8019b84 <kiss_fftr_alloc+0x23c>)
 8019a52:	f7e6 fc25 	bl	80002a0 <__adddf3>
 8019a56:	4602      	mov	r2, r0
 8019a58:	460b      	mov	r3, r1
 8019a5a:	4610      	mov	r0, r2
 8019a5c:	4619      	mov	r1, r3
            double phase =
 8019a5e:	a344      	add	r3, pc, #272	; (adr r3, 8019b70 <kiss_fftr_alloc+0x228>)
 8019a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a64:	f7e6 fdd2 	bl	800060c <__aeabi_dmul>
 8019a68:	4602      	mov	r2, r0
 8019a6a:	460b      	mov	r3, r1
 8019a6c:	e9c7 2306 	strd	r2, r3, [r7, #24]
            kf_cexp (st->super_twiddles+i,phase);
 8019a70:	ed97 0b06 	vldr	d0, [r7, #24]
 8019a74:	f006 fa08 	bl	801fe88 <cos>
 8019a78:	ec51 0b10 	vmov	r0, r1, d0
 8019a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a7e:	689a      	ldr	r2, [r3, #8]
 8019a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a82:	00db      	lsls	r3, r3, #3
 8019a84:	18d4      	adds	r4, r2, r3
 8019a86:	f7e7 f8b9 	bl	8000bfc <__aeabi_d2f>
 8019a8a:	4603      	mov	r3, r0
 8019a8c:	6023      	str	r3, [r4, #0]
 8019a8e:	ed97 0b06 	vldr	d0, [r7, #24]
 8019a92:	f006 fb4d 	bl	8020130 <sin>
 8019a96:	ec51 0b10 	vmov	r0, r1, d0
 8019a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a9c:	689a      	ldr	r2, [r3, #8]
 8019a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019aa0:	00db      	lsls	r3, r3, #3
 8019aa2:	18d4      	adds	r4, r2, r3
 8019aa4:	f7e7 f8aa 	bl	8000bfc <__aeabi_d2f>
 8019aa8:	4603      	mov	r3, r0
 8019aaa:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 8019aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019aae:	3301      	adds	r3, #1
 8019ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8019ab2:	e7ae      	b.n	8019a12 <kiss_fftr_alloc+0xca>
        }
    } else  {
        for (i = 0; i < nfft/2; ++i) {
 8019ab4:	2300      	movs	r3, #0
 8019ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	0fda      	lsrs	r2, r3, #31
 8019abc:	4413      	add	r3, r2
 8019abe:	105b      	asrs	r3, r3, #1
 8019ac0:	461a      	mov	r2, r3
 8019ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ac4:	4293      	cmp	r3, r2
 8019ac6:	da47      	bge.n	8019b58 <kiss_fftr_alloc+0x210>
            double phase =
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 8019ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019aca:	3301      	adds	r3, #1
 8019acc:	4618      	mov	r0, r3
 8019ace:	f7e6 fd33 	bl	8000538 <__aeabi_i2d>
 8019ad2:	4604      	mov	r4, r0
 8019ad4:	460d      	mov	r5, r1
 8019ad6:	68f8      	ldr	r0, [r7, #12]
 8019ad8:	f7e6 fd2e 	bl	8000538 <__aeabi_i2d>
 8019adc:	4602      	mov	r2, r0
 8019ade:	460b      	mov	r3, r1
 8019ae0:	4620      	mov	r0, r4
 8019ae2:	4629      	mov	r1, r5
 8019ae4:	f7e6 febc 	bl	8000860 <__aeabi_ddiv>
 8019ae8:	4602      	mov	r2, r0
 8019aea:	460b      	mov	r3, r1
 8019aec:	4610      	mov	r0, r2
 8019aee:	4619      	mov	r1, r3
 8019af0:	f04f 0200 	mov.w	r2, #0
 8019af4:	4b23      	ldr	r3, [pc, #140]	; (8019b84 <kiss_fftr_alloc+0x23c>)
 8019af6:	f7e6 fbd3 	bl	80002a0 <__adddf3>
 8019afa:	4602      	mov	r2, r0
 8019afc:	460b      	mov	r3, r1
 8019afe:	4610      	mov	r0, r2
 8019b00:	4619      	mov	r1, r3
            double phase =
 8019b02:	a31d      	add	r3, pc, #116	; (adr r3, 8019b78 <kiss_fftr_alloc+0x230>)
 8019b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b08:	f7e6 fd80 	bl	800060c <__aeabi_dmul>
 8019b0c:	4602      	mov	r2, r0
 8019b0e:	460b      	mov	r3, r1
 8019b10:	e9c7 2308 	strd	r2, r3, [r7, #32]
            kf_cexp (st->super_twiddles+i,phase);
 8019b14:	ed97 0b08 	vldr	d0, [r7, #32]
 8019b18:	f006 f9b6 	bl	801fe88 <cos>
 8019b1c:	ec51 0b10 	vmov	r0, r1, d0
 8019b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b22:	689a      	ldr	r2, [r3, #8]
 8019b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b26:	00db      	lsls	r3, r3, #3
 8019b28:	18d4      	adds	r4, r2, r3
 8019b2a:	f7e7 f867 	bl	8000bfc <__aeabi_d2f>
 8019b2e:	4603      	mov	r3, r0
 8019b30:	6023      	str	r3, [r4, #0]
 8019b32:	ed97 0b08 	vldr	d0, [r7, #32]
 8019b36:	f006 fafb 	bl	8020130 <sin>
 8019b3a:	ec51 0b10 	vmov	r0, r1, d0
 8019b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b40:	689a      	ldr	r2, [r3, #8]
 8019b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b44:	00db      	lsls	r3, r3, #3
 8019b46:	18d4      	adds	r4, r2, r3
 8019b48:	f7e7 f858 	bl	8000bfc <__aeabi_d2f>
 8019b4c:	4603      	mov	r3, r0
 8019b4e:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 8019b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b52:	3301      	adds	r3, #1
 8019b54:	637b      	str	r3, [r7, #52]	; 0x34
 8019b56:	e7af      	b.n	8019ab8 <kiss_fftr_alloc+0x170>
        }
    }

    if (memallocated != NULL) {
 8019b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	d002      	beq.n	8019b64 <kiss_fftr_alloc+0x21c>
        *memallocated = memneeded;
 8019b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019b62:	601a      	str	r2, [r3, #0]
    }

    return st;
 8019b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8019b66:	4618      	mov	r0, r3
 8019b68:	3738      	adds	r7, #56	; 0x38
 8019b6a:	46bd      	mov	sp, r7
 8019b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8019b6e:	bf00      	nop
 8019b70:	54442d18 	.word	0x54442d18
 8019b74:	400921fb 	.word	0x400921fb
 8019b78:	54442d18 	.word	0x54442d18
 8019b7c:	c00921fb 	.word	0xc00921fb
 8019b80:	080278d0 	.word	0x080278d0
 8019b84:	3fe00000 	.word	0x3fe00000

08019b88 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 8019b88:	b580      	push	{r7, lr}
 8019b8a:	b092      	sub	sp, #72	; 0x48
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	60f8      	str	r0, [r7, #12]
 8019b90:	60b9      	str	r1, [r7, #8]
 8019b92:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 8019b94:	68fb      	ldr	r3, [r7, #12]
 8019b96:	681b      	ldr	r3, [r3, #0]
 8019b98:	685b      	ldr	r3, [r3, #4]
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d002      	beq.n	8019ba4 <kiss_fftr+0x1c>
        ei_printf("kiss fft usage error: improper alloc\n");
 8019b9e:	4887      	ldr	r0, [pc, #540]	; (8019dbc <kiss_fftr+0x234>)
 8019ba0:	f7ec f8d1 	bl	8005d46 <_Z9ei_printfPKcz>
    }

    ncfft = st->substate->nfft;
 8019ba4:	68fb      	ldr	r3, [r7, #12]
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	6818      	ldr	r0, [r3, #0]
 8019bb0:	68fb      	ldr	r3, [r7, #12]
 8019bb2:	685b      	ldr	r3, [r3, #4]
 8019bb4:	461a      	mov	r2, r3
 8019bb6:	68b9      	ldr	r1, [r7, #8]
 8019bb8:	f7ff feb6 	bl	8019928 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 8019bbc:	68fb      	ldr	r3, [r7, #12]
 8019bbe:	685b      	ldr	r3, [r3, #4]
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 8019bc4:	68fb      	ldr	r3, [r7, #12]
 8019bc6:	685b      	ldr	r3, [r3, #4]
 8019bc8:	685b      	ldr	r3, [r3, #4]
 8019bca:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 8019bcc:	ed97 7a04 	vldr	s14, [r7, #16]
 8019bd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8019bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 8019bde:	ed97 7a04 	vldr	s14, [r7, #16]
 8019be2:	edd7 7a05 	vldr	s15, [r7, #20]
 8019be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019be8:	00db      	lsls	r3, r3, #3
 8019bea:	687a      	ldr	r2, [r7, #4]
 8019bec:	4413      	add	r3, r2
 8019bee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019bf2:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	f04f 0200 	mov.w	r2, #0
 8019bfc:	605a      	str	r2, [r3, #4]
 8019bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019c00:	00db      	lsls	r3, r3, #3
 8019c02:	687a      	ldr	r2, [r7, #4]
 8019c04:	4413      	add	r3, r2
 8019c06:	687a      	ldr	r2, [r7, #4]
 8019c08:	6852      	ldr	r2, [r2, #4]
 8019c0a:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 8019c0c:	2301      	movs	r3, #1
 8019c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8019c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019c12:	0fda      	lsrs	r2, r3, #31
 8019c14:	4413      	add	r3, r2
 8019c16:	105b      	asrs	r3, r3, #1
 8019c18:	461a      	mov	r2, r3
 8019c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c1c:	4293      	cmp	r3, r2
 8019c1e:	f300 80c9 	bgt.w	8019db4 <kiss_fftr+0x22c>
        fpk    = st->tmpbuf[k];
 8019c22:	68fb      	ldr	r3, [r7, #12]
 8019c24:	685a      	ldr	r2, [r3, #4]
 8019c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c28:	00db      	lsls	r3, r3, #3
 8019c2a:	441a      	add	r2, r3
 8019c2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019c30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019c34:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 8019c38:	68fb      	ldr	r3, [r7, #12]
 8019c3a:	685a      	ldr	r2, [r3, #4]
 8019c3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8019c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c40:	1acb      	subs	r3, r1, r3
 8019c42:	00db      	lsls	r3, r3, #3
 8019c44:	4413      	add	r3, r2
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	685a      	ldr	r2, [r3, #4]
 8019c4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8019c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c52:	1acb      	subs	r3, r1, r3
 8019c54:	00db      	lsls	r3, r3, #3
 8019c56:	4413      	add	r3, r2
 8019c58:	edd3 7a01 	vldr	s15, [r3, #4]
 8019c5c:	eef1 7a67 	vneg.f32	s15, s15
 8019c60:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 8019c64:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8019c68:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c70:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8019c74:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8019c78:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8019c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c80:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 8019c84:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8019c88:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019c90:	edc7 7a08 	vstr	s15, [r7, #32]
 8019c94:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8019c98:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8019c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019ca0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 8019ca4:	ed97 7a08 	vldr	s14, [r7, #32]
 8019ca8:	68fb      	ldr	r3, [r7, #12]
 8019caa:	689a      	ldr	r2, [r3, #8]
 8019cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019cae:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8019cb2:	3b01      	subs	r3, #1
 8019cb4:	00db      	lsls	r3, r3, #3
 8019cb6:	4413      	add	r3, r2
 8019cb8:	edd3 7a00 	vldr	s15, [r3]
 8019cbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019cc0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8019cc4:	68fb      	ldr	r3, [r7, #12]
 8019cc6:	689a      	ldr	r2, [r3, #8]
 8019cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019cca:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8019cce:	3b01      	subs	r3, #1
 8019cd0:	00db      	lsls	r3, r3, #3
 8019cd2:	4413      	add	r3, r2
 8019cd4:	edd3 7a01 	vldr	s15, [r3, #4]
 8019cd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019ce0:	edc7 7a06 	vstr	s15, [r7, #24]
 8019ce4:	ed97 7a08 	vldr	s14, [r7, #32]
 8019ce8:	68fb      	ldr	r3, [r7, #12]
 8019cea:	689a      	ldr	r2, [r3, #8]
 8019cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019cee:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8019cf2:	3b01      	subs	r3, #1
 8019cf4:	00db      	lsls	r3, r3, #3
 8019cf6:	4413      	add	r3, r2
 8019cf8:	edd3 7a01 	vldr	s15, [r3, #4]
 8019cfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019d00:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8019d04:	68fb      	ldr	r3, [r7, #12]
 8019d06:	689a      	ldr	r2, [r3, #8]
 8019d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d0a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8019d0e:	3b01      	subs	r3, #1
 8019d10:	00db      	lsls	r3, r3, #3
 8019d12:	4413      	add	r3, r2
 8019d14:	edd3 7a00 	vldr	s15, [r3]
 8019d18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d20:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 8019d24:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8019d28:	edd7 7a06 	vldr	s15, [r7, #24]
 8019d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d32:	00db      	lsls	r3, r3, #3
 8019d34:	687a      	ldr	r2, [r7, #4]
 8019d36:	4413      	add	r3, r2
 8019d38:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019d3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019d40:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 8019d44:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8019d48:	edd7 7a07 	vldr	s15, [r7, #28]
 8019d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d52:	00db      	lsls	r3, r3, #3
 8019d54:	687a      	ldr	r2, [r7, #4]
 8019d56:	4413      	add	r3, r2
 8019d58:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019d60:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 8019d64:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8019d68:	edd7 7a06 	vldr	s15, [r7, #24]
 8019d6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019d70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d74:	1ad3      	subs	r3, r2, r3
 8019d76:	00db      	lsls	r3, r3, #3
 8019d78:	687a      	ldr	r2, [r7, #4]
 8019d7a:	4413      	add	r3, r2
 8019d7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019d80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019d84:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 8019d88:	ed97 7a07 	vldr	s14, [r7, #28]
 8019d8c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019d90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019d94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d98:	1ad3      	subs	r3, r2, r3
 8019d9a:	00db      	lsls	r3, r3, #3
 8019d9c:	687a      	ldr	r2, [r7, #4]
 8019d9e:	4413      	add	r3, r2
 8019da0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019da8:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 8019dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019dae:	3301      	adds	r3, #1
 8019db0:	647b      	str	r3, [r7, #68]	; 0x44
 8019db2:	e72d      	b.n	8019c10 <kiss_fftr+0x88>
    }
}
 8019db4:	bf00      	nop
 8019db6:	3748      	adds	r7, #72	; 0x48
 8019db8:	46bd      	mov	sp, r7
 8019dba:	bd80      	pop	{r7, pc}
 8019dbc:	080278ec 	.word	0x080278ec

08019dc0 <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 8019dc0:	b580      	push	{r7, lr}
 8019dc2:	b082      	sub	sp, #8
 8019dc4:	af00      	add	r7, sp, #0
 8019dc6:	ed87 0a01 	vstr	s0, [r7, #4]
 8019dca:	ed97 0a01 	vldr	s0, [r7, #4]
 8019dce:	f006 fb57 	bl	8020480 <log10f>
 8019dd2:	eef0 7a40 	vmov.f32	s15, s0
 8019dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8019dda:	3708      	adds	r7, #8
 8019ddc:	46bd      	mov	sp, r7
 8019dde:	bd80      	pop	{r7, pc}

08019de0 <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 8019de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019de2:	b083      	sub	sp, #12
 8019de4:	af00      	add	r7, sp, #0
 8019de6:	ed87 0b00 	vstr	d0, [r7]
 8019dea:	683c      	ldr	r4, [r7, #0]
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8019df2:	2301      	movs	r3, #1
 8019df4:	461e      	mov	r6, r3
 8019df6:	f04f 32ff 	mov.w	r2, #4294967295
 8019dfa:	4b10      	ldr	r3, [pc, #64]	; (8019e3c <_ZSt5isinfd+0x5c>)
 8019dfc:	4620      	mov	r0, r4
 8019dfe:	4629      	mov	r1, r5
 8019e00:	f7e6 fe9e 	bl	8000b40 <__aeabi_dcmpun>
 8019e04:	4603      	mov	r3, r0
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	d10b      	bne.n	8019e22 <_ZSt5isinfd+0x42>
 8019e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8019e0e:	4b0b      	ldr	r3, [pc, #44]	; (8019e3c <_ZSt5isinfd+0x5c>)
 8019e10:	4620      	mov	r0, r4
 8019e12:	4629      	mov	r1, r5
 8019e14:	f7e6 fe76 	bl	8000b04 <__aeabi_dcmple>
 8019e18:	4603      	mov	r3, r0
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d101      	bne.n	8019e22 <_ZSt5isinfd+0x42>
 8019e1e:	2300      	movs	r3, #0
 8019e20:	461e      	mov	r6, r3
 8019e22:	b2f3      	uxtb	r3, r6
 8019e24:	f083 0301 	eor.w	r3, r3, #1
 8019e28:	b2db      	uxtb	r3, r3
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	bf14      	ite	ne
 8019e2e:	2301      	movne	r3, #1
 8019e30:	2300      	moveq	r3, #0
 8019e32:	b2db      	uxtb	r3, r3
 8019e34:	4618      	mov	r0, r3
 8019e36:	370c      	adds	r7, #12
 8019e38:	46bd      	mov	sp, r7
 8019e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e3c:	7fefffff 	.word	0x7fefffff

08019e40 <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 8019e40:	b480      	push	{r7}
 8019e42:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 8019e44:	2300      	movs	r3, #0
}
 8019e46:	4618      	mov	r0, r3
 8019e48:	46bd      	mov	sp, r7
 8019e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e4e:	4770      	bx	lr

08019e50 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return HAL_GetTick();
}

uint64_t ei_read_timer_us() {
 8019e50:	b5b0      	push	{r4, r5, r7, lr}
 8019e52:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 8019e54:	f7ef f85a 	bl	8008f0c <HAL_GetTick>
 8019e58:	4603      	mov	r3, r0
 8019e5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019e5e:	fb02 f303 	mul.w	r3, r2, r3
 8019e62:	2200      	movs	r2, #0
 8019e64:	461c      	mov	r4, r3
 8019e66:	4615      	mov	r5, r2
 8019e68:	4622      	mov	r2, r4
 8019e6a:	462b      	mov	r3, r5
}
 8019e6c:	4610      	mov	r0, r2
 8019e6e:	4619      	mov	r1, r3
 8019e70:	bdb0      	pop	{r4, r5, r7, pc}
 8019e72:	0000      	movs	r0, r0
 8019e74:	0000      	movs	r0, r0
	...

08019e78 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 8019e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e7c:	b08c      	sub	sp, #48	; 0x30
 8019e7e:	af00      	add	r7, sp, #0
 8019e80:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        *(c) = '\0';
    }


    ei_printf("%s", s);
 8019e84:	466b      	mov	r3, sp
 8019e86:	4698      	mov	r8, r3
    float n = f;
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	627b      	str	r3, [r7, #36]	; 0x24
    char s[MAX_NUMBER_STRING_SIZE];
 8019e8c:	4b7e      	ldr	r3, [pc, #504]	; (801a088 <_Z15ei_printf_floatf+0x210>)
 8019e8e:	681b      	ldr	r3, [r3, #0]
 8019e90:	1e5e      	subs	r6, r3, #1
 8019e92:	623e      	str	r6, [r7, #32]
 8019e94:	4633      	mov	r3, r6
 8019e96:	3301      	adds	r3, #1
 8019e98:	2200      	movs	r2, #0
 8019e9a:	461c      	mov	r4, r3
 8019e9c:	4615      	mov	r5, r2
 8019e9e:	f04f 0200 	mov.w	r2, #0
 8019ea2:	f04f 0300 	mov.w	r3, #0
 8019ea6:	00eb      	lsls	r3, r5, #3
 8019ea8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8019eac:	00e2      	lsls	r2, r4, #3
 8019eae:	4633      	mov	r3, r6
 8019eb0:	3301      	adds	r3, #1
 8019eb2:	2200      	movs	r2, #0
 8019eb4:	4618      	mov	r0, r3
 8019eb6:	4611      	mov	r1, r2
 8019eb8:	f04f 0200 	mov.w	r2, #0
 8019ebc:	f04f 0300 	mov.w	r3, #0
 8019ec0:	00cb      	lsls	r3, r1, #3
 8019ec2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8019ec6:	00c2      	lsls	r2, r0, #3
 8019ec8:	4633      	mov	r3, r6
 8019eca:	3301      	adds	r3, #1
 8019ecc:	3307      	adds	r3, #7
 8019ece:	08db      	lsrs	r3, r3, #3
 8019ed0:	00db      	lsls	r3, r3, #3
 8019ed2:	ebad 0d03 	sub.w	sp, sp, r3
 8019ed6:	466b      	mov	r3, sp
 8019ed8:	3300      	adds	r3, #0
 8019eda:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 8019edc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019ee0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ee8:	d106      	bne.n	8019ef8 <_Z15ei_printf_floatf+0x80>
        strcpy(s, "0");
 8019eea:	69fb      	ldr	r3, [r7, #28]
 8019eec:	4967      	ldr	r1, [pc, #412]	; (801a08c <_Z15ei_printf_floatf+0x214>)
 8019eee:	461a      	mov	r2, r3
 8019ef0:	460b      	mov	r3, r1
 8019ef2:	881b      	ldrh	r3, [r3, #0]
 8019ef4:	8013      	strh	r3, [r2, #0]
 8019ef6:	e0b6      	b.n	801a066 <_Z15ei_printf_floatf+0x1ee>
        char *c = s;
 8019ef8:	69fb      	ldr	r3, [r7, #28]
 8019efa:	62fb      	str	r3, [r7, #44]	; 0x2c
        int neg = (n < 0);
 8019efc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019f00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f08:	bf4c      	ite	mi
 8019f0a:	2301      	movmi	r3, #1
 8019f0c:	2300      	movpl	r3, #0
 8019f0e:	b2db      	uxtb	r3, r3
 8019f10:	61bb      	str	r3, [r7, #24]
        if (neg) {
 8019f12:	69bb      	ldr	r3, [r7, #24]
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	d005      	beq.n	8019f24 <_Z15ei_printf_floatf+0xac>
            n = -n;
 8019f18:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019f1c:	eef1 7a67 	vneg.f32	s15, s15
 8019f20:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        m = log10(n);
 8019f24:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8019f28:	f7ff ff4a 	bl	8019dc0 <_ZSt5log10f>
 8019f2c:	eef0 7a40 	vmov.f32	s15, s0
 8019f30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019f34:	ee17 3a90 	vmov	r3, s15
 8019f38:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 8019f3a:	69bb      	ldr	r3, [r7, #24]
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d004      	beq.n	8019f4a <_Z15ei_printf_floatf+0xd2>
            *(c++) = '-';
 8019f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f42:	1c5a      	adds	r2, r3, #1
 8019f44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019f46:	222d      	movs	r2, #45	; 0x2d
 8019f48:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 8019f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	dc01      	bgt.n	8019f54 <_Z15ei_printf_floatf+0xdc>
            m = 0;
 8019f50:	2300      	movs	r3, #0
 8019f52:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8019f54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019f56:	f7e6 fb01 	bl	800055c <__aeabi_f2d>
 8019f5a:	4b4d      	ldr	r3, [pc, #308]	; (801a090 <_Z15ei_printf_floatf+0x218>)
 8019f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f60:	2401      	movs	r4, #1
 8019f62:	f7e6 fde3 	bl	8000b2c <__aeabi_dcmpgt>
 8019f66:	4603      	mov	r3, r0
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d101      	bne.n	8019f70 <_Z15ei_printf_floatf+0xf8>
 8019f6c:	2300      	movs	r3, #0
 8019f6e:	461c      	mov	r4, r3
 8019f70:	b2e3      	uxtb	r3, r4
 8019f72:	f083 0301 	eor.w	r3, r3, #1
 8019f76:	b2db      	uxtb	r3, r3
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d002      	beq.n	8019f82 <_Z15ei_printf_floatf+0x10a>
 8019f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	db6e      	blt.n	801a060 <_Z15ei_printf_floatf+0x1e8>
            double weight = pow(10.0, m);
 8019f82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019f84:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 801a080 <_Z15ei_printf_floatf+0x208>
 8019f88:	f000 f8ab 	bl	801a0e2 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8019f8c:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 8019f90:	f04f 0200 	mov.w	r2, #0
 8019f94:	f04f 0300 	mov.w	r3, #0
 8019f98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8019f9c:	f7e6 fdc6 	bl	8000b2c <__aeabi_dcmpgt>
 8019fa0:	4603      	mov	r3, r0
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	d00b      	beq.n	8019fbe <_Z15ei_printf_floatf+0x146>
 8019fa6:	ed97 0b04 	vldr	d0, [r7, #16]
 8019faa:	f7ff ff19 	bl	8019de0 <_ZSt5isinfd>
 8019fae:	4603      	mov	r3, r0
 8019fb0:	f083 0301 	eor.w	r3, r3, #1
 8019fb4:	b2db      	uxtb	r3, r3
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d001      	beq.n	8019fbe <_Z15ei_printf_floatf+0x146>
 8019fba:	2301      	movs	r3, #1
 8019fbc:	e000      	b.n	8019fc0 <_Z15ei_printf_floatf+0x148>
 8019fbe:	2300      	movs	r3, #0
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	d03a      	beq.n	801a03a <_Z15ei_printf_floatf+0x1c2>
                digit = floor(n / weight);
 8019fc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019fc6:	f7e6 fac9 	bl	800055c <__aeabi_f2d>
 8019fca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8019fce:	f7e6 fc47 	bl	8000860 <__aeabi_ddiv>
 8019fd2:	4602      	mov	r2, r0
 8019fd4:	460b      	mov	r3, r1
 8019fd6:	ec43 2b17 	vmov	d7, r2, r3
 8019fda:	eeb0 0a47 	vmov.f32	s0, s14
 8019fde:	eef0 0a67 	vmov.f32	s1, s15
 8019fe2:	f005 ffa5 	bl	801ff30 <floor>
 8019fe6:	ec53 2b10 	vmov	r2, r3, d0
 8019fea:	4610      	mov	r0, r2
 8019fec:	4619      	mov	r1, r3
 8019fee:	f7e6 fdbd 	bl	8000b6c <__aeabi_d2iz>
 8019ff2:	4603      	mov	r3, r0
 8019ff4:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 8019ff6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019ff8:	f7e6 fab0 	bl	800055c <__aeabi_f2d>
 8019ffc:	4604      	mov	r4, r0
 8019ffe:	460d      	mov	r5, r1
 801a000:	68f8      	ldr	r0, [r7, #12]
 801a002:	f7e6 fa99 	bl	8000538 <__aeabi_i2d>
 801a006:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801a00a:	f7e6 faff 	bl	800060c <__aeabi_dmul>
 801a00e:	4602      	mov	r2, r0
 801a010:	460b      	mov	r3, r1
 801a012:	4620      	mov	r0, r4
 801a014:	4629      	mov	r1, r5
 801a016:	f7e6 f941 	bl	800029c <__aeabi_dsub>
 801a01a:	4602      	mov	r2, r0
 801a01c:	460b      	mov	r3, r1
 801a01e:	4610      	mov	r0, r2
 801a020:	4619      	mov	r1, r3
 801a022:	f7e6 fdeb 	bl	8000bfc <__aeabi_d2f>
 801a026:	4603      	mov	r3, r0
 801a028:	627b      	str	r3, [r7, #36]	; 0x24
                *(c++) = '0' + digit;
 801a02a:	68fb      	ldr	r3, [r7, #12]
 801a02c:	b2da      	uxtb	r2, r3
 801a02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a030:	1c59      	adds	r1, r3, #1
 801a032:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a034:	3230      	adds	r2, #48	; 0x30
 801a036:	b2d2      	uxtb	r2, r2
 801a038:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 801a03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	d10b      	bne.n	801a058 <_Z15ei_printf_floatf+0x1e0>
 801a040:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801a044:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a04c:	dd04      	ble.n	801a058 <_Z15ei_printf_floatf+0x1e0>
                *(c++) = '.';
 801a04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a050:	1c5a      	adds	r2, r3, #1
 801a052:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a054:	222e      	movs	r2, #46	; 0x2e
 801a056:	701a      	strb	r2, [r3, #0]
            m--;
 801a058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a05a:	3b01      	subs	r3, #1
 801a05c:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 801a05e:	e779      	b.n	8019f54 <_Z15ei_printf_floatf+0xdc>
        *(c) = '\0';
 801a060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a062:	2200      	movs	r2, #0
 801a064:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 801a066:	69f9      	ldr	r1, [r7, #28]
 801a068:	480a      	ldr	r0, [pc, #40]	; (801a094 <_Z15ei_printf_floatf+0x21c>)
 801a06a:	f7eb fe6c 	bl	8005d46 <_Z9ei_printfPKcz>
 801a06e:	46c5      	mov	sp, r8
}
 801a070:	bf00      	nop
 801a072:	3730      	adds	r7, #48	; 0x30
 801a074:	46bd      	mov	sp, r7
 801a076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a07a:	bf00      	nop
 801a07c:	f3af 8000 	nop.w
 801a080:	00000000 	.word	0x00000000
 801a084:	40240000 	.word	0x40240000
 801a088:	20000118 	.word	0x20000118
 801a08c:	08027914 	.word	0x08027914
 801a090:	20000110 	.word	0x20000110
 801a094:	08027918 	.word	0x08027918

0801a098 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
 801a098:	b580      	push	{r7, lr}
 801a09a:	b082      	sub	sp, #8
 801a09c:	af00      	add	r7, sp, #0
 801a09e:	6078      	str	r0, [r7, #4]
    return malloc(size);
 801a0a0:	6878      	ldr	r0, [r7, #4]
 801a0a2:	f008 fc9d 	bl	80229e0 <malloc>
 801a0a6:	4603      	mov	r3, r0
}
 801a0a8:	4618      	mov	r0, r3
 801a0aa:	3708      	adds	r7, #8
 801a0ac:	46bd      	mov	sp, r7
 801a0ae:	bd80      	pop	{r7, pc}

0801a0b0 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 801a0b0:	b580      	push	{r7, lr}
 801a0b2:	b082      	sub	sp, #8
 801a0b4:	af00      	add	r7, sp, #0
 801a0b6:	6078      	str	r0, [r7, #4]
 801a0b8:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 801a0ba:	6839      	ldr	r1, [r7, #0]
 801a0bc:	6878      	ldr	r0, [r7, #4]
 801a0be:	f008 fc47 	bl	8022950 <calloc>
 801a0c2:	4603      	mov	r3, r0
}
 801a0c4:	4618      	mov	r0, r3
 801a0c6:	3708      	adds	r7, #8
 801a0c8:	46bd      	mov	sp, r7
 801a0ca:	bd80      	pop	{r7, pc}

0801a0cc <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 801a0cc:	b580      	push	{r7, lr}
 801a0ce:	b082      	sub	sp, #8
 801a0d0:	af00      	add	r7, sp, #0
 801a0d2:	6078      	str	r0, [r7, #4]
    free(ptr);
 801a0d4:	6878      	ldr	r0, [r7, #4]
 801a0d6:	f008 fc8b 	bl	80229f0 <free>
}
 801a0da:	bf00      	nop
 801a0dc:	3708      	adds	r7, #8
 801a0de:	46bd      	mov	sp, r7
 801a0e0:	bd80      	pop	{r7, pc}

0801a0e2 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 801a0e2:	b580      	push	{r7, lr}
 801a0e4:	b084      	sub	sp, #16
 801a0e6:	af00      	add	r7, sp, #0
 801a0e8:	ed87 0b02 	vstr	d0, [r7, #8]
 801a0ec:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 801a0ee:	6878      	ldr	r0, [r7, #4]
 801a0f0:	f7e6 fa22 	bl	8000538 <__aeabi_i2d>
 801a0f4:	4602      	mov	r2, r0
 801a0f6:	460b      	mov	r3, r1
 801a0f8:	ec43 2b11 	vmov	d1, r2, r3
 801a0fc:	ed97 0b02 	vldr	d0, [r7, #8]
 801a100:	f006 f8ec 	bl	80202dc <pow>
 801a104:	eeb0 7a40 	vmov.f32	s14, s0
 801a108:	eef0 7a60 	vmov.f32	s15, s1
    }
 801a10c:	eeb0 0a47 	vmov.f32	s0, s14
 801a110:	eef0 0a67 	vmov.f32	s1, s15
 801a114:	3710      	adds	r7, #16
 801a116:	46bd      	mov	sp, r7
 801a118:	bd80      	pop	{r7, pc}
	...

0801a11c <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 801a11c:	b480      	push	{r7}
 801a11e:	b083      	sub	sp, #12
 801a120:	af00      	add	r7, sp, #0
 801a122:	4603      	mov	r3, r0
 801a124:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 801a126:	79fb      	ldrb	r3, [r7, #7]
 801a128:	2b10      	cmp	r3, #16
 801a12a:	d847      	bhi.n	801a1bc <TfLiteTypeGetName+0xa0>
 801a12c:	a201      	add	r2, pc, #4	; (adr r2, 801a134 <TfLiteTypeGetName+0x18>)
 801a12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a132:	bf00      	nop
 801a134:	0801a179 	.word	0x0801a179
 801a138:	0801a17d 	.word	0x0801a17d
 801a13c:	0801a185 	.word	0x0801a185
 801a140:	0801a18d 	.word	0x0801a18d
 801a144:	0801a195 	.word	0x0801a195
 801a148:	0801a1a9 	.word	0x0801a1a9
 801a14c:	0801a19d 	.word	0x0801a19d
 801a150:	0801a181 	.word	0x0801a181
 801a154:	0801a1a1 	.word	0x0801a1a1
 801a158:	0801a191 	.word	0x0801a191
 801a15c:	0801a1ad 	.word	0x0801a1ad
 801a160:	0801a1b1 	.word	0x0801a1b1
 801a164:	0801a1a5 	.word	0x0801a1a5
 801a168:	0801a199 	.word	0x0801a199
 801a16c:	0801a1b5 	.word	0x0801a1b5
 801a170:	0801a1b9 	.word	0x0801a1b9
 801a174:	0801a189 	.word	0x0801a189
    case kTfLiteNoType:
      return "NOTYPE";
 801a178:	4b14      	ldr	r3, [pc, #80]	; (801a1cc <TfLiteTypeGetName+0xb0>)
 801a17a:	e020      	b.n	801a1be <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 801a17c:	4b14      	ldr	r3, [pc, #80]	; (801a1d0 <TfLiteTypeGetName+0xb4>)
 801a17e:	e01e      	b.n	801a1be <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 801a180:	4b14      	ldr	r3, [pc, #80]	; (801a1d4 <TfLiteTypeGetName+0xb8>)
 801a182:	e01c      	b.n	801a1be <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 801a184:	4b14      	ldr	r3, [pc, #80]	; (801a1d8 <TfLiteTypeGetName+0xbc>)
 801a186:	e01a      	b.n	801a1be <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 801a188:	4b14      	ldr	r3, [pc, #80]	; (801a1dc <TfLiteTypeGetName+0xc0>)
 801a18a:	e018      	b.n	801a1be <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 801a18c:	4b14      	ldr	r3, [pc, #80]	; (801a1e0 <TfLiteTypeGetName+0xc4>)
 801a18e:	e016      	b.n	801a1be <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 801a190:	4b14      	ldr	r3, [pc, #80]	; (801a1e4 <TfLiteTypeGetName+0xc8>)
 801a192:	e014      	b.n	801a1be <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 801a194:	4b14      	ldr	r3, [pc, #80]	; (801a1e8 <TfLiteTypeGetName+0xcc>)
 801a196:	e012      	b.n	801a1be <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 801a198:	4b14      	ldr	r3, [pc, #80]	; (801a1ec <TfLiteTypeGetName+0xd0>)
 801a19a:	e010      	b.n	801a1be <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 801a19c:	4b14      	ldr	r3, [pc, #80]	; (801a1f0 <TfLiteTypeGetName+0xd4>)
 801a19e:	e00e      	b.n	801a1be <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 801a1a0:	4b14      	ldr	r3, [pc, #80]	; (801a1f4 <TfLiteTypeGetName+0xd8>)
 801a1a2:	e00c      	b.n	801a1be <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 801a1a4:	4b14      	ldr	r3, [pc, #80]	; (801a1f8 <TfLiteTypeGetName+0xdc>)
 801a1a6:	e00a      	b.n	801a1be <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 801a1a8:	4b14      	ldr	r3, [pc, #80]	; (801a1fc <TfLiteTypeGetName+0xe0>)
 801a1aa:	e008      	b.n	801a1be <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 801a1ac:	4b14      	ldr	r3, [pc, #80]	; (801a200 <TfLiteTypeGetName+0xe4>)
 801a1ae:	e006      	b.n	801a1be <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 801a1b0:	4b14      	ldr	r3, [pc, #80]	; (801a204 <TfLiteTypeGetName+0xe8>)
 801a1b2:	e004      	b.n	801a1be <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 801a1b4:	4b14      	ldr	r3, [pc, #80]	; (801a208 <TfLiteTypeGetName+0xec>)
 801a1b6:	e002      	b.n	801a1be <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 801a1b8:	4b14      	ldr	r3, [pc, #80]	; (801a20c <TfLiteTypeGetName+0xf0>)
 801a1ba:	e000      	b.n	801a1be <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 801a1bc:	4b14      	ldr	r3, [pc, #80]	; (801a210 <TfLiteTypeGetName+0xf4>)
}
 801a1be:	4618      	mov	r0, r3
 801a1c0:	370c      	adds	r7, #12
 801a1c2:	46bd      	mov	sp, r7
 801a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1c8:	4770      	bx	lr
 801a1ca:	bf00      	nop
 801a1cc:	0802791c 	.word	0x0802791c
 801a1d0:	08027924 	.word	0x08027924
 801a1d4:	0802792c 	.word	0x0802792c
 801a1d8:	08027934 	.word	0x08027934
 801a1dc:	0802793c 	.word	0x0802793c
 801a1e0:	08027944 	.word	0x08027944
 801a1e4:	0802794c 	.word	0x0802794c
 801a1e8:	08027954 	.word	0x08027954
 801a1ec:	0802795c 	.word	0x0802795c
 801a1f0:	08027964 	.word	0x08027964
 801a1f4:	0802796c 	.word	0x0802796c
 801a1f8:	08027978 	.word	0x08027978
 801a1fc:	08027984 	.word	0x08027984
 801a200:	0802798c 	.word	0x0802798c
 801a204:	08027994 	.word	0x08027994
 801a208:	0802799c 	.word	0x0802799c
 801a20c:	080279a8 	.word	0x080279a8
 801a210:	080279b0 	.word	0x080279b0

0801a214 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 801a214:	b480      	push	{r7}
 801a216:	af00      	add	r7, sp, #0
 801a218:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801a21c:	4618      	mov	r0, r3
 801a21e:	46bd      	mov	sp, r7
 801a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a224:	4770      	bx	lr
	...

0801a228 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 801a228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a22c:	b088      	sub	sp, #32
 801a22e:	af00      	add	r7, sp, #0
 801a230:	ed87 0b02 	vstr	d0, [r7, #8]
 801a234:	6078      	str	r0, [r7, #4]
 801a236:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 801a238:	f04f 0200 	mov.w	r2, #0
 801a23c:	f04f 0300 	mov.w	r3, #0
 801a240:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801a244:	f7e6 fc4a 	bl	8000adc <__aeabi_dcmpeq>
 801a248:	4603      	mov	r3, r0
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	d006      	beq.n	801a25c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	2200      	movs	r2, #0
 801a252:	601a      	str	r2, [r3, #0]
    *shift = 0;
 801a254:	683b      	ldr	r3, [r7, #0]
 801a256:	2200      	movs	r2, #0
 801a258:	601a      	str	r2, [r3, #0]
    return;
 801a25a:	e068      	b.n	801a32e <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 801a25c:	6838      	ldr	r0, [r7, #0]
 801a25e:	ed97 0b02 	vldr	d0, [r7, #8]
 801a262:	f005 fee5 	bl	8020030 <frexp>
 801a266:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 801a26a:	f04f 0200 	mov.w	r2, #0
 801a26e:	4b32      	ldr	r3, [pc, #200]	; (801a338 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 801a270:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801a274:	f7e6 f9ca 	bl	800060c <__aeabi_dmul>
 801a278:	4602      	mov	r2, r0
 801a27a:	460b      	mov	r3, r1
 801a27c:	ec43 2b17 	vmov	d7, r2, r3
 801a280:	eeb0 0a47 	vmov.f32	s0, s14
 801a284:	eef0 0a67 	vmov.f32	s1, s15
 801a288:	f000 f962 	bl	801a550 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 801a28c:	ec53 2b10 	vmov	r2, r3, d0
 801a290:	4610      	mov	r0, r2
 801a292:	4619      	mov	r1, r3
 801a294:	f7e6 fd6a 	bl	8000d6c <__aeabi_d2lz>
 801a298:	4602      	mov	r2, r0
 801a29a:	460b      	mov	r3, r1
 801a29c:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 801a2a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a2a4:	4925      	ldr	r1, [pc, #148]	; (801a33c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 801a2a6:	428a      	cmp	r2, r1
 801a2a8:	f173 0300 	sbcs.w	r3, r3, #0
 801a2ac:	db01      	blt.n	801a2b2 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 801a2ae:	f008 fb25 	bl	80228fc <abort>
  if (q_fixed == (1ll << 31)) {
 801a2b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a2b6:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 801a2ba:	430b      	orrs	r3, r1
 801a2bc:	d118      	bne.n	801a2f0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 801a2be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a2c2:	0fd9      	lsrs	r1, r3, #31
 801a2c4:	2000      	movs	r0, #0
 801a2c6:	468a      	mov	sl, r1
 801a2c8:	4683      	mov	fp, r0
 801a2ca:	eb1a 0402 	adds.w	r4, sl, r2
 801a2ce:	eb4b 0503 	adc.w	r5, fp, r3
 801a2d2:	f04f 0200 	mov.w	r2, #0
 801a2d6:	f04f 0300 	mov.w	r3, #0
 801a2da:	0862      	lsrs	r2, r4, #1
 801a2dc:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 801a2e0:	106b      	asrs	r3, r5, #1
 801a2e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 801a2e6:	683b      	ldr	r3, [r7, #0]
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	1c5a      	adds	r2, r3, #1
 801a2ec:	683b      	ldr	r3, [r7, #0]
 801a2ee:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 801a2f0:	f7ff ff90 	bl	801a214 <_ZNSt14numeric_limitsIlE3maxEv>
 801a2f4:	4603      	mov	r3, r0
 801a2f6:	17da      	asrs	r2, r3, #31
 801a2f8:	4698      	mov	r8, r3
 801a2fa:	4691      	mov	r9, r2
 801a2fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a300:	4590      	cmp	r8, r2
 801a302:	eb79 0303 	sbcs.w	r3, r9, r3
 801a306:	da01      	bge.n	801a30c <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 801a308:	f008 faf8 	bl	80228fc <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 801a30c:	683b      	ldr	r3, [r7, #0]
 801a30e:	681b      	ldr	r3, [r3, #0]
 801a310:	f113 0f1f 	cmn.w	r3, #31
 801a314:	da08      	bge.n	801a328 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 801a316:	683b      	ldr	r3, [r7, #0]
 801a318:	2200      	movs	r2, #0
 801a31a:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 801a31c:	f04f 0200 	mov.w	r2, #0
 801a320:	f04f 0300 	mov.w	r3, #0
 801a324:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 801a328:	69ba      	ldr	r2, [r7, #24]
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	601a      	str	r2, [r3, #0]
}
 801a32e:	3720      	adds	r7, #32
 801a330:	46bd      	mov	sp, r7
 801a332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a336:	bf00      	nop
 801a338:	41e00000 	.word	0x41e00000
 801a33c:	80000001 	.word	0x80000001

0801a340 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 801a340:	b580      	push	{r7, lr}
 801a342:	b084      	sub	sp, #16
 801a344:	af00      	add	r7, sp, #0
 801a346:	ed87 0b02 	vstr	d0, [r7, #8]
 801a34a:	6078      	str	r0, [r7, #4]
 801a34c:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 801a34e:	f04f 0200 	mov.w	r2, #0
 801a352:	4b0d      	ldr	r3, [pc, #52]	; (801a388 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 801a354:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801a358:	f7e6 fbe8 	bl	8000b2c <__aeabi_dcmpgt>
 801a35c:	4603      	mov	r3, r0
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d101      	bne.n	801a366 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 801a362:	f008 facb 	bl	80228fc <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 801a366:	6839      	ldr	r1, [r7, #0]
 801a368:	6878      	ldr	r0, [r7, #4]
 801a36a:	ed97 0b02 	vldr	d0, [r7, #8]
 801a36e:	f7ff ff5b 	bl	801a228 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 801a372:	683b      	ldr	r3, [r7, #0]
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	2b00      	cmp	r3, #0
 801a378:	da01      	bge.n	801a37e <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 801a37a:	f008 fabf 	bl	80228fc <abort>
}
 801a37e:	bf00      	nop
 801a380:	3710      	adds	r7, #16
 801a382:	46bd      	mov	sp, r7
 801a384:	bd80      	pop	{r7, pc}
 801a386:	bf00      	nop
 801a388:	3ff00000 	.word	0x3ff00000

0801a38c <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801a38c:	b580      	push	{r7, lr}
 801a38e:	b082      	sub	sp, #8
 801a390:	af00      	add	r7, sp, #0
 801a392:	6078      	str	r0, [r7, #4]
 801a394:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801a396:	683b      	ldr	r3, [r7, #0]
 801a398:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3a2:	f7e6 fba5 	bl	8000af0 <__aeabi_dcmplt>
 801a3a6:	4603      	mov	r3, r0
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	d001      	beq.n	801a3b0 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 801a3ac:	683b      	ldr	r3, [r7, #0]
 801a3ae:	e000      	b.n	801a3b2 <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 801a3b0:	687b      	ldr	r3, [r7, #4]
    }
 801a3b2:	4618      	mov	r0, r3
 801a3b4:	3708      	adds	r7, #8
 801a3b6:	46bd      	mov	sp, r7
 801a3b8:	bd80      	pop	{r7, pc}
 801a3ba:	0000      	movs	r0, r0
 801a3bc:	0000      	movs	r0, r0
	...

0801a3c0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 801a3c0:	b5b0      	push	{r4, r5, r7, lr}
 801a3c2:	b08e      	sub	sp, #56	; 0x38
 801a3c4:	af00      	add	r7, sp, #0
 801a3c6:	ed87 0b06 	vstr	d0, [r7, #24]
 801a3ca:	ed87 1b04 	vstr	d1, [r7, #16]
 801a3ce:	60f8      	str	r0, [r7, #12]
 801a3d0:	60b9      	str	r1, [r7, #8]
 801a3d2:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 801a3d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801a3d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801a3dc:	f7e6 f916 	bl	800060c <__aeabi_dmul>
 801a3e0:	4602      	mov	r2, r0
 801a3e2:	460b      	mov	r3, r1
 801a3e4:	4614      	mov	r4, r2
 801a3e6:	461d      	mov	r5, r3
 801a3e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a3ec:	68fb      	ldr	r3, [r7, #12]
 801a3ee:	fa22 f303 	lsr.w	r3, r2, r3
 801a3f2:	4618      	mov	r0, r3
 801a3f4:	f7e6 f8a0 	bl	8000538 <__aeabi_i2d>
 801a3f8:	4602      	mov	r2, r0
 801a3fa:	460b      	mov	r3, r1
 801a3fc:	4620      	mov	r0, r4
 801a3fe:	4629      	mov	r1, r5
 801a400:	f7e6 f904 	bl	800060c <__aeabi_dmul>
 801a404:	4602      	mov	r2, r0
 801a406:	460b      	mov	r3, r1
 801a408:	e9c7 2308 	strd	r2, r3, [r7, #32]
 801a40c:	a30e      	add	r3, pc, #56	; (adr r3, 801a448 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 801a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a412:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 801a416:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a41a:	f107 0320 	add.w	r3, r7, #32
 801a41e:	4611      	mov	r1, r2
 801a420:	4618      	mov	r0, r3
 801a422:	f7ff ffb3 	bl	801a38c <_ZSt3minIdERKT_S2_S2_>
 801a426:	4603      	mov	r3, r0
 801a428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a42c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 801a430:	6879      	ldr	r1, [r7, #4]
 801a432:	68b8      	ldr	r0, [r7, #8]
 801a434:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 801a438:	f7ff ff82 	bl	801a340 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 801a43c:	bf00      	nop
 801a43e:	3738      	adds	r7, #56	; 0x38
 801a440:	46bd      	mov	sp, r7
 801a442:	bdb0      	pop	{r4, r5, r7, pc}
 801a444:	f3af 8000 	nop.w
 801a448:	ffc00000 	.word	0xffc00000
 801a44c:	41dfffff 	.word	0x41dfffff

0801a450 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 801a450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a454:	b087      	sub	sp, #28
 801a456:	af00      	add	r7, sp, #0
 801a458:	60f8      	str	r0, [r7, #12]
 801a45a:	60b9      	str	r1, [r7, #8]
 801a45c:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 801a45e:	2201      	movs	r2, #1
 801a460:	68fb      	ldr	r3, [r7, #12]
 801a462:	fa02 f303 	lsl.w	r3, r2, r3
 801a466:	3b01      	subs	r3, #1
 801a468:	4618      	mov	r0, r3
 801a46a:	f7e6 f865 	bl	8000538 <__aeabi_i2d>
 801a46e:	4682      	mov	sl, r0
 801a470:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 801a472:	687a      	ldr	r2, [r7, #4]
 801a474:	68fb      	ldr	r3, [r7, #12]
 801a476:	1ad1      	subs	r1, r2, r3
 801a478:	f04f 0201 	mov.w	r2, #1
 801a47c:	f04f 0300 	mov.w	r3, #0
 801a480:	f1a1 0620 	sub.w	r6, r1, #32
 801a484:	f1c1 0020 	rsb	r0, r1, #32
 801a488:	fa03 f901 	lsl.w	r9, r3, r1
 801a48c:	fa02 f606 	lsl.w	r6, r2, r6
 801a490:	ea49 0906 	orr.w	r9, r9, r6
 801a494:	fa22 f000 	lsr.w	r0, r2, r0
 801a498:	ea49 0900 	orr.w	r9, r9, r0
 801a49c:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 801a4a0:	4640      	mov	r0, r8
 801a4a2:	4649      	mov	r1, r9
 801a4a4:	f7e6 f884 	bl	80005b0 <__aeabi_l2d>
 801a4a8:	4602      	mov	r2, r0
 801a4aa:	460b      	mov	r3, r1
 801a4ac:	4650      	mov	r0, sl
 801a4ae:	4659      	mov	r1, fp
 801a4b0:	f7e6 f8ac 	bl	800060c <__aeabi_dmul>
 801a4b4:	4602      	mov	r2, r0
 801a4b6:	460b      	mov	r3, r1
 801a4b8:	4690      	mov	r8, r2
 801a4ba:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 801a4bc:	f04f 0201 	mov.w	r2, #1
 801a4c0:	f04f 0300 	mov.w	r3, #0
 801a4c4:	68b9      	ldr	r1, [r7, #8]
 801a4c6:	f1a1 0620 	sub.w	r6, r1, #32
 801a4ca:	f1c1 0020 	rsb	r0, r1, #32
 801a4ce:	fa03 f501 	lsl.w	r5, r3, r1
 801a4d2:	fa02 f606 	lsl.w	r6, r2, r6
 801a4d6:	4335      	orrs	r5, r6
 801a4d8:	fa22 f000 	lsr.w	r0, r2, r0
 801a4dc:	4305      	orrs	r5, r0
 801a4de:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 801a4e2:	4620      	mov	r0, r4
 801a4e4:	4629      	mov	r1, r5
 801a4e6:	f7e6 f863 	bl	80005b0 <__aeabi_l2d>
 801a4ea:	4602      	mov	r2, r0
 801a4ec:	460b      	mov	r3, r1
  const double max_input_rescaled =
 801a4ee:	4640      	mov	r0, r8
 801a4f0:	4649      	mov	r1, r9
 801a4f2:	f7e6 f9b5 	bl	8000860 <__aeabi_ddiv>
 801a4f6:	4602      	mov	r2, r0
 801a4f8:	460b      	mov	r3, r1
 801a4fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 801a4fe:	ed97 0b04 	vldr	d0, [r7, #16]
 801a502:	f005 fd15 	bl	801ff30 <floor>
 801a506:	ec53 2b10 	vmov	r2, r3, d0
 801a50a:	4610      	mov	r0, r2
 801a50c:	4619      	mov	r1, r3
 801a50e:	f7e6 fb2d 	bl	8000b6c <__aeabi_d2iz>
 801a512:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 801a514:	4618      	mov	r0, r3
 801a516:	371c      	adds	r7, #28
 801a518:	46bd      	mov	sp, r7
 801a51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a51e <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801a51e:	b480      	push	{r7}
 801a520:	b083      	sub	sp, #12
 801a522:	af00      	add	r7, sp, #0
 801a524:	6078      	str	r0, [r7, #4]
 801a526:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801a528:	683b      	ldr	r3, [r7, #0]
 801a52a:	ed93 7a00 	vldr	s14, [r3]
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	edd3 7a00 	vldr	s15, [r3]
 801a534:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a53c:	d501      	bpl.n	801a542 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 801a53e:	683b      	ldr	r3, [r7, #0]
 801a540:	e000      	b.n	801a544 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 801a542:	687b      	ldr	r3, [r7, #4]
    }
 801a544:	4618      	mov	r0, r3
 801a546:	370c      	adds	r7, #12
 801a548:	46bd      	mov	sp, r7
 801a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a54e:	4770      	bx	lr

0801a550 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 801a550:	b580      	push	{r7, lr}
 801a552:	b082      	sub	sp, #8
 801a554:	af00      	add	r7, sp, #0
 801a556:	ed87 0b00 	vstr	d0, [r7]
 801a55a:	ed97 0b00 	vldr	d0, [r7]
 801a55e:	f005 fd9f 	bl	80200a0 <round>
 801a562:	eeb0 7a40 	vmov.f32	s14, s0
 801a566:	eef0 7a60 	vmov.f32	s15, s1
 801a56a:	eeb0 0a47 	vmov.f32	s0, s14
 801a56e:	eef0 0a67 	vmov.f32	s1, s15
 801a572:	3708      	adds	r7, #8
 801a574:	46bd      	mov	sp, r7
 801a576:	bd80      	pop	{r7, pc}

0801a578 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 801a578:	b580      	push	{r7, lr}
 801a57a:	b082      	sub	sp, #8
 801a57c:	af00      	add	r7, sp, #0
 801a57e:	ed87 0a01 	vstr	s0, [r7, #4]
 801a582:	ed97 0a01 	vldr	s0, [r7, #4]
 801a586:	f7e7 f974 	bl	8001872 <_ZSt5roundf>
 801a58a:	eef0 7a40 	vmov.f32	s15, s0
 801a58e:	eeb0 0a67 	vmov.f32	s0, s15
 801a592:	3708      	adds	r7, #8
 801a594:	46bd      	mov	sp, r7
 801a596:	bd80      	pop	{r7, pc}

0801a598 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 801a598:	b480      	push	{r7}
 801a59a:	af00      	add	r7, sp, #0
 801a59c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 801a5a0:	4618      	mov	r0, r3
 801a5a2:	46bd      	mov	sp, r7
 801a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5a8:	4770      	bx	lr

0801a5aa <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 801a5aa:	b480      	push	{r7}
 801a5ac:	af00      	add	r7, sp, #0
 801a5ae:	237f      	movs	r3, #127	; 0x7f
 801a5b0:	4618      	mov	r0, r3
 801a5b2:	46bd      	mov	sp, r7
 801a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5b8:	4770      	bx	lr

0801a5ba <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 801a5ba:	b480      	push	{r7}
 801a5bc:	af00      	add	r7, sp, #0
 801a5be:	2300      	movs	r3, #0
 801a5c0:	4618      	mov	r0, r3
 801a5c2:	46bd      	mov	sp, r7
 801a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5c8:	4770      	bx	lr

0801a5ca <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 801a5ca:	b480      	push	{r7}
 801a5cc:	af00      	add	r7, sp, #0
 801a5ce:	23ff      	movs	r3, #255	; 0xff
 801a5d0:	4618      	mov	r0, r3
 801a5d2:	46bd      	mov	sp, r7
 801a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5d8:	4770      	bx	lr
	...

0801a5dc <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 801a5dc:	b480      	push	{r7}
 801a5de:	af00      	add	r7, sp, #0
 801a5e0:	4b02      	ldr	r3, [pc, #8]	; (801a5ec <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 801a5e2:	4618      	mov	r0, r3
 801a5e4:	46bd      	mov	sp, r7
 801a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ea:	4770      	bx	lr
 801a5ec:	ffff8000 	.word	0xffff8000

0801a5f0 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 801a5f0:	b480      	push	{r7}
 801a5f2:	af00      	add	r7, sp, #0
 801a5f4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a5f8:	4618      	mov	r0, r3
 801a5fa:	46bd      	mov	sp, r7
 801a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a600:	4770      	bx	lr

0801a602 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 801a602:	b480      	push	{r7}
 801a604:	b083      	sub	sp, #12
 801a606:	af00      	add	r7, sp, #0
 801a608:	6078      	str	r0, [r7, #4]
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	689b      	ldr	r3, [r3, #8]
 801a60e:	681b      	ldr	r3, [r3, #0]
 801a610:	4618      	mov	r0, r3
 801a612:	370c      	adds	r7, #12
 801a614:	46bd      	mov	sp, r7
 801a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a61a:	4770      	bx	lr

0801a61c <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 801a61c:	b480      	push	{r7}
 801a61e:	b083      	sub	sp, #12
 801a620:	af00      	add	r7, sp, #0
 801a622:	ed87 0b00 	vstr	d0, [r7]
 801a626:	683a      	ldr	r2, [r7, #0]
 801a628:	6879      	ldr	r1, [r7, #4]
 801a62a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a62e:	ec43 2b17 	vmov	d7, r2, r3
 801a632:	eeb0 0a47 	vmov.f32	s0, s14
 801a636:	eef0 0a67 	vmov.f32	s1, s15
 801a63a:	370c      	adds	r7, #12
 801a63c:	46bd      	mov	sp, r7
 801a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a642:	4770      	bx	lr

0801a644 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 801a644:	b580      	push	{r7, lr}
 801a646:	b082      	sub	sp, #8
 801a648:	af00      	add	r7, sp, #0
 801a64a:	6078      	str	r0, [r7, #4]
 801a64c:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	689b      	ldr	r3, [r3, #8]
 801a652:	2b00      	cmp	r3, #0
 801a654:	d005      	beq.n	801a662 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	689a      	ldr	r2, [r3, #8]
 801a65a:	683b      	ldr	r3, [r7, #0]
 801a65c:	019b      	lsls	r3, r3, #6
 801a65e:	4413      	add	r3, r2
 801a660:	e006      	b.n	801a670 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a666:	6839      	ldr	r1, [r7, #0]
 801a668:	6878      	ldr	r0, [r7, #4]
 801a66a:	4798      	blx	r3
 801a66c:	4603      	mov	r3, r0
 801a66e:	bf00      	nop
  }
}
 801a670:	4618      	mov	r0, r3
 801a672:	3708      	adds	r7, #8
 801a674:	46bd      	mov	sp, r7
 801a676:	bd80      	pop	{r7, pc}

0801a678 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 801a678:	b480      	push	{r7}
 801a67a:	b087      	sub	sp, #28
 801a67c:	af00      	add	r7, sp, #0
 801a67e:	60f8      	str	r0, [r7, #12]
 801a680:	60b9      	str	r1, [r7, #8]
 801a682:	607a      	str	r2, [r7, #4]
 801a684:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 801a686:	68bb      	ldr	r3, [r7, #8]
 801a688:	2b00      	cmp	r3, #0
 801a68a:	db0f      	blt.n	801a6ac <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 801a68c:	68ba      	ldr	r2, [r7, #8]
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	429a      	cmp	r2, r3
 801a692:	da0b      	bge.n	801a6ac <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 801a694:	68bb      	ldr	r3, [r7, #8]
 801a696:	009b      	lsls	r3, r3, #2
 801a698:	683a      	ldr	r2, [r7, #0]
 801a69a:	4413      	add	r3, r2
 801a69c:	681b      	ldr	r3, [r3, #0]
 801a69e:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 801a6a0:	697b      	ldr	r3, [r7, #20]
 801a6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a6a6:	d001      	beq.n	801a6ac <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 801a6a8:	697b      	ldr	r3, [r7, #20]
 801a6aa:	e001      	b.n	801a6b0 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 801a6ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a6b0:	4618      	mov	r0, r3
 801a6b2:	371c      	adds	r7, #28
 801a6b4:	46bd      	mov	sp, r7
 801a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ba:	4770      	bx	lr

0801a6bc <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 801a6bc:	b580      	push	{r7, lr}
 801a6be:	b086      	sub	sp, #24
 801a6c0:	af00      	add	r7, sp, #0
 801a6c2:	60f8      	str	r0, [r7, #12]
 801a6c4:	60b9      	str	r1, [r7, #8]
 801a6c6:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 801a6c8:	68bb      	ldr	r3, [r7, #8]
 801a6ca:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 801a6cc:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 801a6ce:	68bb      	ldr	r3, [r7, #8]
 801a6d0:	681b      	ldr	r3, [r3, #0]
 801a6d2:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 801a6d4:	6879      	ldr	r1, [r7, #4]
 801a6d6:	68f8      	ldr	r0, [r7, #12]
 801a6d8:	f7ff ffce 	bl	801a678 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 801a6dc:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801a6de:	697b      	ldr	r3, [r7, #20]
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	da01      	bge.n	801a6e8 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 801a6e4:	2300      	movs	r3, #0
 801a6e6:	e005      	b.n	801a6f4 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 801a6e8:	6979      	ldr	r1, [r7, #20]
 801a6ea:	68f8      	ldr	r0, [r7, #12]
 801a6ec:	f7ff ffaa 	bl	801a644 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 801a6f0:	4603      	mov	r3, r0
 801a6f2:	bf00      	nop
}
 801a6f4:	4618      	mov	r0, r3
 801a6f6:	3718      	adds	r7, #24
 801a6f8:	46bd      	mov	sp, r7
 801a6fa:	bd80      	pop	{r7, pc}

0801a6fc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 801a6fc:	b580      	push	{r7, lr}
 801a6fe:	b084      	sub	sp, #16
 801a700:	af00      	add	r7, sp, #0
 801a702:	60f8      	str	r0, [r7, #12]
 801a704:	60b9      	str	r1, [r7, #8]
 801a706:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 801a708:	687a      	ldr	r2, [r7, #4]
 801a70a:	68b9      	ldr	r1, [r7, #8]
 801a70c:	68f8      	ldr	r0, [r7, #12]
 801a70e:	f7ff ffd5 	bl	801a6bc <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 801a712:	4603      	mov	r3, r0
}
 801a714:	4618      	mov	r0, r3
 801a716:	3710      	adds	r7, #16
 801a718:	46bd      	mov	sp, r7
 801a71a:	bd80      	pop	{r7, pc}

0801a71c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 801a71c:	b580      	push	{r7, lr}
 801a71e:	b086      	sub	sp, #24
 801a720:	af00      	add	r7, sp, #0
 801a722:	60f8      	str	r0, [r7, #12]
 801a724:	60b9      	str	r1, [r7, #8]
 801a726:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 801a728:	68bb      	ldr	r3, [r7, #8]
 801a72a:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 801a72c:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 801a72e:	68bb      	ldr	r3, [r7, #8]
 801a730:	685b      	ldr	r3, [r3, #4]
 801a732:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 801a734:	6879      	ldr	r1, [r7, #4]
 801a736:	68f8      	ldr	r0, [r7, #12]
 801a738:	f7ff ff9e 	bl	801a678 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 801a73c:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801a73e:	697b      	ldr	r3, [r7, #20]
 801a740:	2b00      	cmp	r3, #0
 801a742:	da01      	bge.n	801a748 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 801a744:	2300      	movs	r3, #0
 801a746:	e005      	b.n	801a754 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 801a748:	6979      	ldr	r1, [r7, #20]
 801a74a:	68f8      	ldr	r0, [r7, #12]
 801a74c:	f7ff ff7a 	bl	801a644 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 801a750:	4603      	mov	r3, r0
 801a752:	bf00      	nop
}
 801a754:	4618      	mov	r0, r3
 801a756:	3718      	adds	r7, #24
 801a758:	46bd      	mov	sp, r7
 801a75a:	bd80      	pop	{r7, pc}

0801a75c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 801a75c:	b580      	push	{r7, lr}
 801a75e:	b084      	sub	sp, #16
 801a760:	af00      	add	r7, sp, #0
 801a762:	60f8      	str	r0, [r7, #12]
 801a764:	60b9      	str	r1, [r7, #8]
 801a766:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 801a768:	687a      	ldr	r2, [r7, #4]
 801a76a:	68b9      	ldr	r1, [r7, #8]
 801a76c:	68f8      	ldr	r0, [r7, #12]
 801a76e:	f7ff ffc5 	bl	801a6fc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801a772:	4603      	mov	r3, r0
}
 801a774:	4618      	mov	r0, r3
 801a776:	3710      	adds	r7, #16
 801a778:	46bd      	mov	sp, r7
 801a77a:	bd80      	pop	{r7, pc}
 801a77c:	0000      	movs	r0, r0
	...

0801a780 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 801a780:	b5b0      	push	{r4, r5, r7, lr}
 801a782:	b08e      	sub	sp, #56	; 0x38
 801a784:	af02      	add	r7, sp, #8
 801a786:	60f8      	str	r0, [r7, #12]
 801a788:	60b9      	str	r1, [r7, #8]
 801a78a:	607a      	str	r2, [r7, #4]
 801a78c:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 801a78e:	68bb      	ldr	r3, [r7, #8]
 801a790:	68db      	ldr	r3, [r3, #12]
 801a792:	4618      	mov	r0, r3
 801a794:	f7e5 fee2 	bl	800055c <__aeabi_f2d>
 801a798:	4604      	mov	r4, r0
 801a79a:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	68db      	ldr	r3, [r3, #12]
 801a7a0:	4618      	mov	r0, r3
 801a7a2:	f7e5 fedb 	bl	800055c <__aeabi_f2d>
 801a7a6:	4602      	mov	r2, r0
 801a7a8:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 801a7aa:	4620      	mov	r0, r4
 801a7ac:	4629      	mov	r1, r5
 801a7ae:	f7e5 ff2d 	bl	800060c <__aeabi_dmul>
 801a7b2:	4602      	mov	r2, r0
 801a7b4:	460b      	mov	r3, r1
 801a7b6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 801a7ba:	683b      	ldr	r3, [r7, #0]
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	d04b      	beq.n	801a858 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 801a7c0:	683b      	ldr	r3, [r7, #0]
 801a7c2:	68db      	ldr	r3, [r3, #12]
 801a7c4:	4618      	mov	r0, r3
 801a7c6:	f7e5 fec9 	bl	800055c <__aeabi_f2d>
 801a7ca:	4602      	mov	r2, r0
 801a7cc:	460b      	mov	r3, r1
 801a7ce:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 801a7d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801a7d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801a7da:	f7e5 fd5f 	bl	800029c <__aeabi_dsub>
 801a7de:	4602      	mov	r2, r0
 801a7e0:	460b      	mov	r3, r1
 801a7e2:	ec43 2b17 	vmov	d7, r2, r3
 801a7e6:	eeb0 0a47 	vmov.f32	s0, s14
 801a7ea:	eef0 0a67 	vmov.f32	s1, s15
 801a7ee:	f7ff ff15 	bl	801a61c <_ZSt3absd>
 801a7f2:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 801a7f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a7f8:	68db      	ldr	r3, [r3, #12]
 801a7fa:	4618      	mov	r0, r3
 801a7fc:	f7e5 feae 	bl	800055c <__aeabi_f2d>
 801a800:	4602      	mov	r2, r0
 801a802:	460b      	mov	r3, r1
 801a804:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 801a808:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801a80c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801a810:	f7e6 f826 	bl	8000860 <__aeabi_ddiv>
 801a814:	4602      	mov	r2, r0
 801a816:	460b      	mov	r3, r1
 801a818:	4610      	mov	r0, r2
 801a81a:	4619      	mov	r1, r3
 801a81c:	2301      	movs	r3, #1
 801a81e:	461c      	mov	r4, r3
 801a820:	a318      	add	r3, pc, #96	; (adr r3, 801a884 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 801a822:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a826:	f7e6 f96d 	bl	8000b04 <__aeabi_dcmple>
 801a82a:	4603      	mov	r3, r0
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d101      	bne.n	801a834 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 801a830:	2300      	movs	r3, #0
 801a832:	461c      	mov	r4, r3
 801a834:	b2e3      	uxtb	r3, r4
 801a836:	f083 0301 	eor.w	r3, r3, #1
 801a83a:	b2db      	uxtb	r3, r3
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d00b      	beq.n	801a858 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 801a840:	68fb      	ldr	r3, [r7, #12]
 801a842:	695c      	ldr	r4, [r3, #20]
 801a844:	4b0c      	ldr	r3, [pc, #48]	; (801a878 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 801a846:	9300      	str	r3, [sp, #0]
 801a848:	f44f 73a2 	mov.w	r3, #324	; 0x144
 801a84c:	4a0b      	ldr	r2, [pc, #44]	; (801a87c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 801a84e:	490c      	ldr	r1, [pc, #48]	; (801a880 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 801a850:	68f8      	ldr	r0, [r7, #12]
 801a852:	47a0      	blx	r4
 801a854:	2301      	movs	r3, #1
 801a856:	e009      	b.n	801a86c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 801a858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a85a:	9300      	str	r3, [sp, #0]
 801a85c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a85e:	687a      	ldr	r2, [r7, #4]
 801a860:	68b9      	ldr	r1, [r7, #8]
 801a862:	68f8      	ldr	r0, [r7, #12]
 801a864:	f000 f812 	bl	801a88c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 801a868:	4603      	mov	r3, r0
                                          multiplier);
 801a86a:	bf00      	nop
}
 801a86c:	4618      	mov	r0, r3
 801a86e:	3730      	adds	r7, #48	; 0x30
 801a870:	46bd      	mov	sp, r7
 801a872:	bdb0      	pop	{r4, r5, r7, pc}
 801a874:	f3af 8000 	nop.w
 801a878:	08027c34 	.word	0x08027c34
 801a87c:	08027a20 	.word	0x08027a20
 801a880:	08027b20 	.word	0x08027b20
 801a884:	47ae147b 	.word	0x47ae147b
 801a888:	3f947ae1 	.word	0x3f947ae1

0801a88c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 801a88c:	b590      	push	{r4, r7, lr}
 801a88e:	b089      	sub	sp, #36	; 0x24
 801a890:	af02      	add	r7, sp, #8
 801a892:	60f8      	str	r0, [r7, #12]
 801a894:	60b9      	str	r1, [r7, #8]
 801a896:	607a      	str	r2, [r7, #4]
 801a898:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 801a89a:	68bb      	ldr	r3, [r7, #8]
 801a89c:	ed93 7a03 	vldr	s14, [r3, #12]
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	edd3 7a03 	vldr	s15, [r3, #12]
 801a8a6:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 801a8aa:	ee17 0a90 	vmov	r0, s15
 801a8ae:	f7e5 fe55 	bl	800055c <__aeabi_f2d>
 801a8b2:	4602      	mov	r2, r0
 801a8b4:	460b      	mov	r3, r1
 801a8b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 801a8ba:	2301      	movs	r3, #1
 801a8bc:	461c      	mov	r4, r3
 801a8be:	f04f 0200 	mov.w	r2, #0
 801a8c2:	f04f 0300 	mov.w	r3, #0
 801a8c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801a8ca:	f7e6 f925 	bl	8000b18 <__aeabi_dcmpge>
 801a8ce:	4603      	mov	r3, r0
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d101      	bne.n	801a8d8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 801a8d4:	2300      	movs	r3, #0
 801a8d6:	461c      	mov	r4, r3
 801a8d8:	b2e3      	uxtb	r3, r4
 801a8da:	f083 0301 	eor.w	r3, r3, #1
 801a8de:	b2db      	uxtb	r3, r3
 801a8e0:	2b00      	cmp	r3, #0
 801a8e2:	d00b      	beq.n	801a8fc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 801a8e4:	68fb      	ldr	r3, [r7, #12]
 801a8e6:	695c      	ldr	r4, [r3, #20]
 801a8e8:	4b0f      	ldr	r3, [pc, #60]	; (801a928 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 801a8ea:	9300      	str	r3, [sp, #0]
 801a8ec:	f240 1351 	movw	r3, #337	; 0x151
 801a8f0:	4a0e      	ldr	r2, [pc, #56]	; (801a92c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 801a8f2:	490f      	ldr	r1, [pc, #60]	; (801a930 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 801a8f4:	68f8      	ldr	r0, [r7, #12]
 801a8f6:	47a0      	blx	r4
 801a8f8:	2301      	movs	r3, #1
 801a8fa:	e010      	b.n	801a91e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 801a8fc:	683b      	ldr	r3, [r7, #0]
 801a8fe:	68db      	ldr	r3, [r3, #12]
 801a900:	4618      	mov	r0, r3
 801a902:	f7e5 fe2b 	bl	800055c <__aeabi_f2d>
 801a906:	4602      	mov	r2, r0
 801a908:	460b      	mov	r3, r1
 801a90a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801a90e:	f7e5 ffa7 	bl	8000860 <__aeabi_ddiv>
 801a912:	4602      	mov	r2, r0
 801a914:	460b      	mov	r3, r1
 801a916:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a918:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 801a91c:	2300      	movs	r3, #0
}
 801a91e:	4618      	mov	r0, r3
 801a920:	371c      	adds	r7, #28
 801a922:	46bd      	mov	sp, r7
 801a924:	bd90      	pop	{r4, r7, pc}
 801a926:	bf00      	nop
 801a928:	08027c58 	.word	0x08027c58
 801a92c:	08027a20 	.word	0x08027a20
 801a930:	08027b20 	.word	0x08027b20

0801a934 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 801a934:	b580      	push	{r7, lr}
 801a936:	b082      	sub	sp, #8
 801a938:	af00      	add	r7, sp, #0
 801a93a:	6078      	str	r0, [r7, #4]
 801a93c:	ed87 0a00 	vstr	s0, [r7]
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 801a946:	ed97 7a00 	vldr	s14, [r7]
 801a94a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801a94e:	eeb0 0a66 	vmov.f32	s0, s13
 801a952:	f7ff fe11 	bl	801a578 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801a956:	eef0 7a40 	vmov.f32	s15, s0
 801a95a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a95e:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 801a966:	4413      	add	r3, r2
  };
 801a968:	4618      	mov	r0, r3
 801a96a:	3708      	adds	r7, #8
 801a96c:	46bd      	mov	sp, r7
 801a96e:	bd80      	pop	{r7, pc}

0801a970 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 801a970:	b580      	push	{r7, lr}
 801a972:	b08e      	sub	sp, #56	; 0x38
 801a974:	af00      	add	r7, sp, #0
 801a976:	60b9      	str	r1, [r7, #8]
 801a978:	607a      	str	r2, [r7, #4]
 801a97a:	603b      	str	r3, [r7, #0]
 801a97c:	4603      	mov	r3, r0
 801a97e:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 801a980:	683b      	ldr	r3, [r7, #0]
 801a982:	68db      	ldr	r3, [r3, #12]
 801a984:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 801a986:	683b      	ldr	r3, [r7, #0]
 801a988:	691b      	ldr	r3, [r3, #16]
 801a98a:	633b      	str	r3, [r7, #48]	; 0x30
  };
 801a98c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a98e:	617b      	str	r3, [r7, #20]
 801a990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a992:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 801a994:	7bfb      	ldrb	r3, [r7, #15]
 801a996:	2b01      	cmp	r3, #1
 801a998:	d118      	bne.n	801a9cc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 801a99a:	f107 0314 	add.w	r3, r7, #20
 801a99e:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 801aa94 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 801a9a2:	4618      	mov	r0, r3
 801a9a4:	f7ff ffc6 	bl	801a934 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801a9a8:	4603      	mov	r3, r0
 801a9aa:	61fb      	str	r3, [r7, #28]
 801a9ac:	f107 021c 	add.w	r2, r7, #28
 801a9b0:	f107 0308 	add.w	r3, r7, #8
 801a9b4:	4611      	mov	r1, r2
 801a9b6:	4618      	mov	r0, r3
 801a9b8:	f000 f8d6 	bl	801ab68 <_ZSt3maxIlERKT_S2_S2_>
 801a9bc:	4603      	mov	r3, r0
 801a9be:	681a      	ldr	r2, [r3, #0]
 801a9c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a9c2:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 801a9c4:	687a      	ldr	r2, [r7, #4]
 801a9c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a9c8:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 801a9ca:	e05f      	b.n	801aa8c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 801a9cc:	7bfb      	ldrb	r3, [r7, #15]
 801a9ce:	2b03      	cmp	r3, #3
 801a9d0:	d129      	bne.n	801aa26 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 801a9d2:	f107 0314 	add.w	r3, r7, #20
 801a9d6:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 801aa94 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 801a9da:	4618      	mov	r0, r3
 801a9dc:	f7ff ffaa 	bl	801a934 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801a9e0:	4603      	mov	r3, r0
 801a9e2:	623b      	str	r3, [r7, #32]
 801a9e4:	f107 0220 	add.w	r2, r7, #32
 801a9e8:	f107 0308 	add.w	r3, r7, #8
 801a9ec:	4611      	mov	r1, r2
 801a9ee:	4618      	mov	r0, r3
 801a9f0:	f000 f8ba 	bl	801ab68 <_ZSt3maxIlERKT_S2_S2_>
 801a9f4:	4603      	mov	r3, r0
 801a9f6:	681a      	ldr	r2, [r3, #0]
 801a9f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a9fa:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 801a9fc:	f107 0314 	add.w	r3, r7, #20
 801aa00:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801aa04:	4618      	mov	r0, r3
 801aa06:	f7ff ff95 	bl	801a934 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801aa0a:	4603      	mov	r3, r0
 801aa0c:	627b      	str	r3, [r7, #36]	; 0x24
 801aa0e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801aa12:	1d3b      	adds	r3, r7, #4
 801aa14:	4611      	mov	r1, r2
 801aa16:	4618      	mov	r0, r3
 801aa18:	f000 f892 	bl	801ab40 <_ZSt3minIlERKT_S2_S2_>
 801aa1c:	4603      	mov	r3, r0
 801aa1e:	681a      	ldr	r2, [r3, #0]
 801aa20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa22:	601a      	str	r2, [r3, #0]
}
 801aa24:	e032      	b.n	801aa8c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 801aa26:	7bfb      	ldrb	r3, [r7, #15]
 801aa28:	2b02      	cmp	r3, #2
 801aa2a:	d129      	bne.n	801aa80 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 801aa2c:	f107 0314 	add.w	r3, r7, #20
 801aa30:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801aa34:	4618      	mov	r0, r3
 801aa36:	f7ff ff7d 	bl	801a934 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801aa3a:	4603      	mov	r3, r0
 801aa3c:	62bb      	str	r3, [r7, #40]	; 0x28
 801aa3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801aa42:	f107 0308 	add.w	r3, r7, #8
 801aa46:	4611      	mov	r1, r2
 801aa48:	4618      	mov	r0, r3
 801aa4a:	f000 f88d 	bl	801ab68 <_ZSt3maxIlERKT_S2_S2_>
 801aa4e:	4603      	mov	r3, r0
 801aa50:	681a      	ldr	r2, [r3, #0]
 801aa52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aa54:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 801aa56:	f107 0314 	add.w	r3, r7, #20
 801aa5a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801aa5e:	4618      	mov	r0, r3
 801aa60:	f7ff ff68 	bl	801a934 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 801aa64:	4603      	mov	r3, r0
 801aa66:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aa68:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801aa6c:	1d3b      	adds	r3, r7, #4
 801aa6e:	4611      	mov	r1, r2
 801aa70:	4618      	mov	r0, r3
 801aa72:	f000 f865 	bl	801ab40 <_ZSt3minIlERKT_S2_S2_>
 801aa76:	4603      	mov	r3, r0
 801aa78:	681a      	ldr	r2, [r3, #0]
 801aa7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa7c:	601a      	str	r2, [r3, #0]
}
 801aa7e:	e005      	b.n	801aa8c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 801aa80:	68ba      	ldr	r2, [r7, #8]
 801aa82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aa84:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 801aa86:	687a      	ldr	r2, [r7, #4]
 801aa88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa8a:	601a      	str	r2, [r3, #0]
}
 801aa8c:	bf00      	nop
 801aa8e:	3738      	adds	r7, #56	; 0x38
 801aa90:	46bd      	mov	sp, r7
 801aa92:	bd80      	pop	{r7, pc}
 801aa94:	00000000 	.word	0x00000000

0801aa98 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 801aa98:	b590      	push	{r4, r7, lr}
 801aa9a:	b089      	sub	sp, #36	; 0x24
 801aa9c:	af02      	add	r7, sp, #8
 801aa9e:	60f8      	str	r0, [r7, #12]
 801aaa0:	607a      	str	r2, [r7, #4]
 801aaa2:	603b      	str	r3, [r7, #0]
 801aaa4:	460b      	mov	r3, r1
 801aaa6:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 801aaa8:	2300      	movs	r3, #0
 801aaaa:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 801aaac:	2300      	movs	r3, #0
 801aaae:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	781b      	ldrb	r3, [r3, #0]
 801aab4:	2b03      	cmp	r3, #3
 801aab6:	d108      	bne.n	801aaca <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 801aab8:	f7ff fd7f 	bl	801a5ba <_ZNSt14numeric_limitsIhE3minEv>
 801aabc:	4603      	mov	r3, r0
 801aabe:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 801aac0:	f7ff fd83 	bl	801a5ca <_ZNSt14numeric_limitsIhE3maxEv>
 801aac4:	4603      	mov	r3, r0
 801aac6:	613b      	str	r3, [r7, #16]
 801aac8:	e025      	b.n	801ab16 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 801aaca:	687b      	ldr	r3, [r7, #4]
 801aacc:	781b      	ldrb	r3, [r3, #0]
 801aace:	2b09      	cmp	r3, #9
 801aad0:	d108      	bne.n	801aae4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 801aad2:	f7ff fd61 	bl	801a598 <_ZNSt14numeric_limitsIaE3minEv>
 801aad6:	4603      	mov	r3, r0
 801aad8:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 801aada:	f7ff fd66 	bl	801a5aa <_ZNSt14numeric_limitsIaE3maxEv>
 801aade:	4603      	mov	r3, r0
 801aae0:	613b      	str	r3, [r7, #16]
 801aae2:	e018      	b.n	801ab16 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	781b      	ldrb	r3, [r3, #0]
 801aae8:	2b07      	cmp	r3, #7
 801aaea:	d108      	bne.n	801aafe <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 801aaec:	f7ff fd76 	bl	801a5dc <_ZNSt14numeric_limitsIsE3minEv>
 801aaf0:	4603      	mov	r3, r0
 801aaf2:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 801aaf4:	f7ff fd7c 	bl	801a5f0 <_ZNSt14numeric_limitsIsE3maxEv>
 801aaf8:	4603      	mov	r3, r0
 801aafa:	613b      	str	r3, [r7, #16]
 801aafc:	e00b      	b.n	801ab16 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 801aafe:	68fb      	ldr	r3, [r7, #12]
 801ab00:	695c      	ldr	r4, [r3, #20]
 801ab02:	4b0c      	ldr	r3, [pc, #48]	; (801ab34 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 801ab04:	9300      	str	r3, [sp, #0]
 801ab06:	f44f 73c2 	mov.w	r3, #388	; 0x184
 801ab0a:	4a0b      	ldr	r2, [pc, #44]	; (801ab38 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 801ab0c:	490b      	ldr	r1, [pc, #44]	; (801ab3c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 801ab0e:	68f8      	ldr	r0, [r7, #12]
 801ab10:	47a0      	blx	r4
 801ab12:	2301      	movs	r3, #1
 801ab14:	e00a      	b.n	801ab2c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 801ab16:	7af8      	ldrb	r0, [r7, #11]
 801ab18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab1a:	9301      	str	r3, [sp, #4]
 801ab1c:	683b      	ldr	r3, [r7, #0]
 801ab1e:	9300      	str	r3, [sp, #0]
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	693a      	ldr	r2, [r7, #16]
 801ab24:	6979      	ldr	r1, [r7, #20]
 801ab26:	f7ff ff23 	bl	801a970 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 801ab2a:	2300      	movs	r3, #0
}
 801ab2c:	4618      	mov	r0, r3
 801ab2e:	371c      	adds	r7, #28
 801ab30:	46bd      	mov	sp, r7
 801ab32:	bd90      	pop	{r4, r7, pc}
 801ab34:	08027c74 	.word	0x08027c74
 801ab38:	08027a20 	.word	0x08027a20
 801ab3c:	08027b20 	.word	0x08027b20

0801ab40 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801ab40:	b480      	push	{r7}
 801ab42:	b083      	sub	sp, #12
 801ab44:	af00      	add	r7, sp, #0
 801ab46:	6078      	str	r0, [r7, #4]
 801ab48:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801ab4a:	683b      	ldr	r3, [r7, #0]
 801ab4c:	681a      	ldr	r2, [r3, #0]
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	429a      	cmp	r2, r3
 801ab54:	da01      	bge.n	801ab5a <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 801ab56:	683b      	ldr	r3, [r7, #0]
 801ab58:	e000      	b.n	801ab5c <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 801ab5a:	687b      	ldr	r3, [r7, #4]
    }
 801ab5c:	4618      	mov	r0, r3
 801ab5e:	370c      	adds	r7, #12
 801ab60:	46bd      	mov	sp, r7
 801ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab66:	4770      	bx	lr

0801ab68 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801ab68:	b480      	push	{r7}
 801ab6a:	b083      	sub	sp, #12
 801ab6c:	af00      	add	r7, sp, #0
 801ab6e:	6078      	str	r0, [r7, #4]
 801ab70:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	681a      	ldr	r2, [r3, #0]
 801ab76:	683b      	ldr	r3, [r7, #0]
 801ab78:	681b      	ldr	r3, [r3, #0]
 801ab7a:	429a      	cmp	r2, r3
 801ab7c:	da01      	bge.n	801ab82 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 801ab7e:	683b      	ldr	r3, [r7, #0]
 801ab80:	e000      	b.n	801ab84 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 801ab82:	687b      	ldr	r3, [r7, #4]
    }
 801ab84:	4618      	mov	r0, r3
 801ab86:	370c      	adds	r7, #12
 801ab88:	46bd      	mov	sp, r7
 801ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab8e:	4770      	bx	lr

0801ab90 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 801ab90:	b480      	push	{r7}
 801ab92:	b083      	sub	sp, #12
 801ab94:	af00      	add	r7, sp, #0
 801ab96:	6078      	str	r0, [r7, #4]
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	2200      	movs	r2, #0
 801ab9c:	601a      	str	r2, [r3, #0]
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	4618      	mov	r0, r3
 801aba2:	370c      	adds	r7, #12
 801aba4:	46bd      	mov	sp, r7
 801aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abaa:	4770      	bx	lr

0801abac <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 801abac:	b580      	push	{r7, lr}
 801abae:	b084      	sub	sp, #16
 801abb0:	af00      	add	r7, sp, #0
 801abb2:	60f8      	str	r0, [r7, #12]
 801abb4:	60b9      	str	r1, [r7, #8]
 801abb6:	607a      	str	r2, [r7, #4]
 801abb8:	68fb      	ldr	r3, [r7, #12]
 801abba:	2200      	movs	r2, #0
 801abbc:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 801abbe:	687a      	ldr	r2, [r7, #4]
 801abc0:	68b9      	ldr	r1, [r7, #8]
 801abc2:	68f8      	ldr	r0, [r7, #12]
 801abc4:	f000 f866 	bl	801ac94 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 801abc8:	68fb      	ldr	r3, [r7, #12]
 801abca:	4618      	mov	r0, r3
 801abcc:	3710      	adds	r7, #16
 801abce:	46bd      	mov	sp, r7
 801abd0:	bd80      	pop	{r7, pc}

0801abd2 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 801abd2:	b580      	push	{r7, lr}
 801abd4:	b082      	sub	sp, #8
 801abd6:	af00      	add	r7, sp, #0
 801abd8:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	2b05      	cmp	r3, #5
 801abe0:	dd08      	ble.n	801abf4 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	685b      	ldr	r3, [r3, #4]
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d004      	beq.n	801abf4 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	685b      	ldr	r3, [r3, #4]
 801abee:	4618      	mov	r0, r3
 801abf0:	f005 f926 	bl	801fe40 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	4618      	mov	r0, r3
 801abf8:	3708      	adds	r7, #8
 801abfa:	46bd      	mov	sp, r7
 801abfc:	bd80      	pop	{r7, pc}

0801abfe <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 801abfe:	b480      	push	{r7}
 801ac00:	b083      	sub	sp, #12
 801ac02:	af00      	add	r7, sp, #0
 801ac04:	6078      	str	r0, [r7, #4]
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	4618      	mov	r0, r3
 801ac0c:	370c      	adds	r7, #12
 801ac0e:	46bd      	mov	sp, r7
 801ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac14:	4770      	bx	lr

0801ac16 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 801ac16:	b480      	push	{r7}
 801ac18:	b083      	sub	sp, #12
 801ac1a:	af00      	add	r7, sp, #0
 801ac1c:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	2b05      	cmp	r3, #5
 801ac24:	dd02      	ble.n	801ac2c <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	685b      	ldr	r3, [r3, #4]
 801ac2a:	e001      	b.n	801ac30 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	3304      	adds	r3, #4
  }
 801ac30:	4618      	mov	r0, r3
 801ac32:	370c      	adds	r7, #12
 801ac34:	46bd      	mov	sp, r7
 801ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac3a:	4770      	bx	lr

0801ac3c <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 801ac3c:	b580      	push	{r7, lr}
 801ac3e:	b082      	sub	sp, #8
 801ac40:	af00      	add	r7, sp, #0
 801ac42:	6078      	str	r0, [r7, #4]
 801ac44:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	2b05      	cmp	r3, #5
 801ac4c:	dd08      	ble.n	801ac60 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	685b      	ldr	r3, [r3, #4]
 801ac52:	2b00      	cmp	r3, #0
 801ac54:	d004      	beq.n	801ac60 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	685b      	ldr	r3, [r3, #4]
 801ac5a:	4618      	mov	r0, r3
 801ac5c:	f005 f8f0 	bl	801fe40 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	683a      	ldr	r2, [r7, #0]
 801ac64:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 801ac66:	683b      	ldr	r3, [r7, #0]
 801ac68:	2b05      	cmp	r3, #5
 801ac6a:	dd0f      	ble.n	801ac8c <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 801ac6c:	683b      	ldr	r3, [r7, #0]
 801ac6e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 801ac72:	4293      	cmp	r3, r2
 801ac74:	d201      	bcs.n	801ac7a <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 801ac76:	009b      	lsls	r3, r3, #2
 801ac78:	e001      	b.n	801ac7e <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 801ac7a:	f04f 33ff 	mov.w	r3, #4294967295
 801ac7e:	4618      	mov	r0, r3
 801ac80:	f005 f8f1 	bl	801fe66 <_Znaj>
 801ac84:	4603      	mov	r3, r0
 801ac86:	461a      	mov	r2, r3
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 801ac8c:	bf00      	nop
 801ac8e:	3708      	adds	r7, #8
 801ac90:	46bd      	mov	sp, r7
 801ac92:	bd80      	pop	{r7, pc}

0801ac94 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 801ac94:	b580      	push	{r7, lr}
 801ac96:	b086      	sub	sp, #24
 801ac98:	af00      	add	r7, sp, #0
 801ac9a:	60f8      	str	r0, [r7, #12]
 801ac9c:	60b9      	str	r1, [r7, #8]
 801ac9e:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 801aca0:	68b9      	ldr	r1, [r7, #8]
 801aca2:	68f8      	ldr	r0, [r7, #12]
 801aca4:	f7ff ffca 	bl	801ac3c <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 801aca8:	68f8      	ldr	r0, [r7, #12]
 801acaa:	f7ff ffb4 	bl	801ac16 <_ZN6tflite12RuntimeShape8DimsDataEv>
 801acae:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 801acb0:	68bb      	ldr	r3, [r7, #8]
 801acb2:	009b      	lsls	r3, r3, #2
 801acb4:	461a      	mov	r2, r3
 801acb6:	6879      	ldr	r1, [r7, #4]
 801acb8:	6978      	ldr	r0, [r7, #20]
 801acba:	f007 fea1 	bl	8022a00 <memcpy>
  }
 801acbe:	bf00      	nop
 801acc0:	3718      	adds	r7, #24
 801acc2:	46bd      	mov	sp, r7
 801acc4:	bd80      	pop	{r7, pc}

0801acc6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 801acc6:	b580      	push	{r7, lr}
 801acc8:	b086      	sub	sp, #24
 801acca:	af00      	add	r7, sp, #0
 801accc:	6078      	str	r0, [r7, #4]
 801acce:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 801acd0:	683b      	ldr	r3, [r7, #0]
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	d103      	bne.n	801acde <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 801acd6:	6878      	ldr	r0, [r7, #4]
 801acd8:	f7ff ff5a 	bl	801ab90 <_ZN6tflite12RuntimeShapeC1Ev>
 801acdc:	e00d      	b.n	801acfa <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 801acde:	683b      	ldr	r3, [r7, #0]
 801ace0:	689b      	ldr	r3, [r3, #8]
 801ace2:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 801ace4:	697b      	ldr	r3, [r7, #20]
 801ace6:	681b      	ldr	r3, [r3, #0]
 801ace8:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 801acea:	697b      	ldr	r3, [r7, #20]
 801acec:	3304      	adds	r3, #4
 801acee:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 801acf0:	68fa      	ldr	r2, [r7, #12]
 801acf2:	6939      	ldr	r1, [r7, #16]
 801acf4:	6878      	ldr	r0, [r7, #4]
 801acf6:	f7ff ff59 	bl	801abac <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 801acfa:	6878      	ldr	r0, [r7, #4]
 801acfc:	3718      	adds	r7, #24
 801acfe:	46bd      	mov	sp, r7
 801ad00:	bd80      	pop	{r7, pc}

0801ad02 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 801ad02:	b480      	push	{r7}
 801ad04:	af00      	add	r7, sp, #0
 801ad06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801ad0a:	4618      	mov	r0, r3
 801ad0c:	46bd      	mov	sp, r7
 801ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad12:	4770      	bx	lr

0801ad14 <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 801ad14:	b480      	push	{r7}
 801ad16:	af00      	add	r7, sp, #0
 801ad18:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801ad1c:	ee07 3a90 	vmov	s15, r3
 801ad20:	eeb0 0a67 	vmov.f32	s0, s15
 801ad24:	46bd      	mov	sp, r7
 801ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad2a:	4770      	bx	lr

0801ad2c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 801ad2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ad30:	b092      	sub	sp, #72	; 0x48
 801ad32:	af00      	add	r7, sp, #0
 801ad34:	61f8      	str	r0, [r7, #28]
 801ad36:	61b9      	str	r1, [r7, #24]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 801ad38:	69fa      	ldr	r2, [r7, #28]
 801ad3a:	69bb      	ldr	r3, [r7, #24]
 801ad3c:	429a      	cmp	r2, r3
 801ad3e:	d107      	bne.n	801ad50 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 801ad40:	f7ff ffdf 	bl	801ad02 <_ZNSt14numeric_limitsIlE3minEv>
 801ad44:	4602      	mov	r2, r0
 801ad46:	69fb      	ldr	r3, [r7, #28]
 801ad48:	4293      	cmp	r3, r2
 801ad4a:	d101      	bne.n	801ad50 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 801ad4c:	2301      	movs	r3, #1
 801ad4e:	e000      	b.n	801ad52 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 801ad50:	2300      	movs	r3, #0
 801ad52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  std::int64_t a_64(a);
 801ad56:	69fb      	ldr	r3, [r7, #28]
 801ad58:	17da      	asrs	r2, r3, #31
 801ad5a:	60bb      	str	r3, [r7, #8]
 801ad5c:	60fa      	str	r2, [r7, #12]
 801ad5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801ad62:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b_64(b);
 801ad66:	69bb      	ldr	r3, [r7, #24]
 801ad68:	17da      	asrs	r2, r3, #31
 801ad6a:	603b      	str	r3, [r7, #0]
 801ad6c:	607a      	str	r2, [r7, #4]
 801ad6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ad72:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t ab_64 = a_64 * b_64;
 801ad76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ad78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ad7a:	fb03 f202 	mul.w	r2, r3, r2
 801ad7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801ad82:	fb01 f303 	mul.w	r3, r1, r3
 801ad86:	4413      	add	r3, r2
 801ad88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801ad8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ad8c:	fba1 4502 	umull	r4, r5, r1, r2
 801ad90:	442b      	add	r3, r5
 801ad92:	461d      	mov	r5, r3
 801ad94:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 801ad98:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 801ad9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	db02      	blt.n	801adaa <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7e>
 801ada4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ada8:	e000      	b.n	801adac <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x80>
 801adaa:	4b1a      	ldr	r3, [pc, #104]	; (801ae14 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe8>)
 801adac:	627b      	str	r3, [r7, #36]	; 0x24
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 801adae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adb0:	17da      	asrs	r2, r3, #31
 801adb2:	4698      	mov	r8, r3
 801adb4:	4691      	mov	r9, r2
 801adb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801adba:	eb18 0102 	adds.w	r1, r8, r2
 801adbe:	6139      	str	r1, [r7, #16]
 801adc0:	eb49 0303 	adc.w	r3, r9, r3
 801adc4:	617b      	str	r3, [r7, #20]
 801adc6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801adca:	2b00      	cmp	r3, #0
 801adcc:	da07      	bge.n	801adde <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xb2>
 801adce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801add2:	eb12 0a01 	adds.w	sl, r2, r1
 801add6:	f143 0b00 	adc.w	fp, r3, #0
 801adda:	4652      	mov	r2, sl
 801addc:	465b      	mov	r3, fp
 801adde:	f04f 0000 	mov.w	r0, #0
 801ade2:	f04f 0100 	mov.w	r1, #0
 801ade6:	0fd0      	lsrs	r0, r2, #31
 801ade8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801adec:	17d9      	asrs	r1, r3, #31
 801adee:	4602      	mov	r2, r0
 801adf0:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 801adf2:	4613      	mov	r3, r2
 801adf4:	623b      	str	r3, [r7, #32]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 801adf6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	d003      	beq.n	801ae06 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xda>
 801adfe:	f7ff fa09 	bl	801a214 <_ZNSt14numeric_limitsIlE3maxEv>
 801ae02:	4603      	mov	r3, r0
 801ae04:	e000      	b.n	801ae08 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>
 801ae06:	6a3b      	ldr	r3, [r7, #32]
}
 801ae08:	4618      	mov	r0, r3
 801ae0a:	3748      	adds	r7, #72	; 0x48
 801ae0c:	46bd      	mov	sp, r7
 801ae0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801ae12:	bf00      	nop
 801ae14:	c0000001 	.word	0xc0000001

0801ae18 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 801ae18:	b580      	push	{r7, lr}
 801ae1a:	b082      	sub	sp, #8
 801ae1c:	af00      	add	r7, sp, #0
 801ae1e:	6078      	str	r0, [r7, #4]
 801ae20:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 801ae22:	683b      	ldr	r3, [r7, #0]
 801ae24:	2b00      	cmp	r3, #0
 801ae26:	da01      	bge.n	801ae2c <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 801ae28:	f007 fd68 	bl	80228fc <abort>
    TFLITE_DCHECK_LT(i, size_);
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	683a      	ldr	r2, [r7, #0]
 801ae32:	429a      	cmp	r2, r3
 801ae34:	db01      	blt.n	801ae3a <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 801ae36:	f007 fd61 	bl	80228fc <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	681b      	ldr	r3, [r3, #0]
 801ae3e:	2b05      	cmp	r3, #5
 801ae40:	dd06      	ble.n	801ae50 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 801ae42:	687b      	ldr	r3, [r7, #4]
 801ae44:	685a      	ldr	r2, [r3, #4]
 801ae46:	683b      	ldr	r3, [r7, #0]
 801ae48:	009b      	lsls	r3, r3, #2
 801ae4a:	4413      	add	r3, r2
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	e004      	b.n	801ae5a <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 801ae50:	687a      	ldr	r2, [r7, #4]
 801ae52:	683b      	ldr	r3, [r7, #0]
 801ae54:	009b      	lsls	r3, r3, #2
 801ae56:	4413      	add	r3, r2
 801ae58:	685b      	ldr	r3, [r3, #4]
  }
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	3708      	adds	r7, #8
 801ae5e:	46bd      	mov	sp, r7
 801ae60:	bd80      	pop	{r7, pc}

0801ae62 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 801ae62:	b480      	push	{r7}
 801ae64:	b083      	sub	sp, #12
 801ae66:	af00      	add	r7, sp, #0
 801ae68:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	2b05      	cmp	r3, #5
 801ae70:	dd02      	ble.n	801ae78 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	685b      	ldr	r3, [r3, #4]
 801ae76:	e001      	b.n	801ae7c <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	3304      	adds	r3, #4
  }
 801ae7c:	4618      	mov	r0, r3
 801ae7e:	370c      	adds	r7, #12
 801ae80:	46bd      	mov	sp, r7
 801ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae86:	4770      	bx	lr

0801ae88 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 801ae88:	b580      	push	{r7, lr}
 801ae8a:	b086      	sub	sp, #24
 801ae8c:	af00      	add	r7, sp, #0
 801ae8e:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 801ae90:	2301      	movs	r3, #1
 801ae92:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 801ae94:	6878      	ldr	r0, [r7, #4]
 801ae96:	f7ff ffe4 	bl	801ae62 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 801ae9a:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 801ae9c:	2300      	movs	r3, #0
 801ae9e:	613b      	str	r3, [r7, #16]
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	693a      	ldr	r2, [r7, #16]
 801aea6:	429a      	cmp	r2, r3
 801aea8:	da0c      	bge.n	801aec4 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 801aeaa:	693b      	ldr	r3, [r7, #16]
 801aeac:	009b      	lsls	r3, r3, #2
 801aeae:	68fa      	ldr	r2, [r7, #12]
 801aeb0:	4413      	add	r3, r2
 801aeb2:	681a      	ldr	r2, [r3, #0]
 801aeb4:	697b      	ldr	r3, [r7, #20]
 801aeb6:	fb02 f303 	mul.w	r3, r2, r3
 801aeba:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 801aebc:	693b      	ldr	r3, [r7, #16]
 801aebe:	3301      	adds	r3, #1
 801aec0:	613b      	str	r3, [r7, #16]
 801aec2:	e7ed      	b.n	801aea0 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 801aec4:	697b      	ldr	r3, [r7, #20]
  }
 801aec6:	4618      	mov	r0, r3
 801aec8:	3718      	adds	r7, #24
 801aeca:	46bd      	mov	sp, r7
 801aecc:	bd80      	pop	{r7, pc}

0801aece <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 801aece:	b590      	push	{r4, r7, lr}
 801aed0:	b085      	sub	sp, #20
 801aed2:	af00      	add	r7, sp, #0
 801aed4:	6078      	str	r0, [r7, #4]
 801aed6:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 801aed8:	6878      	ldr	r0, [r7, #4]
 801aeda:	f7ff fe90 	bl	801abfe <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801aede:	4604      	mov	r4, r0
 801aee0:	6838      	ldr	r0, [r7, #0]
 801aee2:	f7ff fe8c 	bl	801abfe <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801aee6:	4603      	mov	r3, r0
 801aee8:	429c      	cmp	r4, r3
 801aeea:	d001      	beq.n	801aef0 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 801aeec:	f007 fd06 	bl	80228fc <abort>
  const int dims_count = shape.DimensionsCount();
 801aef0:	6878      	ldr	r0, [r7, #4]
 801aef2:	f7ff fe84 	bl	801abfe <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801aef6:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 801aef8:	2300      	movs	r3, #0
 801aefa:	60fb      	str	r3, [r7, #12]
 801aefc:	68fa      	ldr	r2, [r7, #12]
 801aefe:	68bb      	ldr	r3, [r7, #8]
 801af00:	429a      	cmp	r2, r3
 801af02:	da11      	bge.n	801af28 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 801af04:	68f9      	ldr	r1, [r7, #12]
 801af06:	6878      	ldr	r0, [r7, #4]
 801af08:	f7ff ff86 	bl	801ae18 <_ZNK6tflite12RuntimeShape4DimsEi>
 801af0c:	4604      	mov	r4, r0
 801af0e:	68f9      	ldr	r1, [r7, #12]
 801af10:	6838      	ldr	r0, [r7, #0]
 801af12:	f7ff ff81 	bl	801ae18 <_ZNK6tflite12RuntimeShape4DimsEi>
 801af16:	4603      	mov	r3, r0
 801af18:	429c      	cmp	r4, r3
 801af1a:	d001      	beq.n	801af20 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 801af1c:	f007 fcee 	bl	80228fc <abort>
  for (int i = 0; i < dims_count; ++i) {
 801af20:	68fb      	ldr	r3, [r7, #12]
 801af22:	3301      	adds	r3, #1
 801af24:	60fb      	str	r3, [r7, #12]
 801af26:	e7e9      	b.n	801aefc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 801af28:	6878      	ldr	r0, [r7, #4]
 801af2a:	f7ff ffad 	bl	801ae88 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 801af2e:	4603      	mov	r3, r0
}
 801af30:	4618      	mov	r0, r3
 801af32:	3714      	adds	r7, #20
 801af34:	46bd      	mov	sp, r7
 801af36:	bd90      	pop	{r4, r7, pc}

0801af38 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 801af38:	b580      	push	{r7, lr}
 801af3a:	b086      	sub	sp, #24
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	60f8      	str	r0, [r7, #12]
 801af40:	60b9      	str	r1, [r7, #8]
 801af42:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801af4a:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	2b00      	cmp	r3, #0
 801af50:	dc02      	bgt.n	801af58 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	425b      	negs	r3, r3
 801af56:	e000      	b.n	801af5a <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 801af58:	2300      	movs	r3, #0
 801af5a:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 801af5c:	68fa      	ldr	r2, [r7, #12]
 801af5e:	697b      	ldr	r3, [r7, #20]
 801af60:	fa02 f303 	lsl.w	r3, r2, r3
 801af64:	68b9      	ldr	r1, [r7, #8]
 801af66:	4618      	mov	r0, r3
 801af68:	f7ff fee0 	bl	801ad2c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801af6c:	4603      	mov	r3, r0
 801af6e:	6939      	ldr	r1, [r7, #16]
 801af70:	4618      	mov	r0, r3
 801af72:	f000 fb4b 	bl	801b60c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801af76:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 801af78:	4618      	mov	r0, r3
 801af7a:	3718      	adds	r7, #24
 801af7c:	46bd      	mov	sp, r7
 801af7e:	bd80      	pop	{r7, pc}

0801af80 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 801af80:	b580      	push	{r7, lr}
 801af82:	b084      	sub	sp, #16
 801af84:	af00      	add	r7, sp, #0
 801af86:	60f8      	str	r0, [r7, #12]
 801af88:	60b9      	str	r1, [r7, #8]
 801af8a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 801af8c:	68fb      	ldr	r3, [r7, #12]
 801af8e:	2b00      	cmp	r3, #0
 801af90:	d101      	bne.n	801af96 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 801af92:	f007 fcb3 	bl	80228fc <abort>
  TFLITE_DCHECK(node != nullptr);
 801af96:	68bb      	ldr	r3, [r7, #8]
 801af98:	2b00      	cmp	r3, #0
 801af9a:	d101      	bne.n	801afa0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 801af9c:	f007 fcae 	bl	80228fc <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 801afa0:	68fb      	ldr	r3, [r7, #12]
 801afa2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801afa4:	68bb      	ldr	r3, [r7, #8]
 801afa6:	6819      	ldr	r1, [r3, #0]
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	009b      	lsls	r3, r3, #2
 801afac:	440b      	add	r3, r1
 801afae:	685b      	ldr	r3, [r3, #4]
 801afb0:	4619      	mov	r1, r3
 801afb2:	68f8      	ldr	r0, [r7, #12]
 801afb4:	4790      	blx	r2
 801afb6:	4603      	mov	r3, r0
}
 801afb8:	4618      	mov	r0, r3
 801afba:	3710      	adds	r7, #16
 801afbc:	46bd      	mov	sp, r7
 801afbe:	bd80      	pop	{r7, pc}

0801afc0 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 801afc0:	b580      	push	{r7, lr}
 801afc2:	b084      	sub	sp, #16
 801afc4:	af00      	add	r7, sp, #0
 801afc6:	60f8      	str	r0, [r7, #12]
 801afc8:	60b9      	str	r1, [r7, #8]
 801afca:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 801afcc:	687a      	ldr	r2, [r7, #4]
 801afce:	68b9      	ldr	r1, [r7, #8]
 801afd0:	68f8      	ldr	r0, [r7, #12]
 801afd2:	f7ff ffd5 	bl	801af80 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801afd6:	4603      	mov	r3, r0
}
 801afd8:	4618      	mov	r0, r3
 801afda:	3710      	adds	r7, #16
 801afdc:	46bd      	mov	sp, r7
 801afde:	bd80      	pop	{r7, pc}

0801afe0 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 801afe0:	b580      	push	{r7, lr}
 801afe2:	b084      	sub	sp, #16
 801afe4:	af00      	add	r7, sp, #0
 801afe6:	60f8      	str	r0, [r7, #12]
 801afe8:	60b9      	str	r1, [r7, #8]
 801afea:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 801afec:	68fb      	ldr	r3, [r7, #12]
 801afee:	2b00      	cmp	r3, #0
 801aff0:	d101      	bne.n	801aff6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 801aff2:	f007 fc83 	bl	80228fc <abort>
  TFLITE_DCHECK(node != nullptr);
 801aff6:	68bb      	ldr	r3, [r7, #8]
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d101      	bne.n	801b000 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 801affc:	f007 fc7e 	bl	80228fc <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 801b000:	68fb      	ldr	r3, [r7, #12]
 801b002:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801b004:	68bb      	ldr	r3, [r7, #8]
 801b006:	6859      	ldr	r1, [r3, #4]
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	009b      	lsls	r3, r3, #2
 801b00c:	440b      	add	r3, r1
 801b00e:	685b      	ldr	r3, [r3, #4]
 801b010:	4619      	mov	r1, r3
 801b012:	68f8      	ldr	r0, [r7, #12]
 801b014:	4790      	blx	r2
 801b016:	4603      	mov	r3, r0
}
 801b018:	4618      	mov	r0, r3
 801b01a:	3710      	adds	r7, #16
 801b01c:	46bd      	mov	sp, r7
 801b01e:	bd80      	pop	{r7, pc}

0801b020 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 801b020:	b580      	push	{r7, lr}
 801b022:	b08a      	sub	sp, #40	; 0x28
 801b024:	af00      	add	r7, sp, #0
 801b026:	60f8      	str	r0, [r7, #12]
 801b028:	60b9      	str	r1, [r7, #8]
 801b02a:	607a      	str	r2, [r7, #4]
 801b02c:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801b02e:	6879      	ldr	r1, [r7, #4]
 801b030:	68f8      	ldr	r0, [r7, #12]
 801b032:	f7ff ff4c 	bl	801aece <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801b036:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 801b038:	2300      	movs	r3, #0
 801b03a:	627b      	str	r3, [r7, #36]	; 0x24
 801b03c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b03e:	6a3b      	ldr	r3, [r7, #32]
 801b040:	429a      	cmp	r2, r3
 801b042:	da1d      	bge.n	801b080 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 801b044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b046:	009b      	lsls	r3, r3, #2
 801b048:	68ba      	ldr	r2, [r7, #8]
 801b04a:	4413      	add	r3, r2
 801b04c:	681b      	ldr	r3, [r3, #0]
 801b04e:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 801b050:	f04f 0300 	mov.w	r3, #0
 801b054:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 801b056:	edd7 7a07 	vldr	s15, [r7, #28]
 801b05a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b05e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b062:	d501      	bpl.n	801b068 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 801b064:	69bb      	ldr	r3, [r7, #24]
 801b066:	e000      	b.n	801b06a <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 801b068:	69fb      	ldr	r3, [r7, #28]
 801b06a:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 801b06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b06e:	009b      	lsls	r3, r3, #2
 801b070:	683a      	ldr	r2, [r7, #0]
 801b072:	4413      	add	r3, r2
 801b074:	697a      	ldr	r2, [r7, #20]
 801b076:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801b078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b07a:	3301      	adds	r3, #1
 801b07c:	627b      	str	r3, [r7, #36]	; 0x24
 801b07e:	e7dd      	b.n	801b03c <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 801b080:	bf00      	nop
 801b082:	3728      	adds	r7, #40	; 0x28
 801b084:	46bd      	mov	sp, r7
 801b086:	bd80      	pop	{r7, pc}

0801b088 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 801b088:	b580      	push	{r7, lr}
 801b08a:	b08a      	sub	sp, #40	; 0x28
 801b08c:	af00      	add	r7, sp, #0
 801b08e:	60f8      	str	r0, [r7, #12]
 801b090:	60b9      	str	r1, [r7, #8]
 801b092:	607a      	str	r2, [r7, #4]
 801b094:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801b096:	6879      	ldr	r1, [r7, #4]
 801b098:	68f8      	ldr	r0, [r7, #12]
 801b09a:	f7ff ff18 	bl	801aece <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801b09e:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 801b0a0:	2300      	movs	r3, #0
 801b0a2:	627b      	str	r3, [r7, #36]	; 0x24
 801b0a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b0a6:	6a3b      	ldr	r3, [r7, #32]
 801b0a8:	429a      	cmp	r2, r3
 801b0aa:	da2a      	bge.n	801b102 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 801b0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0ae:	009b      	lsls	r3, r3, #2
 801b0b0:	68ba      	ldr	r2, [r7, #8]
 801b0b2:	4413      	add	r3, r2
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 801b0b8:	4b14      	ldr	r3, [pc, #80]	; (801b10c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 801b0ba:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 801b0bc:	f04f 0300 	mov.w	r3, #0
 801b0c0:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 801b0c2:	edd7 7a07 	vldr	s15, [r7, #28]
 801b0c6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 801b0ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0d2:	dd01      	ble.n	801b0d8 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 801b0d4:	69bb      	ldr	r3, [r7, #24]
 801b0d6:	e009      	b.n	801b0ec <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 801b0d8:	edd7 7a07 	vldr	s15, [r7, #28]
 801b0dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0e4:	d501      	bpl.n	801b0ea <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 801b0e6:	697b      	ldr	r3, [r7, #20]
 801b0e8:	e000      	b.n	801b0ec <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 801b0ea:	69fb      	ldr	r3, [r7, #28]
 801b0ec:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 801b0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0f0:	009b      	lsls	r3, r3, #2
 801b0f2:	683a      	ldr	r2, [r7, #0]
 801b0f4:	4413      	add	r3, r2
 801b0f6:	693a      	ldr	r2, [r7, #16]
 801b0f8:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801b0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0fc:	3301      	adds	r3, #1
 801b0fe:	627b      	str	r3, [r7, #36]	; 0x24
 801b100:	e7d0      	b.n	801b0a4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 801b102:	bf00      	nop
 801b104:	3728      	adds	r7, #40	; 0x28
 801b106:	46bd      	mov	sp, r7
 801b108:	bd80      	pop	{r7, pc}
 801b10a:	bf00      	nop
 801b10c:	40c00000 	.word	0x40c00000

0801b110 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 801b110:	b580      	push	{r7, lr}
 801b112:	b084      	sub	sp, #16
 801b114:	af00      	add	r7, sp, #0
 801b116:	60f8      	str	r0, [r7, #12]
 801b118:	60b9      	str	r1, [r7, #8]
 801b11a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801b11c:	68fb      	ldr	r3, [r7, #12]
 801b11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b120:	2b00      	cmp	r3, #0
 801b122:	d101      	bne.n	801b128 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 801b124:	f007 fbea 	bl	80228fc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 801b128:	68fb      	ldr	r3, [r7, #12]
 801b12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b12c:	211c      	movs	r1, #28
 801b12e:	68f8      	ldr	r0, [r7, #12]
 801b130:	4798      	blx	r3
 801b132:	4603      	mov	r3, r0
}
 801b134:	4618      	mov	r0, r3
 801b136:	3710      	adds	r7, #16
 801b138:	46bd      	mov	sp, r7
 801b13a:	bd80      	pop	{r7, pc}

0801b13c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 801b13c:	b590      	push	{r4, r7, lr}
 801b13e:	b089      	sub	sp, #36	; 0x24
 801b140:	af02      	add	r7, sp, #8
 801b142:	6078      	str	r0, [r7, #4]
 801b144:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801b146:	683b      	ldr	r3, [r7, #0]
 801b148:	691b      	ldr	r3, [r3, #16]
 801b14a:	2b00      	cmp	r3, #0
 801b14c:	d101      	bne.n	801b152 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801b14e:	f007 fbd5 	bl	80228fc <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 801b152:	683b      	ldr	r3, [r7, #0]
 801b154:	691b      	ldr	r3, [r3, #16]
 801b156:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801b158:	2200      	movs	r2, #0
 801b15a:	6839      	ldr	r1, [r7, #0]
 801b15c:	6878      	ldr	r0, [r7, #4]
 801b15e:	f7ff facd 	bl	801a6fc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801b162:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 801b164:	693b      	ldr	r3, [r7, #16]
 801b166:	2b00      	cmp	r3, #0
 801b168:	d10a      	bne.n	801b180 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	695c      	ldr	r4, [r3, #20]
 801b16e:	4b1a      	ldr	r3, [pc, #104]	; (801b1d8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
 801b170:	9300      	str	r3, [sp, #0]
 801b172:	238e      	movs	r3, #142	; 0x8e
 801b174:	4a19      	ldr	r2, [pc, #100]	; (801b1dc <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 801b176:	491a      	ldr	r1, [pc, #104]	; (801b1e0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 801b178:	6878      	ldr	r0, [r7, #4]
 801b17a:	47a0      	blx	r4
 801b17c:	2301      	movs	r3, #1
 801b17e:	e027      	b.n	801b1d0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 801b180:	2200      	movs	r2, #0
 801b182:	6839      	ldr	r1, [r7, #0]
 801b184:	6878      	ldr	r0, [r7, #4]
 801b186:	f7ff fac9 	bl	801a71c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801b18a:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 801b18c:	68fb      	ldr	r3, [r7, #12]
 801b18e:	2b00      	cmp	r3, #0
 801b190:	d10a      	bne.n	801b1a8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	695c      	ldr	r4, [r3, #20]
 801b196:	4b13      	ldr	r3, [pc, #76]	; (801b1e4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 801b198:	9300      	str	r3, [sp, #0]
 801b19a:	2390      	movs	r3, #144	; 0x90
 801b19c:	4a0f      	ldr	r2, [pc, #60]	; (801b1dc <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 801b19e:	4910      	ldr	r1, [pc, #64]	; (801b1e0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 801b1a0:	6878      	ldr	r0, [r7, #4]
 801b1a2:	47a0      	blx	r4
 801b1a4:	2301      	movs	r3, #1
 801b1a6:	e013      	b.n	801b1d0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  if (input->type == kTfLiteInt8) {
 801b1a8:	693b      	ldr	r3, [r7, #16]
 801b1aa:	781b      	ldrb	r3, [r3, #0]
 801b1ac:	2b09      	cmp	r3, #9
 801b1ae:	d105      	bne.n	801b1bc <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x80>
    CalculateReluOpData<int8_t>(input, output, data);
 801b1b0:	697a      	ldr	r2, [r7, #20]
 801b1b2:	68f9      	ldr	r1, [r7, #12]
 801b1b4:	6938      	ldr	r0, [r7, #16]
 801b1b6:	f000 fa9d 	bl	801b6f4 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 801b1ba:	e008      	b.n	801b1ce <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
  } else if (input->type == kTfLiteUInt8) {
 801b1bc:	693b      	ldr	r3, [r7, #16]
 801b1be:	781b      	ldrb	r3, [r3, #0]
 801b1c0:	2b03      	cmp	r3, #3
 801b1c2:	d104      	bne.n	801b1ce <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    CalculateReluOpData<uint8_t>(input, output, data);
 801b1c4:	697a      	ldr	r2, [r7, #20]
 801b1c6:	68f9      	ldr	r1, [r7, #12]
 801b1c8:	6938      	ldr	r0, [r7, #16]
 801b1ca:	f000 fb35 	bl	801b838 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 801b1ce:	2300      	movs	r3, #0
}
 801b1d0:	4618      	mov	r0, r3
 801b1d2:	371c      	adds	r7, #28
 801b1d4:	46bd      	mov	sp, r7
 801b1d6:	bd90      	pop	{r4, r7, pc}
 801b1d8:	08027d9c 	.word	0x08027d9c
 801b1dc:	08027cf4 	.word	0x08027cf4
 801b1e0:	08027d84 	.word	0x08027d84
 801b1e4:	08027db0 	.word	0x08027db0

0801b1e8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 801b1e8:	b590      	push	{r4, r7, lr}
 801b1ea:	b0ad      	sub	sp, #180	; 0xb4
 801b1ec:	af02      	add	r7, sp, #8
 801b1ee:	6078      	str	r0, [r7, #4]
 801b1f0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801b1f2:	683b      	ldr	r3, [r7, #0]
 801b1f4:	691b      	ldr	r3, [r3, #16]
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d101      	bne.n	801b1fe <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 801b1fa:	f007 fb7f 	bl	80228fc <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 801b1fe:	683b      	ldr	r3, [r7, #0]
 801b200:	691b      	ldr	r3, [r3, #16]
 801b202:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 801b206:	2200      	movs	r2, #0
 801b208:	6839      	ldr	r1, [r7, #0]
 801b20a:	6878      	ldr	r0, [r7, #4]
 801b20c:	f7ff fed8 	bl	801afc0 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801b210:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 801b214:	2200      	movs	r2, #0
 801b216:	6839      	ldr	r1, [r7, #0]
 801b218:	6878      	ldr	r0, [r7, #4]
 801b21a:	f7ff fee1 	bl	801afe0 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801b21e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 801b222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b226:	7a1b      	ldrb	r3, [r3, #8]
 801b228:	2b09      	cmp	r3, #9
 801b22a:	d032      	beq.n	801b292 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 801b22c:	2b09      	cmp	r3, #9
 801b22e:	f300 808c 	bgt.w	801b34a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 801b232:	2b01      	cmp	r3, #1
 801b234:	d002      	beq.n	801b23c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 801b236:	2b03      	cmp	r3, #3
 801b238:	d059      	beq.n	801b2ee <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 801b23a:	e086      	b.n	801b34a <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 801b23c:	f107 030c 	add.w	r3, r7, #12
 801b240:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801b244:	4618      	mov	r0, r3
 801b246:	f001 fe2f 	bl	801cea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801b24a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801b24e:	f000 fb95 	bl	801b97c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801b252:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 801b254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b258:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801b25c:	4618      	mov	r0, r3
 801b25e:	f001 fe23 	bl	801cea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 801b262:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801b266:	f000 fb98 	bl	801b99a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801b26a:	4603      	mov	r3, r0
 801b26c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801b270:	f107 000c 	add.w	r0, r7, #12
 801b274:	4621      	mov	r1, r4
 801b276:	f7ff fed3 	bl	801b020 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 801b27a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b27e:	4618      	mov	r0, r3
 801b280:	f7ff fca7 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 801b284:	f107 030c 	add.w	r3, r7, #12
 801b288:	4618      	mov	r0, r3
 801b28a:	f7ff fca2 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 801b28e:	2300      	movs	r3, #0
 801b290:	e069      	b.n	801b366 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801b292:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b296:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801b29a:	4618      	mov	r0, r3
 801b29c:	f001 fe04 	bl	801cea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 801b2a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b2a4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801b2a8:	4618      	mov	r0, r3
 801b2aa:	f001 fdfd 	bl	801cea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801b2ae:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801b2b2:	f000 fb83 	bl	801b9bc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801b2b6:	4604      	mov	r4, r0
 801b2b8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801b2bc:	f000 fb8d 	bl	801b9da <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801b2c0:	4603      	mov	r3, r0
 801b2c2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801b2c6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 801b2ca:	9300      	str	r3, [sp, #0]
 801b2cc:	4623      	mov	r3, r4
 801b2ce:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801b2d2:	f000 fb93 	bl	801b9fc <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 801b2d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b2da:	4618      	mov	r0, r3
 801b2dc:	f7ff fc79 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 801b2e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b2e4:	4618      	mov	r0, r3
 801b2e6:	f7ff fc74 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 801b2ea:	2300      	movs	r3, #0
 801b2ec:	e03b      	b.n	801b366 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801b2ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b2f2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801b2f6:	4618      	mov	r0, r3
 801b2f8:	f001 fdd6 	bl	801cea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 801b2fc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801b300:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801b304:	4618      	mov	r0, r3
 801b306:	f001 fdcf 	bl	801cea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801b30a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801b30e:	f000 fbc1 	bl	801ba94 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801b312:	4604      	mov	r4, r0
 801b314:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801b318:	f000 fbcb 	bl	801bab2 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801b31c:	4603      	mov	r3, r0
 801b31e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801b322:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801b326:	9300      	str	r3, [sp, #0]
 801b328:	4623      	mov	r3, r4
 801b32a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801b32e:	f000 fbd1 	bl	801bad4 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 801b332:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801b336:	4618      	mov	r0, r3
 801b338:	f7ff fc4b 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801b33c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b340:	4618      	mov	r0, r3
 801b342:	f7ff fc46 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 801b346:	2300      	movs	r3, #0
 801b348:	e00d      	b.n	801b366 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	695c      	ldr	r4, [r3, #20]
 801b34e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b352:	7a1b      	ldrb	r3, [r3, #8]
 801b354:	4618      	mov	r0, r3
 801b356:	f7fe fee1 	bl	801a11c <TfLiteTypeGetName>
 801b35a:	4603      	mov	r3, r0
 801b35c:	461a      	mov	r2, r3
 801b35e:	4904      	ldr	r1, [pc, #16]	; (801b370 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 801b360:	6878      	ldr	r0, [r7, #4]
 801b362:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 801b364:	2301      	movs	r3, #1
    }
  }
}
 801b366:	4618      	mov	r0, r3
 801b368:	37ac      	adds	r7, #172	; 0xac
 801b36a:	46bd      	mov	sp, r7
 801b36c:	bd90      	pop	{r4, r7, pc}
 801b36e:	bf00      	nop
 801b370:	08027dc4 	.word	0x08027dc4

0801b374 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 801b374:	b580      	push	{r7, lr}
 801b376:	b084      	sub	sp, #16
 801b378:	af00      	add	r7, sp, #0
 801b37a:	60f8      	str	r0, [r7, #12]
 801b37c:	60b9      	str	r1, [r7, #8]
 801b37e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801b380:	68fb      	ldr	r3, [r7, #12]
 801b382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b384:	2b00      	cmp	r3, #0
 801b386:	d101      	bne.n	801b38c <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 801b388:	f007 fab8 	bl	80228fc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 801b38c:	68fb      	ldr	r3, [r7, #12]
 801b38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b390:	2104      	movs	r1, #4
 801b392:	68f8      	ldr	r0, [r7, #12]
 801b394:	4798      	blx	r3
 801b396:	4603      	mov	r3, r0
}
 801b398:	4618      	mov	r0, r3
 801b39a:	3710      	adds	r7, #16
 801b39c:	46bd      	mov	sp, r7
 801b39e:	bd80      	pop	{r7, pc}

0801b3a0 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 801b3a0:	b590      	push	{r4, r7, lr}
 801b3a2:	b087      	sub	sp, #28
 801b3a4:	af02      	add	r7, sp, #8
 801b3a6:	6078      	str	r0, [r7, #4]
 801b3a8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801b3aa:	683b      	ldr	r3, [r7, #0]
 801b3ac:	691b      	ldr	r3, [r3, #16]
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d101      	bne.n	801b3b6 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801b3b2:	f007 faa3 	bl	80228fc <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 801b3b6:	683b      	ldr	r3, [r7, #0]
 801b3b8:	691b      	ldr	r3, [r3, #16]
 801b3ba:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801b3bc:	2200      	movs	r2, #0
 801b3be:	6839      	ldr	r1, [r7, #0]
 801b3c0:	6878      	ldr	r0, [r7, #4]
 801b3c2:	f7ff f99b 	bl	801a6fc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801b3c6:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 801b3c8:	68bb      	ldr	r3, [r7, #8]
 801b3ca:	2b00      	cmp	r3, #0
 801b3cc:	d10a      	bne.n	801b3e4 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 801b3ce:	687b      	ldr	r3, [r7, #4]
 801b3d0:	695c      	ldr	r4, [r3, #20]
 801b3d2:	4b20      	ldr	r3, [pc, #128]	; (801b454 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 801b3d4:	9300      	str	r3, [sp, #0]
 801b3d6:	23cd      	movs	r3, #205	; 0xcd
 801b3d8:	4a1f      	ldr	r2, [pc, #124]	; (801b458 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 801b3da:	4920      	ldr	r1, [pc, #128]	; (801b45c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 801b3dc:	6878      	ldr	r0, [r7, #4]
 801b3de:	47a0      	blx	r4
 801b3e0:	2301      	movs	r3, #1
 801b3e2:	e033      	b.n	801b44c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>

  if (input->type == kTfLiteInt8) {
 801b3e4:	68bb      	ldr	r3, [r7, #8]
 801b3e6:	781b      	ldrb	r3, [r3, #0]
 801b3e8:	2b09      	cmp	r3, #9
 801b3ea:	d115      	bne.n	801b418 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 801b3ec:	68bb      	ldr	r3, [r7, #8]
 801b3ee:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 801b3f2:	68bb      	ldr	r3, [r7, #8]
 801b3f4:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 801b3f6:	4618      	mov	r0, r3
 801b3f8:	eef0 0a67 	vmov.f32	s1, s15
 801b3fc:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801b400:	f000 fbb3 	bl	801bb6a <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 801b404:	4603      	mov	r3, r0
 801b406:	461a      	mov	r2, r3
 801b408:	68fb      	ldr	r3, [r7, #12]
 801b40a:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 801b40c:	68bb      	ldr	r3, [r7, #8]
 801b40e:	691b      	ldr	r3, [r3, #16]
 801b410:	b25a      	sxtb	r2, r3
 801b412:	68fb      	ldr	r3, [r7, #12]
 801b414:	705a      	strb	r2, [r3, #1]
 801b416:	e018      	b.n	801b44a <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  } else if (input->type == kTfLiteUInt8) {
 801b418:	68bb      	ldr	r3, [r7, #8]
 801b41a:	781b      	ldrb	r3, [r3, #0]
 801b41c:	2b03      	cmp	r3, #3
 801b41e:	d114      	bne.n	801b44a <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 801b420:	68bb      	ldr	r3, [r7, #8]
 801b422:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 801b426:	68bb      	ldr	r3, [r7, #8]
 801b428:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 801b42a:	4618      	mov	r0, r3
 801b42c:	eef0 0a67 	vmov.f32	s1, s15
 801b430:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 801b434:	f000 fbe8 	bl	801bc08 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 801b438:	4603      	mov	r3, r0
 801b43a:	461a      	mov	r2, r3
 801b43c:	68fb      	ldr	r3, [r7, #12]
 801b43e:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 801b440:	68bb      	ldr	r3, [r7, #8]
 801b442:	691b      	ldr	r3, [r3, #16]
 801b444:	b2da      	uxtb	r2, r3
 801b446:	68fb      	ldr	r3, [r7, #12]
 801b448:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 801b44a:	2300      	movs	r3, #0
}
 801b44c:	4618      	mov	r0, r3
 801b44e:	3714      	adds	r7, #20
 801b450:	46bd      	mov	sp, r7
 801b452:	bd90      	pop	{r4, r7, pc}
 801b454:	08027d9c 	.word	0x08027d9c
 801b458:	08027cf4 	.word	0x08027cf4
 801b45c:	08027d84 	.word	0x08027d84

0801b460 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 801b460:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b462:	b0ad      	sub	sp, #180	; 0xb4
 801b464:	af02      	add	r7, sp, #8
 801b466:	6078      	str	r0, [r7, #4]
 801b468:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801b46a:	683b      	ldr	r3, [r7, #0]
 801b46c:	691b      	ldr	r3, [r3, #16]
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d101      	bne.n	801b476 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 801b472:	f007 fa43 	bl	80228fc <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 801b476:	683b      	ldr	r3, [r7, #0]
 801b478:	691b      	ldr	r3, [r3, #16]
 801b47a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 801b47e:	2200      	movs	r2, #0
 801b480:	6839      	ldr	r1, [r7, #0]
 801b482:	6878      	ldr	r0, [r7, #4]
 801b484:	f7ff fd9c 	bl	801afc0 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801b488:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 801b48c:	2200      	movs	r2, #0
 801b48e:	6839      	ldr	r1, [r7, #0]
 801b490:	6878      	ldr	r0, [r7, #4]
 801b492:	f7ff fda5 	bl	801afe0 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801b496:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 801b49a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b49e:	7a1b      	ldrb	r3, [r3, #8]
 801b4a0:	2b09      	cmp	r3, #9
 801b4a2:	d032      	beq.n	801b50a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 801b4a4:	2b09      	cmp	r3, #9
 801b4a6:	f300 809c 	bgt.w	801b5e2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 801b4aa:	2b01      	cmp	r3, #1
 801b4ac:	d002      	beq.n	801b4b4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 801b4ae:	2b03      	cmp	r3, #3
 801b4b0:	d062      	beq.n	801b578 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 801b4b2:	e096      	b.n	801b5e2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 801b4b4:	f107 030c 	add.w	r3, r7, #12
 801b4b8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801b4bc:	4618      	mov	r0, r3
 801b4be:	f001 fcf3 	bl	801cea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801b4c2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801b4c6:	f000 fa59 	bl	801b97c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801b4ca:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 801b4cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b4d0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801b4d4:	4618      	mov	r0, r3
 801b4d6:	f001 fce7 	bl	801cea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 801b4da:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801b4de:	f000 fa5c 	bl	801b99a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801b4e2:	4603      	mov	r3, r0
 801b4e4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801b4e8:	f107 000c 	add.w	r0, r7, #12
 801b4ec:	4621      	mov	r1, r4
 801b4ee:	f7ff fdcb 	bl	801b088 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 801b4f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b4f6:	4618      	mov	r0, r3
 801b4f8:	f7ff fb6b 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 801b4fc:	f107 030c 	add.w	r3, r7, #12
 801b500:	4618      	mov	r0, r3
 801b502:	f7ff fb66 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 801b506:	2300      	movs	r3, #0
 801b508:	e079      	b.n	801b5fe <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801b50a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b50e:	f993 4001 	ldrsb.w	r4, [r3, #1]
 801b512:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b516:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 801b51a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b51e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801b522:	4618      	mov	r0, r3
 801b524:	f001 fcc0 	bl	801cea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801b528:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801b52c:	f000 fa46 	bl	801b9bc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801b530:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 801b532:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b536:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801b53a:	4618      	mov	r0, r3
 801b53c:	f001 fcb4 	bl	801cea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801b540:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801b544:	f000 fa49 	bl	801b9da <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801b548:	4603      	mov	r3, r0
 801b54a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801b54e:	9301      	str	r3, [sp, #4]
 801b550:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b554:	9300      	str	r3, [sp, #0]
 801b556:	4633      	mov	r3, r6
 801b558:	4629      	mov	r1, r5
 801b55a:	4620      	mov	r0, r4
 801b55c:	f000 fba3 	bl	801bca6 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 801b560:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b564:	4618      	mov	r0, r3
 801b566:	f7ff fb34 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 801b56a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b56e:	4618      	mov	r0, r3
 801b570:	f7ff fb2f 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 801b574:	2300      	movs	r3, #0
 801b576:	e042      	b.n	801b5fe <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801b578:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b57c:	78dc      	ldrb	r4, [r3, #3]
 801b57e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b582:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 801b584:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b588:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801b58c:	4618      	mov	r0, r3
 801b58e:	f001 fc8b 	bl	801cea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801b592:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801b596:	f000 fa7d 	bl	801ba94 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801b59a:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 801b59c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801b5a0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801b5a4:	4618      	mov	r0, r3
 801b5a6:	f001 fc7f 	bl	801cea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 801b5aa:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801b5ae:	f000 fa80 	bl	801bab2 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801b5b2:	4603      	mov	r3, r0
 801b5b4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801b5b8:	9301      	str	r3, [sp, #4]
 801b5ba:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801b5be:	9300      	str	r3, [sp, #0]
 801b5c0:	4633      	mov	r3, r6
 801b5c2:	4629      	mov	r1, r5
 801b5c4:	4620      	mov	r0, r4
 801b5c6:	f000 fbad 	bl	801bd24 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 801b5ca:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801b5ce:	4618      	mov	r0, r3
 801b5d0:	f7ff faff 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 801b5d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b5d8:	4618      	mov	r0, r3
 801b5da:	f7ff fafa 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 801b5de:	2300      	movs	r3, #0
 801b5e0:	e00d      	b.n	801b5fe <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 801b5e2:	687b      	ldr	r3, [r7, #4]
 801b5e4:	695c      	ldr	r4, [r3, #20]
 801b5e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b5ea:	7a1b      	ldrb	r3, [r3, #8]
 801b5ec:	4618      	mov	r0, r3
 801b5ee:	f7fe fd95 	bl	801a11c <TfLiteTypeGetName>
 801b5f2:	4603      	mov	r3, r0
 801b5f4:	461a      	mov	r2, r3
 801b5f6:	4904      	ldr	r1, [pc, #16]	; (801b608 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 801b5f8:	6878      	ldr	r0, [r7, #4]
 801b5fa:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 801b5fc:	2301      	movs	r3, #1
    }
  }
}
 801b5fe:	4618      	mov	r0, r3
 801b600:	37ac      	adds	r7, #172	; 0xac
 801b602:	46bd      	mov	sp, r7
 801b604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b606:	bf00      	nop
 801b608:	08027dc4 	.word	0x08027dc4

0801b60c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 801b60c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b60e:	b089      	sub	sp, #36	; 0x24
 801b610:	af00      	add	r7, sp, #0
 801b612:	6078      	str	r0, [r7, #4]
 801b614:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 801b616:	6839      	ldr	r1, [r7, #0]
 801b618:	2900      	cmp	r1, #0
 801b61a:	da06      	bge.n	801b62a <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 801b61c:	4b31      	ldr	r3, [pc, #196]	; (801b6e4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 801b61e:	4a32      	ldr	r2, [pc, #200]	; (801b6e8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 801b620:	f44f 71b3 	mov.w	r1, #358	; 0x166
 801b624:	4831      	ldr	r0, [pc, #196]	; (801b6ec <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 801b626:	f007 f971 	bl	802290c <__assert_func>
  assert(exponent <= 31);
 801b62a:	6839      	ldr	r1, [r7, #0]
 801b62c:	291f      	cmp	r1, #31
 801b62e:	dd06      	ble.n	801b63e <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 801b630:	4b2f      	ldr	r3, [pc, #188]	; (801b6f0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 801b632:	4a2d      	ldr	r2, [pc, #180]	; (801b6e8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 801b634:	f240 1167 	movw	r1, #359	; 0x167
 801b638:	482c      	ldr	r0, [pc, #176]	; (801b6ec <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 801b63a:	f007 f967 	bl	802290c <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 801b63e:	f04f 0001 	mov.w	r0, #1
 801b642:	f04f 0100 	mov.w	r1, #0
 801b646:	683c      	ldr	r4, [r7, #0]
 801b648:	f1a4 0620 	sub.w	r6, r4, #32
 801b64c:	f1c4 0520 	rsb	r5, r4, #32
 801b650:	fa01 f304 	lsl.w	r3, r1, r4
 801b654:	fa00 f606 	lsl.w	r6, r0, r6
 801b658:	4333      	orrs	r3, r6
 801b65a:	fa20 f505 	lsr.w	r5, r0, r5
 801b65e:	432b      	orrs	r3, r5
 801b660:	fa00 f204 	lsl.w	r2, r0, r4
 801b664:	4613      	mov	r3, r2
 801b666:	3b01      	subs	r3, #1
 801b668:	4618      	mov	r0, r3
 801b66a:	f000 fb93 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801b66e:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 801b670:	2000      	movs	r0, #0
 801b672:	f000 fb8f 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801b676:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 801b678:	2001      	movs	r0, #1
 801b67a:	f000 fb8b 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801b67e:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 801b680:	69f9      	ldr	r1, [r7, #28]
 801b682:	6878      	ldr	r0, [r7, #4]
 801b684:	f000 fb91 	bl	801bdaa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801b688:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 801b68a:	2101      	movs	r1, #1
 801b68c:	69f8      	ldr	r0, [r7, #28]
 801b68e:	f000 fb9a 	bl	801bdc6 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 801b692:	4604      	mov	r4, r0
 801b694:	69b9      	ldr	r1, [r7, #24]
 801b696:	6878      	ldr	r0, [r7, #4]
 801b698:	f000 fba4 	bl	801bde4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801b69c:	4603      	mov	r3, r0
 801b69e:	6979      	ldr	r1, [r7, #20]
 801b6a0:	4618      	mov	r0, r3
 801b6a2:	f000 fb82 	bl	801bdaa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801b6a6:	4603      	mov	r3, r0
 801b6a8:	4619      	mov	r1, r3
 801b6aa:	4620      	mov	r0, r4
 801b6ac:	f000 fbae 	bl	801be0c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801b6b0:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 801b6b2:	6839      	ldr	r1, [r7, #0]
 801b6b4:	6878      	ldr	r0, [r7, #4]
 801b6b6:	f000 fb86 	bl	801bdc6 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 801b6ba:	4604      	mov	r4, r0
 801b6bc:	68f9      	ldr	r1, [r7, #12]
 801b6be:	6938      	ldr	r0, [r7, #16]
 801b6c0:	f000 fbb2 	bl	801be28 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801b6c4:	4603      	mov	r3, r0
 801b6c6:	6979      	ldr	r1, [r7, #20]
 801b6c8:	4618      	mov	r0, r3
 801b6ca:	f000 fb6e 	bl	801bdaa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801b6ce:	4603      	mov	r3, r0
 801b6d0:	4619      	mov	r1, r3
 801b6d2:	4620      	mov	r0, r4
 801b6d4:	f000 fb9a 	bl	801be0c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801b6d8:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 801b6da:	4618      	mov	r0, r3
 801b6dc:	3724      	adds	r7, #36	; 0x24
 801b6de:	46bd      	mov	sp, r7
 801b6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6e2:	bf00      	nop
 801b6e4:	08027e30 	.word	0x08027e30
 801b6e8:	08027e40 	.word	0x08027e40
 801b6ec:	08027e9c 	.word	0x08027e9c
 801b6f0:	08027f2c 	.word	0x08027f2c

0801b6f4 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 801b6f4:	b590      	push	{r4, r7, lr}
 801b6f6:	b099      	sub	sp, #100	; 0x64
 801b6f8:	af00      	add	r7, sp, #0
 801b6fa:	60f8      	str	r0, [r7, #12]
 801b6fc:	60b9      	str	r1, [r7, #8]
 801b6fe:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 801b700:	f04f 0300 	mov.w	r3, #0
 801b704:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 801b706:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801b70a:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 801b70c:	68fb      	ldr	r3, [r7, #12]
 801b70e:	ed93 7a03 	vldr	s14, [r3, #12]
 801b712:	68bb      	ldr	r3, [r7, #8]
 801b714:	edd3 7a03 	vldr	s15, [r3, #12]
 801b718:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 801b71c:	ee16 0a90 	vmov	r0, s13
 801b720:	f7e4 ff1c 	bl	800055c <__aeabi_f2d>
 801b724:	4602      	mov	r2, r0
 801b726:	460b      	mov	r3, r1
 801b728:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 801b72c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b730:	68f9      	ldr	r1, [r7, #12]
 801b732:	4618      	mov	r0, r3
 801b734:	f7ff fac7 	bl	801acc6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 801b738:	f107 0310 	add.w	r3, r7, #16
 801b73c:	68b9      	ldr	r1, [r7, #8]
 801b73e:	4618      	mov	r0, r3
 801b740:	f7ff fac1 	bl	801acc6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	f103 0214 	add.w	r2, r3, #20
 801b74a:	687b      	ldr	r3, [r7, #4]
 801b74c:	3318      	adds	r3, #24
 801b74e:	4619      	mov	r1, r3
 801b750:	4610      	mov	r0, r2
 801b752:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 801b756:	f7fe fd67 	bl	801a228 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 801b75a:	f7fe ff1d 	bl	801a598 <_ZNSt14numeric_limitsIaE3minEv>
 801b75e:	4603      	mov	r3, r0
 801b760:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 801b762:	68bb      	ldr	r3, [r7, #8]
 801b764:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801b766:	68bb      	ldr	r3, [r7, #8]
 801b768:	edd3 7a03 	vldr	s15, [r3, #12]
 801b76c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801b770:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b774:	eeb0 0a66 	vmov.f32	s0, s13
 801b778:	f004 fd8c 	bl	8020294 <roundf>
 801b77c:	eef0 7a40 	vmov.f32	s15, s0
 801b780:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b784:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 801b788:	4423      	add	r3, r4
 801b78a:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801b78c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801b790:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b794:	4611      	mov	r1, r2
 801b796:	4618      	mov	r0, r3
 801b798:	f7ff f9e6 	bl	801ab68 <_ZSt3maxIlERKT_S2_S2_>
 801b79c:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 801b79e:	681a      	ldr	r2, [r3, #0]
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 801b7a4:	f7ff fab6 	bl	801ad14 <_ZNSt14numeric_limitsIfE8infinityEv>
 801b7a8:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801b7ac:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801b7b0:	eef4 7a47 	vcmp.f32	s15, s14
 801b7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7b8:	d103      	bne.n	801b7c2 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 801b7ba:	f7fe fef6 	bl	801a5aa <_ZNSt14numeric_limitsIaE3maxEv>
 801b7be:	4603      	mov	r3, r0
 801b7c0:	e022      	b.n	801b808 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 801b7c2:	f7fe fef2 	bl	801a5aa <_ZNSt14numeric_limitsIaE3maxEv>
 801b7c6:	4603      	mov	r3, r0
 801b7c8:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 801b7ca:	68bb      	ldr	r3, [r7, #8]
 801b7cc:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 801b7ce:	68bb      	ldr	r3, [r7, #8]
 801b7d0:	edd3 7a03 	vldr	s15, [r3, #12]
 801b7d4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801b7d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b7dc:	eeb0 0a66 	vmov.f32	s0, s13
 801b7e0:	f004 fd58 	bl	8020294 <roundf>
 801b7e4:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 801b7e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b7ec:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 801b7f0:	4423      	add	r3, r4
 801b7f2:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 801b7f4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b7f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b7fc:	4611      	mov	r1, r2
 801b7fe:	4618      	mov	r0, r3
 801b800:	f7ff f99e 	bl	801ab40 <_ZSt3minIlERKT_S2_S2_>
 801b804:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801b806:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 801b808:	687a      	ldr	r2, [r7, #4]
 801b80a:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 801b80c:	68fb      	ldr	r3, [r7, #12]
 801b80e:	691a      	ldr	r2, [r3, #16]
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 801b814:	68bb      	ldr	r3, [r7, #8]
 801b816:	691a      	ldr	r2, [r3, #16]
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 801b81c:	f107 0310 	add.w	r3, r7, #16
 801b820:	4618      	mov	r0, r3
 801b822:	f7ff f9d6 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 801b826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b82a:	4618      	mov	r0, r3
 801b82c:	f7ff f9d1 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801b830:	bf00      	nop
 801b832:	3764      	adds	r7, #100	; 0x64
 801b834:	46bd      	mov	sp, r7
 801b836:	bd90      	pop	{r4, r7, pc}

0801b838 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 801b838:	b590      	push	{r4, r7, lr}
 801b83a:	b099      	sub	sp, #100	; 0x64
 801b83c:	af00      	add	r7, sp, #0
 801b83e:	60f8      	str	r0, [r7, #12]
 801b840:	60b9      	str	r1, [r7, #8]
 801b842:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 801b844:	f04f 0300 	mov.w	r3, #0
 801b848:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 801b84a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801b84e:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 801b850:	68fb      	ldr	r3, [r7, #12]
 801b852:	ed93 7a03 	vldr	s14, [r3, #12]
 801b856:	68bb      	ldr	r3, [r7, #8]
 801b858:	edd3 7a03 	vldr	s15, [r3, #12]
 801b85c:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 801b860:	ee16 0a90 	vmov	r0, s13
 801b864:	f7e4 fe7a 	bl	800055c <__aeabi_f2d>
 801b868:	4602      	mov	r2, r0
 801b86a:	460b      	mov	r3, r1
 801b86c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 801b870:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b874:	68f9      	ldr	r1, [r7, #12]
 801b876:	4618      	mov	r0, r3
 801b878:	f7ff fa25 	bl	801acc6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 801b87c:	f107 0310 	add.w	r3, r7, #16
 801b880:	68b9      	ldr	r1, [r7, #8]
 801b882:	4618      	mov	r0, r3
 801b884:	f7ff fa1f 	bl	801acc6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	f103 0214 	add.w	r2, r3, #20
 801b88e:	687b      	ldr	r3, [r7, #4]
 801b890:	3318      	adds	r3, #24
 801b892:	4619      	mov	r1, r3
 801b894:	4610      	mov	r0, r2
 801b896:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 801b89a:	f7fe fcc5 	bl	801a228 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 801b89e:	f7fe fe8c 	bl	801a5ba <_ZNSt14numeric_limitsIhE3minEv>
 801b8a2:	4603      	mov	r3, r0
 801b8a4:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 801b8a6:	68bb      	ldr	r3, [r7, #8]
 801b8a8:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801b8aa:	68bb      	ldr	r3, [r7, #8]
 801b8ac:	edd3 7a03 	vldr	s15, [r3, #12]
 801b8b0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801b8b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b8b8:	eeb0 0a66 	vmov.f32	s0, s13
 801b8bc:	f004 fcea 	bl	8020294 <roundf>
 801b8c0:	eef0 7a40 	vmov.f32	s15, s0
 801b8c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b8c8:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 801b8cc:	4423      	add	r3, r4
 801b8ce:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801b8d0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801b8d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b8d8:	4611      	mov	r1, r2
 801b8da:	4618      	mov	r0, r3
 801b8dc:	f7ff f944 	bl	801ab68 <_ZSt3maxIlERKT_S2_S2_>
 801b8e0:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 801b8e2:	681a      	ldr	r2, [r3, #0]
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 801b8e8:	f7ff fa14 	bl	801ad14 <_ZNSt14numeric_limitsIfE8infinityEv>
 801b8ec:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801b8f0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801b8f4:	eef4 7a47 	vcmp.f32	s15, s14
 801b8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8fc:	d103      	bne.n	801b906 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 801b8fe:	f7fe fe64 	bl	801a5ca <_ZNSt14numeric_limitsIhE3maxEv>
 801b902:	4603      	mov	r3, r0
 801b904:	e022      	b.n	801b94c <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 801b906:	f7fe fe60 	bl	801a5ca <_ZNSt14numeric_limitsIhE3maxEv>
 801b90a:	4603      	mov	r3, r0
 801b90c:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 801b90e:	68bb      	ldr	r3, [r7, #8]
 801b910:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 801b912:	68bb      	ldr	r3, [r7, #8]
 801b914:	edd3 7a03 	vldr	s15, [r3, #12]
 801b918:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801b91c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b920:	eeb0 0a66 	vmov.f32	s0, s13
 801b924:	f004 fcb6 	bl	8020294 <roundf>
 801b928:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 801b92c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b930:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 801b934:	4423      	add	r3, r4
 801b936:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 801b938:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b93c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b940:	4611      	mov	r1, r2
 801b942:	4618      	mov	r0, r3
 801b944:	f7ff f8fc 	bl	801ab40 <_ZSt3minIlERKT_S2_S2_>
 801b948:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801b94a:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 801b94c:	687a      	ldr	r2, [r7, #4]
 801b94e:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 801b950:	68fb      	ldr	r3, [r7, #12]
 801b952:	691a      	ldr	r2, [r3, #16]
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 801b958:	68bb      	ldr	r3, [r7, #8]
 801b95a:	691a      	ldr	r2, [r3, #16]
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 801b960:	f107 0310 	add.w	r3, r7, #16
 801b964:	4618      	mov	r0, r3
 801b966:	f7ff f934 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 801b96a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b96e:	4618      	mov	r0, r3
 801b970:	f7ff f92f 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801b974:	bf00      	nop
 801b976:	3764      	adds	r7, #100	; 0x64
 801b978:	46bd      	mov	sp, r7
 801b97a:	bd90      	pop	{r4, r7, pc}

0801b97c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801b97c:	b580      	push	{r7, lr}
 801b97e:	b082      	sub	sp, #8
 801b980:	af00      	add	r7, sp, #0
 801b982:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	2b00      	cmp	r3, #0
 801b988:	d101      	bne.n	801b98e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 801b98a:	f006 ffb7 	bl	80228fc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	681b      	ldr	r3, [r3, #0]
}
 801b992:	4618      	mov	r0, r3
 801b994:	3708      	adds	r7, #8
 801b996:	46bd      	mov	sp, r7
 801b998:	bd80      	pop	{r7, pc}

0801b99a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801b99a:	b480      	push	{r7}
 801b99c:	b083      	sub	sp, #12
 801b99e:	af00      	add	r7, sp, #0
 801b9a0:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	d002      	beq.n	801b9ae <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	681b      	ldr	r3, [r3, #0]
 801b9ac:	e000      	b.n	801b9b0 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 801b9ae:	2300      	movs	r3, #0
}
 801b9b0:	4618      	mov	r0, r3
 801b9b2:	370c      	adds	r7, #12
 801b9b4:	46bd      	mov	sp, r7
 801b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ba:	4770      	bx	lr

0801b9bc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801b9bc:	b580      	push	{r7, lr}
 801b9be:	b082      	sub	sp, #8
 801b9c0:	af00      	add	r7, sp, #0
 801b9c2:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	d101      	bne.n	801b9ce <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 801b9ca:	f006 ff97 	bl	80228fc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	681b      	ldr	r3, [r3, #0]
}
 801b9d2:	4618      	mov	r0, r3
 801b9d4:	3708      	adds	r7, #8
 801b9d6:	46bd      	mov	sp, r7
 801b9d8:	bd80      	pop	{r7, pc}

0801b9da <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801b9da:	b480      	push	{r7}
 801b9dc:	b083      	sub	sp, #12
 801b9de:	af00      	add	r7, sp, #0
 801b9e0:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	2b00      	cmp	r3, #0
 801b9e6:	d002      	beq.n	801b9ee <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	681b      	ldr	r3, [r3, #0]
 801b9ec:	e000      	b.n	801b9f0 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 801b9ee:	2300      	movs	r3, #0
}
 801b9f0:	4618      	mov	r0, r3
 801b9f2:	370c      	adds	r7, #12
 801b9f4:	46bd      	mov	sp, r7
 801b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9fa:	4770      	bx	lr

0801b9fc <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 801b9fc:	b590      	push	{r4, r7, lr}
 801b9fe:	b089      	sub	sp, #36	; 0x24
 801ba00:	af00      	add	r7, sp, #0
 801ba02:	60f8      	str	r0, [r7, #12]
 801ba04:	60b9      	str	r1, [r7, #8]
 801ba06:	607a      	str	r2, [r7, #4]
 801ba08:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801ba0a:	6879      	ldr	r1, [r7, #4]
 801ba0c:	68b8      	ldr	r0, [r7, #8]
 801ba0e:	f7ff fa5e 	bl	801aece <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801ba12:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801ba14:	2300      	movs	r3, #0
 801ba16:	61fb      	str	r3, [r7, #28]
 801ba18:	69fa      	ldr	r2, [r7, #28]
 801ba1a:	69bb      	ldr	r3, [r7, #24]
 801ba1c:	429a      	cmp	r2, r3
 801ba1e:	da35      	bge.n	801ba8c <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 801ba20:	69fb      	ldr	r3, [r7, #28]
 801ba22:	683a      	ldr	r2, [r7, #0]
 801ba24:	4413      	add	r3, r2
 801ba26:	f993 3000 	ldrsb.w	r3, [r3]
 801ba2a:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 801ba2c:	68fb      	ldr	r3, [r7, #12]
 801ba2e:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801ba30:	68fb      	ldr	r3, [r7, #12]
 801ba32:	68db      	ldr	r3, [r3, #12]
 801ba34:	697a      	ldr	r2, [r7, #20]
 801ba36:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 801ba38:	68fb      	ldr	r3, [r7, #12]
 801ba3a:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 801ba3c:	68fb      	ldr	r3, [r7, #12]
 801ba3e:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801ba40:	461a      	mov	r2, r3
 801ba42:	f7ff fa79 	bl	801af38 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801ba46:	4603      	mov	r3, r0
        data.params.output_offset +
 801ba48:	4423      	add	r3, r4
    int32_t clamped =
 801ba4a:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 801ba4c:	68fb      	ldr	r3, [r7, #12]
 801ba4e:	3304      	adds	r3, #4
 801ba50:	f107 0210 	add.w	r2, r7, #16
 801ba54:	4611      	mov	r1, r2
 801ba56:	4618      	mov	r0, r3
 801ba58:	f7ff f886 	bl	801ab68 <_ZSt3maxIlERKT_S2_S2_>
 801ba5c:	4603      	mov	r3, r0
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 801ba62:	68fb      	ldr	r3, [r7, #12]
 801ba64:	3308      	adds	r3, #8
 801ba66:	f107 0210 	add.w	r2, r7, #16
 801ba6a:	4611      	mov	r1, r2
 801ba6c:	4618      	mov	r0, r3
 801ba6e:	f7ff f867 	bl	801ab40 <_ZSt3minIlERKT_S2_S2_>
 801ba72:	4603      	mov	r3, r0
 801ba74:	681b      	ldr	r3, [r3, #0]
 801ba76:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 801ba78:	6939      	ldr	r1, [r7, #16]
 801ba7a:	69fb      	ldr	r3, [r7, #28]
 801ba7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ba7e:	4413      	add	r3, r2
 801ba80:	b24a      	sxtb	r2, r1
 801ba82:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801ba84:	69fb      	ldr	r3, [r7, #28]
 801ba86:	3301      	adds	r3, #1
 801ba88:	61fb      	str	r3, [r7, #28]
 801ba8a:	e7c5      	b.n	801ba18 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 801ba8c:	bf00      	nop
 801ba8e:	3724      	adds	r7, #36	; 0x24
 801ba90:	46bd      	mov	sp, r7
 801ba92:	bd90      	pop	{r4, r7, pc}

0801ba94 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801ba94:	b580      	push	{r7, lr}
 801ba96:	b082      	sub	sp, #8
 801ba98:	af00      	add	r7, sp, #0
 801ba9a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	d101      	bne.n	801baa6 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 801baa2:	f006 ff2b 	bl	80228fc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	681b      	ldr	r3, [r3, #0]
}
 801baaa:	4618      	mov	r0, r3
 801baac:	3708      	adds	r7, #8
 801baae:	46bd      	mov	sp, r7
 801bab0:	bd80      	pop	{r7, pc}

0801bab2 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801bab2:	b480      	push	{r7}
 801bab4:	b083      	sub	sp, #12
 801bab6:	af00      	add	r7, sp, #0
 801bab8:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	2b00      	cmp	r3, #0
 801babe:	d002      	beq.n	801bac6 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	681b      	ldr	r3, [r3, #0]
 801bac4:	e000      	b.n	801bac8 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 801bac6:	2300      	movs	r3, #0
}
 801bac8:	4618      	mov	r0, r3
 801baca:	370c      	adds	r7, #12
 801bacc:	46bd      	mov	sp, r7
 801bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bad2:	4770      	bx	lr

0801bad4 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 801bad4:	b590      	push	{r4, r7, lr}
 801bad6:	b089      	sub	sp, #36	; 0x24
 801bad8:	af00      	add	r7, sp, #0
 801bada:	60f8      	str	r0, [r7, #12]
 801badc:	60b9      	str	r1, [r7, #8]
 801bade:	607a      	str	r2, [r7, #4]
 801bae0:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801bae2:	6879      	ldr	r1, [r7, #4]
 801bae4:	68b8      	ldr	r0, [r7, #8]
 801bae6:	f7ff f9f2 	bl	801aece <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801baea:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801baec:	2300      	movs	r3, #0
 801baee:	61fb      	str	r3, [r7, #28]
 801baf0:	69fa      	ldr	r2, [r7, #28]
 801baf2:	69bb      	ldr	r3, [r7, #24]
 801baf4:	429a      	cmp	r2, r3
 801baf6:	da34      	bge.n	801bb62 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 801baf8:	69fb      	ldr	r3, [r7, #28]
 801bafa:	683a      	ldr	r2, [r7, #0]
 801bafc:	4413      	add	r3, r2
 801bafe:	781b      	ldrb	r3, [r3, #0]
 801bb00:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 801bb02:	68fb      	ldr	r3, [r7, #12]
 801bb04:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801bb06:	68fb      	ldr	r3, [r7, #12]
 801bb08:	68db      	ldr	r3, [r3, #12]
 801bb0a:	697a      	ldr	r2, [r7, #20]
 801bb0c:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 801bb0e:	68fb      	ldr	r3, [r7, #12]
 801bb10:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 801bb12:	68fb      	ldr	r3, [r7, #12]
 801bb14:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 801bb16:	461a      	mov	r2, r3
 801bb18:	f7ff fa0e 	bl	801af38 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801bb1c:	4603      	mov	r3, r0
        data.params.output_offset +
 801bb1e:	4423      	add	r3, r4
    int32_t clamped =
 801bb20:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 801bb22:	68fb      	ldr	r3, [r7, #12]
 801bb24:	3304      	adds	r3, #4
 801bb26:	f107 0210 	add.w	r2, r7, #16
 801bb2a:	4611      	mov	r1, r2
 801bb2c:	4618      	mov	r0, r3
 801bb2e:	f7ff f81b 	bl	801ab68 <_ZSt3maxIlERKT_S2_S2_>
 801bb32:	4603      	mov	r3, r0
 801bb34:	681b      	ldr	r3, [r3, #0]
 801bb36:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 801bb38:	68fb      	ldr	r3, [r7, #12]
 801bb3a:	3308      	adds	r3, #8
 801bb3c:	f107 0210 	add.w	r2, r7, #16
 801bb40:	4611      	mov	r1, r2
 801bb42:	4618      	mov	r0, r3
 801bb44:	f7fe fffc 	bl	801ab40 <_ZSt3minIlERKT_S2_S2_>
 801bb48:	4603      	mov	r3, r0
 801bb4a:	681b      	ldr	r3, [r3, #0]
 801bb4c:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 801bb4e:	6939      	ldr	r1, [r7, #16]
 801bb50:	69fb      	ldr	r3, [r7, #28]
 801bb52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bb54:	4413      	add	r3, r2
 801bb56:	b2ca      	uxtb	r2, r1
 801bb58:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801bb5a:	69fb      	ldr	r3, [r7, #28]
 801bb5c:	3301      	adds	r3, #1
 801bb5e:	61fb      	str	r3, [r7, #28]
 801bb60:	e7c6      	b.n	801baf0 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 801bb62:	bf00      	nop
 801bb64:	3724      	adds	r7, #36	; 0x24
 801bb66:	46bd      	mov	sp, r7
 801bb68:	bd90      	pop	{r4, r7, pc}

0801bb6a <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 801bb6a:	b5b0      	push	{r4, r5, r7, lr}
 801bb6c:	b088      	sub	sp, #32
 801bb6e:	af00      	add	r7, sp, #0
 801bb70:	ed87 0a03 	vstr	s0, [r7, #12]
 801bb74:	edc7 0a02 	vstr	s1, [r7, #8]
 801bb78:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 801bb7a:	ed97 7a03 	vldr	s14, [r7, #12]
 801bb7e:	edd7 7a02 	vldr	s15, [r7, #8]
 801bb82:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801bb86:	ee16 0a90 	vmov	r0, s13
 801bb8a:	f7e4 fce7 	bl	800055c <__aeabi_f2d>
 801bb8e:	4602      	mov	r2, r0
 801bb90:	460b      	mov	r3, r1
 801bb92:	ec43 2b10 	vmov	d0, r2, r3
 801bb96:	f004 fa83 	bl	80200a0 <round>
 801bb9a:	ec55 4b10 	vmov	r4, r5, d0
 801bb9e:	6878      	ldr	r0, [r7, #4]
 801bba0:	f7e4 fcca 	bl	8000538 <__aeabi_i2d>
 801bba4:	4602      	mov	r2, r0
 801bba6:	460b      	mov	r3, r1
 801bba8:	4620      	mov	r0, r4
 801bbaa:	4629      	mov	r1, r5
 801bbac:	f7e4 fb78 	bl	80002a0 <__adddf3>
 801bbb0:	4602      	mov	r2, r0
 801bbb2:	460b      	mov	r3, r1
 801bbb4:	4610      	mov	r0, r2
 801bbb6:	4619      	mov	r1, r3
 801bbb8:	f7e4 ffd8 	bl	8000b6c <__aeabi_d2iz>
 801bbbc:	4603      	mov	r3, r0
 801bbbe:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 801bbc0:	f7fe fcea 	bl	801a598 <_ZNSt14numeric_limitsIaE3minEv>
 801bbc4:	4603      	mov	r3, r0
 801bbc6:	61bb      	str	r3, [r7, #24]
 801bbc8:	f107 0214 	add.w	r2, r7, #20
 801bbcc:	f107 0318 	add.w	r3, r7, #24
 801bbd0:	4611      	mov	r1, r2
 801bbd2:	4618      	mov	r0, r3
 801bbd4:	f7fe ffc8 	bl	801ab68 <_ZSt3maxIlERKT_S2_S2_>
 801bbd8:	4603      	mov	r3, r0
  result =
 801bbda:	681b      	ldr	r3, [r3, #0]
 801bbdc:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 801bbde:	f7fe fce4 	bl	801a5aa <_ZNSt14numeric_limitsIaE3maxEv>
 801bbe2:	4603      	mov	r3, r0
 801bbe4:	61fb      	str	r3, [r7, #28]
 801bbe6:	f107 0214 	add.w	r2, r7, #20
 801bbea:	f107 031c 	add.w	r3, r7, #28
 801bbee:	4611      	mov	r1, r2
 801bbf0:	4618      	mov	r0, r3
 801bbf2:	f7fe ffa5 	bl	801ab40 <_ZSt3minIlERKT_S2_S2_>
 801bbf6:	4603      	mov	r3, r0
  result =
 801bbf8:	681b      	ldr	r3, [r3, #0]
 801bbfa:	617b      	str	r3, [r7, #20]
  return result;
 801bbfc:	697b      	ldr	r3, [r7, #20]
 801bbfe:	b25b      	sxtb	r3, r3
}
 801bc00:	4618      	mov	r0, r3
 801bc02:	3720      	adds	r7, #32
 801bc04:	46bd      	mov	sp, r7
 801bc06:	bdb0      	pop	{r4, r5, r7, pc}

0801bc08 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 801bc08:	b5b0      	push	{r4, r5, r7, lr}
 801bc0a:	b088      	sub	sp, #32
 801bc0c:	af00      	add	r7, sp, #0
 801bc0e:	ed87 0a03 	vstr	s0, [r7, #12]
 801bc12:	edc7 0a02 	vstr	s1, [r7, #8]
 801bc16:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 801bc18:	ed97 7a03 	vldr	s14, [r7, #12]
 801bc1c:	edd7 7a02 	vldr	s15, [r7, #8]
 801bc20:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801bc24:	ee16 0a90 	vmov	r0, s13
 801bc28:	f7e4 fc98 	bl	800055c <__aeabi_f2d>
 801bc2c:	4602      	mov	r2, r0
 801bc2e:	460b      	mov	r3, r1
 801bc30:	ec43 2b10 	vmov	d0, r2, r3
 801bc34:	f004 fa34 	bl	80200a0 <round>
 801bc38:	ec55 4b10 	vmov	r4, r5, d0
 801bc3c:	6878      	ldr	r0, [r7, #4]
 801bc3e:	f7e4 fc7b 	bl	8000538 <__aeabi_i2d>
 801bc42:	4602      	mov	r2, r0
 801bc44:	460b      	mov	r3, r1
 801bc46:	4620      	mov	r0, r4
 801bc48:	4629      	mov	r1, r5
 801bc4a:	f7e4 fb29 	bl	80002a0 <__adddf3>
 801bc4e:	4602      	mov	r2, r0
 801bc50:	460b      	mov	r3, r1
 801bc52:	4610      	mov	r0, r2
 801bc54:	4619      	mov	r1, r3
 801bc56:	f7e4 ff89 	bl	8000b6c <__aeabi_d2iz>
 801bc5a:	4603      	mov	r3, r0
 801bc5c:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 801bc5e:	f7fe fcac 	bl	801a5ba <_ZNSt14numeric_limitsIhE3minEv>
 801bc62:	4603      	mov	r3, r0
 801bc64:	61bb      	str	r3, [r7, #24]
 801bc66:	f107 0214 	add.w	r2, r7, #20
 801bc6a:	f107 0318 	add.w	r3, r7, #24
 801bc6e:	4611      	mov	r1, r2
 801bc70:	4618      	mov	r0, r3
 801bc72:	f7fe ff79 	bl	801ab68 <_ZSt3maxIlERKT_S2_S2_>
 801bc76:	4603      	mov	r3, r0
  result =
 801bc78:	681b      	ldr	r3, [r3, #0]
 801bc7a:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 801bc7c:	f7fe fca5 	bl	801a5ca <_ZNSt14numeric_limitsIhE3maxEv>
 801bc80:	4603      	mov	r3, r0
 801bc82:	61fb      	str	r3, [r7, #28]
 801bc84:	f107 0214 	add.w	r2, r7, #20
 801bc88:	f107 031c 	add.w	r3, r7, #28
 801bc8c:	4611      	mov	r1, r2
 801bc8e:	4618      	mov	r0, r3
 801bc90:	f7fe ff56 	bl	801ab40 <_ZSt3minIlERKT_S2_S2_>
 801bc94:	4603      	mov	r3, r0
  result =
 801bc96:	681b      	ldr	r3, [r3, #0]
 801bc98:	617b      	str	r3, [r7, #20]
  return result;
 801bc9a:	697b      	ldr	r3, [r7, #20]
 801bc9c:	b2db      	uxtb	r3, r3
}
 801bc9e:	4618      	mov	r0, r3
 801bca0:	3720      	adds	r7, #32
 801bca2:	46bd      	mov	sp, r7
 801bca4:	bdb0      	pop	{r4, r5, r7, pc}

0801bca6 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 801bca6:	b580      	push	{r7, lr}
 801bca8:	b088      	sub	sp, #32
 801bcaa:	af00      	add	r7, sp, #0
 801bcac:	60ba      	str	r2, [r7, #8]
 801bcae:	607b      	str	r3, [r7, #4]
 801bcb0:	4603      	mov	r3, r0
 801bcb2:	73fb      	strb	r3, [r7, #15]
 801bcb4:	460b      	mov	r3, r1
 801bcb6:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801bcb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bcba:	68b8      	ldr	r0, [r7, #8]
 801bcbc:	f7ff f907 	bl	801aece <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801bcc0:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801bcc2:	2300      	movs	r3, #0
 801bcc4:	61fb      	str	r3, [r7, #28]
 801bcc6:	69fa      	ldr	r2, [r7, #28]
 801bcc8:	69bb      	ldr	r3, [r7, #24]
 801bcca:	429a      	cmp	r2, r3
 801bccc:	da26      	bge.n	801bd1c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 801bcce:	69fb      	ldr	r3, [r7, #28]
 801bcd0:	687a      	ldr	r2, [r7, #4]
 801bcd2:	4413      	add	r3, r2
 801bcd4:	781b      	ldrb	r3, [r3, #0]
 801bcd6:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 801bcd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801bcdc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801bce0:	429a      	cmp	r2, r3
 801bce2:	dd04      	ble.n	801bcee <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 801bce4:	f107 030e 	add.w	r3, r7, #14
 801bce8:	f993 3000 	ldrsb.w	r3, [r3]
 801bcec:	e00c      	b.n	801bd08 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 801bcee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bcf2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801bcf6:	429a      	cmp	r2, r3
 801bcf8:	da04      	bge.n	801bd04 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 801bcfa:	f107 030f 	add.w	r3, r7, #15
 801bcfe:	f993 3000 	ldrsb.w	r3, [r3]
 801bd02:	e001      	b.n	801bd08 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 801bd04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801bd08:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 801bd0a:	69fb      	ldr	r3, [r7, #28]
 801bd0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bd0e:	4413      	add	r3, r2
 801bd10:	7dba      	ldrb	r2, [r7, #22]
 801bd12:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801bd14:	69fb      	ldr	r3, [r7, #28]
 801bd16:	3301      	adds	r3, #1
 801bd18:	61fb      	str	r3, [r7, #28]
 801bd1a:	e7d4      	b.n	801bcc6 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 801bd1c:	bf00      	nop
 801bd1e:	3720      	adds	r7, #32
 801bd20:	46bd      	mov	sp, r7
 801bd22:	bd80      	pop	{r7, pc}

0801bd24 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 801bd24:	b580      	push	{r7, lr}
 801bd26:	b088      	sub	sp, #32
 801bd28:	af00      	add	r7, sp, #0
 801bd2a:	60ba      	str	r2, [r7, #8]
 801bd2c:	607b      	str	r3, [r7, #4]
 801bd2e:	4603      	mov	r3, r0
 801bd30:	73fb      	strb	r3, [r7, #15]
 801bd32:	460b      	mov	r3, r1
 801bd34:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 801bd36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bd38:	68b8      	ldr	r0, [r7, #8]
 801bd3a:	f7ff f8c8 	bl	801aece <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801bd3e:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801bd40:	2300      	movs	r3, #0
 801bd42:	61fb      	str	r3, [r7, #28]
 801bd44:	69fa      	ldr	r2, [r7, #28]
 801bd46:	69bb      	ldr	r3, [r7, #24]
 801bd48:	429a      	cmp	r2, r3
 801bd4a:	da1f      	bge.n	801bd8c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 801bd4c:	69fb      	ldr	r3, [r7, #28]
 801bd4e:	687a      	ldr	r2, [r7, #4]
 801bd50:	4413      	add	r3, r2
 801bd52:	781b      	ldrb	r3, [r3, #0]
 801bd54:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 801bd56:	7bbb      	ldrb	r3, [r7, #14]
 801bd58:	7dfa      	ldrb	r2, [r7, #23]
 801bd5a:	429a      	cmp	r2, r3
 801bd5c:	d903      	bls.n	801bd66 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 801bd5e:	f107 030e 	add.w	r3, r7, #14
 801bd62:	781b      	ldrb	r3, [r3, #0]
 801bd64:	e008      	b.n	801bd78 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 801bd66:	7bfb      	ldrb	r3, [r7, #15]
 801bd68:	7dfa      	ldrb	r2, [r7, #23]
 801bd6a:	429a      	cmp	r2, r3
 801bd6c:	d203      	bcs.n	801bd76 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 801bd6e:	f107 030f 	add.w	r3, r7, #15
 801bd72:	781b      	ldrb	r3, [r3, #0]
 801bd74:	e000      	b.n	801bd78 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 801bd76:	7dfb      	ldrb	r3, [r7, #23]
 801bd78:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 801bd7a:	69fb      	ldr	r3, [r7, #28]
 801bd7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bd7e:	4413      	add	r3, r2
 801bd80:	7dba      	ldrb	r2, [r7, #22]
 801bd82:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801bd84:	69fb      	ldr	r3, [r7, #28]
 801bd86:	3301      	adds	r3, #1
 801bd88:	61fb      	str	r3, [r7, #28]
 801bd8a:	e7db      	b.n	801bd44 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 801bd8c:	bf00      	nop
 801bd8e:	3720      	adds	r7, #32
 801bd90:	46bd      	mov	sp, r7
 801bd92:	bd80      	pop	{r7, pc}

0801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 801bd94:	b480      	push	{r7}
 801bd96:	b083      	sub	sp, #12
 801bd98:	af00      	add	r7, sp, #0
 801bd9a:	6078      	str	r0, [r7, #4]
  return x;
 801bd9c:	687b      	ldr	r3, [r7, #4]
}
 801bd9e:	4618      	mov	r0, r3
 801bda0:	370c      	adds	r7, #12
 801bda2:	46bd      	mov	sp, r7
 801bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bda8:	4770      	bx	lr

0801bdaa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 801bdaa:	b480      	push	{r7}
 801bdac:	b083      	sub	sp, #12
 801bdae:	af00      	add	r7, sp, #0
 801bdb0:	6078      	str	r0, [r7, #4]
 801bdb2:	6039      	str	r1, [r7, #0]
  return a & b;
 801bdb4:	687a      	ldr	r2, [r7, #4]
 801bdb6:	683b      	ldr	r3, [r7, #0]
 801bdb8:	4013      	ands	r3, r2
}
 801bdba:	4618      	mov	r0, r3
 801bdbc:	370c      	adds	r7, #12
 801bdbe:	46bd      	mov	sp, r7
 801bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdc4:	4770      	bx	lr

0801bdc6 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 801bdc6:	b480      	push	{r7}
 801bdc8:	b083      	sub	sp, #12
 801bdca:	af00      	add	r7, sp, #0
 801bdcc:	6078      	str	r0, [r7, #4]
 801bdce:	6039      	str	r1, [r7, #0]
  return a >> offset;
 801bdd0:	687a      	ldr	r2, [r7, #4]
 801bdd2:	683b      	ldr	r3, [r7, #0]
 801bdd4:	fa42 f303 	asr.w	r3, r2, r3
}
 801bdd8:	4618      	mov	r0, r3
 801bdda:	370c      	adds	r7, #12
 801bddc:	46bd      	mov	sp, r7
 801bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bde2:	4770      	bx	lr

0801bde4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 801bde4:	b580      	push	{r7, lr}
 801bde6:	b082      	sub	sp, #8
 801bde8:	af00      	add	r7, sp, #0
 801bdea:	6078      	str	r0, [r7, #4]
 801bdec:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 801bdee:	687a      	ldr	r2, [r7, #4]
 801bdf0:	683b      	ldr	r3, [r7, #0]
 801bdf2:	429a      	cmp	r2, r3
 801bdf4:	bfb4      	ite	lt
 801bdf6:	2301      	movlt	r3, #1
 801bdf8:	2300      	movge	r3, #0
 801bdfa:	b2db      	uxtb	r3, r3
 801bdfc:	4618      	mov	r0, r3
 801bdfe:	f000 f827 	bl	801be50 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801be02:	4603      	mov	r3, r0
}
 801be04:	4618      	mov	r0, r3
 801be06:	3708      	adds	r7, #8
 801be08:	46bd      	mov	sp, r7
 801be0a:	bd80      	pop	{r7, pc}

0801be0c <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 801be0c:	b480      	push	{r7}
 801be0e:	b083      	sub	sp, #12
 801be10:	af00      	add	r7, sp, #0
 801be12:	6078      	str	r0, [r7, #4]
 801be14:	6039      	str	r1, [r7, #0]
  return a + b;
 801be16:	687a      	ldr	r2, [r7, #4]
 801be18:	683b      	ldr	r3, [r7, #0]
 801be1a:	4413      	add	r3, r2
}
 801be1c:	4618      	mov	r0, r3
 801be1e:	370c      	adds	r7, #12
 801be20:	46bd      	mov	sp, r7
 801be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be26:	4770      	bx	lr

0801be28 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 801be28:	b580      	push	{r7, lr}
 801be2a:	b082      	sub	sp, #8
 801be2c:	af00      	add	r7, sp, #0
 801be2e:	6078      	str	r0, [r7, #4]
 801be30:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 801be32:	687a      	ldr	r2, [r7, #4]
 801be34:	683b      	ldr	r3, [r7, #0]
 801be36:	429a      	cmp	r2, r3
 801be38:	bfcc      	ite	gt
 801be3a:	2301      	movgt	r3, #1
 801be3c:	2300      	movle	r3, #0
 801be3e:	b2db      	uxtb	r3, r3
 801be40:	4618      	mov	r0, r3
 801be42:	f000 f805 	bl	801be50 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801be46:	4603      	mov	r3, r0
}
 801be48:	4618      	mov	r0, r3
 801be4a:	3708      	adds	r7, #8
 801be4c:	46bd      	mov	sp, r7
 801be4e:	bd80      	pop	{r7, pc}

0801be50 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 801be50:	b580      	push	{r7, lr}
 801be52:	b082      	sub	sp, #8
 801be54:	af00      	add	r7, sp, #0
 801be56:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	d004      	beq.n	801be68 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 801be5e:	2000      	movs	r0, #0
 801be60:	f000 f807 	bl	801be72 <_ZN8gemmlowp6BitNotIlEET_S1_>
 801be64:	4603      	mov	r3, r0
 801be66:	e000      	b.n	801be6a <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 801be68:	2300      	movs	r3, #0
}
 801be6a:	4618      	mov	r0, r3
 801be6c:	3708      	adds	r7, #8
 801be6e:	46bd      	mov	sp, r7
 801be70:	bd80      	pop	{r7, pc}

0801be72 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 801be72:	b480      	push	{r7}
 801be74:	b083      	sub	sp, #12
 801be76:	af00      	add	r7, sp, #0
 801be78:	6078      	str	r0, [r7, #4]
  return ~a;
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	43db      	mvns	r3, r3
}
 801be7e:	4618      	mov	r0, r3
 801be80:	370c      	adds	r7, #12
 801be82:	46bd      	mov	sp, r7
 801be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be88:	4770      	bx	lr

0801be8a <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumDimensions(const TfLiteEvalTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteEvalTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 801be8a:	b480      	push	{r7}
 801be8c:	b083      	sub	sp, #12
 801be8e:	af00      	add	r7, sp, #0
 801be90:	6078      	str	r0, [r7, #4]
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	681b      	ldr	r3, [r3, #0]
 801be96:	681b      	ldr	r3, [r3, #0]
 801be98:	4618      	mov	r0, r3
 801be9a:	370c      	adds	r7, #12
 801be9c:	46bd      	mov	sp, r7
 801be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bea2:	4770      	bx	lr

0801bea4 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 801bea4:	b480      	push	{r7}
 801bea6:	b083      	sub	sp, #12
 801bea8:	af00      	add	r7, sp, #0
 801beaa:	6078      	str	r0, [r7, #4]
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	685b      	ldr	r3, [r3, #4]
 801beb0:	681b      	ldr	r3, [r3, #0]
 801beb2:	4618      	mov	r0, r3
 801beb4:	370c      	adds	r7, #12
 801beb6:	46bd      	mov	sp, r7
 801beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bebc:	4770      	bx	lr

0801bebe <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801bebe:	b580      	push	{r7, lr}
 801bec0:	b082      	sub	sp, #8
 801bec2:	af00      	add	r7, sp, #0
 801bec4:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801bec6:	687b      	ldr	r3, [r7, #4]
 801bec8:	2b00      	cmp	r3, #0
 801beca:	d101      	bne.n	801bed0 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 801becc:	f006 fd16 	bl	80228fc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	681b      	ldr	r3, [r3, #0]
}
 801bed4:	4618      	mov	r0, r3
 801bed6:	3708      	adds	r7, #8
 801bed8:	46bd      	mov	sp, r7
 801beda:	bd80      	pop	{r7, pc}

0801bedc <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 801bedc:	b590      	push	{r4, r7, lr}
 801bede:	b087      	sub	sp, #28
 801bee0:	af00      	add	r7, sp, #0
 801bee2:	60f8      	str	r0, [r7, #12]
 801bee4:	60b9      	str	r1, [r7, #8]
 801bee6:	607a      	str	r2, [r7, #4]
 801bee8:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 801beea:	68b9      	ldr	r1, [r7, #8]
 801beec:	68f8      	ldr	r0, [r7, #12]
 801beee:	f7fe ff93 	bl	801ae18 <_ZNK6tflite12RuntimeShape4DimsEi>
 801bef2:	4604      	mov	r4, r0
 801bef4:	6839      	ldr	r1, [r7, #0]
 801bef6:	6878      	ldr	r0, [r7, #4]
 801bef8:	f7fe ff8e 	bl	801ae18 <_ZNK6tflite12RuntimeShape4DimsEi>
 801befc:	4603      	mov	r3, r0
 801befe:	429c      	cmp	r4, r3
 801bf00:	d001      	beq.n	801bf06 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 801bf02:	f006 fcfb 	bl	80228fc <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 801bf06:	68b9      	ldr	r1, [r7, #8]
 801bf08:	68f8      	ldr	r0, [r7, #12]
 801bf0a:	f7fe ff85 	bl	801ae18 <_ZNK6tflite12RuntimeShape4DimsEi>
 801bf0e:	4603      	mov	r3, r0
 801bf10:	613b      	str	r3, [r7, #16]
 801bf12:	6839      	ldr	r1, [r7, #0]
 801bf14:	6878      	ldr	r0, [r7, #4]
 801bf16:	f7fe ff7f 	bl	801ae18 <_ZNK6tflite12RuntimeShape4DimsEi>
 801bf1a:	4603      	mov	r3, r0
 801bf1c:	617b      	str	r3, [r7, #20]
 801bf1e:	f107 0214 	add.w	r2, r7, #20
 801bf22:	f107 0310 	add.w	r3, r7, #16
 801bf26:	4611      	mov	r1, r2
 801bf28:	4618      	mov	r0, r3
 801bf2a:	f7fe fe09 	bl	801ab40 <_ZSt3minIlERKT_S2_S2_>
 801bf2e:	4603      	mov	r3, r0
 801bf30:	681b      	ldr	r3, [r3, #0]
}
 801bf32:	4618      	mov	r0, r3
 801bf34:	371c      	adds	r7, #28
 801bf36:	46bd      	mov	sp, r7
 801bf38:	bd90      	pop	{r4, r7, pc}

0801bf3a <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801bf3a:	b580      	push	{r7, lr}
 801bf3c:	b082      	sub	sp, #8
 801bf3e:	af00      	add	r7, sp, #0
 801bf40:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	2b00      	cmp	r3, #0
 801bf46:	d101      	bne.n	801bf4c <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 801bf48:	f006 fcd8 	bl	80228fc <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	681b      	ldr	r3, [r3, #0]
}
 801bf50:	4618      	mov	r0, r3
 801bf52:	3708      	adds	r7, #8
 801bf54:	46bd      	mov	sp, r7
 801bf56:	bd80      	pop	{r7, pc}

0801bf58 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 801bf58:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801bf5c:	b090      	sub	sp, #64	; 0x40
 801bf5e:	af00      	add	r7, sp, #0
 801bf60:	61f8      	str	r0, [r7, #28]
 801bf62:	61b9      	str	r1, [r7, #24]
  std::int64_t a64 = a;
 801bf64:	69fb      	ldr	r3, [r7, #28]
 801bf66:	17da      	asrs	r2, r3, #31
 801bf68:	613b      	str	r3, [r7, #16]
 801bf6a:	617a      	str	r2, [r7, #20]
 801bf6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801bf70:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b64 = b;
 801bf74:	69bb      	ldr	r3, [r7, #24]
 801bf76:	17da      	asrs	r2, r3, #31
 801bf78:	60bb      	str	r3, [r7, #8]
 801bf7a:	60fa      	str	r2, [r7, #12]
 801bf7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801bf80:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t sum = a64 + b64;
 801bf84:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801bf88:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801bf8c:	1886      	adds	r6, r0, r2
 801bf8e:	603e      	str	r6, [r7, #0]
 801bf90:	eb41 0303 	adc.w	r3, r1, r3
 801bf94:	607b      	str	r3, [r7, #4]
 801bf96:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bf9a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  std::int64_t sign = sum >= 0 ? 1 : -1;
 801bf9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	db04      	blt.n	801bfb0 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x58>
 801bfa6:	f04f 0201 	mov.w	r2, #1
 801bfaa:	f04f 0300 	mov.w	r3, #0
 801bfae:	e003      	b.n	801bfb8 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x60>
 801bfb0:	f04f 32ff 	mov.w	r2, #4294967295
 801bfb4:	f04f 33ff 	mov.w	r3, #4294967295
 801bfb8:	e9c7 2308 	strd	r2, r3, [r7, #32]
  return static_cast<std::int32_t>((sum + sign) / 2);
 801bfbc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801bfc0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801bfc4:	eb10 0802 	adds.w	r8, r0, r2
 801bfc8:	eb41 0903 	adc.w	r9, r1, r3
 801bfcc:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 801bfd0:	2200      	movs	r2, #0
 801bfd2:	469a      	mov	sl, r3
 801bfd4:	4693      	mov	fp, r2
 801bfd6:	eb1a 0408 	adds.w	r4, sl, r8
 801bfda:	eb4b 0509 	adc.w	r5, fp, r9
 801bfde:	f04f 0200 	mov.w	r2, #0
 801bfe2:	f04f 0300 	mov.w	r3, #0
 801bfe6:	0862      	lsrs	r2, r4, #1
 801bfe8:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 801bfec:	106b      	asrs	r3, r5, #1
 801bfee:	4613      	mov	r3, r2
}
 801bff0:	4618      	mov	r0, r3
 801bff2:	3740      	adds	r7, #64	; 0x40
 801bff4:	46bd      	mov	sp, r7
 801bff6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801bffa:	4770      	bx	lr

0801bffc <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 801bffc:	b580      	push	{r7, lr}
 801bffe:	b084      	sub	sp, #16
 801c000:	af00      	add	r7, sp, #0
 801c002:	60f8      	str	r0, [r7, #12]
 801c004:	60b9      	str	r1, [r7, #8]
 801c006:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 801c008:	68fa      	ldr	r2, [r7, #12]
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	fa02 f303 	lsl.w	r3, r2, r3
 801c010:	68b9      	ldr	r1, [r7, #8]
 801c012:	4618      	mov	r0, r3
 801c014:	f7fe fe8a 	bl	801ad2c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801c018:	4603      	mov	r3, r0
}
 801c01a:	4618      	mov	r0, r3
 801c01c:	3710      	adds	r7, #16
 801c01e:	46bd      	mov	sp, r7
 801c020:	bd80      	pop	{r7, pc}

0801c022 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 801c022:	b580      	push	{r7, lr}
 801c024:	b088      	sub	sp, #32
 801c026:	af00      	add	r7, sp, #0
 801c028:	60f8      	str	r0, [r7, #12]
 801c02a:	60b9      	str	r1, [r7, #8]
 801c02c:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 801c02e:	68fb      	ldr	r3, [r7, #12]
 801c030:	4618      	mov	r0, r3
 801c032:	f000 f821 	bl	801c078 <_ZN6tflite17CountLeadingZerosImEEiT_>
 801c036:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 801c038:	68ba      	ldr	r2, [r7, #8]
 801c03a:	69fb      	ldr	r3, [r7, #28]
 801c03c:	1ad2      	subs	r2, r2, r3
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 801c042:	68fa      	ldr	r2, [r7, #12]
 801c044:	69fb      	ldr	r3, [r7, #28]
 801c046:	fa02 f303 	lsl.w	r3, r2, r3
 801c04a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 801c04e:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 801c050:	69b8      	ldr	r0, [r7, #24]
 801c052:	f000 f823 	bl	801c09c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801c056:	4603      	mov	r3, r0
 801c058:	4618      	mov	r0, r3
 801c05a:	f000 f831 	bl	801c0c0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 801c05e:	4603      	mov	r3, r0
 801c060:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 801c062:	f107 0314 	add.w	r3, r7, #20
 801c066:	4618      	mov	r0, r3
 801c068:	f000 f88a 	bl	801c180 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c06c:	4603      	mov	r3, r0
 801c06e:	681b      	ldr	r3, [r3, #0]
}
 801c070:	4618      	mov	r0, r3
 801c072:	3720      	adds	r7, #32
 801c074:	46bd      	mov	sp, r7
 801c076:	bd80      	pop	{r7, pc}

0801c078 <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 801c078:	b480      	push	{r7}
 801c07a:	b083      	sub	sp, #12
 801c07c:	af00      	add	r7, sp, #0
 801c07e:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	2b00      	cmp	r3, #0
 801c084:	d003      	beq.n	801c08e <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 801c08c:	e000      	b.n	801c090 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 801c08e:	2320      	movs	r3, #32
}
 801c090:	4618      	mov	r0, r3
 801c092:	370c      	adds	r7, #12
 801c094:	46bd      	mov	sp, r7
 801c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c09a:	4770      	bx	lr

0801c09c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:

  static const ScalarRawType RawMax() {
    return VectorFromScalar(ScalarRawMax());
  }

  static FixedPoint FromRaw(RawType x) {
 801c09c:	b580      	push	{r7, lr}
 801c09e:	b084      	sub	sp, #16
 801c0a0:	af00      	add	r7, sp, #0
 801c0a2:	6078      	str	r0, [r7, #4]
    FixedPoint retval;
    retval.raw() = x;
 801c0a4:	f107 030c 	add.w	r3, r7, #12
 801c0a8:	4618      	mov	r0, r3
 801c0aa:	f000 f869 	bl	801c180 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c0ae:	4602      	mov	r2, r0
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	6013      	str	r3, [r2, #0]
    return retval;
 801c0b4:	68fb      	ldr	r3, [r7, #12]
  }
 801c0b6:	4618      	mov	r0, r3
 801c0b8:	3710      	adds	r7, #16
 801c0ba:	46bd      	mov	sp, r7
 801c0bc:	bd80      	pop	{r7, pc}
	...

0801c0c0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 801c0c0:	b580      	push	{r7, lr}
 801c0c2:	b08a      	sub	sp, #40	; 0x28
 801c0c4:	af00      	add	r7, sp, #0
 801c0c6:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 801c0c8:	f000 f879 	bl	801c1be <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 801c0cc:	4603      	mov	r3, r0
 801c0ce:	4619      	mov	r1, r3
 801c0d0:	6878      	ldr	r0, [r7, #4]
 801c0d2:	f000 f87f 	bl	801c1d4 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801c0d6:	4603      	mov	r3, r0
 801c0d8:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 801c0da:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 801c0de:	f000 f8ab 	bl	801c238 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 801c0e2:	4603      	mov	r3, r0
 801c0e4:	4618      	mov	r0, r3
 801c0e6:	f000 f893 	bl	801c210 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801c0ea:	4603      	mov	r3, r0
 801c0ec:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 801c0ee:	4823      	ldr	r0, [pc, #140]	; (801c17c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 801c0f0:	f000 f8a2 	bl	801c238 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 801c0f4:	4603      	mov	r3, r0
 801c0f6:	4618      	mov	r0, r3
 801c0f8:	f000 f88a 	bl	801c210 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801c0fc:	4603      	mov	r3, r0
 801c0fe:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 801c100:	69b9      	ldr	r1, [r7, #24]
 801c102:	6a38      	ldr	r0, [r7, #32]
 801c104:	f000 f8a5 	bl	801c252 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801c108:	4603      	mov	r3, r0
 801c10a:	4619      	mov	r1, r3
 801c10c:	69f8      	ldr	r0, [r7, #28]
 801c10e:	f000 f8c2 	bl	801c296 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801c112:	4603      	mov	r3, r0
 801c114:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 801c116:	2300      	movs	r3, #0
 801c118:	627b      	str	r3, [r7, #36]	; 0x24
 801c11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c11c:	2b02      	cmp	r3, #2
 801c11e:	dc21      	bgt.n	801c164 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 801c120:	6979      	ldr	r1, [r7, #20]
 801c122:	6a38      	ldr	r0, [r7, #32]
 801c124:	f000 f895 	bl	801c252 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801c128:	4603      	mov	r3, r0
 801c12a:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 801c12c:	f000 f8d1 	bl	801c2d2 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 801c130:	4603      	mov	r3, r0
 801c132:	6939      	ldr	r1, [r7, #16]
 801c134:	4618      	mov	r0, r3
 801c136:	f000 f8d5 	bl	801c2e4 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801c13a:	4603      	mov	r3, r0
 801c13c:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 801c13e:	68f9      	ldr	r1, [r7, #12]
 801c140:	6978      	ldr	r0, [r7, #20]
 801c142:	f000 f8ed 	bl	801c320 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801c146:	4603      	mov	r3, r0
 801c148:	4618      	mov	r0, r3
 801c14a:	f000 f90b 	bl	801c364 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801c14e:	4603      	mov	r3, r0
 801c150:	4619      	mov	r1, r3
 801c152:	6978      	ldr	r0, [r7, #20]
 801c154:	f000 f89f 	bl	801c296 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801c158:	4603      	mov	r3, r0
 801c15a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 801c15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c15e:	3301      	adds	r3, #1
 801c160:	627b      	str	r3, [r7, #36]	; 0x24
 801c162:	e7da      	b.n	801c11a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 801c164:	6978      	ldr	r0, [r7, #20]
 801c166:	f000 f917 	bl	801c398 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 801c16a:	4603      	mov	r3, r0
 801c16c:	4618      	mov	r0, r3
 801c16e:	f000 f929 	bl	801c3c4 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801c172:	4603      	mov	r3, r0
}
 801c174:	4618      	mov	r0, r3
 801c176:	3728      	adds	r7, #40	; 0x28
 801c178:	46bd      	mov	sp, r7
 801c17a:	bd80      	pop	{r7, pc}
 801c17c:	c3c3c3c4 	.word	0xc3c3c3c4

0801c180 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
  RawType& raw() { return i_; }
 801c180:	b480      	push	{r7}
 801c182:	b083      	sub	sp, #12
 801c184:	af00      	add	r7, sp, #0
 801c186:	6078      	str	r0, [r7, #4]
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	4618      	mov	r0, r3
 801c18c:	370c      	adds	r7, #12
 801c18e:	46bd      	mov	sp, r7
 801c190:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c194:	4770      	bx	lr

0801c196 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801c196:	b590      	push	{r4, r7, lr}
 801c198:	b085      	sub	sp, #20
 801c19a:	af00      	add	r7, sp, #0
 801c19c:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801c19e:	f107 030c 	add.w	r3, r7, #12
 801c1a2:	4618      	mov	r0, r3
 801c1a4:	f7ff ffec 	bl	801c180 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c1a8:	4604      	mov	r4, r0
 801c1aa:	6878      	ldr	r0, [r7, #4]
 801c1ac:	f7ff fdf2 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c1b0:	4603      	mov	r3, r0
 801c1b2:	6023      	str	r3, [r4, #0]
    return retval;
 801c1b4:	68fb      	ldr	r3, [r7, #12]
  }
 801c1b6:	4618      	mov	r0, r3
 801c1b8:	3714      	adds	r7, #20
 801c1ba:	46bd      	mov	sp, r7
 801c1bc:	bd90      	pop	{r4, r7, pc}

0801c1be <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 801c1be:	b580      	push	{r7, lr}
 801c1c0:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 801c1c2:	f000 f927 	bl	801c414 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 801c1c6:	4603      	mov	r3, r0
 801c1c8:	4618      	mov	r0, r3
 801c1ca:	f7ff ffe4 	bl	801c196 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801c1ce:	4603      	mov	r3, r0
  }
 801c1d0:	4618      	mov	r0, r3
 801c1d2:	bd80      	pop	{r7, pc}

0801c1d4 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 801c1d4:	b590      	push	{r4, r7, lr}
 801c1d6:	b083      	sub	sp, #12
 801c1d8:	af00      	add	r7, sp, #0
 801c1da:	6078      	str	r0, [r7, #4]
 801c1dc:	6039      	str	r1, [r7, #0]
 801c1de:	1d3b      	adds	r3, r7, #4
 801c1e0:	4618      	mov	r0, r3
 801c1e2:	f7ff ffcd 	bl	801c180 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c1e6:	4603      	mov	r3, r0
 801c1e8:	681c      	ldr	r4, [r3, #0]
 801c1ea:	463b      	mov	r3, r7
 801c1ec:	4618      	mov	r0, r3
 801c1ee:	f7ff ffc7 	bl	801c180 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c1f2:	4603      	mov	r3, r0
 801c1f4:	681b      	ldr	r3, [r3, #0]
 801c1f6:	4619      	mov	r1, r3
 801c1f8:	4620      	mov	r0, r4
 801c1fa:	f7ff fead 	bl	801bf58 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 801c1fe:	4603      	mov	r3, r0
 801c200:	4618      	mov	r0, r3
 801c202:	f7ff ff4b 	bl	801c09c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801c206:	4603      	mov	r3, r0
 801c208:	4618      	mov	r0, r3
 801c20a:	370c      	adds	r7, #12
 801c20c:	46bd      	mov	sp, r7
 801c20e:	bd90      	pop	{r4, r7, pc}

0801c210 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801c210:	b590      	push	{r4, r7, lr}
 801c212:	b085      	sub	sp, #20
 801c214:	af00      	add	r7, sp, #0
 801c216:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801c218:	f107 030c 	add.w	r3, r7, #12
 801c21c:	4618      	mov	r0, r3
 801c21e:	f000 f900 	bl	801c422 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c222:	4604      	mov	r4, r0
 801c224:	6878      	ldr	r0, [r7, #4]
 801c226:	f7ff fdb5 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c22a:	4603      	mov	r3, r0
 801c22c:	6023      	str	r3, [r4, #0]
    return retval;
 801c22e:	68fb      	ldr	r3, [r7, #12]
  }
 801c230:	4618      	mov	r0, r3
 801c232:	3714      	adds	r7, #20
 801c234:	46bd      	mov	sp, r7
 801c236:	bd90      	pop	{r4, r7, pc}

0801c238 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 801c238:	b580      	push	{r7, lr}
 801c23a:	b082      	sub	sp, #8
 801c23c:	af00      	add	r7, sp, #0
 801c23e:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 801c240:	2100      	movs	r1, #0
 801c242:	6878      	ldr	r0, [r7, #4]
 801c244:	f7ff f9e2 	bl	801b60c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801c248:	4603      	mov	r3, r0
}
 801c24a:	4618      	mov	r0, r3
 801c24c:	3708      	adds	r7, #8
 801c24e:	46bd      	mov	sp, r7
 801c250:	bd80      	pop	{r7, pc}

0801c252 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801c252:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c254:	b085      	sub	sp, #20
 801c256:	af00      	add	r7, sp, #0
 801c258:	6078      	str	r0, [r7, #4]
 801c25a:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801c25c:	1d3b      	adds	r3, r7, #4
 801c25e:	4618      	mov	r0, r3
 801c260:	f7ff ff8e 	bl	801c180 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c264:	4603      	mov	r3, r0
 801c266:	681d      	ldr	r5, [r3, #0]
 801c268:	463b      	mov	r3, r7
 801c26a:	4618      	mov	r0, r3
 801c26c:	f000 f8d9 	bl	801c422 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c270:	4603      	mov	r3, r0
 801c272:	681e      	ldr	r6, [r3, #0]
 801c274:	f107 030c 	add.w	r3, r7, #12
 801c278:	4618      	mov	r0, r3
 801c27a:	f000 f8d2 	bl	801c422 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c27e:	4604      	mov	r4, r0
 801c280:	4631      	mov	r1, r6
 801c282:	4628      	mov	r0, r5
 801c284:	f7fe fd52 	bl	801ad2c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801c288:	4603      	mov	r3, r0
 801c28a:	6023      	str	r3, [r4, #0]
  return c;
 801c28c:	68fb      	ldr	r3, [r7, #12]
}
 801c28e:	4618      	mov	r0, r3
 801c290:	3714      	adds	r7, #20
 801c292:	46bd      	mov	sp, r7
 801c294:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c296 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801c296:	b590      	push	{r4, r7, lr}
 801c298:	b083      	sub	sp, #12
 801c29a:	af00      	add	r7, sp, #0
 801c29c:	6078      	str	r0, [r7, #4]
 801c29e:	6039      	str	r1, [r7, #0]
 801c2a0:	1d3b      	adds	r3, r7, #4
 801c2a2:	4618      	mov	r0, r3
 801c2a4:	f000 f8bd 	bl	801c422 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c2a8:	4603      	mov	r3, r0
 801c2aa:	681c      	ldr	r4, [r3, #0]
 801c2ac:	463b      	mov	r3, r7
 801c2ae:	4618      	mov	r0, r3
 801c2b0:	f000 f8b7 	bl	801c422 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c2b4:	4603      	mov	r3, r0
 801c2b6:	681b      	ldr	r3, [r3, #0]
 801c2b8:	4619      	mov	r1, r3
 801c2ba:	4620      	mov	r0, r4
 801c2bc:	f7ff fda6 	bl	801be0c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801c2c0:	4603      	mov	r3, r0
 801c2c2:	4618      	mov	r0, r3
 801c2c4:	f000 f8b8 	bl	801c438 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 801c2c8:	4603      	mov	r3, r0
 801c2ca:	4618      	mov	r0, r3
 801c2cc:	370c      	adds	r7, #12
 801c2ce:	46bd      	mov	sp, r7
 801c2d0:	bd90      	pop	{r4, r7, pc}

0801c2d2 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 801c2d2:	b580      	push	{r7, lr}
 801c2d4:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 801c2d6:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801c2da:	f7ff ff99 	bl	801c210 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801c2de:	4603      	mov	r3, r0
  }
 801c2e0:	4618      	mov	r0, r3
 801c2e2:	bd80      	pop	{r7, pc}

0801c2e4 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 801c2e4:	b590      	push	{r4, r7, lr}
 801c2e6:	b083      	sub	sp, #12
 801c2e8:	af00      	add	r7, sp, #0
 801c2ea:	6078      	str	r0, [r7, #4]
 801c2ec:	6039      	str	r1, [r7, #0]
 801c2ee:	1d3b      	adds	r3, r7, #4
 801c2f0:	4618      	mov	r0, r3
 801c2f2:	f000 f896 	bl	801c422 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c2f6:	4603      	mov	r3, r0
 801c2f8:	681c      	ldr	r4, [r3, #0]
 801c2fa:	463b      	mov	r3, r7
 801c2fc:	4618      	mov	r0, r3
 801c2fe:	f000 f890 	bl	801c422 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c302:	4603      	mov	r3, r0
 801c304:	681b      	ldr	r3, [r3, #0]
 801c306:	4619      	mov	r1, r3
 801c308:	4620      	mov	r0, r4
 801c30a:	f000 f875 	bl	801c3f8 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801c30e:	4603      	mov	r3, r0
 801c310:	4618      	mov	r0, r3
 801c312:	f000 f891 	bl	801c438 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 801c316:	4603      	mov	r3, r0
 801c318:	4618      	mov	r0, r3
 801c31a:	370c      	adds	r7, #12
 801c31c:	46bd      	mov	sp, r7
 801c31e:	bd90      	pop	{r4, r7, pc}

0801c320 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801c320:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c322:	b085      	sub	sp, #20
 801c324:	af00      	add	r7, sp, #0
 801c326:	6078      	str	r0, [r7, #4]
 801c328:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801c32a:	1d3b      	adds	r3, r7, #4
 801c32c:	4618      	mov	r0, r3
 801c32e:	f000 f878 	bl	801c422 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c332:	4603      	mov	r3, r0
 801c334:	681d      	ldr	r5, [r3, #0]
 801c336:	463b      	mov	r3, r7
 801c338:	4618      	mov	r0, r3
 801c33a:	f000 f872 	bl	801c422 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c33e:	4603      	mov	r3, r0
 801c340:	681e      	ldr	r6, [r3, #0]
 801c342:	f107 030c 	add.w	r3, r7, #12
 801c346:	4618      	mov	r0, r3
 801c348:	f000 f887 	bl	801c45a <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 801c34c:	4604      	mov	r4, r0
 801c34e:	4631      	mov	r1, r6
 801c350:	4628      	mov	r0, r5
 801c352:	f7fe fceb 	bl	801ad2c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801c356:	4603      	mov	r3, r0
 801c358:	6023      	str	r3, [r4, #0]
  return c;
 801c35a:	68fb      	ldr	r3, [r7, #12]
}
 801c35c:	4618      	mov	r0, r3
 801c35e:	3714      	adds	r7, #20
 801c360:	46bd      	mov	sp, r7
 801c362:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c364 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801c364:	b5b0      	push	{r4, r5, r7, lr}
 801c366:	b084      	sub	sp, #16
 801c368:	af00      	add	r7, sp, #0
 801c36a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801c36c:	1d3b      	adds	r3, r7, #4
 801c36e:	4618      	mov	r0, r3
 801c370:	f000 f873 	bl	801c45a <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 801c374:	4603      	mov	r3, r0
 801c376:	681d      	ldr	r5, [r3, #0]
 801c378:	f107 030c 	add.w	r3, r7, #12
 801c37c:	4618      	mov	r0, r3
 801c37e:	f000 f850 	bl	801c422 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c382:	4604      	mov	r4, r0
 801c384:	4628      	mov	r0, r5
 801c386:	f000 f873 	bl	801c470 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 801c38a:	4603      	mov	r3, r0
 801c38c:	6023      	str	r3, [r4, #0]
  return result;
 801c38e:	68fb      	ldr	r3, [r7, #12]
}
 801c390:	4618      	mov	r0, r3
 801c392:	3710      	adds	r7, #16
 801c394:	46bd      	mov	sp, r7
 801c396:	bdb0      	pop	{r4, r5, r7, pc}

0801c398 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 801c398:	b590      	push	{r4, r7, lr}
 801c39a:	b085      	sub	sp, #20
 801c39c:	af00      	add	r7, sp, #0
 801c39e:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 801c3a0:	1d3b      	adds	r3, r7, #4
 801c3a2:	4618      	mov	r0, r3
 801c3a4:	f000 f83d 	bl	801c422 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c3a8:	4604      	mov	r4, r0
 801c3aa:	f107 030c 	add.w	r3, r7, #12
 801c3ae:	4618      	mov	r0, r3
 801c3b0:	f000 f86a 	bl	801c488 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 801c3b4:	4602      	mov	r2, r0
 801c3b6:	6823      	ldr	r3, [r4, #0]
 801c3b8:	6013      	str	r3, [r2, #0]
  return c;
 801c3ba:	68fb      	ldr	r3, [r7, #12]
}
 801c3bc:	4618      	mov	r0, r3
 801c3be:	3714      	adds	r7, #20
 801c3c0:	46bd      	mov	sp, r7
 801c3c2:	bd90      	pop	{r4, r7, pc}

0801c3c4 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801c3c4:	b5b0      	push	{r4, r5, r7, lr}
 801c3c6:	b084      	sub	sp, #16
 801c3c8:	af00      	add	r7, sp, #0
 801c3ca:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801c3cc:	1d3b      	adds	r3, r7, #4
 801c3ce:	4618      	mov	r0, r3
 801c3d0:	f000 f85a 	bl	801c488 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 801c3d4:	4603      	mov	r3, r0
 801c3d6:	681d      	ldr	r5, [r3, #0]
 801c3d8:	f107 030c 	add.w	r3, r7, #12
 801c3dc:	4618      	mov	r0, r3
 801c3de:	f7ff fecf 	bl	801c180 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801c3e2:	4604      	mov	r4, r0
 801c3e4:	4628      	mov	r0, r5
 801c3e6:	f000 f85a 	bl	801c49e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 801c3ea:	4603      	mov	r3, r0
 801c3ec:	6023      	str	r3, [r4, #0]
  return result;
 801c3ee:	68fb      	ldr	r3, [r7, #12]
}
 801c3f0:	4618      	mov	r0, r3
 801c3f2:	3710      	adds	r7, #16
 801c3f4:	46bd      	mov	sp, r7
 801c3f6:	bdb0      	pop	{r4, r5, r7, pc}

0801c3f8 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 801c3f8:	b480      	push	{r7}
 801c3fa:	b083      	sub	sp, #12
 801c3fc:	af00      	add	r7, sp, #0
 801c3fe:	6078      	str	r0, [r7, #4]
 801c400:	6039      	str	r1, [r7, #0]
  return a - b;
 801c402:	687a      	ldr	r2, [r7, #4]
 801c404:	683b      	ldr	r3, [r7, #0]
 801c406:	1ad3      	subs	r3, r2, r3
}
 801c408:	4618      	mov	r0, r3
 801c40a:	370c      	adds	r7, #12
 801c40c:	46bd      	mov	sp, r7
 801c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c412:	4770      	bx	lr

0801c414 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 801c414:	b580      	push	{r7, lr}
 801c416:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 801c418:	f7fd fefc 	bl	801a214 <_ZNSt14numeric_limitsIlE3maxEv>
 801c41c:	4603      	mov	r3, r0
  }
 801c41e:	4618      	mov	r0, r3
 801c420:	bd80      	pop	{r7, pc}

0801c422 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 801c422:	b480      	push	{r7}
 801c424:	b083      	sub	sp, #12
 801c426:	af00      	add	r7, sp, #0
 801c428:	6078      	str	r0, [r7, #4]
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	4618      	mov	r0, r3
 801c42e:	370c      	adds	r7, #12
 801c430:	46bd      	mov	sp, r7
 801c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c436:	4770      	bx	lr

0801c438 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801c438:	b580      	push	{r7, lr}
 801c43a:	b084      	sub	sp, #16
 801c43c:	af00      	add	r7, sp, #0
 801c43e:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801c440:	f107 030c 	add.w	r3, r7, #12
 801c444:	4618      	mov	r0, r3
 801c446:	f7ff ffec 	bl	801c422 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801c44a:	4602      	mov	r2, r0
 801c44c:	687b      	ldr	r3, [r7, #4]
 801c44e:	6013      	str	r3, [r2, #0]
    return retval;
 801c450:	68fb      	ldr	r3, [r7, #12]
  }
 801c452:	4618      	mov	r0, r3
 801c454:	3710      	adds	r7, #16
 801c456:	46bd      	mov	sp, r7
 801c458:	bd80      	pop	{r7, pc}

0801c45a <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 801c45a:	b480      	push	{r7}
 801c45c:	b083      	sub	sp, #12
 801c45e:	af00      	add	r7, sp, #0
 801c460:	6078      	str	r0, [r7, #4]
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	4618      	mov	r0, r3
 801c466:	370c      	adds	r7, #12
 801c468:	46bd      	mov	sp, r7
 801c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c46e:	4770      	bx	lr

0801c470 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801c470:	b580      	push	{r7, lr}
 801c472:	b082      	sub	sp, #8
 801c474:	af00      	add	r7, sp, #0
 801c476:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801c478:	6878      	ldr	r0, [r7, #4]
 801c47a:	f000 f81d 	bl	801c4b8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 801c47e:	4603      	mov	r3, r0
}
 801c480:	4618      	mov	r0, r3
 801c482:	3708      	adds	r7, #8
 801c484:	46bd      	mov	sp, r7
 801c486:	bd80      	pop	{r7, pc}

0801c488 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 801c488:	b480      	push	{r7}
 801c48a:	b083      	sub	sp, #12
 801c48c:	af00      	add	r7, sp, #0
 801c48e:	6078      	str	r0, [r7, #4]
 801c490:	687b      	ldr	r3, [r7, #4]
 801c492:	4618      	mov	r0, r3
 801c494:	370c      	adds	r7, #12
 801c496:	46bd      	mov	sp, r7
 801c498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c49c:	4770      	bx	lr

0801c49e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801c49e:	b580      	push	{r7, lr}
 801c4a0:	b082      	sub	sp, #8
 801c4a2:	af00      	add	r7, sp, #0
 801c4a4:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801c4a6:	6878      	ldr	r0, [r7, #4]
 801c4a8:	f000 f848 	bl	801c53c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 801c4ac:	4603      	mov	r3, r0
}
 801c4ae:	4618      	mov	r0, r3
 801c4b0:	3708      	adds	r7, #8
 801c4b2:	46bd      	mov	sp, r7
 801c4b4:	bd80      	pop	{r7, pc}
	...

0801c4b8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801c4b8:	b580      	push	{r7, lr}
 801c4ba:	b08a      	sub	sp, #40	; 0x28
 801c4bc:	af00      	add	r7, sp, #0
 801c4be:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801c4c0:	f7fe fc1f 	bl	801ad02 <_ZNSt14numeric_limitsIlE3minEv>
 801c4c4:	4603      	mov	r3, r0
 801c4c6:	4618      	mov	r0, r3
 801c4c8:	f7ff fc64 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c4cc:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801c4ce:	f7fd fea1 	bl	801a214 <_ZNSt14numeric_limitsIlE3maxEv>
 801c4d2:	4603      	mov	r3, r0
 801c4d4:	4618      	mov	r0, r3
 801c4d6:	f7ff fc5d 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c4da:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801c4dc:	2320      	movs	r3, #32
 801c4de:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801c4e0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801c4e4:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801c4e6:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 801c4ea:	f7ff fc53 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c4ee:	4603      	mov	r3, r0
 801c4f0:	4619      	mov	r1, r3
 801c4f2:	6878      	ldr	r0, [r7, #4]
 801c4f4:	f7ff fc98 	bl	801be28 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801c4f8:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801c4fa:	480f      	ldr	r0, [pc, #60]	; (801c538 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 801c4fc:	f7ff fc4a 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c500:	4603      	mov	r3, r0
 801c502:	4619      	mov	r1, r3
 801c504:	6878      	ldr	r0, [r7, #4]
 801c506:	f7ff fc6d 	bl	801bde4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801c50a:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801c50c:	2102      	movs	r1, #2
 801c50e:	6878      	ldr	r0, [r7, #4]
 801c510:	f000 f856 	bl	801c5c0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801c514:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801c516:	68fa      	ldr	r2, [r7, #12]
 801c518:	6a39      	ldr	r1, [r7, #32]
 801c51a:	6978      	ldr	r0, [r7, #20]
 801c51c:	f000 f894 	bl	801c648 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801c520:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801c522:	68fa      	ldr	r2, [r7, #12]
 801c524:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c526:	6938      	ldr	r0, [r7, #16]
 801c528:	f000 f88e 	bl	801c648 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801c52c:	60f8      	str	r0, [r7, #12]
    return result;
 801c52e:	68fb      	ldr	r3, [r7, #12]
  }
 801c530:	4618      	mov	r0, r3
 801c532:	3728      	adds	r7, #40	; 0x28
 801c534:	46bd      	mov	sp, r7
 801c536:	bd80      	pop	{r7, pc}
 801c538:	e0000001 	.word	0xe0000001

0801c53c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801c53c:	b580      	push	{r7, lr}
 801c53e:	b08a      	sub	sp, #40	; 0x28
 801c540:	af00      	add	r7, sp, #0
 801c542:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801c544:	f7fe fbdd 	bl	801ad02 <_ZNSt14numeric_limitsIlE3minEv>
 801c548:	4603      	mov	r3, r0
 801c54a:	4618      	mov	r0, r3
 801c54c:	f7ff fc22 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c550:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801c552:	f7fd fe5f 	bl	801a214 <_ZNSt14numeric_limitsIlE3maxEv>
 801c556:	4603      	mov	r3, r0
 801c558:	4618      	mov	r0, r3
 801c55a:	f7ff fc1b 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c55e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801c560:	2320      	movs	r3, #32
 801c562:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801c564:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801c568:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801c56a:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 801c56e:	f7ff fc11 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c572:	4603      	mov	r3, r0
 801c574:	4619      	mov	r1, r3
 801c576:	6878      	ldr	r0, [r7, #4]
 801c578:	f7ff fc56 	bl	801be28 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801c57c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801c57e:	480f      	ldr	r0, [pc, #60]	; (801c5bc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 801c580:	f7ff fc08 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801c584:	4603      	mov	r3, r0
 801c586:	4619      	mov	r1, r3
 801c588:	6878      	ldr	r0, [r7, #4]
 801c58a:	f7ff fc2b 	bl	801bde4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801c58e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801c590:	2101      	movs	r1, #1
 801c592:	6878      	ldr	r0, [r7, #4]
 801c594:	f000 f814 	bl	801c5c0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801c598:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801c59a:	68fa      	ldr	r2, [r7, #12]
 801c59c:	6a39      	ldr	r1, [r7, #32]
 801c59e:	6978      	ldr	r0, [r7, #20]
 801c5a0:	f000 f852 	bl	801c648 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801c5a4:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801c5a6:	68fa      	ldr	r2, [r7, #12]
 801c5a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c5aa:	6938      	ldr	r0, [r7, #16]
 801c5ac:	f000 f84c 	bl	801c648 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801c5b0:	60f8      	str	r0, [r7, #12]
    return result;
 801c5b2:	68fb      	ldr	r3, [r7, #12]
  }
 801c5b4:	4618      	mov	r0, r3
 801c5b6:	3728      	adds	r7, #40	; 0x28
 801c5b8:	46bd      	mov	sp, r7
 801c5ba:	bd80      	pop	{r7, pc}
 801c5bc:	c0000001 	.word	0xc0000001

0801c5c0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 801c5c0:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 801c5c4:	b089      	sub	sp, #36	; 0x24
 801c5c6:	af00      	add	r7, sp, #0
 801c5c8:	6078      	str	r0, [r7, #4]
 801c5ca:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 801c5cc:	6879      	ldr	r1, [r7, #4]
 801c5ce:	17c8      	asrs	r0, r1, #31
 801c5d0:	4688      	mov	r8, r1
 801c5d2:	4681      	mov	r9, r0
 801c5d4:	e9c7 8906 	strd	r8, r9, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 801c5d8:	2001      	movs	r0, #1
 801c5da:	6839      	ldr	r1, [r7, #0]
 801c5dc:	fa00 f101 	lsl.w	r1, r0, r1
 801c5e0:	17c8      	asrs	r0, r1, #31
 801c5e2:	460c      	mov	r4, r1
 801c5e4:	4605      	mov	r5, r0
 801c5e6:	69f9      	ldr	r1, [r7, #28]
 801c5e8:	fb04 f001 	mul.w	r0, r4, r1
 801c5ec:	69b9      	ldr	r1, [r7, #24]
 801c5ee:	fb05 f101 	mul.w	r1, r5, r1
 801c5f2:	4401      	add	r1, r0
 801c5f4:	69b8      	ldr	r0, [r7, #24]
 801c5f6:	fba0 2304 	umull	r2, r3, r0, r4
 801c5fa:	4419      	add	r1, r3
 801c5fc:	460b      	mov	r3, r1
 801c5fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801c602:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 801c606:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801c60a:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 801c60c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801c610:	60bb      	str	r3, [r7, #8]
             ? min
 801c612:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801c616:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801c61a:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 801c61e:	db0b      	blt.n	801c638 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x78>
             : wide_shifted > max ? max
 801c620:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801c624:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801c628:	f173 0300 	sbcs.w	r3, r3, #0
 801c62c:	da01      	bge.n	801c632 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x72>
 801c62e:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 801c630:	e004      	b.n	801c63c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 801c632:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 801c636:	e001      	b.n	801c63c <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             ? min
 801c638:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 801c63c:	4618      	mov	r0, r3
 801c63e:	3724      	adds	r7, #36	; 0x24
 801c640:	46bd      	mov	sp, r7
 801c642:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 801c646:	4770      	bx	lr

0801c648 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 801c648:	b590      	push	{r4, r7, lr}
 801c64a:	b085      	sub	sp, #20
 801c64c:	af00      	add	r7, sp, #0
 801c64e:	60f8      	str	r0, [r7, #12]
 801c650:	60b9      	str	r1, [r7, #8]
 801c652:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 801c654:	68b9      	ldr	r1, [r7, #8]
 801c656:	68f8      	ldr	r0, [r7, #12]
 801c658:	f7ff fba7 	bl	801bdaa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801c65c:	4604      	mov	r4, r0
 801c65e:	68f8      	ldr	r0, [r7, #12]
 801c660:	f7ff fc07 	bl	801be72 <_ZN8gemmlowp6BitNotIlEET_S1_>
 801c664:	4603      	mov	r3, r0
 801c666:	6879      	ldr	r1, [r7, #4]
 801c668:	4618      	mov	r0, r3
 801c66a:	f7ff fb9e 	bl	801bdaa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801c66e:	4603      	mov	r3, r0
 801c670:	4619      	mov	r1, r3
 801c672:	4620      	mov	r0, r4
 801c674:	f000 f805 	bl	801c682 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 801c678:	4603      	mov	r3, r0
}
 801c67a:	4618      	mov	r0, r3
 801c67c:	3714      	adds	r7, #20
 801c67e:	46bd      	mov	sp, r7
 801c680:	bd90      	pop	{r4, r7, pc}

0801c682 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 801c682:	b480      	push	{r7}
 801c684:	b083      	sub	sp, #12
 801c686:	af00      	add	r7, sp, #0
 801c688:	6078      	str	r0, [r7, #4]
 801c68a:	6039      	str	r1, [r7, #0]
  return a ^ b;
 801c68c:	687a      	ldr	r2, [r7, #4]
 801c68e:	683b      	ldr	r3, [r7, #0]
 801c690:	4053      	eors	r3, r2
}
 801c692:	4618      	mov	r0, r3
 801c694:	370c      	adds	r7, #12
 801c696:	46bd      	mov	sp, r7
 801c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c69c:	4770      	bx	lr

0801c69e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
// TODO(b/169801227): This global struct is needed for the linker to drop unused
// code (for example, by using Register_FULLY_CONNECTED_INT8 instead of
// Register_FULLY_CONNECTED).
TfLiteRegistration fully_connected_registration;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 801c69e:	b580      	push	{r7, lr}
 801c6a0:	b084      	sub	sp, #16
 801c6a2:	af00      	add	r7, sp, #0
 801c6a4:	60f8      	str	r0, [r7, #12]
 801c6a6:	60b9      	str	r1, [r7, #8]
 801c6a8:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801c6aa:	68fb      	ldr	r3, [r7, #12]
 801c6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d101      	bne.n	801c6b6 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 801c6b2:	f006 f923 	bl	80228fc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 801c6b6:	68fb      	ldr	r3, [r7, #12]
 801c6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6ba:	2124      	movs	r1, #36	; 0x24
 801c6bc:	68f8      	ldr	r0, [r7, #12]
 801c6be:	4798      	blx	r3
 801c6c0:	4603      	mov	r3, r0
}
 801c6c2:	4618      	mov	r0, r3
 801c6c4:	3710      	adds	r7, #16
 801c6c6:	46bd      	mov	sp, r7
 801c6c8:	bd80      	pop	{r7, pc}
	...

0801c6cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 801c6cc:	b5b0      	push	{r4, r5, r7, lr}
 801c6ce:	b0a0      	sub	sp, #128	; 0x80
 801c6d0:	af04      	add	r7, sp, #16
 801c6d2:	6078      	str	r0, [r7, #4]
 801c6d4:	6039      	str	r1, [r7, #0]
 801c6d6:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 801c6d8:	683b      	ldr	r3, [r7, #0]
 801c6da:	691b      	ldr	r3, [r3, #16]
 801c6dc:	2b00      	cmp	r3, #0
 801c6de:	d101      	bne.n	801c6e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 801c6e0:	f006 f90c 	bl	80228fc <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801c6e4:	683b      	ldr	r3, [r7, #0]
 801c6e6:	695b      	ldr	r3, [r3, #20]
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	d101      	bne.n	801c6f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 801c6ec:	f006 f906 	bl	80228fc <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 801c6f0:	683b      	ldr	r3, [r7, #0]
 801c6f2:	691b      	ldr	r3, [r3, #16]
 801c6f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  const auto params =
 801c6f6:	683b      	ldr	r3, [r7, #0]
 801c6f8:	695b      	ldr	r3, [r3, #20]
 801c6fa:	66bb      	str	r3, [r7, #104]	; 0x68
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 801c6fc:	4b81      	ldr	r3, [pc, #516]	; (801c904 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 801c6fe:	681b      	ldr	r3, [r3, #0]
 801c700:	461a      	mov	r2, r3
 801c702:	6839      	ldr	r1, [r7, #0]
 801c704:	6878      	ldr	r0, [r7, #4]
 801c706:	f7fd fff9 	bl	801a6fc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801c70a:	6678      	str	r0, [r7, #100]	; 0x64
  TF_LITE_ENSURE(context, input != nullptr);
 801c70c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c70e:	2b00      	cmp	r3, #0
 801c710:	d10a      	bne.n	801c728 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	695c      	ldr	r4, [r3, #20]
 801c716:	4b7c      	ldr	r3, [pc, #496]	; (801c908 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801c718:	9300      	str	r3, [sp, #0]
 801c71a:	2340      	movs	r3, #64	; 0x40
 801c71c:	4a7b      	ldr	r2, [pc, #492]	; (801c90c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801c71e:	497c      	ldr	r1, [pc, #496]	; (801c910 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801c720:	6878      	ldr	r0, [r7, #4]
 801c722:	47a0      	blx	r4
 801c724:	2401      	movs	r4, #1
 801c726:	e0e7      	b.n	801c8f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 801c728:	4b7a      	ldr	r3, [pc, #488]	; (801c914 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 801c72a:	681b      	ldr	r3, [r3, #0]
 801c72c:	461a      	mov	r2, r3
 801c72e:	6839      	ldr	r1, [r7, #0]
 801c730:	6878      	ldr	r0, [r7, #4]
 801c732:	f7fd ffe3 	bl	801a6fc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801c736:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(context, filter != nullptr);
 801c738:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c73a:	2b00      	cmp	r3, #0
 801c73c:	d10a      	bne.n	801c754 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x88>
 801c73e:	687b      	ldr	r3, [r7, #4]
 801c740:	695c      	ldr	r4, [r3, #20]
 801c742:	4b75      	ldr	r3, [pc, #468]	; (801c918 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 801c744:	9300      	str	r3, [sp, #0]
 801c746:	2343      	movs	r3, #67	; 0x43
 801c748:	4a70      	ldr	r2, [pc, #448]	; (801c90c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801c74a:	4971      	ldr	r1, [pc, #452]	; (801c910 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801c74c:	6878      	ldr	r0, [r7, #4]
 801c74e:	47a0      	blx	r4
 801c750:	2401      	movs	r4, #1
 801c752:	e0d1      	b.n	801c8f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 801c754:	4b71      	ldr	r3, [pc, #452]	; (801c91c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 801c756:	681b      	ldr	r3, [r3, #0]
 801c758:	461a      	mov	r2, r3
 801c75a:	6839      	ldr	r1, [r7, #0]
 801c75c:	6878      	ldr	r0, [r7, #4]
 801c75e:	f7fd fffd 	bl	801a75c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 801c762:	65f8      	str	r0, [r7, #92]	; 0x5c
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 801c764:	4b6e      	ldr	r3, [pc, #440]	; (801c920 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 801c766:	681b      	ldr	r3, [r3, #0]
 801c768:	461a      	mov	r2, r3
 801c76a:	6839      	ldr	r1, [r7, #0]
 801c76c:	6878      	ldr	r0, [r7, #4]
 801c76e:	f7fd ffd5 	bl	801a71c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801c772:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, output != nullptr);
 801c774:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c776:	2b00      	cmp	r3, #0
 801c778:	d10a      	bne.n	801c790 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 801c77a:	687b      	ldr	r3, [r7, #4]
 801c77c:	695c      	ldr	r4, [r3, #20]
 801c77e:	4b69      	ldr	r3, [pc, #420]	; (801c924 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 801c780:	9300      	str	r3, [sp, #0]
 801c782:	2347      	movs	r3, #71	; 0x47
 801c784:	4a61      	ldr	r2, [pc, #388]	; (801c90c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801c786:	4962      	ldr	r1, [pc, #392]	; (801c910 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801c788:	6878      	ldr	r0, [r7, #4]
 801c78a:	47a0      	blx	r4
 801c78c:	2401      	movs	r4, #1
 801c78e:	e0b3      	b.n	801c8f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 801c790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c792:	781a      	ldrb	r2, [r3, #0]
 801c794:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c796:	781b      	ldrb	r3, [r3, #0]
 801c798:	429a      	cmp	r2, r3
 801c79a:	d01a      	beq.n	801c7d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	695c      	ldr	r4, [r3, #20]
 801c7a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c7a2:	781b      	ldrb	r3, [r3, #0]
 801c7a4:	4618      	mov	r0, r3
 801c7a6:	f7fd fcb9 	bl	801a11c <TfLiteTypeGetName>
 801c7aa:	4605      	mov	r5, r0
 801c7ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c7ae:	781b      	ldrb	r3, [r3, #0]
 801c7b0:	4618      	mov	r0, r3
 801c7b2:	f7fd fcb3 	bl	801a11c <TfLiteTypeGetName>
 801c7b6:	4603      	mov	r3, r0
 801c7b8:	9303      	str	r3, [sp, #12]
 801c7ba:	9502      	str	r5, [sp, #8]
 801c7bc:	4b5a      	ldr	r3, [pc, #360]	; (801c928 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 801c7be:	9301      	str	r3, [sp, #4]
 801c7c0:	4b5a      	ldr	r3, [pc, #360]	; (801c92c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 801c7c2:	9300      	str	r3, [sp, #0]
 801c7c4:	2349      	movs	r3, #73	; 0x49
 801c7c6:	4a51      	ldr	r2, [pc, #324]	; (801c90c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801c7c8:	4959      	ldr	r1, [pc, #356]	; (801c930 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 801c7ca:	6878      	ldr	r0, [r7, #4]
 801c7cc:	47a0      	blx	r4
 801c7ce:	2401      	movs	r4, #1
 801c7d0:	e092      	b.n	801c8f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 801c7d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c7d4:	781a      	ldrb	r2, [r3, #0]
 801c7d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c7d8:	781b      	ldrb	r3, [r3, #0]
 801c7da:	429a      	cmp	r2, r3
 801c7dc:	d006      	beq.n	801c7ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>
 801c7de:	687b      	ldr	r3, [r7, #4]
 801c7e0:	695b      	ldr	r3, [r3, #20]
 801c7e2:	4954      	ldr	r1, [pc, #336]	; (801c934 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 801c7e4:	6878      	ldr	r0, [r7, #4]
 801c7e6:	4798      	blx	r3
 801c7e8:	2401      	movs	r4, #1
 801c7ea:	e085      	b.n	801c8f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
                     "Hybrid models are not supported on TFLite Micro.");

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 801c7ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c7ee:	f04f 32ff 	mov.w	r2, #4294967295
 801c7f2:	621a      	str	r2, [r3, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 801c7f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c7f6:	7819      	ldrb	r1, [r3, #0]
 801c7f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c7fa:	781a      	ldrb	r2, [r3, #0]
 801c7fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c7fe:	9303      	str	r3, [sp, #12]
 801c800:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c802:	9302      	str	r3, [sp, #8]
 801c804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c806:	9301      	str	r3, [sp, #4]
 801c808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c80a:	9300      	str	r3, [sp, #0]
 801c80c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c80e:	6878      	ldr	r0, [r7, #4]
 801c810:	f000 fae4 	bl	801cddc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 801c814:	4603      	mov	r3, r0
 801c816:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801c81a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c81e:	2b00      	cmp	r3, #0
 801c820:	d002      	beq.n	801c828 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>
 801c822:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 801c826:	e067      	b.n	801c8f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  if (input->type == kTfLiteInt8) {
 801c828:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c82a:	781b      	ldrb	r3, [r3, #0]
 801c82c:	2b09      	cmp	r3, #9
 801c82e:	d162      	bne.n	801c8f6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22a>
    RuntimeShape filter_shape = GetTensorShape(filter);
 801c830:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c834:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801c836:	4618      	mov	r0, r3
 801c838:	f7fe fa45 	bl	801acc6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 801c83c:	f107 0318 	add.w	r3, r7, #24
 801c840:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801c842:	4618      	mov	r0, r3
 801c844:	f7fe fa3f 	bl	801acc6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 801c848:	f107 0318 	add.w	r3, r7, #24
 801c84c:	4618      	mov	r0, r3
 801c84e:	f7fe f9d6 	bl	801abfe <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801c852:	4603      	mov	r3, r0
 801c854:	2b02      	cmp	r3, #2
 801c856:	d001      	beq.n	801c85c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>
 801c858:	f006 f850 	bl	80228fc <abort>
    const int filter_dim_count = filter_shape.DimensionsCount();
 801c85c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c860:	4618      	mov	r0, r3
 801c862:	f7fe f9cc 	bl	801abfe <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801c866:	6538      	str	r0, [r7, #80]	; 0x50
    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 801c868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c86a:	1e5a      	subs	r2, r3, #1
 801c86c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c870:	4611      	mov	r1, r2
 801c872:	4618      	mov	r0, r3
 801c874:	f7fe fad0 	bl	801ae18 <_ZNK6tflite12RuntimeShape4DimsEi>
 801c878:	4603      	mov	r3, r0
 801c87a:	60bb      	str	r3, [r7, #8]
    filter_dims.h = 1;
 801c87c:	2301      	movs	r3, #1
 801c87e:	60fb      	str	r3, [r7, #12]
    filter_dims.w = 1;
 801c880:	2301      	movs	r3, #1
 801c882:	613b      	str	r3, [r7, #16]
    filter_dims.c = output_shape.Dims(1);
 801c884:	f107 0318 	add.w	r3, r7, #24
 801c888:	2101      	movs	r1, #1
 801c88a:	4618      	mov	r0, r3
 801c88c:	f7fe fac4 	bl	801ae18 <_ZNK6tflite12RuntimeShape4DimsEi>
 801c890:	4603      	mov	r3, r0
 801c892:	617b      	str	r3, [r7, #20]

    const int32_t buf_size =
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 801c894:	f107 0308 	add.w	r3, r7, #8
 801c898:	4618      	mov	r0, r3
 801c89a:	f7f5 f81f 	bl	80118dc <arm_fully_connected_s8_get_buffer_size>
 801c89e:	64f8      	str	r0, [r7, #76]	; 0x4c

    if (buf_size > 0) {
 801c8a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	dd11      	ble.n	801c8ca <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c8aa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801c8ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801c8ae:	3220      	adds	r2, #32
 801c8b0:	6878      	ldr	r0, [r7, #4]
 801c8b2:	4798      	blx	r3
 801c8b4:	4603      	mov	r3, r0
 801c8b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 801c8ba:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801c8be:	2b00      	cmp	r3, #0
 801c8c0:	d007      	beq.n	801c8d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x206>
 801c8c2:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 801c8c6:	2500      	movs	r5, #0
 801c8c8:	e004      	b.n	801c8d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 801c8ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c8cc:	f04f 32ff 	mov.w	r2, #4294967295
 801c8d0:	621a      	str	r2, [r3, #32]
 801c8d2:	2501      	movs	r5, #1
 801c8d4:	f107 0318 	add.w	r3, r7, #24
 801c8d8:	4618      	mov	r0, r3
 801c8da:	f7fe f97a 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
 801c8de:	2d01      	cmp	r5, #1
 801c8e0:	d001      	beq.n	801c8e6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
 801c8e2:	2500      	movs	r5, #0
 801c8e4:	e000      	b.n	801c8e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21c>
 801c8e6:	2501      	movs	r5, #1
 801c8e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c8ec:	4618      	mov	r0, r3
 801c8ee:	f7fe f970 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
 801c8f2:	2d01      	cmp	r5, #1
 801c8f4:	d100      	bne.n	801c8f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
    }
  }
  return kTfLiteOk;
 801c8f6:	2400      	movs	r4, #0
}
 801c8f8:	4623      	mov	r3, r4
 801c8fa:	4618      	mov	r0, r3
 801c8fc:	3770      	adds	r7, #112	; 0x70
 801c8fe:	46bd      	mov	sp, r7
 801c900:	bdb0      	pop	{r4, r5, r7, pc}
 801c902:	bf00      	nop
 801c904:	08028a78 	.word	0x08028a78
 801c908:	08027fe8 	.word	0x08027fe8
 801c90c:	08027f3c 	.word	0x08027f3c
 801c910:	08027fd0 	.word	0x08027fd0
 801c914:	08028a7c 	.word	0x08028a7c
 801c918:	08027ffc 	.word	0x08027ffc
 801c91c:	08028a80 	.word	0x08028a80
 801c920:	08028a84 	.word	0x08028a84
 801c924:	08028010 	.word	0x08028010
 801c928:	08028040 	.word	0x08028040
 801c92c:	08028050 	.word	0x08028050
 801c930:	08028024 	.word	0x08028024
 801c934:	0802805c 	.word	0x0802805c

0801c938 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 801c938:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c93a:	b0bf      	sub	sp, #252	; 0xfc
 801c93c:	af08      	add	r7, sp, #32
 801c93e:	6178      	str	r0, [r7, #20]
 801c940:	6139      	str	r1, [r7, #16]
 801c942:	60fa      	str	r2, [r7, #12]
 801c944:	60bb      	str	r3, [r7, #8]
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801c946:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c94a:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 801c94e:	4618      	mov	r0, r3
 801c950:	f000 faaa 	bl	801cea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 801c954:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c958:	4618      	mov	r0, r3
 801c95a:	f7fe f950 	bl	801abfe <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801c95e:	4603      	mov	r3, r0
 801c960:	2b02      	cmp	r3, #2
 801c962:	d001      	beq.n	801c968 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x30>
 801c964:	f005 ffca 	bl	80228fc <abort>
  const int batches = output_shape.Dims(0);
 801c968:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c96c:	2100      	movs	r1, #0
 801c96e:	4618      	mov	r0, r3
 801c970:	f7fe fa52 	bl	801ae18 <_ZNK6tflite12RuntimeShape4DimsEi>
 801c974:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  const int output_depth = output_shape.Dims(1);
 801c978:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c97c:	2101      	movs	r1, #1
 801c97e:	4618      	mov	r0, r3
 801c980:	f7fe fa4a 	bl	801ae18 <_ZNK6tflite12RuntimeShape4DimsEi>
 801c984:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 801c988:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c98c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801c990:	4618      	mov	r0, r3
 801c992:	f000 fa89 	bl	801cea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 801c996:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c99a:	4618      	mov	r0, r3
 801c99c:	f7fe f92f 	bl	801abfe <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801c9a0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 801c9a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c9a8:	1e5a      	subs	r2, r3, #1
 801c9aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c9ae:	4611      	mov	r1, r2
 801c9b0:	4618      	mov	r0, r3
 801c9b2:	f7fe fa31 	bl	801ae18 <_ZNK6tflite12RuntimeShape4DimsEi>
 801c9b6:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801c9ba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c9be:	68b9      	ldr	r1, [r7, #8]
 801c9c0:	4618      	mov	r0, r3
 801c9c2:	f000 fa71 	bl	801cea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  cmsis_nn_fc_params fc_params;
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 801c9c6:	68fb      	ldr	r3, [r7, #12]
 801c9c8:	695b      	ldr	r3, [r3, #20]
 801c9ca:	425b      	negs	r3, r3
 801c9cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 801c9ce:	68fb      	ldr	r3, [r7, #12]
 801c9d0:	69db      	ldr	r3, [r3, #28]
 801c9d2:	677b      	str	r3, [r7, #116]	; 0x74
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 801c9d4:	68fb      	ldr	r3, [r7, #12]
 801c9d6:	699b      	ldr	r3, [r3, #24]
 801c9d8:	425b      	negs	r3, r3
 801c9da:	673b      	str	r3, [r7, #112]	; 0x70
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 801c9dc:	68fb      	ldr	r3, [r7, #12]
 801c9de:	689b      	ldr	r3, [r3, #8]
 801c9e0:	67bb      	str	r3, [r7, #120]	; 0x78
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 801c9e2:	68fb      	ldr	r3, [r7, #12]
 801c9e4:	68db      	ldr	r3, [r3, #12]
 801c9e6:	67fb      	str	r3, [r7, #124]	; 0x7c

  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 801c9e8:	68fb      	ldr	r3, [r7, #12]
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	667b      	str	r3, [r7, #100]	; 0x64
  quant_params.shift = data.reference_op_data.output_shift;
 801c9ee:	68fb      	ldr	r3, [r7, #12]
 801c9f0:	685b      	ldr	r3, [r3, #4]
 801c9f2:	66bb      	str	r3, [r7, #104]	; 0x68

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
 801c9f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c9f8:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = 1;
 801c9fa:	2301      	movs	r3, #1
 801c9fc:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = 1;
 801c9fe:	2301      	movs	r3, #1
 801ca00:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = accum_depth;
 801ca02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801ca06:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims filter_dims;
  filter_dims.n = accum_depth;
 801ca08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801ca0c:	647b      	str	r3, [r7, #68]	; 0x44
  filter_dims.h = 1;
 801ca0e:	2301      	movs	r3, #1
 801ca10:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.w = 1;
 801ca12:	2301      	movs	r3, #1
 801ca14:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.c = output_depth;
 801ca16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801ca1a:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
 801ca1c:	2301      	movs	r3, #1
 801ca1e:	637b      	str	r3, [r7, #52]	; 0x34
  bias_dims.h = 1;
 801ca20:	2301      	movs	r3, #1
 801ca22:	63bb      	str	r3, [r7, #56]	; 0x38
  bias_dims.w = 1;
 801ca24:	2301      	movs	r3, #1
 801ca26:	63fb      	str	r3, [r7, #60]	; 0x3c
  bias_dims.c = output_depth;
 801ca28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801ca2c:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
 801ca2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801ca32:	627b      	str	r3, [r7, #36]	; 0x24
  output_dims.h = 1;
 801ca34:	2301      	movs	r3, #1
 801ca36:	62bb      	str	r3, [r7, #40]	; 0x28
  output_dims.w = 1;
 801ca38:	2301      	movs	r3, #1
 801ca3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  output_dims.c = output_depth;
 801ca3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801ca40:	633b      	str	r3, [r7, #48]	; 0x30

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 801ca42:	2300      	movs	r3, #0
 801ca44:	61fb      	str	r3, [r7, #28]
  ctx.size = 0;
 801ca46:	2300      	movs	r3, #0
 801ca48:	623b      	str	r3, [r7, #32]

  if (data.buffer_idx > -1) {
 801ca4a:	68fb      	ldr	r3, [r7, #12]
 801ca4c:	6a1b      	ldr	r3, [r3, #32]
 801ca4e:	2b00      	cmp	r3, #0
 801ca50:	db08      	blt.n	801ca64 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x12c>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 801ca52:	697b      	ldr	r3, [r7, #20]
 801ca54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ca56:	68fa      	ldr	r2, [r7, #12]
 801ca58:	6a12      	ldr	r2, [r2, #32]
 801ca5a:	4611      	mov	r1, r2
 801ca5c:	6978      	ldr	r0, [r7, #20]
 801ca5e:	4798      	blx	r3
 801ca60:	4603      	mov	r3, r0
 801ca62:	61fb      	str	r3, [r7, #28]
  }

  TF_LITE_ENSURE_EQ(
 801ca64:	68b8      	ldr	r0, [r7, #8]
 801ca66:	f7fe ffa9 	bl	801b9bc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801ca6a:	4605      	mov	r5, r0
 801ca6c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801ca70:	f7fe ffa4 	bl	801b9bc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801ca74:	4606      	mov	r6, r0
 801ca76:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801ca7a:	f7ff fa20 	bl	801bebe <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801ca7e:	6078      	str	r0, [r7, #4]
 801ca80:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801ca84:	f7fe ffa9 	bl	801b9da <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801ca88:	4603      	mov	r3, r0
 801ca8a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 801ca8e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801ca92:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801ca96:	f107 001c 	add.w	r0, r7, #28
 801ca9a:	9306      	str	r3, [sp, #24]
 801ca9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801caa0:	9305      	str	r3, [sp, #20]
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	9304      	str	r3, [sp, #16]
 801caa6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801caaa:	9303      	str	r3, [sp, #12]
 801caac:	9602      	str	r6, [sp, #8]
 801caae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801cab2:	9301      	str	r3, [sp, #4]
 801cab4:	9500      	str	r5, [sp, #0]
 801cab6:	4623      	mov	r3, r4
 801cab8:	f7f4 fec9 	bl	801184e <arm_fully_connected_s8>
 801cabc:	4603      	mov	r3, r0
 801cabe:	2b00      	cmp	r3, #0
 801cac0:	bf14      	ite	ne
 801cac2:	2301      	movne	r3, #1
 801cac4:	2300      	moveq	r3, #0
 801cac6:	b2db      	uxtb	r3, r3
 801cac8:	2b00      	cmp	r3, #0
 801caca:	d03e      	beq.n	801cb4a <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x212>
 801cacc:	697b      	ldr	r3, [r7, #20]
 801cace:	695c      	ldr	r4, [r3, #20]
 801cad0:	68b8      	ldr	r0, [r7, #8]
 801cad2:	f7fe ff73 	bl	801b9bc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801cad6:	4606      	mov	r6, r0
 801cad8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801cadc:	f7fe ff6e 	bl	801b9bc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801cae0:	6078      	str	r0, [r7, #4]
 801cae2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801cae6:	f7ff f9ea 	bl	801bebe <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801caea:	6038      	str	r0, [r7, #0]
 801caec:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801caf0:	f7fe ff73 	bl	801b9da <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801caf4:	4603      	mov	r3, r0
 801caf6:	f107 0554 	add.w	r5, r7, #84	; 0x54
 801cafa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801cafe:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801cb02:	f107 001c 	add.w	r0, r7, #28
 801cb06:	9306      	str	r3, [sp, #24]
 801cb08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cb0c:	9305      	str	r3, [sp, #20]
 801cb0e:	683b      	ldr	r3, [r7, #0]
 801cb10:	9304      	str	r3, [sp, #16]
 801cb12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801cb16:	9303      	str	r3, [sp, #12]
 801cb18:	687b      	ldr	r3, [r7, #4]
 801cb1a:	9302      	str	r3, [sp, #8]
 801cb1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801cb20:	9301      	str	r3, [sp, #4]
 801cb22:	9600      	str	r6, [sp, #0]
 801cb24:	462b      	mov	r3, r5
 801cb26:	f7f4 fe92 	bl	801184e <arm_fully_connected_s8>
 801cb2a:	4603      	mov	r3, r0
 801cb2c:	461a      	mov	r2, r3
 801cb2e:	2300      	movs	r3, #0
 801cb30:	9303      	str	r3, [sp, #12]
 801cb32:	9202      	str	r2, [sp, #8]
 801cb34:	4b0f      	ldr	r3, [pc, #60]	; (801cb74 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x23c>)
 801cb36:	9301      	str	r3, [sp, #4]
 801cb38:	4b0f      	ldr	r3, [pc, #60]	; (801cb78 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x240>)
 801cb3a:	9300      	str	r3, [sp, #0]
 801cb3c:	23a6      	movs	r3, #166	; 0xa6
 801cb3e:	4a0f      	ldr	r2, [pc, #60]	; (801cb7c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x244>)
 801cb40:	490f      	ldr	r1, [pc, #60]	; (801cb80 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x248>)
 801cb42:	6978      	ldr	r0, [r7, #20]
 801cb44:	47a0      	blx	r4
 801cb46:	2401      	movs	r4, #1
 801cb48:	e000      	b.n	801cb4c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x214>
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 801cb4a:	2400      	movs	r4, #0
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801cb4c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801cb50:	4618      	mov	r0, r3
 801cb52:	f7fe f83e 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 801cb56:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801cb5a:	4618      	mov	r0, r3
 801cb5c:	f7fe f839 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801cb60:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801cb64:	4618      	mov	r0, r3
 801cb66:	f7fe f834 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801cb6a:	4623      	mov	r3, r4
 801cb6c:	4618      	mov	r0, r3
 801cb6e:	37dc      	adds	r7, #220	; 0xdc
 801cb70:	46bd      	mov	sp, r7
 801cb72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cb74:	08028140 	.word	0x08028140
 801cb78:	08028154 	.word	0x08028154
 801cb7c:	08027f3c 	.word	0x08027f3c
 801cb80:	08028124 	.word	0x08028124

0801cb84 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 801cb84:	b590      	push	{r4, r7, lr}
 801cb86:	b0d1      	sub	sp, #324	; 0x144
 801cb88:	af04      	add	r7, sp, #16
 801cb8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cb8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801cb92:	6018      	str	r0, [r3, #0]
 801cb94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cb98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801cb9c:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801cb9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801cba6:	681b      	ldr	r3, [r3, #0]
 801cba8:	695b      	ldr	r3, [r3, #20]
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	d101      	bne.n	801cbb2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e>
 801cbae:	f005 fea5 	bl	80228fc <abort>
  const auto* params =
 801cbb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cbb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801cbba:	681b      	ldr	r3, [r3, #0]
 801cbbc:	695b      	ldr	r3, [r3, #20]
 801cbbe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 801cbc2:	4b67      	ldr	r3, [pc, #412]	; (801cd60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>)
 801cbc4:	681a      	ldr	r2, [r3, #0]
 801cbc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cbca:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801cbce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cbd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801cbd6:	6809      	ldr	r1, [r1, #0]
 801cbd8:	6818      	ldr	r0, [r3, #0]
 801cbda:	f7fe f9f1 	bl	801afc0 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801cbde:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 801cbe2:	4b60      	ldr	r3, [pc, #384]	; (801cd64 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e0>)
 801cbe4:	681a      	ldr	r2, [r3, #0]
 801cbe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cbea:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801cbee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cbf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801cbf6:	6809      	ldr	r1, [r1, #0]
 801cbf8:	6818      	ldr	r0, [r3, #0]
 801cbfa:	f7fe f9e1 	bl	801afc0 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801cbfe:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 801cc02:	4b59      	ldr	r3, [pc, #356]	; (801cd68 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e4>)
 801cc04:	681a      	ldr	r2, [r3, #0]
 801cc06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cc0a:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801cc0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cc12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801cc16:	6809      	ldr	r1, [r1, #0]
 801cc18:	6818      	ldr	r0, [r3, #0]
 801cc1a:	f7fe f9d1 	bl	801afc0 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801cc1e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 801cc22:	4b52      	ldr	r3, [pc, #328]	; (801cd6c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e8>)
 801cc24:	681a      	ldr	r2, [r3, #0]
 801cc26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cc2a:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801cc2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cc32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801cc36:	6809      	ldr	r1, [r1, #0]
 801cc38:	6818      	ldr	r0, [r3, #0]
 801cc3a:	f7fe f9d1 	bl	801afe0 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801cc3e:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 801cc42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cc46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801cc4a:	681b      	ldr	r3, [r3, #0]
 801cc4c:	691b      	ldr	r3, [r3, #16]
 801cc4e:	2b00      	cmp	r3, #0
 801cc50:	d101      	bne.n	801cc56 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
 801cc52:	f005 fe53 	bl	80228fc <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 801cc56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cc5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801cc5e:	681b      	ldr	r3, [r3, #0]
 801cc60:	691b      	ldr	r3, [r3, #16]
 801cc62:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 801cc66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cc6a:	7a1b      	ldrb	r3, [r3, #8]
 801cc6c:	2b09      	cmp	r3, #9
 801cc6e:	d021      	beq.n	801ccb4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x130>
 801cc70:	2b09      	cmp	r3, #9
 801cc72:	dc55      	bgt.n	801cd20 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
 801cc74:	2b01      	cmp	r3, #1
 801cc76:	d002      	beq.n	801cc7e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
 801cc78:	2b03      	cmp	r3, #3
 801cc7a:	d036      	beq.n	801ccea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x166>
 801cc7c:	e050      	b.n	801cd20 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19c>
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801cc7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cc82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	695c      	ldr	r4, [r3, #20]
 801cc8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cc8e:	7a1b      	ldrb	r3, [r3, #8]
 801cc90:	4618      	mov	r0, r3
 801cc92:	f7fd fa43 	bl	801a11c <TfLiteTypeGetName>
 801cc96:	4602      	mov	r2, r0
 801cc98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cc9c:	7a1b      	ldrb	r3, [r3, #8]
 801cc9e:	4619      	mov	r1, r3
 801cca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cca4:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801cca8:	460b      	mov	r3, r1
 801ccaa:	4931      	ldr	r1, [pc, #196]	; (801cd70 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 801ccac:	6800      	ldr	r0, [r0, #0]
 801ccae:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801ccb0:	2301      	movs	r3, #1
 801ccb2:	e04f      	b.n	801cd54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 801ccb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ccb8:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801ccbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ccc0:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801ccc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ccc8:	9302      	str	r3, [sp, #8]
 801ccca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801ccce:	9301      	str	r3, [sp, #4]
 801ccd0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801ccd4:	9300      	str	r3, [sp, #0]
 801ccd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801ccda:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801ccde:	6809      	ldr	r1, [r1, #0]
 801cce0:	6800      	ldr	r0, [r0, #0]
 801cce2:	f7ff fe29 	bl	801c938 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 801cce6:	4603      	mov	r3, r0
                               output);
 801cce8:	e034      	b.n	801cd54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801ccea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ccee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	695c      	ldr	r4, [r3, #20]
 801ccf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801ccfa:	7a1b      	ldrb	r3, [r3, #8]
 801ccfc:	4618      	mov	r0, r3
 801ccfe:	f7fd fa0d 	bl	801a11c <TfLiteTypeGetName>
 801cd02:	4602      	mov	r2, r0
 801cd04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cd08:	7a1b      	ldrb	r3, [r3, #8]
 801cd0a:	4619      	mov	r1, r3
 801cd0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cd10:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801cd14:	460b      	mov	r3, r1
 801cd16:	4916      	ldr	r1, [pc, #88]	; (801cd70 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 801cd18:	6800      	ldr	r0, [r0, #0]
 801cd1a:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801cd1c:	2301      	movs	r3, #1
 801cd1e:	e019      	b.n	801cd54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<uint8_t>(output));
      break;
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801cd20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cd24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801cd28:	681b      	ldr	r3, [r3, #0]
 801cd2a:	695c      	ldr	r4, [r3, #20]
 801cd2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cd30:	7a1b      	ldrb	r3, [r3, #8]
 801cd32:	4618      	mov	r0, r3
 801cd34:	f7fd f9f2 	bl	801a11c <TfLiteTypeGetName>
 801cd38:	4602      	mov	r2, r0
 801cd3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cd3e:	7a1b      	ldrb	r3, [r3, #8]
 801cd40:	4619      	mov	r1, r3
 801cd42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cd46:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 801cd4a:	460b      	mov	r3, r1
 801cd4c:	4908      	ldr	r1, [pc, #32]	; (801cd70 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>)
 801cd4e:	6800      	ldr	r0, [r0, #0]
 801cd50:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801cd52:	2301      	movs	r3, #1
    }
  }
  return kTfLiteOk;
}
 801cd54:	4618      	mov	r0, r3
 801cd56:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801cd5a:	46bd      	mov	sp, r7
 801cd5c:	bd90      	pop	{r4, r7, pc}
 801cd5e:	bf00      	nop
 801cd60:	08028a78 	.word	0x08028a78
 801cd64:	08028a7c 	.word	0x08028a7c
 801cd68:	08028a80 	.word	0x08028a80
 801cd6c:	08028a84 	.word	0x08028a84
 801cd70:	08028278 	.word	0x08028278

0801cd74 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 801cd74:	b4b0      	push	{r4, r5, r7}
 801cd76:	b083      	sub	sp, #12
 801cd78:	af00      	add	r7, sp, #0
 801cd7a:	6078      	str	r0, [r7, #4]
  fully_connected_registration.init = Init;
 801cd7c:	4b13      	ldr	r3, [pc, #76]	; (801cdcc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cd7e:	4a14      	ldr	r2, [pc, #80]	; (801cdd0 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x5c>)
 801cd80:	601a      	str	r2, [r3, #0]
  fully_connected_registration.free = nullptr;
 801cd82:	4b12      	ldr	r3, [pc, #72]	; (801cdcc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cd84:	2200      	movs	r2, #0
 801cd86:	605a      	str	r2, [r3, #4]
  fully_connected_registration.prepare = Prepare;
 801cd88:	4b10      	ldr	r3, [pc, #64]	; (801cdcc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cd8a:	4a12      	ldr	r2, [pc, #72]	; (801cdd4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x60>)
 801cd8c:	609a      	str	r2, [r3, #8]
  fully_connected_registration.invoke = Eval;
 801cd8e:	4b0f      	ldr	r3, [pc, #60]	; (801cdcc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cd90:	4a11      	ldr	r2, [pc, #68]	; (801cdd8 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x64>)
 801cd92:	60da      	str	r2, [r3, #12]
  fully_connected_registration.profiling_string = nullptr;
 801cd94:	4b0d      	ldr	r3, [pc, #52]	; (801cdcc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cd96:	2200      	movs	r2, #0
 801cd98:	611a      	str	r2, [r3, #16]
  fully_connected_registration.builtin_code = 0;
 801cd9a:	4b0c      	ldr	r3, [pc, #48]	; (801cdcc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cd9c:	2200      	movs	r2, #0
 801cd9e:	615a      	str	r2, [r3, #20]
  fully_connected_registration.custom_name = nullptr;
 801cda0:	4b0a      	ldr	r3, [pc, #40]	; (801cdcc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cda2:	2200      	movs	r2, #0
 801cda4:	619a      	str	r2, [r3, #24]
  fully_connected_registration.version = 0;
 801cda6:	4b09      	ldr	r3, [pc, #36]	; (801cdcc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cda8:	2200      	movs	r2, #0
 801cdaa:	61da      	str	r2, [r3, #28]
  return fully_connected_registration;
 801cdac:	687b      	ldr	r3, [r7, #4]
 801cdae:	4a07      	ldr	r2, [pc, #28]	; (801cdcc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 801cdb0:	461c      	mov	r4, r3
 801cdb2:	4615      	mov	r5, r2
 801cdb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801cdb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801cdb8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801cdbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801cdc0:	6878      	ldr	r0, [r7, #4]
 801cdc2:	370c      	adds	r7, #12
 801cdc4:	46bd      	mov	sp, r7
 801cdc6:	bcb0      	pop	{r4, r5, r7}
 801cdc8:	4770      	bx	lr
 801cdca:	bf00      	nop
 801cdcc:	20000650 	.word	0x20000650
 801cdd0:	0801c69f 	.word	0x0801c69f
 801cdd4:	0801c6cd 	.word	0x0801c6cd
 801cdd8:	0801cb85 	.word	0x0801cb85

0801cddc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 801cddc:	b580      	push	{r7, lr}
 801cdde:	b08a      	sub	sp, #40	; 0x28
 801cde0:	af02      	add	r7, sp, #8
 801cde2:	60f8      	str	r0, [r7, #12]
 801cde4:	607b      	str	r3, [r7, #4]
 801cde6:	460b      	mov	r3, r1
 801cde8:	72fb      	strb	r3, [r7, #11]
 801cdea:	4613      	mov	r3, r2
 801cdec:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 801cdee:	7abb      	ldrb	r3, [r7, #10]
 801cdf0:	2b01      	cmp	r3, #1
 801cdf2:	d03e      	beq.n	801ce72 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x96>
    double real_multiplier = 0.0;
 801cdf4:	f04f 0200 	mov.w	r2, #0
 801cdf8:	f04f 0300 	mov.w	r3, #0
 801cdfc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 801ce00:	f107 0310 	add.w	r3, r7, #16
 801ce04:	9301      	str	r3, [sp, #4]
 801ce06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce08:	9300      	str	r3, [sp, #0]
 801ce0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ce0e:	6879      	ldr	r1, [r7, #4]
 801ce10:	68f8      	ldr	r0, [r7, #12]
 801ce12:	f7fd fcb5 	bl	801a780 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 801ce16:	4603      	mov	r3, r0
 801ce18:	77fb      	strb	r3, [r7, #31]
 801ce1a:	7ffb      	ldrb	r3, [r7, #31]
 801ce1c:	2b00      	cmp	r3, #0
 801ce1e:	d001      	beq.n	801ce24 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 801ce20:	7ffb      	ldrb	r3, [r7, #31]
 801ce22:	e027      	b.n	801ce74 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 801ce24:	ed97 7b04 	vldr	d7, [r7, #16]
 801ce28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ce2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce2c:	3304      	adds	r3, #4
 801ce2e:	4619      	mov	r1, r3
 801ce30:	4610      	mov	r0, r2
 801ce32:	eeb0 0a47 	vmov.f32	s0, s14
 801ce36:	eef0 0a67 	vmov.f32	s1, s15
 801ce3a:	f7fd f9f5 	bl	801a228 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	691a      	ldr	r2, [r3, #16]
 801ce42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce44:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 801ce46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce48:	691a      	ldr	r2, [r3, #16]
 801ce4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce4c:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 801ce4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce50:	691a      	ldr	r2, [r3, #16]
 801ce52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce54:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 801ce56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce58:	f103 0208 	add.w	r2, r3, #8
 801ce5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce5e:	330c      	adds	r3, #12
 801ce60:	7af9      	ldrb	r1, [r7, #11]
 801ce62:	9300      	str	r3, [sp, #0]
 801ce64:	4613      	mov	r3, r2
 801ce66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ce68:	68f8      	ldr	r0, [r7, #12]
 801ce6a:	f7fd fe15 	bl	801aa98 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 801ce6e:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 801ce70:	e000      	b.n	801ce74 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
  }
  return kTfLiteOk;
 801ce72:	2300      	movs	r3, #0
}
 801ce74:	4618      	mov	r0, r3
 801ce76:	3720      	adds	r7, #32
 801ce78:	46bd      	mov	sp, r7
 801ce7a:	bd80      	pop	{r7, pc}

0801ce7c <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801ce7c:	b480      	push	{r7}
 801ce7e:	b083      	sub	sp, #12
 801ce80:	af00      	add	r7, sp, #0
 801ce82:	6078      	str	r0, [r7, #4]
 801ce84:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801ce86:	687b      	ldr	r3, [r7, #4]
 801ce88:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ce8c:	683b      	ldr	r3, [r7, #0]
 801ce8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ce92:	429a      	cmp	r2, r3
 801ce94:	da01      	bge.n	801ce9a <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 801ce96:	683b      	ldr	r3, [r7, #0]
 801ce98:	e000      	b.n	801ce9c <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 801ce9a:	687b      	ldr	r3, [r7, #4]
    }
 801ce9c:	4618      	mov	r0, r3
 801ce9e:	370c      	adds	r7, #12
 801cea0:	46bd      	mov	sp, r7
 801cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cea6:	4770      	bx	lr

0801cea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 801cea8:	b580      	push	{r7, lr}
 801ceaa:	b086      	sub	sp, #24
 801ceac:	af00      	add	r7, sp, #0
 801ceae:	6078      	str	r0, [r7, #4]
 801ceb0:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 801ceb2:	683b      	ldr	r3, [r7, #0]
 801ceb4:	2b00      	cmp	r3, #0
 801ceb6:	d003      	beq.n	801cec0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 801ceb8:	683b      	ldr	r3, [r7, #0]
 801ceba:	685b      	ldr	r3, [r3, #4]
 801cebc:	2b00      	cmp	r3, #0
 801cebe:	d103      	bne.n	801cec8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 801cec0:	6878      	ldr	r0, [r7, #4]
 801cec2:	f7fd fe65 	bl	801ab90 <_ZN6tflite12RuntimeShapeC1Ev>
 801cec6:	e00d      	b.n	801cee4 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 801cec8:	683b      	ldr	r3, [r7, #0]
 801ceca:	685b      	ldr	r3, [r3, #4]
 801cecc:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 801cece:	697b      	ldr	r3, [r7, #20]
 801ced0:	681b      	ldr	r3, [r3, #0]
 801ced2:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 801ced4:	697b      	ldr	r3, [r7, #20]
 801ced6:	3304      	adds	r3, #4
 801ced8:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 801ceda:	68fa      	ldr	r2, [r7, #12]
 801cedc:	6939      	ldr	r1, [r7, #16]
 801cede:	6878      	ldr	r0, [r7, #4]
 801cee0:	f7fd fe64 	bl	801abac <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 801cee4:	6878      	ldr	r0, [r7, #4]
 801cee6:	3718      	adds	r7, #24
 801cee8:	46bd      	mov	sp, r7
 801ceea:	bd80      	pop	{r7, pc}

0801ceec <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 801ceec:	b580      	push	{r7, lr}
 801ceee:	b086      	sub	sp, #24
 801cef0:	af00      	add	r7, sp, #0
 801cef2:	6078      	str	r0, [r7, #4]
 801cef4:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 801cef6:	6878      	ldr	r0, [r7, #4]
 801cef8:	f7fd fe81 	bl	801abfe <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801cefc:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 801cefe:	683b      	ldr	r3, [r7, #0]
 801cf00:	2b00      	cmp	r3, #0
 801cf02:	db03      	blt.n	801cf0c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 801cf04:	683a      	ldr	r2, [r7, #0]
 801cf06:	68fb      	ldr	r3, [r7, #12]
 801cf08:	429a      	cmp	r2, r3
 801cf0a:	db01      	blt.n	801cf10 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 801cf0c:	f005 fcf6 	bl	80228fc <abort>
  const auto* dims_data = shape.DimsData();
 801cf10:	6878      	ldr	r0, [r7, #4]
 801cf12:	f7fd ffa6 	bl	801ae62 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 801cf16:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 801cf18:	2301      	movs	r3, #1
 801cf1a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 801cf1c:	2300      	movs	r3, #0
 801cf1e:	613b      	str	r3, [r7, #16]
 801cf20:	693a      	ldr	r2, [r7, #16]
 801cf22:	68fb      	ldr	r3, [r7, #12]
 801cf24:	429a      	cmp	r2, r3
 801cf26:	da12      	bge.n	801cf4e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 801cf28:	693a      	ldr	r2, [r7, #16]
 801cf2a:	683b      	ldr	r3, [r7, #0]
 801cf2c:	429a      	cmp	r2, r3
 801cf2e:	d005      	beq.n	801cf3c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 801cf30:	693b      	ldr	r3, [r7, #16]
 801cf32:	009b      	lsls	r3, r3, #2
 801cf34:	68ba      	ldr	r2, [r7, #8]
 801cf36:	4413      	add	r3, r2
 801cf38:	681b      	ldr	r3, [r3, #0]
 801cf3a:	e000      	b.n	801cf3e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 801cf3c:	2301      	movs	r3, #1
 801cf3e:	697a      	ldr	r2, [r7, #20]
 801cf40:	fb02 f303 	mul.w	r3, r2, r3
 801cf44:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 801cf46:	693b      	ldr	r3, [r7, #16]
 801cf48:	3301      	adds	r3, #1
 801cf4a:	613b      	str	r3, [r7, #16]
 801cf4c:	e7e8      	b.n	801cf20 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 801cf4e:	697b      	ldr	r3, [r7, #20]
}
 801cf50:	4618      	mov	r0, r3
 801cf52:	3718      	adds	r7, #24
 801cf54:	46bd      	mov	sp, r7
 801cf56:	bd80      	pop	{r7, pc}

0801cf58 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 801cf58:	b590      	push	{r4, r7, lr}
 801cf5a:	b087      	sub	sp, #28
 801cf5c:	af00      	add	r7, sp, #0
 801cf5e:	60f8      	str	r0, [r7, #12]
 801cf60:	60b9      	str	r1, [r7, #8]
 801cf62:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 801cf64:	68f8      	ldr	r0, [r7, #12]
 801cf66:	f7fd fe4a 	bl	801abfe <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801cf6a:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 801cf6c:	2300      	movs	r3, #0
 801cf6e:	617b      	str	r3, [r7, #20]
 801cf70:	697a      	ldr	r2, [r7, #20]
 801cf72:	693b      	ldr	r3, [r7, #16]
 801cf74:	429a      	cmp	r2, r3
 801cf76:	da15      	bge.n	801cfa4 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 801cf78:	697a      	ldr	r2, [r7, #20]
 801cf7a:	68bb      	ldr	r3, [r7, #8]
 801cf7c:	429a      	cmp	r2, r3
 801cf7e:	d00d      	beq.n	801cf9c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 801cf80:	6979      	ldr	r1, [r7, #20]
 801cf82:	68f8      	ldr	r0, [r7, #12]
 801cf84:	f7fd ff48 	bl	801ae18 <_ZNK6tflite12RuntimeShape4DimsEi>
 801cf88:	4604      	mov	r4, r0
 801cf8a:	6979      	ldr	r1, [r7, #20]
 801cf8c:	6878      	ldr	r0, [r7, #4]
 801cf8e:	f7fd ff43 	bl	801ae18 <_ZNK6tflite12RuntimeShape4DimsEi>
 801cf92:	4603      	mov	r3, r0
 801cf94:	429c      	cmp	r4, r3
 801cf96:	d001      	beq.n	801cf9c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 801cf98:	f005 fcb0 	bl	80228fc <abort>
  for (int i = 0; i < dims_count; ++i) {
 801cf9c:	697b      	ldr	r3, [r7, #20]
 801cf9e:	3301      	adds	r3, #1
 801cfa0:	617b      	str	r3, [r7, #20]
 801cfa2:	e7e5      	b.n	801cf70 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 801cfa4:	68b9      	ldr	r1, [r7, #8]
 801cfa6:	68f8      	ldr	r0, [r7, #12]
 801cfa8:	f7ff ffa0 	bl	801ceec <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801cfac:	4603      	mov	r3, r0
}
 801cfae:	4618      	mov	r0, r3
 801cfb0:	371c      	adds	r7, #28
 801cfb2:	46bd      	mov	sp, r7
 801cfb4:	bd90      	pop	{r4, r7, pc}

0801cfb6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 801cfb6:	b580      	push	{r7, lr}
 801cfb8:	b082      	sub	sp, #8
 801cfba:	af00      	add	r7, sp, #0
 801cfbc:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 801cfbe:	2100      	movs	r1, #0
 801cfc0:	6878      	ldr	r0, [r7, #4]
 801cfc2:	f7fe fb23 	bl	801b60c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801cfc6:	4603      	mov	r3, r0
}
 801cfc8:	4618      	mov	r0, r3
 801cfca:	3708      	adds	r7, #8
 801cfcc:	46bd      	mov	sp, r7
 801cfce:	bd80      	pop	{r7, pc}

0801cfd0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801cfd0:	b580      	push	{r7, lr}
 801cfd2:	b082      	sub	sp, #8
 801cfd4:	af00      	add	r7, sp, #0
 801cfd6:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801cfd8:	6878      	ldr	r0, [r7, #4]
 801cfda:	f000 f805 	bl	801cfe8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 801cfde:	4603      	mov	r3, r0
}
 801cfe0:	4618      	mov	r0, r3
 801cfe2:	3708      	adds	r7, #8
 801cfe4:	46bd      	mov	sp, r7
 801cfe6:	bd80      	pop	{r7, pc}

0801cfe8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801cfe8:	b580      	push	{r7, lr}
 801cfea:	b082      	sub	sp, #8
 801cfec:	af00      	add	r7, sp, #0
 801cfee:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801cff0:	2101      	movs	r1, #1
 801cff2:	6878      	ldr	r0, [r7, #4]
 801cff4:	f7fe fb0a 	bl	801b60c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801cff8:	4603      	mov	r3, r0
  }
 801cffa:	4618      	mov	r0, r3
 801cffc:	3708      	adds	r7, #8
 801cffe:	46bd      	mov	sp, r7
 801d000:	bd80      	pop	{r7, pc}

0801d002 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 801d002:	b590      	push	{r4, r7, lr}
 801d004:	b085      	sub	sp, #20
 801d006:	af00      	add	r7, sp, #0
 801d008:	60f8      	str	r0, [r7, #12]
 801d00a:	60b9      	str	r1, [r7, #8]
 801d00c:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 801d00e:	f107 0308 	add.w	r3, r7, #8
 801d012:	4618      	mov	r0, r3
 801d014:	f7ff f8b4 	bl	801c180 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d018:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801d01a:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 801d01c:	1d3b      	adds	r3, r7, #4
 801d01e:	4618      	mov	r0, r3
 801d020:	f7ff f8ae 	bl	801c180 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d024:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801d026:	681b      	ldr	r3, [r3, #0]
 801d028:	461a      	mov	r2, r3
 801d02a:	4621      	mov	r1, r4
 801d02c:	68f8      	ldr	r0, [r7, #12]
 801d02e:	f7ff fb0b 	bl	801c648 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801d032:	4603      	mov	r3, r0
 801d034:	4618      	mov	r0, r3
 801d036:	f7ff f831 	bl	801c09c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801d03a:	4603      	mov	r3, r0
}
 801d03c:	4618      	mov	r0, r3
 801d03e:	3714      	adds	r7, #20
 801d040:	46bd      	mov	sp, r7
 801d042:	bd90      	pop	{r4, r7, pc}

0801d044 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 801d044:	b580      	push	{r7, lr}
 801d046:	b082      	sub	sp, #8
 801d048:	af00      	add	r7, sp, #0
 801d04a:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 801d04c:	687b      	ldr	r3, [r7, #4]
 801d04e:	2b00      	cmp	r3, #0
 801d050:	bf0c      	ite	eq
 801d052:	2301      	moveq	r3, #1
 801d054:	2300      	movne	r3, #0
 801d056:	b2db      	uxtb	r3, r3
 801d058:	4618      	mov	r0, r3
 801d05a:	f7fe fef9 	bl	801be50 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801d05e:	4603      	mov	r3, r0
}
 801d060:	4618      	mov	r0, r3
 801d062:	3708      	adds	r7, #8
 801d064:	46bd      	mov	sp, r7
 801d066:	bd80      	pop	{r7, pc}

0801d068 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 801d068:	b580      	push	{r7, lr}
 801d06a:	b08a      	sub	sp, #40	; 0x28
 801d06c:	af00      	add	r7, sp, #0
 801d06e:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 801d070:	482c      	ldr	r0, [pc, #176]	; (801d124 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 801d072:	f7ff ffa0 	bl	801cfb6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801d076:	4603      	mov	r3, r0
 801d078:	4618      	mov	r0, r3
 801d07a:	f7ff f88c 	bl	801c196 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801d07e:	4603      	mov	r3, r0
 801d080:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 801d082:	4829      	ldr	r0, [pc, #164]	; (801d128 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 801d084:	f7ff ff97 	bl	801cfb6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801d088:	4603      	mov	r3, r0
 801d08a:	4618      	mov	r0, r3
 801d08c:	f7ff f883 	bl	801c196 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801d090:	4603      	mov	r3, r0
 801d092:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 801d094:	f000 f86c 	bl	801d170 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 801d098:	4603      	mov	r3, r0
 801d09a:	4619      	mov	r1, r3
 801d09c:	6878      	ldr	r0, [r7, #4]
 801d09e:	f000 f870 	bl	801d182 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801d0a2:	4603      	mov	r3, r0
 801d0a4:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 801d0a6:	69f9      	ldr	r1, [r7, #28]
 801d0a8:	69f8      	ldr	r0, [r7, #28]
 801d0aa:	f000 f83f 	bl	801d12c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801d0ae:	4603      	mov	r3, r0
 801d0b0:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 801d0b2:	69f9      	ldr	r1, [r7, #28]
 801d0b4:	69b8      	ldr	r0, [r7, #24]
 801d0b6:	f000 f839 	bl	801d12c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801d0ba:	4603      	mov	r3, r0
 801d0bc:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 801d0be:	69b9      	ldr	r1, [r7, #24]
 801d0c0:	69b8      	ldr	r0, [r7, #24]
 801d0c2:	f000 f833 	bl	801d12c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801d0c6:	4603      	mov	r3, r0
 801d0c8:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 801d0ca:	6938      	ldr	r0, [r7, #16]
 801d0cc:	f000 f877 	bl	801d1be <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 801d0d0:	4603      	mov	r3, r0
 801d0d2:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 801d0d4:	6979      	ldr	r1, [r7, #20]
 801d0d6:	68f8      	ldr	r0, [r7, #12]
 801d0d8:	f000 f853 	bl	801d182 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801d0dc:	4603      	mov	r3, r0
 801d0de:	6a39      	ldr	r1, [r7, #32]
 801d0e0:	4618      	mov	r0, r3
 801d0e2:	f000 f823 	bl	801d12c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801d0e6:	4603      	mov	r3, r0
 801d0e8:	69b9      	ldr	r1, [r7, #24]
 801d0ea:	4618      	mov	r0, r3
 801d0ec:	f000 f849 	bl	801d182 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801d0f0:	4603      	mov	r3, r0
 801d0f2:	4618      	mov	r0, r3
 801d0f4:	f000 f879 	bl	801d1ea <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 801d0f8:	4603      	mov	r3, r0
 801d0fa:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 801d0fc:	68b9      	ldr	r1, [r7, #8]
 801d0fe:	69f8      	ldr	r0, [r7, #28]
 801d100:	f000 f83f 	bl	801d182 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801d104:	4603      	mov	r3, r0
 801d106:	4619      	mov	r1, r3
 801d108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d10a:	f000 f80f 	bl	801d12c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801d10e:	4603      	mov	r3, r0
 801d110:	4619      	mov	r1, r3
 801d112:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d114:	f000 f87f 	bl	801d216 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801d118:	4603      	mov	r3, r0
}
 801d11a:	4618      	mov	r0, r3
 801d11c:	3728      	adds	r7, #40	; 0x28
 801d11e:	46bd      	mov	sp, r7
 801d120:	bd80      	pop	{r7, pc}
 801d122:	bf00      	nop
 801d124:	70f5a894 	.word	0x70f5a894
 801d128:	2aaaaaab 	.word	0x2aaaaaab

0801d12c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801d12c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d12e:	b085      	sub	sp, #20
 801d130:	af00      	add	r7, sp, #0
 801d132:	6078      	str	r0, [r7, #4]
 801d134:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801d136:	1d3b      	adds	r3, r7, #4
 801d138:	4618      	mov	r0, r3
 801d13a:	f7ff f821 	bl	801c180 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d13e:	4603      	mov	r3, r0
 801d140:	681d      	ldr	r5, [r3, #0]
 801d142:	463b      	mov	r3, r7
 801d144:	4618      	mov	r0, r3
 801d146:	f7ff f81b 	bl	801c180 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d14a:	4603      	mov	r3, r0
 801d14c:	681e      	ldr	r6, [r3, #0]
 801d14e:	f107 030c 	add.w	r3, r7, #12
 801d152:	4618      	mov	r0, r3
 801d154:	f7ff f814 	bl	801c180 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d158:	4604      	mov	r4, r0
 801d15a:	4631      	mov	r1, r6
 801d15c:	4628      	mov	r0, r5
 801d15e:	f7fd fde5 	bl	801ad2c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801d162:	4603      	mov	r3, r0
 801d164:	6023      	str	r3, [r4, #0]
  return c;
 801d166:	68fb      	ldr	r3, [r7, #12]
}
 801d168:	4618      	mov	r0, r3
 801d16a:	3714      	adds	r7, #20
 801d16c:	46bd      	mov	sp, r7
 801d16e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d170 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 801d170:	b580      	push	{r7, lr}
 801d172:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 801d174:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801d178:	f7ff f80d 	bl	801c196 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801d17c:	4603      	mov	r3, r0
  }
 801d17e:	4618      	mov	r0, r3
 801d180:	bd80      	pop	{r7, pc}

0801d182 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801d182:	b590      	push	{r4, r7, lr}
 801d184:	b083      	sub	sp, #12
 801d186:	af00      	add	r7, sp, #0
 801d188:	6078      	str	r0, [r7, #4]
 801d18a:	6039      	str	r1, [r7, #0]
 801d18c:	1d3b      	adds	r3, r7, #4
 801d18e:	4618      	mov	r0, r3
 801d190:	f7fe fff6 	bl	801c180 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d194:	4603      	mov	r3, r0
 801d196:	681c      	ldr	r4, [r3, #0]
 801d198:	463b      	mov	r3, r7
 801d19a:	4618      	mov	r0, r3
 801d19c:	f7fe fff0 	bl	801c180 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d1a0:	4603      	mov	r3, r0
 801d1a2:	681b      	ldr	r3, [r3, #0]
 801d1a4:	4619      	mov	r1, r3
 801d1a6:	4620      	mov	r0, r4
 801d1a8:	f7fe fe30 	bl	801be0c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801d1ac:	4603      	mov	r3, r0
 801d1ae:	4618      	mov	r0, r3
 801d1b0:	f7fe ff74 	bl	801c09c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801d1b4:	4603      	mov	r3, r0
 801d1b6:	4618      	mov	r0, r3
 801d1b8:	370c      	adds	r7, #12
 801d1ba:	46bd      	mov	sp, r7
 801d1bc:	bd90      	pop	{r4, r7, pc}

0801d1be <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 801d1be:	b580      	push	{r7, lr}
 801d1c0:	b082      	sub	sp, #8
 801d1c2:	af00      	add	r7, sp, #0
 801d1c4:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801d1c6:	1d3b      	adds	r3, r7, #4
 801d1c8:	4618      	mov	r0, r3
 801d1ca:	f7fe ffd9 	bl	801c180 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d1ce:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801d1d0:	681b      	ldr	r3, [r3, #0]
 801d1d2:	4618      	mov	r0, r3
 801d1d4:	f000 f83d 	bl	801d252 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 801d1d8:	4603      	mov	r3, r0
 801d1da:	4618      	mov	r0, r3
 801d1dc:	f7fe ff5e 	bl	801c09c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801d1e0:	4603      	mov	r3, r0
}
 801d1e2:	4618      	mov	r0, r3
 801d1e4:	3708      	adds	r7, #8
 801d1e6:	46bd      	mov	sp, r7
 801d1e8:	bd80      	pop	{r7, pc}

0801d1ea <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 801d1ea:	b580      	push	{r7, lr}
 801d1ec:	b082      	sub	sp, #8
 801d1ee:	af00      	add	r7, sp, #0
 801d1f0:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801d1f2:	1d3b      	adds	r3, r7, #4
 801d1f4:	4618      	mov	r0, r3
 801d1f6:	f7fe ffc3 	bl	801c180 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d1fa:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801d1fc:	681b      	ldr	r3, [r3, #0]
 801d1fe:	4618      	mov	r0, r3
 801d200:	f7ff fee6 	bl	801cfd0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 801d204:	4603      	mov	r3, r0
 801d206:	4618      	mov	r0, r3
 801d208:	f7fe ff48 	bl	801c09c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801d20c:	4603      	mov	r3, r0
}
 801d20e:	4618      	mov	r0, r3
 801d210:	3708      	adds	r7, #8
 801d212:	46bd      	mov	sp, r7
 801d214:	bd80      	pop	{r7, pc}

0801d216 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 801d216:	b590      	push	{r4, r7, lr}
 801d218:	b083      	sub	sp, #12
 801d21a:	af00      	add	r7, sp, #0
 801d21c:	6078      	str	r0, [r7, #4]
 801d21e:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 801d220:	1d3b      	adds	r3, r7, #4
 801d222:	4618      	mov	r0, r3
 801d224:	f7fe ffac 	bl	801c180 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d228:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801d22a:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 801d22c:	463b      	mov	r3, r7
 801d22e:	4618      	mov	r0, r3
 801d230:	f7fe ffa6 	bl	801c180 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801d234:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801d236:	681b      	ldr	r3, [r3, #0]
 801d238:	4619      	mov	r1, r3
 801d23a:	4620      	mov	r0, r4
 801d23c:	f000 f815 	bl	801d26a <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 801d240:	4603      	mov	r3, r0
 801d242:	4618      	mov	r0, r3
 801d244:	f7fe ff2a 	bl	801c09c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801d248:	4603      	mov	r3, r0
}
 801d24a:	4618      	mov	r0, r3
 801d24c:	370c      	adds	r7, #12
 801d24e:	46bd      	mov	sp, r7
 801d250:	bd90      	pop	{r4, r7, pc}

0801d252 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801d252:	b580      	push	{r7, lr}
 801d254:	b082      	sub	sp, #8
 801d256:	af00      	add	r7, sp, #0
 801d258:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801d25a:	6878      	ldr	r0, [r7, #4]
 801d25c:	f000 f813 	bl	801d286 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 801d260:	4603      	mov	r3, r0
}
 801d262:	4618      	mov	r0, r3
 801d264:	3708      	adds	r7, #8
 801d266:	46bd      	mov	sp, r7
 801d268:	bd80      	pop	{r7, pc}

0801d26a <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 801d26a:	b580      	push	{r7, lr}
 801d26c:	b082      	sub	sp, #8
 801d26e:	af00      	add	r7, sp, #0
 801d270:	6078      	str	r0, [r7, #4]
 801d272:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 801d274:	6839      	ldr	r1, [r7, #0]
 801d276:	6878      	ldr	r0, [r7, #4]
 801d278:	f000 f812 	bl	801d2a0 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 801d27c:	4603      	mov	r3, r0
}
 801d27e:	4618      	mov	r0, r3
 801d280:	3708      	adds	r7, #8
 801d282:	46bd      	mov	sp, r7
 801d284:	bd80      	pop	{r7, pc}

0801d286 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801d286:	b580      	push	{r7, lr}
 801d288:	b082      	sub	sp, #8
 801d28a:	af00      	add	r7, sp, #0
 801d28c:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801d28e:	2102      	movs	r1, #2
 801d290:	6878      	ldr	r0, [r7, #4]
 801d292:	f7fe f9bb 	bl	801b60c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801d296:	4603      	mov	r3, r0
  }
 801d298:	4618      	mov	r0, r3
 801d29a:	3708      	adds	r7, #8
 801d29c:	46bd      	mov	sp, r7
 801d29e:	bd80      	pop	{r7, pc}

0801d2a0 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 801d2a0:	b580      	push	{r7, lr}
 801d2a2:	b082      	sub	sp, #8
 801d2a4:	af00      	add	r7, sp, #0
 801d2a6:	6078      	str	r0, [r7, #4]
 801d2a8:	6039      	str	r1, [r7, #0]
 801d2aa:	6839      	ldr	r1, [r7, #0]
 801d2ac:	6878      	ldr	r0, [r7, #4]
 801d2ae:	f7fe fdad 	bl	801be0c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801d2b2:	4603      	mov	r3, r0
 801d2b4:	4618      	mov	r0, r3
 801d2b6:	3708      	adds	r7, #8
 801d2b8:	46bd      	mov	sp, r7
 801d2ba:	bd80      	pop	{r7, pc}

0801d2bc <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801d2bc:	b480      	push	{r7}
 801d2be:	b083      	sub	sp, #12
 801d2c0:	af00      	add	r7, sp, #0
 801d2c2:	6078      	str	r0, [r7, #4]
 801d2c4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801d2c6:	687b      	ldr	r3, [r7, #4]
 801d2c8:	781a      	ldrb	r2, [r3, #0]
 801d2ca:	683b      	ldr	r3, [r7, #0]
 801d2cc:	781b      	ldrb	r3, [r3, #0]
 801d2ce:	429a      	cmp	r2, r3
 801d2d0:	d201      	bcs.n	801d2d6 <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 801d2d2:	683b      	ldr	r3, [r7, #0]
 801d2d4:	e000      	b.n	801d2d8 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 801d2d6:	687b      	ldr	r3, [r7, #4]
    }
 801d2d8:	4618      	mov	r0, r3
 801d2da:	370c      	adds	r7, #12
 801d2dc:	46bd      	mov	sp, r7
 801d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2e2:	4770      	bx	lr

0801d2e4 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801d2e4:	b480      	push	{r7}
 801d2e6:	b083      	sub	sp, #12
 801d2e8:	af00      	add	r7, sp, #0
 801d2ea:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801d2ec:	687b      	ldr	r3, [r7, #4]
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	d002      	beq.n	801d2f8 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 801d2f2:	687b      	ldr	r3, [r7, #4]
 801d2f4:	681b      	ldr	r3, [r3, #0]
 801d2f6:	e000      	b.n	801d2fa <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 801d2f8:	2300      	movs	r3, #0
}
 801d2fa:	4618      	mov	r0, r3
 801d2fc:	370c      	adds	r7, #12
 801d2fe:	46bd      	mov	sp, r7
 801d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d304:	4770      	bx	lr
	...

0801d308 <_ZN6tflite26generic_int16_table_lookupEsPKs>:
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 801d308:	b580      	push	{r7, lr}
 801d30a:	b086      	sub	sp, #24
 801d30c:	af00      	add	r7, sp, #0
 801d30e:	4603      	mov	r3, r0
 801d310:	6039      	str	r1, [r7, #0]
 801d312:	80fb      	strh	r3, [r7, #6]
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 801d314:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801d318:	11db      	asrs	r3, r3, #7
 801d31a:	b21b      	sxth	r3, r3
 801d31c:	b29b      	uxth	r3, r3
 801d31e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801d322:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 801d324:	8afb      	ldrh	r3, [r7, #22]
 801d326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d32a:	d306      	bcc.n	801d33a <_ZN6tflite26generic_int16_table_lookupEsPKs+0x32>
 801d32c:	4b1a      	ldr	r3, [pc, #104]	; (801d398 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 801d32e:	4a1b      	ldr	r2, [pc, #108]	; (801d39c <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 801d330:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801d334:	481a      	ldr	r0, [pc, #104]	; (801d3a0 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 801d336:	f005 fae9 	bl	802290c <__assert_func>
  int16_t offset = value & 0x7f;
 801d33a:	88fb      	ldrh	r3, [r7, #6]
 801d33c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d340:	82bb      	strh	r3, [r7, #20]
  int16_t base = lut[index];
 801d342:	8afb      	ldrh	r3, [r7, #22]
 801d344:	005b      	lsls	r3, r3, #1
 801d346:	683a      	ldr	r2, [r7, #0]
 801d348:	4413      	add	r3, r2
 801d34a:	881b      	ldrh	r3, [r3, #0]
 801d34c:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 801d34e:	8afb      	ldrh	r3, [r7, #22]
 801d350:	3301      	adds	r3, #1
 801d352:	005b      	lsls	r3, r3, #1
 801d354:	683a      	ldr	r2, [r7, #0]
 801d356:	4413      	add	r3, r2
 801d358:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d35c:	b29a      	uxth	r2, r3
 801d35e:	8afb      	ldrh	r3, [r7, #22]
 801d360:	005b      	lsls	r3, r3, #1
 801d362:	6839      	ldr	r1, [r7, #0]
 801d364:	440b      	add	r3, r1
 801d366:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d36a:	b29b      	uxth	r3, r3
 801d36c:	1ad3      	subs	r3, r2, r3
 801d36e:	b29b      	uxth	r3, r3
 801d370:	823b      	strh	r3, [r7, #16]
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 801d372:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801d376:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d37a:	fb02 f303 	mul.w	r3, r2, r3
 801d37e:	3340      	adds	r3, #64	; 0x40
 801d380:	11db      	asrs	r3, r3, #7
 801d382:	60fb      	str	r3, [r7, #12]
  return base + delta;
 801d384:	68fb      	ldr	r3, [r7, #12]
 801d386:	b29a      	uxth	r2, r3
 801d388:	8a7b      	ldrh	r3, [r7, #18]
 801d38a:	4413      	add	r3, r2
 801d38c:	b29b      	uxth	r3, r3
 801d38e:	b21b      	sxth	r3, r3
}
 801d390:	4618      	mov	r0, r3
 801d392:	3718      	adds	r7, #24
 801d394:	46bd      	mov	sp, r7
 801d396:	bd80      	pop	{r7, pc}
 801d398:	08028294 	.word	0x08028294
 801d39c:	080282c0 	.word	0x080282c0
 801d3a0:	08028304 	.word	0x08028304

0801d3a4 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 801d3a4:	b580      	push	{r7, lr}
 801d3a6:	b08a      	sub	sp, #40	; 0x28
 801d3a8:	af00      	add	r7, sp, #0
 801d3aa:	60f8      	str	r0, [r7, #12]
 801d3ac:	60b9      	str	r1, [r7, #8]
 801d3ae:	607a      	str	r2, [r7, #4]
 801d3b0:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 801d3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3b4:	687a      	ldr	r2, [r7, #4]
 801d3b6:	fb03 f202 	mul.w	r2, r3, r2
 801d3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d3bc:	4413      	add	r3, r2
 801d3be:	005b      	lsls	r3, r3, #1
 801d3c0:	68ba      	ldr	r2, [r7, #8]
 801d3c2:	4413      	add	r3, r2
 801d3c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d3c8:	461a      	mov	r2, r3
 801d3ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801d3ce:	1ad3      	subs	r3, r2, r3
 801d3d0:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 801d3d2:	68fb      	ldr	r3, [r7, #12]
 801d3d4:	6899      	ldr	r1, [r3, #8]
 801d3d6:	68fb      	ldr	r3, [r7, #12]
 801d3d8:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 801d3da:	461a      	mov	r2, r3
 801d3dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d3de:	f7fd fdab 	bl	801af38 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801d3e2:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 801d3e4:	6a3b      	ldr	r3, [r7, #32]
 801d3e6:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 801d3ea:	337f      	adds	r3, #127	; 0x7f
 801d3ec:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 801d3ee:	4b12      	ldr	r3, [pc, #72]	; (801d438 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 801d3f0:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 801d3f2:	f107 0214 	add.w	r2, r7, #20
 801d3f6:	f107 0310 	add.w	r3, r7, #16
 801d3fa:	4611      	mov	r1, r2
 801d3fc:	4618      	mov	r0, r3
 801d3fe:	f7fd fbb3 	bl	801ab68 <_ZSt3maxIlERKT_S2_S2_>
 801d402:	4602      	mov	r2, r0
 801d404:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d408:	61bb      	str	r3, [r7, #24]
 801d40a:	f107 0318 	add.w	r3, r7, #24
 801d40e:	4619      	mov	r1, r3
 801d410:	4610      	mov	r0, r2
 801d412:	f7fd fb95 	bl	801ab40 <_ZSt3minIlERKT_S2_S2_>
 801d416:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 801d418:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 801d41a:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 801d41c:	68fb      	ldr	r3, [r7, #12]
 801d41e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801d420:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801d424:	4611      	mov	r1, r2
 801d426:	4618      	mov	r0, r3
 801d428:	f7ff ff6e 	bl	801d308 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 801d42c:	4603      	mov	r3, r0
}
 801d42e:	4618      	mov	r0, r3
 801d430:	3728      	adds	r7, #40	; 0x28
 801d432:	46bd      	mov	sp, r7
 801d434:	bd80      	pop	{r7, pc}
 801d436:	bf00      	nop
 801d438:	ffff8000 	.word	0xffff8000

0801d43c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 801d43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d440:	b0ab      	sub	sp, #172	; 0xac
 801d442:	af02      	add	r7, sp, #8
 801d444:	63f8      	str	r0, [r7, #60]	; 0x3c
 801d446:	63b9      	str	r1, [r7, #56]	; 0x38
 801d448:	637a      	str	r2, [r7, #52]	; 0x34
 801d44a:	633b      	str	r3, [r7, #48]	; 0x30
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801d44c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d44e:	f7fd fbd6 	bl	801abfe <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801d452:	4603      	mov	r3, r0
 801d454:	3b01      	subs	r3, #1
 801d456:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801d45a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d45c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801d460:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d462:	f7ff fd79 	bl	801cf58 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801d466:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801d46a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801d46e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d470:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801d474:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d476:	f7fe fd31 	bl	801bedc <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801d47a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

  for (int i = 0; i < outer_size; ++i) {
 801d47e:	2300      	movs	r3, #0
 801d480:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801d484:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d488:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801d48c:	429a      	cmp	r2, r3
 801d48e:	f280 8157 	bge.w	801d740 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x304>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 801d492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d496:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 801d49a:	2300      	movs	r3, #0
 801d49c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801d4a0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801d4a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d4a8:	429a      	cmp	r2, r3
 801d4aa:	da1c      	bge.n	801d4e6 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xaa>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801d4ac:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d4b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d4b4:	fb03 f202 	mul.w	r2, r3, r2
 801d4b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d4bc:	4413      	add	r3, r2
 801d4be:	005a      	lsls	r2, r3, #1
 801d4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4c2:	441a      	add	r2, r3
 801d4c4:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 801d4c8:	4611      	mov	r1, r2
 801d4ca:	4618      	mov	r0, r3
 801d4cc:	f7ff fcd6 	bl	801ce7c <_ZSt3maxIsERKT_S2_S2_>
 801d4d0:	4603      	mov	r3, r0
 801d4d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d4d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 801d4da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d4de:	3301      	adds	r3, #1
 801d4e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801d4e4:	e7dc      	b.n	801d4a0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x64>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 801d4e6:	2300      	movs	r3, #0
 801d4e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int16_t* exp_results_Q015 = output_data + i * depth;
 801d4ec:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d4f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d4f4:	fb02 f303 	mul.w	r3, r2, r3
 801d4f8:	005a      	lsls	r2, r3, #1
 801d4fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801d4fe:	4413      	add	r3, r2
 801d500:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (int c = 0; c < depth; ++c) {
 801d502:	2300      	movs	r3, #0
 801d504:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801d508:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801d50c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d510:	429a      	cmp	r2, r3
 801d512:	da28      	bge.n	801d566 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x12a>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801d514:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
      exp_results_Q015[c] =
 801d518:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d51c:	005a      	lsls	r2, r3, #1
 801d51e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d520:	189c      	adds	r4, r3, r2
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 801d522:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d526:	9301      	str	r3, [sp, #4]
 801d528:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d52c:	9300      	str	r3, [sp, #0]
 801d52e:	460b      	mov	r3, r1
 801d530:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801d534:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d536:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801d538:	f7ff ff34 	bl	801d3a4 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 801d53c:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 801d53e:	8023      	strh	r3, [r4, #0]
      sum_of_exps += exp_results_Q015[c];
 801d540:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d544:	005a      	lsls	r2, r3, #1
 801d546:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d548:	4413      	add	r3, r2
 801d54a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d54e:	461a      	mov	r2, r3
 801d550:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801d554:	4413      	add	r3, r2
 801d556:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int c = 0; c < depth; ++c) {
 801d55a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d55e:	3301      	adds	r3, #1
 801d560:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801d564:	e7d0      	b.n	801d508 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xcc>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 801d566:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801d56a:	4618      	mov	r0, r3
 801d56c:	f7fe fd84 	bl	801c078 <_ZN6tflite17CountLeadingZerosImEEiT_>
 801d570:	4603      	mov	r3, r0
 801d572:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 801d576:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801d57a:	17da      	asrs	r2, r3, #31
 801d57c:	623b      	str	r3, [r7, #32]
 801d57e:	627a      	str	r2, [r7, #36]	; 0x24
 801d580:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801d584:	1e59      	subs	r1, r3, #1
 801d586:	f1a1 0320 	sub.w	r3, r1, #32
 801d58a:	f1c1 0220 	rsb	r2, r1, #32
 801d58e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d590:	fa00 f901 	lsl.w	r9, r0, r1
 801d594:	6a38      	ldr	r0, [r7, #32]
 801d596:	fa00 f303 	lsl.w	r3, r0, r3
 801d59a:	ea49 0903 	orr.w	r9, r9, r3
 801d59e:	6a3b      	ldr	r3, [r7, #32]
 801d5a0:	fa23 f202 	lsr.w	r2, r3, r2
 801d5a4:	ea49 0902 	orr.w	r9, r9, r2
 801d5a8:	6a3b      	ldr	r3, [r7, #32]
 801d5aa:	fa03 f801 	lsl.w	r8, r3, r1
 801d5ae:	f518 5300 	adds.w	r3, r8, #8192	; 0x2000
 801d5b2:	61bb      	str	r3, [r7, #24]
 801d5b4:	f149 0300 	adc.w	r3, r9, #0
 801d5b8:	61fb      	str	r3, [r7, #28]
         (1 << 13)) >>
 801d5ba:	f04f 0200 	mov.w	r2, #0
 801d5be:	f04f 0300 	mov.w	r3, #0
 801d5c2:	69b9      	ldr	r1, [r7, #24]
 801d5c4:	0b8a      	lsrs	r2, r1, #14
 801d5c6:	69f9      	ldr	r1, [r7, #28]
 801d5c8:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 801d5cc:	69f9      	ldr	r1, [r7, #28]
 801d5ce:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 801d5d0:	4613      	mov	r3, r2
 801d5d2:	677b      	str	r3, [r7, #116]	; 0x74
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 801d5d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d5d6:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 801d5da:	64bb      	str	r3, [r7, #72]	; 0x48
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 801d5dc:	4b5b      	ldr	r3, [pc, #364]	; (801d74c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x310>)
 801d5de:	653b      	str	r3, [r7, #80]	; 0x50
                 static_cast<int32_t>(32767)));
 801d5e0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d5e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d5e8:	4611      	mov	r1, r2
 801d5ea:	4618      	mov	r0, r3
 801d5ec:	f7fd fabc 	bl	801ab68 <_ZSt3maxIlERKT_S2_S2_>
 801d5f0:	4602      	mov	r2, r0
 801d5f2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d5f6:	657b      	str	r3, [r7, #84]	; 0x54
 801d5f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801d5fc:	4619      	mov	r1, r3
 801d5fe:	4610      	mov	r0, r2
 801d600:	f7fd fa9e 	bl	801ab40 <_ZSt3minIlERKT_S2_S2_>
 801d604:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 801d606:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 801d608:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 801d60c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d60e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 801d610:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801d614:	4611      	mov	r1, r2
 801d616:	4618      	mov	r0, r3
 801d618:	f7ff fe76 	bl	801d308 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 801d61c:	4603      	mov	r3, r0
 801d61e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 801d622:	2300      	movs	r3, #0
 801d624:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801d628:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801d62c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d630:	429a      	cmp	r2, r3
 801d632:	da7f      	bge.n	801d734 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x2f8>
      uint8_t right_shift = 31 - headroom_plus_one;
 801d634:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801d638:	f1c3 031f 	rsb	r3, r3, #31
 801d63c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      int64_t round = 1 << (right_shift - 1);
 801d640:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801d644:	1e5a      	subs	r2, r3, #1
 801d646:	2301      	movs	r3, #1
 801d648:	4093      	lsls	r3, r2
 801d64a:	17da      	asrs	r2, r3, #31
 801d64c:	603b      	str	r3, [r7, #0]
 801d64e:	607a      	str	r2, [r7, #4]
 801d650:	e9d7 3400 	ldrd	r3, r4, [r7]
 801d654:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801d658:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801d65c:	005a      	lsls	r2, r3, #1
 801d65e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d660:	4413      	add	r3, r2
 801d662:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d666:	b21b      	sxth	r3, r3
 801d668:	17da      	asrs	r2, r3, #31
 801d66a:	613b      	str	r3, [r7, #16]
 801d66c:	617a      	str	r2, [r7, #20]
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 801d66e:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801d672:	17da      	asrs	r2, r3, #31
 801d674:	60bb      	str	r3, [r7, #8]
 801d676:	60fa      	str	r2, [r7, #12]
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801d678:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d67c:	460b      	mov	r3, r1
 801d67e:	68ba      	ldr	r2, [r7, #8]
 801d680:	fb02 f203 	mul.w	r2, r2, r3
 801d684:	68fb      	ldr	r3, [r7, #12]
 801d686:	e9c7 0104 	strd	r0, r1, [r7, #16]
 801d68a:	4601      	mov	r1, r0
 801d68c:	fb01 f303 	mul.w	r3, r1, r3
 801d690:	4413      	add	r3, r2
 801d692:	693a      	ldr	r2, [r7, #16]
 801d694:	68b9      	ldr	r1, [r7, #8]
 801d696:	fba2 ab01 	umull	sl, fp, r2, r1
 801d69a:	445b      	add	r3, fp
 801d69c:	469b      	mov	fp, r3
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 801d69e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801d6a2:	eb1a 0502 	adds.w	r5, sl, r2
 801d6a6:	eb4b 0603 	adc.w	r6, fp, r3
                        round) >>
                       right_shift;
 801d6aa:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
                        round) >>
 801d6ae:	f1c1 0320 	rsb	r3, r1, #32
 801d6b2:	f1b1 0220 	subs.w	r2, r1, #32
 801d6b6:	fa25 f001 	lsr.w	r0, r5, r1
 801d6ba:	62b8      	str	r0, [r7, #40]	; 0x28
 801d6bc:	fa06 f303 	lsl.w	r3, r6, r3
 801d6c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d6c2:	ea40 0003 	orr.w	r0, r0, r3
 801d6c6:	62b8      	str	r0, [r7, #40]	; 0x28
 801d6c8:	d404      	bmi.n	801d6d4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x298>
 801d6ca:	fa46 f202 	asr.w	r2, r6, r2
 801d6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6d0:	4313      	orrs	r3, r2
 801d6d2:	62bb      	str	r3, [r7, #40]	; 0x28
 801d6d4:	fa46 f301 	asr.w	r3, r6, r1
 801d6d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801d6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6dc:	647b      	str	r3, [r7, #68]	; 0x44
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 801d6de:	2300      	movs	r3, #0
 801d6e0:	65bb      	str	r3, [r7, #88]	; 0x58
                   static_cast<int32_t>(32767)));
 801d6e2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801d6e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d6ea:	4611      	mov	r1, r2
 801d6ec:	4618      	mov	r0, r3
 801d6ee:	f7fd fa3b 	bl	801ab68 <_ZSt3maxIlERKT_S2_S2_>
 801d6f2:	4602      	mov	r2, r0
 801d6f4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d6f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d6fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801d6fe:	4619      	mov	r1, r3
 801d700:	4610      	mov	r0, r2
 801d702:	f7fd fa1d 	bl	801ab40 <_ZSt3minIlERKT_S2_S2_>
 801d706:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 801d708:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 801d70a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801d70e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d712:	fb03 f202 	mul.w	r2, r3, r2
 801d716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801d71a:	4413      	add	r3, r2
 801d71c:	005a      	lsls	r2, r3, #1
 801d71e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801d722:	441a      	add	r2, r3
 801d724:	b20b      	sxth	r3, r1
 801d726:	8013      	strh	r3, [r2, #0]
    for (int c = 0; c < depth; ++c) {
 801d728:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801d72c:	3301      	adds	r3, #1
 801d72e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801d732:	e779      	b.n	801d628 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1ec>
  for (int i = 0; i < outer_size; ++i) {
 801d734:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d738:	3301      	adds	r3, #1
 801d73a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801d73e:	e6a1      	b.n	801d484 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x48>
    }
  }
}
 801d740:	bf00      	nop
 801d742:	37a4      	adds	r7, #164	; 0xa4
 801d744:	46bd      	mov	sp, r7
 801d746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d74a:	bf00      	nop
 801d74c:	ffff8000 	.word	0xffff8000

0801d750 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 801d750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d754:	b0bc      	sub	sp, #240	; 0xf0
 801d756:	af04      	add	r7, sp, #16
 801d758:	60f8      	str	r0, [r7, #12]
 801d75a:	60b9      	str	r1, [r7, #8]
 801d75c:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 801d75e:	68fb      	ldr	r3, [r7, #12]
 801d760:	7a1b      	ldrb	r3, [r3, #8]
 801d762:	2b03      	cmp	r3, #3
 801d764:	d127      	bne.n	801d7b6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x66>
    tflite::reference_ops::Softmax(
        op_data, tflite::micro::GetTensorShape(input),
 801d766:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d76a:	68f9      	ldr	r1, [r7, #12]
 801d76c:	4618      	mov	r0, r3
 801d76e:	f7ff fb9b 	bl	801cea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 801d772:	68f8      	ldr	r0, [r7, #12]
 801d774:	f7fe f98e 	bl	801ba94 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 801d778:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<uint8_t>(input),
        tflite::micro::GetTensorShape(output),
 801d77a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801d77e:	68b9      	ldr	r1, [r7, #8]
 801d780:	4618      	mov	r0, r3
 801d782:	f7ff fb91 	bl	801cea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 801d786:	68b8      	ldr	r0, [r7, #8]
 801d788:	f7fe f993 	bl	801bab2 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801d78c:	4602      	mov	r2, r0
 801d78e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801d792:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801d796:	9200      	str	r2, [sp, #0]
 801d798:	4622      	mov	r2, r4
 801d79a:	6878      	ldr	r0, [r7, #4]
 801d79c:	f000 f930 	bl	801da00 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
 801d7a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801d7a4:	4618      	mov	r0, r3
 801d7a6:	f7fd fa14 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 801d7aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d7ae:	4618      	mov	r0, r3
 801d7b0:	f7fd fa0f 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
 801d7b4:	e080      	b.n	801d8b8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
        tflite::micro::GetTensorData<uint8_t>(output));
  } else if (input->type == kTfLiteInt8) {
 801d7b6:	68fb      	ldr	r3, [r7, #12]
 801d7b8:	7a1b      	ldrb	r3, [r3, #8]
 801d7ba:	2b09      	cmp	r3, #9
 801d7bc:	d153      	bne.n	801d866 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x116>
    if (output->type == kTfLiteInt16) {
 801d7be:	68bb      	ldr	r3, [r7, #8]
 801d7c0:	7a1b      	ldrb	r3, [r3, #8]
 801d7c2:	2b07      	cmp	r3, #7
 801d7c4:	d077      	beq.n	801d8b6 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x166>
          op_data, tflite::micro::GetTensorShape(input),
          tflite::micro::GetTensorData<int8_t>(input),
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<int16_t>(output));
    } else {
      const auto input_shape = tflite::micro::GetTensorShape(input);
 801d7c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d7ca:	68f9      	ldr	r1, [r7, #12]
 801d7cc:	4618      	mov	r0, r3
 801d7ce:	f7ff fb6b 	bl	801cea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 801d7d2:	f107 0314 	add.w	r3, r7, #20
 801d7d6:	68b9      	ldr	r1, [r7, #8]
 801d7d8:	4618      	mov	r0, r3
 801d7da:	f7ff fb65 	bl	801cea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 801d7de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d7e2:	4618      	mov	r0, r3
 801d7e4:	f7fd fa0b 	bl	801abfe <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801d7e8:	4603      	mov	r3, r0
 801d7ea:	3b01      	subs	r3, #1
 801d7ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      const int outer_size =
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801d7f0:	f107 0214 	add.w	r2, r7, #20
 801d7f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d7f8:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801d7fc:	4618      	mov	r0, r3
 801d7fe:	f7ff fbab 	bl	801cf58 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801d802:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
      const int depth =
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801d806:	f107 0214 	add.w	r2, r7, #20
 801d80a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801d80e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801d812:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801d816:	f7fe fb61 	bl	801bedc <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801d81a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 801d81e:	68f8      	ldr	r0, [r7, #12]
 801d820:	f7fe f8cc 	bl	801b9bc <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801d824:	4680      	mov	r8, r0
                     depth, op_data.input_multiplier, op_data.input_left_shift,
 801d826:	687b      	ldr	r3, [r7, #4]
 801d828:	689e      	ldr	r6, [r3, #8]
 801d82a:	687b      	ldr	r3, [r7, #4]
 801d82c:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min,
 801d82e:	687b      	ldr	r3, [r7, #4]
 801d830:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 801d832:	68b8      	ldr	r0, [r7, #8]
 801d834:	f7fe f8d1 	bl	801b9da <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801d838:	4603      	mov	r3, r0
 801d83a:	9302      	str	r3, [sp, #8]
 801d83c:	9501      	str	r5, [sp, #4]
 801d83e:	9400      	str	r4, [sp, #0]
 801d840:	4633      	mov	r3, r6
 801d842:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801d846:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801d84a:	4640      	mov	r0, r8
 801d84c:	f7f6 fe3c 	bl	80144c8 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 801d850:	f107 0314 	add.w	r3, r7, #20
 801d854:	4618      	mov	r0, r3
 801d856:	f7fd f9bc 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 801d85a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d85e:	4618      	mov	r0, r3
 801d860:	f7fd f9b7 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
 801d864:	e028      	b.n	801d8b8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
                     tflite::micro::GetTensorData<int8_t>(output));
    }
  } else {
    tflite::reference_ops::SoftmaxInt16(
        op_data, tflite::micro::GetTensorShape(input),
 801d866:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801d86a:	68f9      	ldr	r1, [r7, #12]
 801d86c:	4618      	mov	r0, r3
 801d86e:	f7ff fb1b 	bl	801cea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 801d872:	68f8      	ldr	r0, [r7, #12]
 801d874:	f7fe fb61 	bl	801bf3a <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 801d878:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
 801d87a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801d87e:	68b9      	ldr	r1, [r7, #8]
 801d880:	4618      	mov	r0, r3
 801d882:	f7ff fb11 	bl	801cea8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 801d886:	68b8      	ldr	r0, [r7, #8]
 801d888:	f7ff fd2c 	bl	801d2e4 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 801d88c:	4602      	mov	r2, r0
 801d88e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801d892:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 801d896:	9200      	str	r2, [sp, #0]
 801d898:	4622      	mov	r2, r4
 801d89a:	6878      	ldr	r0, [r7, #4]
 801d89c:	f7ff fdce 	bl	801d43c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 801d8a0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801d8a4:	4618      	mov	r0, r3
 801d8a6:	f7fd f994 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 801d8aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801d8ae:	4618      	mov	r0, r3
 801d8b0:	f7fd f98f 	bl	801abd2 <_ZN6tflite12RuntimeShapeD1Ev>
 801d8b4:	e000      	b.n	801d8b8 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x168>
      return;
 801d8b6:	bf00      	nop
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 801d8b8:	37e0      	adds	r7, #224	; 0xe0
 801d8ba:	46bd      	mov	sp, r7
 801d8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d8c0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 801d8c0:	b5b0      	push	{r4, r5, r7, lr}
 801d8c2:	b09e      	sub	sp, #120	; 0x78
 801d8c4:	af00      	add	r7, sp, #0
 801d8c6:	6078      	str	r0, [r7, #4]
 801d8c8:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 801d8ca:	2200      	movs	r2, #0
 801d8cc:	6839      	ldr	r1, [r7, #0]
 801d8ce:	6878      	ldr	r0, [r7, #4]
 801d8d0:	f7fd fb76 	bl	801afc0 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801d8d4:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 801d8d6:	2200      	movs	r2, #0
 801d8d8:	6839      	ldr	r1, [r7, #0]
 801d8da:	6878      	ldr	r0, [r7, #4]
 801d8dc:	f7fd fb80 	bl	801afe0 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801d8e0:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 801d8e2:	683b      	ldr	r3, [r7, #0]
 801d8e4:	691b      	ldr	r3, [r3, #16]
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	d101      	bne.n	801d8ee <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 801d8ea:	f005 f807 	bl	80228fc <abort>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);
 801d8ee:	683b      	ldr	r3, [r7, #0]
 801d8f0:	691b      	ldr	r3, [r3, #16]
  const SoftmaxParams data =
 801d8f2:	f107 0408 	add.w	r4, r7, #8
 801d8f6:	461d      	mov	r5, r3
 801d8f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d8fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d8fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d8fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d904:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d908:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 801d90c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d90e:	7a1b      	ldrb	r3, [r3, #8]
 801d910:	3b01      	subs	r3, #1
 801d912:	2b08      	cmp	r3, #8
 801d914:	d84a      	bhi.n	801d9ac <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
 801d916:	a201      	add	r2, pc, #4	; (adr r2, 801d91c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
 801d918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d91c:	0801d941 	.word	0x0801d941
 801d920:	0801d9ad 	.word	0x0801d9ad
 801d924:	0801d971 	.word	0x0801d971
 801d928:	0801d9ad 	.word	0x0801d9ad
 801d92c:	0801d9ad 	.word	0x0801d9ad
 801d930:	0801d9ad 	.word	0x0801d9ad
 801d934:	0801d98f 	.word	0x0801d98f
 801d938:	0801d9ad 	.word	0x0801d9ad
 801d93c:	0801d95f 	.word	0x0801d95f
    case kTfLiteFloat32: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	695c      	ldr	r4, [r3, #20]
 801d944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d946:	7a1b      	ldrb	r3, [r3, #8]
 801d948:	4618      	mov	r0, r3
 801d94a:	f7fc fbe7 	bl	801a11c <TfLiteTypeGetName>
 801d94e:	4602      	mov	r2, r0
 801d950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d952:	7a1b      	ldrb	r3, [r3, #8]
 801d954:	491e      	ldr	r1, [pc, #120]	; (801d9d0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801d956:	6878      	ldr	r0, [r7, #4]
 801d958:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801d95a:	2301      	movs	r3, #1
 801d95c:	e034      	b.n	801d9c8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
      #endif

      SoftmaxQuantized(input, output, data);
 801d95e:	f107 0308 	add.w	r3, r7, #8
 801d962:	461a      	mov	r2, r3
 801d964:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801d966:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801d968:	f7ff fef2 	bl	801d750 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 801d96c:	2300      	movs	r3, #0
 801d96e:	e02b      	b.n	801d9c8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
    }
    case kTfLiteUInt8: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_U8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801d970:	687b      	ldr	r3, [r7, #4]
 801d972:	695c      	ldr	r4, [r3, #20]
 801d974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d976:	7a1b      	ldrb	r3, [r3, #8]
 801d978:	4618      	mov	r0, r3
 801d97a:	f7fc fbcf 	bl	801a11c <TfLiteTypeGetName>
 801d97e:	4602      	mov	r2, r0
 801d980:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d982:	7a1b      	ldrb	r3, [r3, #8]
 801d984:	4912      	ldr	r1, [pc, #72]	; (801d9d0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801d986:	6878      	ldr	r0, [r7, #4]
 801d988:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801d98a:	2301      	movs	r3, #1
 801d98c:	e01c      	b.n	801d9c8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>
      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    case kTfLiteInt16: {
      #if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801d98e:	687b      	ldr	r3, [r7, #4]
 801d990:	695c      	ldr	r4, [r3, #20]
 801d992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d994:	7a1b      	ldrb	r3, [r3, #8]
 801d996:	4618      	mov	r0, r3
 801d998:	f7fc fbc0 	bl	801a11c <TfLiteTypeGetName>
 801d99c:	4602      	mov	r2, r0
 801d99e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d9a0:	7a1b      	ldrb	r3, [r3, #8]
 801d9a2:	490b      	ldr	r1, [pc, #44]	; (801d9d0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801d9a4:	6878      	ldr	r0, [r7, #4]
 801d9a6:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801d9a8:	2301      	movs	r3, #1
 801d9aa:	e00d      	b.n	801d9c8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x108>

      SoftmaxQuantized(input, output, data);
      return kTfLiteOk;
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801d9ac:	687b      	ldr	r3, [r7, #4]
 801d9ae:	695c      	ldr	r4, [r3, #20]
 801d9b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d9b2:	7a1b      	ldrb	r3, [r3, #8]
 801d9b4:	4618      	mov	r0, r3
 801d9b6:	f7fc fbb1 	bl	801a11c <TfLiteTypeGetName>
 801d9ba:	4602      	mov	r2, r0
 801d9bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d9be:	7a1b      	ldrb	r3, [r3, #8]
 801d9c0:	4903      	ldr	r1, [pc, #12]	; (801d9d0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x110>)
 801d9c2:	6878      	ldr	r0, [r7, #4]
 801d9c4:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801d9c6:	2301      	movs	r3, #1
  }
}
 801d9c8:	4618      	mov	r0, r3
 801d9ca:	3778      	adds	r7, #120	; 0x78
 801d9cc:	46bd      	mov	sp, r7
 801d9ce:	bdb0      	pop	{r4, r5, r7, pc}
 801d9d0:	08028390 	.word	0x08028390

0801d9d4 <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 801d9d4:	b4b0      	push	{r4, r5, r7}
 801d9d6:	b083      	sub	sp, #12
 801d9d8:	af00      	add	r7, sp, #0
 801d9da:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 801d9dc:	687b      	ldr	r3, [r7, #4]
 801d9de:	4a07      	ldr	r2, [pc, #28]	; (801d9fc <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 801d9e0:	461c      	mov	r4, r3
 801d9e2:	4615      	mov	r5, r2
 801d9e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d9e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d9e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801d9ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801d9f0:	6878      	ldr	r0, [r7, #4]
 801d9f2:	370c      	adds	r7, #12
 801d9f4:	46bd      	mov	sp, r7
 801d9f6:	bcb0      	pop	{r4, r5, r7}
 801d9f8:	4770      	bx	lr
 801d9fa:	bf00      	nop
 801d9fc:	080283ac 	.word	0x080283ac

0801da00 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 801da00:	b590      	push	{r4, r7, lr}
 801da02:	b09f      	sub	sp, #124	; 0x7c
 801da04:	af00      	add	r7, sp, #0
 801da06:	60f8      	str	r0, [r7, #12]
 801da08:	60b9      	str	r1, [r7, #8]
 801da0a:	607a      	str	r2, [r7, #4]
 801da0c:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 801da0e:	68fb      	ldr	r3, [r7, #12]
 801da10:	689b      	ldr	r3, [r3, #8]
 801da12:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 801da14:	68fb      	ldr	r3, [r7, #12]
 801da16:	68db      	ldr	r3, [r3, #12]
 801da18:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 801da1a:	68fb      	ldr	r3, [r7, #12]
 801da1c:	699b      	ldr	r3, [r3, #24]
 801da1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801da20:	68b8      	ldr	r0, [r7, #8]
 801da22:	f7fd f8ec 	bl	801abfe <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801da26:	4603      	mov	r3, r0
 801da28:	3b01      	subs	r3, #1
 801da2a:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801da2c:	683a      	ldr	r2, [r7, #0]
 801da2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801da30:	68b8      	ldr	r0, [r7, #8]
 801da32:	f7ff fa91 	bl	801cf58 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801da36:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801da38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801da3a:	683a      	ldr	r2, [r7, #0]
 801da3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801da3e:	68b8      	ldr	r0, [r7, #8]
 801da40:	f7fe fa4c 	bl	801bedc <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801da44:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 801da46:	2300      	movs	r3, #0
 801da48:	677b      	str	r3, [r7, #116]	; 0x74
 801da4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801da4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801da4e:	429a      	cmp	r2, r3
 801da50:	f280 80ed 	bge.w	801dc2e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 801da54:	2300      	movs	r3, #0
 801da56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801da5a:	2300      	movs	r3, #0
 801da5c:	673b      	str	r3, [r7, #112]	; 0x70
 801da5e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801da60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da62:	429a      	cmp	r2, r3
 801da64:	da16      	bge.n	801da94 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 801da66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801da68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801da6a:	fb03 f202 	mul.w	r2, r3, r2
 801da6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801da70:	4413      	add	r3, r2
 801da72:	461a      	mov	r2, r3
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	441a      	add	r2, r3
 801da78:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 801da7c:	4611      	mov	r1, r2
 801da7e:	4618      	mov	r0, r3
 801da80:	f7ff fc1c 	bl	801d2bc <_ZSt3maxIhERKT_S2_S2_>
 801da84:	4603      	mov	r3, r0
 801da86:	781b      	ldrb	r3, [r3, #0]
 801da88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801da8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801da8e:	3301      	adds	r3, #1
 801da90:	673b      	str	r3, [r7, #112]	; 0x70
 801da92:	e7e4      	b.n	801da5e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 801da94:	f000 f8cf 	bl	801dc36 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 801da98:	4603      	mov	r3, r0
 801da9a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801da9c:	2300      	movs	r3, #0
 801da9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 801daa0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801daa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801daa4:	429a      	cmp	r2, r3
 801daa6:	da2f      	bge.n	801db08 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 801daa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801daaa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801daac:	fb03 f202 	mul.w	r2, r3, r2
 801dab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dab2:	4413      	add	r3, r2
 801dab4:	461a      	mov	r2, r3
 801dab6:	687b      	ldr	r3, [r7, #4]
 801dab8:	4413      	add	r3, r2
 801daba:	781b      	ldrb	r3, [r3, #0]
 801dabc:	461a      	mov	r2, r3
 801dabe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 801dac2:	1ad3      	subs	r3, r2, r3
 801dac4:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 801dac6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801dac8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801daca:	429a      	cmp	r2, r3
 801dacc:	db18      	blt.n	801db00 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 801dace:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801dad0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801dad2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801dad4:	f7fe fa92 	bl	801bffc <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801dad8:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 801dada:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801dadc:	f000 f8b3 	bl	801dc46 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801dae0:	4603      	mov	r3, r0
 801dae2:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 801dae4:	69f8      	ldr	r0, [r7, #28]
 801dae6:	f000 f8dd 	bl	801dca4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801daea:	4603      	mov	r3, r0
 801daec:	4618      	mov	r0, r3
 801daee:	f000 fa21 	bl	801df34 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801daf2:	4603      	mov	r3, r0
 801daf4:	4619      	mov	r1, r3
 801daf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801daf8:	f000 f8b6 	bl	801dc68 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801dafc:	4603      	mov	r3, r0
 801dafe:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801db00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801db02:	3301      	adds	r3, #1
 801db04:	66fb      	str	r3, [r7, #108]	; 0x6c
 801db06:	e7cb      	b.n	801daa0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 801db08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801db0c:	4618      	mov	r0, r3
 801db0e:	f000 fa2b 	bl	801df68 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801db12:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 801db14:	681b      	ldr	r3, [r3, #0]
 801db16:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801db1a:	210c      	movs	r1, #12
 801db1c:	4618      	mov	r0, r3
 801db1e:	f7fe fa80 	bl	801c022 <_ZN6tflite13GetReciprocalEliPi>
 801db22:	4603      	mov	r3, r0
 801db24:	4618      	mov	r0, r3
 801db26:	f7fe fab9 	bl	801c09c <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801db2a:	4603      	mov	r3, r0
 801db2c:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 801db2e:	2300      	movs	r3, #0
 801db30:	66bb      	str	r3, [r7, #104]	; 0x68
 801db32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801db34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801db36:	429a      	cmp	r2, r3
 801db38:	da75      	bge.n	801dc26 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 801db3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801db3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801db3e:	fb03 f202 	mul.w	r2, r3, r2
 801db42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801db44:	4413      	add	r3, r2
 801db46:	461a      	mov	r2, r3
 801db48:	687b      	ldr	r3, [r7, #4]
 801db4a:	4413      	add	r3, r2
 801db4c:	781b      	ldrb	r3, [r3, #0]
 801db4e:	461a      	mov	r2, r3
 801db50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 801db54:	1ad3      	subs	r3, r2, r3
 801db56:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 801db58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801db5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801db5c:	429a      	cmp	r2, r3
 801db5e:	db50      	blt.n	801dc02 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 801db60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801db62:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801db64:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801db66:	f7fe fa49 	bl	801bffc <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801db6a:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 801db6c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801db6e:	f000 f86a 	bl	801dc46 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801db72:	4603      	mov	r3, r0
 801db74:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 801db76:	69b8      	ldr	r0, [r7, #24]
 801db78:	f000 f894 	bl	801dca4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801db7c:	4603      	mov	r3, r0
 801db7e:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 801db80:	6979      	ldr	r1, [r7, #20]
 801db82:	6a38      	ldr	r0, [r7, #32]
 801db84:	f7ff fad2 	bl	801d12c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801db88:	4603      	mov	r3, r0
 801db8a:	633b      	str	r3, [r7, #48]	; 0x30
 801db8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801db90:	4618      	mov	r0, r3
 801db92:	f7fe faf5 	bl	801c180 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801db96:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 801db98:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 801db9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801db9c:	3217      	adds	r2, #23
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 801db9e:	4611      	mov	r1, r2
 801dba0:	4618      	mov	r0, r3
 801dba2:	f7fd fd33 	bl	801b60c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801dba6:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 801dba8:	f7fc fd07 	bl	801a5ba <_ZNSt14numeric_limitsIhE3minEv>
 801dbac:	4603      	mov	r3, r0
 801dbae:	461a      	mov	r2, r3
            unsat_output +
 801dbb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dbb2:	4413      	add	r3, r2
        const int32_t shifted_output =
 801dbb4:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 801dbb6:	f7fc fd08 	bl	801a5ca <_ZNSt14numeric_limitsIhE3maxEv>
 801dbba:	4603      	mov	r3, r0
 801dbbc:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 801dbbe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801dbc2:	f107 0310 	add.w	r3, r7, #16
 801dbc6:	4611      	mov	r1, r2
 801dbc8:	4618      	mov	r0, r3
 801dbca:	f7fc ffb9 	bl	801ab40 <_ZSt3minIlERKT_S2_S2_>
 801dbce:	4604      	mov	r4, r0
 801dbd0:	f7fc fcf3 	bl	801a5ba <_ZNSt14numeric_limitsIhE3minEv>
 801dbd4:	4603      	mov	r3, r0
 801dbd6:	63bb      	str	r3, [r7, #56]	; 0x38
 801dbd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801dbdc:	4619      	mov	r1, r3
 801dbde:	4620      	mov	r0, r4
 801dbe0:	f7fc ffc2 	bl	801ab68 <_ZSt3maxIlERKT_S2_S2_>
 801dbe4:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 801dbe6:	6819      	ldr	r1, [r3, #0]
 801dbe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dbea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801dbec:	fb03 f202 	mul.w	r2, r3, r2
 801dbf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801dbf2:	4413      	add	r3, r2
 801dbf4:	461a      	mov	r2, r3
 801dbf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801dbfa:	4413      	add	r3, r2
 801dbfc:	b2ca      	uxtb	r2, r1
 801dbfe:	701a      	strb	r2, [r3, #0]
 801dc00:	e00d      	b.n	801dc1e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 801dc02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dc04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801dc06:	fb03 f202 	mul.w	r2, r3, r2
 801dc0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801dc0c:	4413      	add	r3, r2
 801dc0e:	461a      	mov	r2, r3
 801dc10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801dc14:	189c      	adds	r4, r3, r2
 801dc16:	f7fc fcd0 	bl	801a5ba <_ZNSt14numeric_limitsIhE3minEv>
 801dc1a:	4603      	mov	r3, r0
 801dc1c:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 801dc1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801dc20:	3301      	adds	r3, #1
 801dc22:	66bb      	str	r3, [r7, #104]	; 0x68
 801dc24:	e785      	b.n	801db32 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 801dc26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dc28:	3301      	adds	r3, #1
 801dc2a:	677b      	str	r3, [r7, #116]	; 0x74
 801dc2c:	e70d      	b.n	801da4a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 801dc2e:	bf00      	nop
 801dc30:	377c      	adds	r7, #124	; 0x7c
 801dc32:	46bd      	mov	sp, r7
 801dc34:	bd90      	pop	{r4, r7, pc}

0801dc36 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 801dc36:	b580      	push	{r7, lr}
 801dc38:	af00      	add	r7, sp, #0
 801dc3a:	2000      	movs	r0, #0
 801dc3c:	f000 f99f 	bl	801df7e <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 801dc40:	4603      	mov	r3, r0
 801dc42:	4618      	mov	r0, r3
 801dc44:	bd80      	pop	{r7, pc}

0801dc46 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801dc46:	b580      	push	{r7, lr}
 801dc48:	b084      	sub	sp, #16
 801dc4a:	af00      	add	r7, sp, #0
 801dc4c:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801dc4e:	f107 030c 	add.w	r3, r7, #12
 801dc52:	4618      	mov	r0, r3
 801dc54:	f000 f9a7 	bl	801dfa6 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801dc58:	4602      	mov	r2, r0
 801dc5a:	687b      	ldr	r3, [r7, #4]
 801dc5c:	6013      	str	r3, [r2, #0]
    return retval;
 801dc5e:	68fb      	ldr	r3, [r7, #12]
  }
 801dc60:	4618      	mov	r0, r3
 801dc62:	3710      	adds	r7, #16
 801dc64:	46bd      	mov	sp, r7
 801dc66:	bd80      	pop	{r7, pc}

0801dc68 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801dc68:	b590      	push	{r4, r7, lr}
 801dc6a:	b083      	sub	sp, #12
 801dc6c:	af00      	add	r7, sp, #0
 801dc6e:	6078      	str	r0, [r7, #4]
 801dc70:	6039      	str	r1, [r7, #0]
 801dc72:	1d3b      	adds	r3, r7, #4
 801dc74:	4618      	mov	r0, r3
 801dc76:	f000 f977 	bl	801df68 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801dc7a:	4603      	mov	r3, r0
 801dc7c:	681c      	ldr	r4, [r3, #0]
 801dc7e:	463b      	mov	r3, r7
 801dc80:	4618      	mov	r0, r3
 801dc82:	f000 f971 	bl	801df68 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801dc86:	4603      	mov	r3, r0
 801dc88:	681b      	ldr	r3, [r3, #0]
 801dc8a:	4619      	mov	r1, r3
 801dc8c:	4620      	mov	r0, r4
 801dc8e:	f7fe f8bd 	bl	801be0c <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801dc92:	4603      	mov	r3, r0
 801dc94:	4618      	mov	r0, r3
 801dc96:	f000 f991 	bl	801dfbc <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 801dc9a:	4603      	mov	r3, r0
 801dc9c:	4618      	mov	r0, r3
 801dc9e:	370c      	adds	r7, #12
 801dca0:	46bd      	mov	sp, r7
 801dca2:	bd90      	pop	{r4, r7, pc}

0801dca4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 801dca4:	b590      	push	{r4, r7, lr}
 801dca6:	b091      	sub	sp, #68	; 0x44
 801dca8:	af00      	add	r7, sp, #0
 801dcaa:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 801dcac:	f000 f997 	bl	801dfde <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 801dcb0:	4603      	mov	r3, r0
 801dcb2:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 801dcb4:	2001      	movs	r0, #1
 801dcb6:	f000 f99b 	bl	801dff0 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 801dcba:	4603      	mov	r3, r0
 801dcbc:	4619      	mov	r1, r3
 801dcbe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801dcc0:	f000 f9aa 	bl	801e018 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801dcc4:	4603      	mov	r3, r0
 801dcc6:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 801dcc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801dcca:	6878      	ldr	r0, [r7, #4]
 801dccc:	f000 f9c2 	bl	801e054 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801dcd0:	4603      	mov	r3, r0
 801dcd2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801dcd4:	4618      	mov	r0, r3
 801dcd6:	f000 f99f 	bl	801e018 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801dcda:	4603      	mov	r3, r0
 801dcdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 801dcde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801dce0:	f000 f9d6 	bl	801e090 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801dce4:	4603      	mov	r3, r0
 801dce6:	4618      	mov	r0, r3
 801dce8:	f7ff f9be 	bl	801d068 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 801dcec:	4603      	mov	r3, r0
 801dcee:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 801dcf0:	6879      	ldr	r1, [r7, #4]
 801dcf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801dcf4:	f000 f990 	bl	801e018 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801dcf8:	4603      	mov	r3, r0
 801dcfa:	63bb      	str	r3, [r7, #56]	; 0x38
 801dcfc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801dd00:	4618      	mov	r0, r3
 801dd02:	f000 f950 	bl	801dfa6 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801dd06:	4603      	mov	r3, r0
 801dd08:	681b      	ldr	r3, [r3, #0]
 801dd0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 801dd0c:	4883      	ldr	r0, [pc, #524]	; (801df1c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 801dd0e:	f7ff f952 	bl	801cfb6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801dd12:	4603      	mov	r3, r0
 801dd14:	4618      	mov	r0, r3
 801dd16:	f7fe fa3e 	bl	801c196 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801dd1a:	4603      	mov	r3, r0
 801dd1c:	627b      	str	r3, [r7, #36]	; 0x24
 801dd1e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801dd22:	f7fe f837 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801dd26:	4603      	mov	r3, r0
 801dd28:	4619      	mov	r1, r3
 801dd2a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801dd2c:	f7fe f83d 	bl	801bdaa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801dd30:	4603      	mov	r3, r0
 801dd32:	4618      	mov	r0, r3
 801dd34:	f7fe f88c 	bl	801be50 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801dd38:	4604      	mov	r4, r0
 801dd3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801dd3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dd3e:	f7ff f9f5 	bl	801d12c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dd42:	4603      	mov	r3, r0
 801dd44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dd46:	4619      	mov	r1, r3
 801dd48:	4620      	mov	r0, r4
 801dd4a:	f7ff f95a 	bl	801d002 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801dd4e:	4603      	mov	r3, r0
 801dd50:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 801dd52:	4873      	ldr	r0, [pc, #460]	; (801df20 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 801dd54:	f7ff f92f 	bl	801cfb6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801dd58:	4603      	mov	r3, r0
 801dd5a:	4618      	mov	r0, r3
 801dd5c:	f7fe fa1b 	bl	801c196 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801dd60:	4603      	mov	r3, r0
 801dd62:	623b      	str	r3, [r7, #32]
 801dd64:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 801dd68:	f7fe f814 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801dd6c:	4603      	mov	r3, r0
 801dd6e:	4619      	mov	r1, r3
 801dd70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801dd72:	f7fe f81a 	bl	801bdaa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801dd76:	4603      	mov	r3, r0
 801dd78:	4618      	mov	r0, r3
 801dd7a:	f7fe f869 	bl	801be50 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801dd7e:	4604      	mov	r4, r0
 801dd80:	6a39      	ldr	r1, [r7, #32]
 801dd82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dd84:	f7ff f9d2 	bl	801d12c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dd88:	4603      	mov	r3, r0
 801dd8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dd8c:	4619      	mov	r1, r3
 801dd8e:	4620      	mov	r0, r4
 801dd90:	f7ff f937 	bl	801d002 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801dd94:	4603      	mov	r3, r0
 801dd96:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 801dd98:	4862      	ldr	r0, [pc, #392]	; (801df24 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 801dd9a:	f7ff f90c 	bl	801cfb6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801dd9e:	4603      	mov	r3, r0
 801dda0:	4618      	mov	r0, r3
 801dda2:	f7fe f9f8 	bl	801c196 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801dda6:	4603      	mov	r3, r0
 801dda8:	61fb      	str	r3, [r7, #28]
 801ddaa:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 801ddae:	f7fd fff1 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ddb2:	4603      	mov	r3, r0
 801ddb4:	4619      	mov	r1, r3
 801ddb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801ddb8:	f7fd fff7 	bl	801bdaa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801ddbc:	4603      	mov	r3, r0
 801ddbe:	4618      	mov	r0, r3
 801ddc0:	f7fe f846 	bl	801be50 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801ddc4:	4604      	mov	r4, r0
 801ddc6:	69f9      	ldr	r1, [r7, #28]
 801ddc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ddca:	f7ff f9af 	bl	801d12c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801ddce:	4603      	mov	r3, r0
 801ddd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ddd2:	4619      	mov	r1, r3
 801ddd4:	4620      	mov	r0, r4
 801ddd6:	f7ff f914 	bl	801d002 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801ddda:	4603      	mov	r3, r0
 801dddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 801ddde:	4852      	ldr	r0, [pc, #328]	; (801df28 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 801dde0:	f7ff f8e9 	bl	801cfb6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801dde4:	4603      	mov	r3, r0
 801dde6:	4618      	mov	r0, r3
 801dde8:	f7fe f9d5 	bl	801c196 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801ddec:	4603      	mov	r3, r0
 801ddee:	61bb      	str	r3, [r7, #24]
 801ddf0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 801ddf4:	f7fd ffce 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801ddf8:	4603      	mov	r3, r0
 801ddfa:	4619      	mov	r1, r3
 801ddfc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801ddfe:	f7fd ffd4 	bl	801bdaa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801de02:	4603      	mov	r3, r0
 801de04:	4618      	mov	r0, r3
 801de06:	f7fe f823 	bl	801be50 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801de0a:	4604      	mov	r4, r0
 801de0c:	69b9      	ldr	r1, [r7, #24]
 801de0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801de10:	f7ff f98c 	bl	801d12c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801de14:	4603      	mov	r3, r0
 801de16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801de18:	4619      	mov	r1, r3
 801de1a:	4620      	mov	r0, r4
 801de1c:	f7ff f8f1 	bl	801d002 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801de20:	4603      	mov	r3, r0
 801de22:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 801de24:	4841      	ldr	r0, [pc, #260]	; (801df2c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 801de26:	f7ff f8c6 	bl	801cfb6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801de2a:	4603      	mov	r3, r0
 801de2c:	4618      	mov	r0, r3
 801de2e:	f7fe f9b2 	bl	801c196 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801de32:	4603      	mov	r3, r0
 801de34:	617b      	str	r3, [r7, #20]
 801de36:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801de3a:	f7fd ffab 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801de3e:	4603      	mov	r3, r0
 801de40:	4619      	mov	r1, r3
 801de42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801de44:	f7fd ffb1 	bl	801bdaa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801de48:	4603      	mov	r3, r0
 801de4a:	4618      	mov	r0, r3
 801de4c:	f7fe f800 	bl	801be50 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801de50:	4604      	mov	r4, r0
 801de52:	6979      	ldr	r1, [r7, #20]
 801de54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801de56:	f7ff f969 	bl	801d12c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801de5a:	4603      	mov	r3, r0
 801de5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801de5e:	4619      	mov	r1, r3
 801de60:	4620      	mov	r0, r4
 801de62:	f7ff f8ce 	bl	801d002 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801de66:	4603      	mov	r3, r0
 801de68:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 801de6a:	4831      	ldr	r0, [pc, #196]	; (801df30 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 801de6c:	f7ff f8a3 	bl	801cfb6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801de70:	4603      	mov	r3, r0
 801de72:	4618      	mov	r0, r3
 801de74:	f7fe f98f 	bl	801c196 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801de78:	4603      	mov	r3, r0
 801de7a:	613b      	str	r3, [r7, #16]
 801de7c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801de80:	f7fd ff88 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801de84:	4603      	mov	r3, r0
 801de86:	4619      	mov	r1, r3
 801de88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801de8a:	f7fd ff8e 	bl	801bdaa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801de8e:	4603      	mov	r3, r0
 801de90:	4618      	mov	r0, r3
 801de92:	f7fd ffdd 	bl	801be50 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801de96:	4604      	mov	r4, r0
 801de98:	6939      	ldr	r1, [r7, #16]
 801de9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801de9c:	f7ff f946 	bl	801d12c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dea0:	4603      	mov	r3, r0
 801dea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dea4:	4619      	mov	r1, r3
 801dea6:	4620      	mov	r0, r4
 801dea8:	f7ff f8ab 	bl	801d002 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801deac:	4603      	mov	r3, r0
 801deae:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 801deb0:	20f2      	movs	r0, #242	; 0xf2
 801deb2:	f7ff f880 	bl	801cfb6 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801deb6:	4603      	mov	r3, r0
 801deb8:	4618      	mov	r0, r3
 801deba:	f7fe f96c 	bl	801c196 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801debe:	4603      	mov	r3, r0
 801dec0:	60fb      	str	r3, [r7, #12]
 801dec2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801dec6:	f7fd ff65 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801deca:	4603      	mov	r3, r0
 801decc:	4619      	mov	r1, r3
 801dece:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801ded0:	f7fd ff6b 	bl	801bdaa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801ded4:	4603      	mov	r3, r0
 801ded6:	4618      	mov	r0, r3
 801ded8:	f7fd ffba 	bl	801be50 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801dedc:	4604      	mov	r4, r0
 801dede:	68f9      	ldr	r1, [r7, #12]
 801dee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dee2:	f7ff f923 	bl	801d12c <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801dee6:	4603      	mov	r3, r0
 801dee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801deea:	4619      	mov	r1, r3
 801deec:	4620      	mov	r0, r4
 801deee:	f7ff f888 	bl	801d002 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801def2:	4603      	mov	r3, r0
 801def4:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 801def6:	6878      	ldr	r0, [r7, #4]
 801def8:	f000 f8e4 	bl	801e0c4 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 801defc:	4604      	mov	r4, r0
 801defe:	f7fe f95e 	bl	801c1be <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 801df02:	4603      	mov	r3, r0
 801df04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801df06:	4619      	mov	r1, r3
 801df08:	4620      	mov	r0, r4
 801df0a:	f7ff f87a 	bl	801d002 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801df0e:	4603      	mov	r3, r0
 801df10:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801df12:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801df14:	4618      	mov	r0, r3
 801df16:	3744      	adds	r7, #68	; 0x44
 801df18:	46bd      	mov	sp, r7
 801df1a:	bd90      	pop	{r4, r7, pc}
 801df1c:	63afbe7b 	.word	0x63afbe7b
 801df20:	4da2cbf2 	.word	0x4da2cbf2
 801df24:	2f16ac6c 	.word	0x2f16ac6c
 801df28:	1152aaa4 	.word	0x1152aaa4
 801df2c:	02582ab7 	.word	0x02582ab7
 801df30:	000afe11 	.word	0x000afe11

0801df34 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801df34:	b5b0      	push	{r4, r5, r7, lr}
 801df36:	b084      	sub	sp, #16
 801df38:	af00      	add	r7, sp, #0
 801df3a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801df3c:	1d3b      	adds	r3, r7, #4
 801df3e:	4618      	mov	r0, r3
 801df40:	f7fe f91e 	bl	801c180 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801df44:	4603      	mov	r3, r0
 801df46:	681d      	ldr	r5, [r3, #0]
 801df48:	f107 030c 	add.w	r3, r7, #12
 801df4c:	4618      	mov	r0, r3
 801df4e:	f000 f80b 	bl	801df68 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801df52:	4604      	mov	r4, r0
 801df54:	4628      	mov	r0, r5
 801df56:	f000 f8c7 	bl	801e0e8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 801df5a:	4603      	mov	r3, r0
 801df5c:	6023      	str	r3, [r4, #0]
  return result;
 801df5e:	68fb      	ldr	r3, [r7, #12]
}
 801df60:	4618      	mov	r0, r3
 801df62:	3710      	adds	r7, #16
 801df64:	46bd      	mov	sp, r7
 801df66:	bdb0      	pop	{r4, r5, r7, pc}

0801df68 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 801df68:	b480      	push	{r7}
 801df6a:	b083      	sub	sp, #12
 801df6c:	af00      	add	r7, sp, #0
 801df6e:	6078      	str	r0, [r7, #4]
 801df70:	687b      	ldr	r3, [r7, #4]
 801df72:	4618      	mov	r0, r3
 801df74:	370c      	adds	r7, #12
 801df76:	46bd      	mov	sp, r7
 801df78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df7c:	4770      	bx	lr

0801df7e <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801df7e:	b590      	push	{r4, r7, lr}
 801df80:	b085      	sub	sp, #20
 801df82:	af00      	add	r7, sp, #0
 801df84:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801df86:	f107 030c 	add.w	r3, r7, #12
 801df8a:	4618      	mov	r0, r3
 801df8c:	f7ff ffec 	bl	801df68 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801df90:	4604      	mov	r4, r0
 801df92:	6878      	ldr	r0, [r7, #4]
 801df94:	f7fd fefe 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801df98:	4603      	mov	r3, r0
 801df9a:	6023      	str	r3, [r4, #0]
    return retval;
 801df9c:	68fb      	ldr	r3, [r7, #12]
  }
 801df9e:	4618      	mov	r0, r3
 801dfa0:	3714      	adds	r7, #20
 801dfa2:	46bd      	mov	sp, r7
 801dfa4:	bd90      	pop	{r4, r7, pc}

0801dfa6 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 801dfa6:	b480      	push	{r7}
 801dfa8:	b083      	sub	sp, #12
 801dfaa:	af00      	add	r7, sp, #0
 801dfac:	6078      	str	r0, [r7, #4]
 801dfae:	687b      	ldr	r3, [r7, #4]
 801dfb0:	4618      	mov	r0, r3
 801dfb2:	370c      	adds	r7, #12
 801dfb4:	46bd      	mov	sp, r7
 801dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfba:	4770      	bx	lr

0801dfbc <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801dfbc:	b580      	push	{r7, lr}
 801dfbe:	b084      	sub	sp, #16
 801dfc0:	af00      	add	r7, sp, #0
 801dfc2:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 801dfc4:	f107 030c 	add.w	r3, r7, #12
 801dfc8:	4618      	mov	r0, r3
 801dfca:	f7ff ffcd 	bl	801df68 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801dfce:	4602      	mov	r2, r0
 801dfd0:	687b      	ldr	r3, [r7, #4]
 801dfd2:	6013      	str	r3, [r2, #0]
    return retval;
 801dfd4:	68fb      	ldr	r3, [r7, #12]
  }
 801dfd6:	4618      	mov	r0, r3
 801dfd8:	3710      	adds	r7, #16
 801dfda:	46bd      	mov	sp, r7
 801dfdc:	bd80      	pop	{r7, pc}

0801dfde <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 801dfde:	b580      	push	{r7, lr}
 801dfe0:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 801dfe2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801dfe6:	f000 f803 	bl	801dff0 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 801dfea:	4603      	mov	r3, r0
  }
 801dfec:	4618      	mov	r0, r3
 801dfee:	bd80      	pop	{r7, pc}

0801dff0 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801dff0:	b590      	push	{r4, r7, lr}
 801dff2:	b085      	sub	sp, #20
 801dff4:	af00      	add	r7, sp, #0
 801dff6:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801dff8:	f107 030c 	add.w	r3, r7, #12
 801dffc:	4618      	mov	r0, r3
 801dffe:	f7ff ffd2 	bl	801dfa6 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801e002:	4604      	mov	r4, r0
 801e004:	6878      	ldr	r0, [r7, #4]
 801e006:	f7fd fec5 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e00a:	4603      	mov	r3, r0
 801e00c:	6023      	str	r3, [r4, #0]
    return retval;
 801e00e:	68fb      	ldr	r3, [r7, #12]
  }
 801e010:	4618      	mov	r0, r3
 801e012:	3714      	adds	r7, #20
 801e014:	46bd      	mov	sp, r7
 801e016:	bd90      	pop	{r4, r7, pc}

0801e018 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 801e018:	b590      	push	{r4, r7, lr}
 801e01a:	b083      	sub	sp, #12
 801e01c:	af00      	add	r7, sp, #0
 801e01e:	6078      	str	r0, [r7, #4]
 801e020:	6039      	str	r1, [r7, #0]
 801e022:	1d3b      	adds	r3, r7, #4
 801e024:	4618      	mov	r0, r3
 801e026:	f7ff ffbe 	bl	801dfa6 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801e02a:	4603      	mov	r3, r0
 801e02c:	681c      	ldr	r4, [r3, #0]
 801e02e:	463b      	mov	r3, r7
 801e030:	4618      	mov	r0, r3
 801e032:	f7ff ffb8 	bl	801dfa6 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801e036:	4603      	mov	r3, r0
 801e038:	681b      	ldr	r3, [r3, #0]
 801e03a:	4619      	mov	r1, r3
 801e03c:	4620      	mov	r0, r4
 801e03e:	f7fe f9db 	bl	801c3f8 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801e042:	4603      	mov	r3, r0
 801e044:	4618      	mov	r0, r3
 801e046:	f7ff fdfe 	bl	801dc46 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801e04a:	4603      	mov	r3, r0
 801e04c:	4618      	mov	r0, r3
 801e04e:	370c      	adds	r7, #12
 801e050:	46bd      	mov	sp, r7
 801e052:	bd90      	pop	{r4, r7, pc}

0801e054 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 801e054:	b590      	push	{r4, r7, lr}
 801e056:	b083      	sub	sp, #12
 801e058:	af00      	add	r7, sp, #0
 801e05a:	6078      	str	r0, [r7, #4]
 801e05c:	6039      	str	r1, [r7, #0]
 801e05e:	1d3b      	adds	r3, r7, #4
 801e060:	4618      	mov	r0, r3
 801e062:	f7ff ffa0 	bl	801dfa6 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801e066:	4603      	mov	r3, r0
 801e068:	681c      	ldr	r4, [r3, #0]
 801e06a:	463b      	mov	r3, r7
 801e06c:	4618      	mov	r0, r3
 801e06e:	f7ff ff9a 	bl	801dfa6 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801e072:	4603      	mov	r3, r0
 801e074:	681b      	ldr	r3, [r3, #0]
 801e076:	4619      	mov	r1, r3
 801e078:	4620      	mov	r0, r4
 801e07a:	f7fd fe96 	bl	801bdaa <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801e07e:	4603      	mov	r3, r0
 801e080:	4618      	mov	r0, r3
 801e082:	f7ff fde0 	bl	801dc46 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801e086:	4603      	mov	r3, r0
 801e088:	4618      	mov	r0, r3
 801e08a:	370c      	adds	r7, #12
 801e08c:	46bd      	mov	sp, r7
 801e08e:	bd90      	pop	{r4, r7, pc}

0801e090 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801e090:	b5b0      	push	{r4, r5, r7, lr}
 801e092:	b084      	sub	sp, #16
 801e094:	af00      	add	r7, sp, #0
 801e096:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801e098:	1d3b      	adds	r3, r7, #4
 801e09a:	4618      	mov	r0, r3
 801e09c:	f7ff ff83 	bl	801dfa6 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801e0a0:	4603      	mov	r3, r0
 801e0a2:	681d      	ldr	r5, [r3, #0]
 801e0a4:	f107 030c 	add.w	r3, r7, #12
 801e0a8:	4618      	mov	r0, r3
 801e0aa:	f7fe f869 	bl	801c180 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801e0ae:	4604      	mov	r4, r0
 801e0b0:	4628      	mov	r0, r5
 801e0b2:	f000 f825 	bl	801e100 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 801e0b6:	4603      	mov	r3, r0
 801e0b8:	6023      	str	r3, [r4, #0]
  return result;
 801e0ba:	68fb      	ldr	r3, [r7, #12]
}
 801e0bc:	4618      	mov	r0, r3
 801e0be:	3710      	adds	r7, #16
 801e0c0:	46bd      	mov	sp, r7
 801e0c2:	bdb0      	pop	{r4, r5, r7, pc}

0801e0c4 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 801e0c4:	b580      	push	{r7, lr}
 801e0c6:	b082      	sub	sp, #8
 801e0c8:	af00      	add	r7, sp, #0
 801e0ca:	6078      	str	r0, [r7, #4]
 801e0cc:	1d3b      	adds	r3, r7, #4
 801e0ce:	4618      	mov	r0, r3
 801e0d0:	f7ff ff69 	bl	801dfa6 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801e0d4:	4603      	mov	r3, r0
 801e0d6:	681b      	ldr	r3, [r3, #0]
 801e0d8:	4618      	mov	r0, r3
 801e0da:	f7fe ffb3 	bl	801d044 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 801e0de:	4603      	mov	r3, r0
 801e0e0:	4618      	mov	r0, r3
 801e0e2:	3708      	adds	r7, #8
 801e0e4:	46bd      	mov	sp, r7
 801e0e6:	bd80      	pop	{r7, pc}

0801e0e8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801e0e8:	b580      	push	{r7, lr}
 801e0ea:	b082      	sub	sp, #8
 801e0ec:	af00      	add	r7, sp, #0
 801e0ee:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801e0f0:	6878      	ldr	r0, [r7, #4]
 801e0f2:	f000 f811 	bl	801e118 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 801e0f6:	4603      	mov	r3, r0
}
 801e0f8:	4618      	mov	r0, r3
 801e0fa:	3708      	adds	r7, #8
 801e0fc:	46bd      	mov	sp, r7
 801e0fe:	bd80      	pop	{r7, pc}

0801e100 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801e100:	b580      	push	{r7, lr}
 801e102:	b082      	sub	sp, #8
 801e104:	af00      	add	r7, sp, #0
 801e106:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801e108:	6878      	ldr	r0, [r7, #4]
 801e10a:	f000 f813 	bl	801e134 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 801e10e:	4603      	mov	r3, r0
}
 801e110:	4618      	mov	r0, r3
 801e112:	3708      	adds	r7, #8
 801e114:	46bd      	mov	sp, r7
 801e116:	bd80      	pop	{r7, pc}

0801e118 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801e118:	b580      	push	{r7, lr}
 801e11a:	b082      	sub	sp, #8
 801e11c:	af00      	add	r7, sp, #0
 801e11e:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801e120:	210c      	movs	r1, #12
 801e122:	6878      	ldr	r0, [r7, #4]
 801e124:	f7fd fa72 	bl	801b60c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801e128:	4603      	mov	r3, r0
  }
 801e12a:	4618      	mov	r0, r3
 801e12c:	3708      	adds	r7, #8
 801e12e:	46bd      	mov	sp, r7
 801e130:	bd80      	pop	{r7, pc}
	...

0801e134 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801e134:	b580      	push	{r7, lr}
 801e136:	b08a      	sub	sp, #40	; 0x28
 801e138:	af00      	add	r7, sp, #0
 801e13a:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801e13c:	f7fc fde1 	bl	801ad02 <_ZNSt14numeric_limitsIlE3minEv>
 801e140:	4603      	mov	r3, r0
 801e142:	4618      	mov	r0, r3
 801e144:	f7fd fe26 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e148:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801e14a:	f7fc f863 	bl	801a214 <_ZNSt14numeric_limitsIlE3maxEv>
 801e14e:	4603      	mov	r3, r0
 801e150:	4618      	mov	r0, r3
 801e152:	f7fd fe1f 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e156:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 801e158:	2320      	movs	r3, #32
 801e15a:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801e15c:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 801e160:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801e162:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 801e166:	f7fd fe15 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e16a:	4603      	mov	r3, r0
 801e16c:	4619      	mov	r1, r3
 801e16e:	6878      	ldr	r0, [r7, #4]
 801e170:	f7fd fe5a 	bl	801be28 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801e174:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801e176:	480f      	ldr	r0, [pc, #60]	; (801e1b4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 801e178:	f7fd fe0c 	bl	801bd94 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801e17c:	4603      	mov	r3, r0
 801e17e:	4619      	mov	r1, r3
 801e180:	6878      	ldr	r0, [r7, #4]
 801e182:	f7fd fe2f 	bl	801bde4 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801e186:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801e188:	2105      	movs	r1, #5
 801e18a:	6878      	ldr	r0, [r7, #4]
 801e18c:	f7fe fa18 	bl	801c5c0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 801e190:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801e192:	68fa      	ldr	r2, [r7, #12]
 801e194:	6a39      	ldr	r1, [r7, #32]
 801e196:	6978      	ldr	r0, [r7, #20]
 801e198:	f7fe fa56 	bl	801c648 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801e19c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801e19e:	68fa      	ldr	r2, [r7, #12]
 801e1a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e1a2:	6938      	ldr	r0, [r7, #16]
 801e1a4:	f7fe fa50 	bl	801c648 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801e1a8:	60f8      	str	r0, [r7, #12]
    return result;
 801e1aa:	68fb      	ldr	r3, [r7, #12]
  }
 801e1ac:	4618      	mov	r0, r3
 801e1ae:	3728      	adds	r7, #40	; 0x28
 801e1b0:	46bd      	mov	sp, r7
 801e1b2:	bd80      	pop	{r7, pc}
 801e1b4:	fc000001 	.word	0xfc000001

0801e1b8 <_ZN6tflite7gen_lutEPFffEffPsi>:
                    const int num) {
 801e1b8:	b580      	push	{r7, lr}
 801e1ba:	ed2d 8b02 	vpush	{d8}
 801e1be:	b094      	sub	sp, #80	; 0x50
 801e1c0:	af00      	add	r7, sp, #0
 801e1c2:	6178      	str	r0, [r7, #20]
 801e1c4:	ed87 0a04 	vstr	s0, [r7, #16]
 801e1c8:	edc7 0a03 	vstr	s1, [r7, #12]
 801e1cc:	60b9      	str	r1, [r7, #8]
 801e1ce:	607a      	str	r2, [r7, #4]
  float step = (max - min) / (num - 1);
 801e1d0:	ed97 7a03 	vldr	s14, [r7, #12]
 801e1d4:	edd7 7a04 	vldr	s15, [r7, #16]
 801e1d8:	ee77 6a67 	vsub.f32	s13, s14, s15
 801e1dc:	687b      	ldr	r3, [r7, #4]
 801e1de:	3b01      	subs	r3, #1
 801e1e0:	ee07 3a90 	vmov	s15, r3
 801e1e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e1e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e1ec:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 801e1f0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801e1f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801e1f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801e1fc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 801e200:	2300      	movs	r3, #0
 801e202:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e204:	687b      	ldr	r3, [r7, #4]
 801e206:	3b01      	subs	r3, #1
 801e208:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e20a:	429a      	cmp	r2, r3
 801e20c:	f280 80c0 	bge.w	801e390 <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 801e210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e212:	ee07 3a90 	vmov	s15, r3
 801e216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e21a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801e21e:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e222:	edd7 7a04 	vldr	s15, [r7, #16]
 801e226:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e22a:	697b      	ldr	r3, [r7, #20]
 801e22c:	eeb0 0a67 	vmov.f32	s0, s15
 801e230:	4798      	blx	r3
 801e232:	eef0 7a40 	vmov.f32	s15, s0
 801e236:	ed9f 7a74 	vldr	s14, [pc, #464]	; 801e408 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801e23a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e23e:	eeb0 0a67 	vmov.f32	s0, s15
 801e242:	f7fc f999 	bl	801a578 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801e246:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 801e24a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e24c:	3301      	adds	r3, #1
 801e24e:	ee07 3a90 	vmov	s15, r3
 801e252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e256:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801e25a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e25e:	edd7 7a04 	vldr	s15, [r7, #16]
 801e262:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e266:	697b      	ldr	r3, [r7, #20]
 801e268:	eeb0 0a67 	vmov.f32	s0, s15
 801e26c:	4798      	blx	r3
 801e26e:	eef0 7a40 	vmov.f32	s15, s0
 801e272:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801e408 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801e276:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 801e27a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e27c:	ee07 3a90 	vmov	s15, r3
 801e280:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e284:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801e288:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e28c:	edd7 7a04 	vldr	s15, [r7, #16]
 801e290:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e294:	697b      	ldr	r3, [r7, #20]
 801e296:	eeb0 0a67 	vmov.f32	s0, s15
 801e29a:	4798      	blx	r3
 801e29c:	eef0 7a40 	vmov.f32	s15, s0
 801e2a0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801e408 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801e2a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e2a8:	eeb0 0a67 	vmov.f32	s0, s15
 801e2ac:	f7fc f964 	bl	801a578 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801e2b0:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 801e2b4:	ee78 7a27 	vadd.f32	s15, s16, s15
 801e2b8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801e2bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801e2c0:	eeb0 0a47 	vmov.f32	s0, s14
 801e2c4:	f7fc f958 	bl	801a578 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801e2c8:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 801e2cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e2ce:	ee07 3a90 	vmov	s15, r3
 801e2d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e2d6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801e2da:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e2de:	edd7 7a04 	vldr	s15, [r7, #16]
 801e2e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e2e6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801e2ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e2ee:	697b      	ldr	r3, [r7, #20]
 801e2f0:	eeb0 0a67 	vmov.f32	s0, s15
 801e2f4:	4798      	blx	r3
 801e2f6:	eef0 7a40 	vmov.f32	s15, s0
 801e2fa:	ed9f 7a43 	vldr	s14, [pc, #268]	; 801e408 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801e2fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e302:	eeb0 0a67 	vmov.f32	s0, s15
 801e306:	f7fc f937 	bl	801a578 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801e30a:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 801e30e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801e312:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801e316:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e31a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 801e31e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801e322:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801e326:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801e32a:	eeb0 0a47 	vmov.f32	s0, s14
 801e32e:	f7fc f923 	bl	801a578 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801e332:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 801e336:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801e33a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801e33e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e342:	edc7 7a06 	vstr	s15, [r7, #24]
 801e346:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 801e34a:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 801e34c:	f107 021c 	add.w	r2, r7, #28
 801e350:	f107 0318 	add.w	r3, r7, #24
 801e354:	4611      	mov	r1, r2
 801e356:	4618      	mov	r0, r3
 801e358:	f7e7 ffe1 	bl	800631e <_ZSt3maxIfERKT_S2_S2_>
 801e35c:	4602      	mov	r2, r0
 801e35e:	4b2b      	ldr	r3, [pc, #172]	; (801e40c <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 801e360:	623b      	str	r3, [r7, #32]
 801e362:	f107 0320 	add.w	r3, r7, #32
 801e366:	4619      	mov	r1, r3
 801e368:	4610      	mov	r0, r2
 801e36a:	f7fc f8d8 	bl	801a51e <_ZSt3minIfERKT_S2_S2_>
 801e36e:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 801e370:	edd3 7a00 	vldr	s15, [r3]
 801e374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e376:	005b      	lsls	r3, r3, #1
 801e378:	68ba      	ldr	r2, [r7, #8]
 801e37a:	4413      	add	r3, r2
 801e37c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e380:	ee17 2a90 	vmov	r2, s15
 801e384:	b212      	sxth	r2, r2
 801e386:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 801e388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e38a:	3301      	adds	r3, #1
 801e38c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e38e:	e739      	b.n	801e204 <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 801e390:	697b      	ldr	r3, [r7, #20]
 801e392:	ed97 0a03 	vldr	s0, [r7, #12]
 801e396:	4798      	blx	r3
 801e398:	eef0 7a40 	vmov.f32	s15, s0
 801e39c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 801e408 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801e3a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e3a4:	eeb0 0a67 	vmov.f32	s0, s15
 801e3a8:	f7fc f8e6 	bl	801a578 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801e3ac:	eef0 7a40 	vmov.f32	s15, s0
 801e3b0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801e3b4:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 801e3b8:	62bb      	str	r3, [r7, #40]	; 0x28
 801e3ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801e3be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e3c2:	4611      	mov	r1, r2
 801e3c4:	4618      	mov	r0, r3
 801e3c6:	f7e7 ffaa 	bl	800631e <_ZSt3maxIfERKT_S2_S2_>
 801e3ca:	4602      	mov	r2, r0
 801e3cc:	4b0f      	ldr	r3, [pc, #60]	; (801e40c <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 801e3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e3d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e3d4:	4619      	mov	r1, r3
 801e3d6:	4610      	mov	r0, r2
 801e3d8:	f7fc f8a1 	bl	801a51e <_ZSt3minIfERKT_S2_S2_>
 801e3dc:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 801e3de:	edd3 7a00 	vldr	s15, [r3]
 801e3e2:	687b      	ldr	r3, [r7, #4]
 801e3e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801e3e8:	3b01      	subs	r3, #1
 801e3ea:	005b      	lsls	r3, r3, #1
 801e3ec:	68ba      	ldr	r2, [r7, #8]
 801e3ee:	4413      	add	r3, r2
 801e3f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e3f4:	ee17 2a90 	vmov	r2, s15
 801e3f8:	b212      	sxth	r2, r2
 801e3fa:	801a      	strh	r2, [r3, #0]
}
 801e3fc:	bf00      	nop
 801e3fe:	3750      	adds	r7, #80	; 0x50
 801e400:	46bd      	mov	sp, r7
 801e402:	ecbd 8b02 	vpop	{d8}
 801e406:	bd80      	pop	{r7, pc}
 801e408:	47000000 	.word	0x47000000
 801e40c:	46fffe00 	.word	0x46fffe00

0801e410 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 801e410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e414:	b090      	sub	sp, #64	; 0x40
 801e416:	af06      	add	r7, sp, #24
 801e418:	60f8      	str	r0, [r7, #12]
 801e41a:	60b9      	str	r1, [r7, #8]
 801e41c:	607a      	str	r2, [r7, #4]
 801e41e:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 801e420:	68bb      	ldr	r3, [r7, #8]
 801e422:	781b      	ldrb	r3, [r3, #0]
 801e424:	2b09      	cmp	r3, #9
 801e426:	d004      	beq.n	801e432 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 801e428:	68bb      	ldr	r3, [r7, #8]
 801e42a:	781b      	ldrb	r3, [r3, #0]
 801e42c:	2b07      	cmp	r3, #7
 801e42e:	f040 81b6 	bne.w	801e79e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 801e432:	68bb      	ldr	r3, [r7, #8]
 801e434:	781b      	ldrb	r3, [r3, #0]
 801e436:	2b07      	cmp	r3, #7
 801e438:	d156      	bne.n	801e4e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 801e43a:	687b      	ldr	r3, [r7, #4]
 801e43c:	691b      	ldr	r3, [r3, #16]
 801e43e:	2b00      	cmp	r3, #0
 801e440:	d011      	beq.n	801e466 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 801e442:	68fb      	ldr	r3, [r7, #12]
 801e444:	695c      	ldr	r4, [r3, #20]
 801e446:	687b      	ldr	r3, [r7, #4]
 801e448:	691b      	ldr	r3, [r3, #16]
 801e44a:	2200      	movs	r2, #0
 801e44c:	9203      	str	r2, [sp, #12]
 801e44e:	9302      	str	r3, [sp, #8]
 801e450:	4ba1      	ldr	r3, [pc, #644]	; (801e6d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 801e452:	9301      	str	r3, [sp, #4]
 801e454:	4ba1      	ldr	r3, [pc, #644]	; (801e6dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801e456:	9300      	str	r3, [sp, #0]
 801e458:	2325      	movs	r3, #37	; 0x25
 801e45a:	4aa1      	ldr	r2, [pc, #644]	; (801e6e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e45c:	49a1      	ldr	r1, [pc, #644]	; (801e6e4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801e45e:	68f8      	ldr	r0, [r7, #12]
 801e460:	47a0      	blx	r4
 801e462:	2301      	movs	r3, #1
 801e464:	e1e0      	b.n	801e828 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 801e466:	687b      	ldr	r3, [r7, #4]
 801e468:	edd3 7a03 	vldr	s15, [r3, #12]
 801e46c:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 801e6e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801e470:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e478:	dd07      	ble.n	801e48a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	edd3 7a03 	vldr	s15, [r3, #12]
 801e480:	ed9f 7a99 	vldr	s14, [pc, #612]	; 801e6e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801e484:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e488:	e006      	b.n	801e498 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 801e48a:	687b      	ldr	r3, [r7, #4]
 801e48c:	edd3 7a03 	vldr	s15, [r3, #12]
 801e490:	ed9f 7a95 	vldr	s14, [pc, #596]	; 801e6e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 801e494:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e498:	edc7 7a08 	vstr	s15, [r7, #32]
 801e49c:	edd7 7a08 	vldr	s15, [r7, #32]
 801e4a0:	ed9f 7a92 	vldr	s14, [pc, #584]	; 801e6ec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 801e4a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4ac:	f340 80dd 	ble.w	801e66a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 801e4b0:	68fb      	ldr	r3, [r7, #12]
 801e4b2:	695c      	ldr	r4, [r3, #20]
 801e4b4:	687b      	ldr	r3, [r7, #4]
 801e4b6:	68db      	ldr	r3, [r3, #12]
 801e4b8:	4618      	mov	r0, r3
 801e4ba:	f7e2 f84f 	bl	800055c <__aeabi_f2d>
 801e4be:	4602      	mov	r2, r0
 801e4c0:	460b      	mov	r3, r1
 801e4c2:	f04f 0000 	mov.w	r0, #0
 801e4c6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801e4ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e4ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e4d2:	4b87      	ldr	r3, [pc, #540]	; (801e6f0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 801e4d4:	9301      	str	r3, [sp, #4]
 801e4d6:	4b87      	ldr	r3, [pc, #540]	; (801e6f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 801e4d8:	9300      	str	r3, [sp, #0]
 801e4da:	2326      	movs	r3, #38	; 0x26
 801e4dc:	4a80      	ldr	r2, [pc, #512]	; (801e6e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e4de:	4986      	ldr	r1, [pc, #536]	; (801e6f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 801e4e0:	68f8      	ldr	r0, [r7, #12]
 801e4e2:	47a0      	blx	r4
 801e4e4:	2301      	movs	r3, #1
 801e4e6:	e19f      	b.n	801e828 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 801e4e8:	68bb      	ldr	r3, [r7, #8]
 801e4ea:	781b      	ldrb	r3, [r3, #0]
 801e4ec:	2b09      	cmp	r3, #9
 801e4ee:	d018      	beq.n	801e522 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 801e4f0:	68fb      	ldr	r3, [r7, #12]
 801e4f2:	695c      	ldr	r4, [r3, #20]
 801e4f4:	68bb      	ldr	r3, [r7, #8]
 801e4f6:	781b      	ldrb	r3, [r3, #0]
 801e4f8:	4618      	mov	r0, r3
 801e4fa:	f7fb fe0f 	bl	801a11c <TfLiteTypeGetName>
 801e4fe:	4605      	mov	r5, r0
 801e500:	2009      	movs	r0, #9
 801e502:	f7fb fe0b 	bl	801a11c <TfLiteTypeGetName>
 801e506:	4603      	mov	r3, r0
 801e508:	9303      	str	r3, [sp, #12]
 801e50a:	9502      	str	r5, [sp, #8]
 801e50c:	4b7b      	ldr	r3, [pc, #492]	; (801e6fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 801e50e:	9301      	str	r3, [sp, #4]
 801e510:	4b7b      	ldr	r3, [pc, #492]	; (801e700 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 801e512:	9300      	str	r3, [sp, #0]
 801e514:	2329      	movs	r3, #41	; 0x29
 801e516:	4a72      	ldr	r2, [pc, #456]	; (801e6e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e518:	497a      	ldr	r1, [pc, #488]	; (801e704 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 801e51a:	68f8      	ldr	r0, [r7, #12]
 801e51c:	47a0      	blx	r4
 801e51e:	2301      	movs	r3, #1
 801e520:	e182      	b.n	801e828 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 801e522:	687b      	ldr	r3, [r7, #4]
 801e524:	781b      	ldrb	r3, [r3, #0]
 801e526:	2b07      	cmp	r3, #7
 801e528:	d155      	bne.n	801e5d6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 801e52a:	687b      	ldr	r3, [r7, #4]
 801e52c:	691b      	ldr	r3, [r3, #16]
 801e52e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e532:	d011      	beq.n	801e558 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 801e534:	68fb      	ldr	r3, [r7, #12]
 801e536:	695c      	ldr	r4, [r3, #20]
 801e538:	687b      	ldr	r3, [r7, #4]
 801e53a:	691b      	ldr	r3, [r3, #16]
 801e53c:	4a72      	ldr	r2, [pc, #456]	; (801e708 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 801e53e:	9203      	str	r2, [sp, #12]
 801e540:	9302      	str	r3, [sp, #8]
 801e542:	4b72      	ldr	r3, [pc, #456]	; (801e70c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 801e544:	9301      	str	r3, [sp, #4]
 801e546:	4b65      	ldr	r3, [pc, #404]	; (801e6dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801e548:	9300      	str	r3, [sp, #0]
 801e54a:	232b      	movs	r3, #43	; 0x2b
 801e54c:	4a64      	ldr	r2, [pc, #400]	; (801e6e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e54e:	4965      	ldr	r1, [pc, #404]	; (801e6e4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801e550:	68f8      	ldr	r0, [r7, #12]
 801e552:	47a0      	blx	r4
 801e554:	2301      	movs	r3, #1
 801e556:	e167      	b.n	801e828 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 801e558:	687b      	ldr	r3, [r7, #4]
 801e55a:	edd3 7a03 	vldr	s15, [r3, #12]
 801e55e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 801e710 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801e562:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e56a:	dd07      	ble.n	801e57c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 801e56c:	687b      	ldr	r3, [r7, #4]
 801e56e:	edd3 7a03 	vldr	s15, [r3, #12]
 801e572:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801e710 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801e576:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e57a:	e006      	b.n	801e58a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 801e57c:	687b      	ldr	r3, [r7, #4]
 801e57e:	edd3 7a03 	vldr	s15, [r3, #12]
 801e582:	ed9f 7a63 	vldr	s14, [pc, #396]	; 801e710 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801e586:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e58a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801e58e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801e592:	ed9f 7a60 	vldr	s14, [pc, #384]	; 801e714 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 801e596:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e59a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e59e:	dd64      	ble.n	801e66a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 801e5a0:	68fb      	ldr	r3, [r7, #12]
 801e5a2:	695c      	ldr	r4, [r3, #20]
 801e5a4:	687b      	ldr	r3, [r7, #4]
 801e5a6:	68db      	ldr	r3, [r3, #12]
 801e5a8:	4618      	mov	r0, r3
 801e5aa:	f7e1 ffd7 	bl	800055c <__aeabi_f2d>
 801e5ae:	4602      	mov	r2, r0
 801e5b0:	460b      	mov	r3, r1
 801e5b2:	f04f 0000 	mov.w	r0, #0
 801e5b6:	4958      	ldr	r1, [pc, #352]	; (801e718 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 801e5b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e5bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e5c0:	4b56      	ldr	r3, [pc, #344]	; (801e71c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 801e5c2:	9301      	str	r3, [sp, #4]
 801e5c4:	4b4b      	ldr	r3, [pc, #300]	; (801e6f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 801e5c6:	9300      	str	r3, [sp, #0]
 801e5c8:	232c      	movs	r3, #44	; 0x2c
 801e5ca:	4a45      	ldr	r2, [pc, #276]	; (801e6e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e5cc:	494a      	ldr	r1, [pc, #296]	; (801e6f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 801e5ce:	68f8      	ldr	r0, [r7, #12]
 801e5d0:	47a0      	blx	r4
 801e5d2:	2301      	movs	r3, #1
 801e5d4:	e128      	b.n	801e828 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 801e5d6:	687b      	ldr	r3, [r7, #4]
 801e5d8:	781b      	ldrb	r3, [r3, #0]
 801e5da:	2b09      	cmp	r3, #9
 801e5dc:	d018      	beq.n	801e610 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 801e5de:	68fb      	ldr	r3, [r7, #12]
 801e5e0:	695c      	ldr	r4, [r3, #20]
 801e5e2:	687b      	ldr	r3, [r7, #4]
 801e5e4:	781b      	ldrb	r3, [r3, #0]
 801e5e6:	4618      	mov	r0, r3
 801e5e8:	f7fb fd98 	bl	801a11c <TfLiteTypeGetName>
 801e5ec:	4605      	mov	r5, r0
 801e5ee:	2009      	movs	r0, #9
 801e5f0:	f7fb fd94 	bl	801a11c <TfLiteTypeGetName>
 801e5f4:	4603      	mov	r3, r0
 801e5f6:	9303      	str	r3, [sp, #12]
 801e5f8:	9502      	str	r5, [sp, #8]
 801e5fa:	4b40      	ldr	r3, [pc, #256]	; (801e6fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 801e5fc:	9301      	str	r3, [sp, #4]
 801e5fe:	4b48      	ldr	r3, [pc, #288]	; (801e720 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 801e600:	9300      	str	r3, [sp, #0]
 801e602:	232f      	movs	r3, #47	; 0x2f
 801e604:	4a36      	ldr	r2, [pc, #216]	; (801e6e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e606:	493f      	ldr	r1, [pc, #252]	; (801e704 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 801e608:	68f8      	ldr	r0, [r7, #12]
 801e60a:	47a0      	blx	r4
 801e60c:	2301      	movs	r3, #1
 801e60e:	e10b      	b.n	801e828 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 801e610:	687b      	ldr	r3, [r7, #4]
 801e612:	691b      	ldr	r3, [r3, #16]
 801e614:	f113 0f80 	cmn.w	r3, #128	; 0x80
 801e618:	d012      	beq.n	801e640 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 801e61a:	68fb      	ldr	r3, [r7, #12]
 801e61c:	695c      	ldr	r4, [r3, #20]
 801e61e:	687b      	ldr	r3, [r7, #4]
 801e620:	691b      	ldr	r3, [r3, #16]
 801e622:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 801e626:	9203      	str	r2, [sp, #12]
 801e628:	9302      	str	r3, [sp, #8]
 801e62a:	4b3e      	ldr	r3, [pc, #248]	; (801e724 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 801e62c:	9301      	str	r3, [sp, #4]
 801e62e:	4b2b      	ldr	r3, [pc, #172]	; (801e6dc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801e630:	9300      	str	r3, [sp, #0]
 801e632:	2330      	movs	r3, #48	; 0x30
 801e634:	4a2a      	ldr	r2, [pc, #168]	; (801e6e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e636:	492b      	ldr	r1, [pc, #172]	; (801e6e4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 801e638:	68f8      	ldr	r0, [r7, #12]
 801e63a:	47a0      	blx	r4
 801e63c:	2301      	movs	r3, #1
 801e63e:	e0f3      	b.n	801e828 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 801e640:	687b      	ldr	r3, [r7, #4]
 801e642:	edd3 7a03 	vldr	s15, [r3, #12]
 801e646:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801e728 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 801e64a:	eef4 7a47 	vcmp.f32	s15, s14
 801e64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e652:	d00a      	beq.n	801e66a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 801e654:	68fb      	ldr	r3, [r7, #12]
 801e656:	695c      	ldr	r4, [r3, #20]
 801e658:	4b34      	ldr	r3, [pc, #208]	; (801e72c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 801e65a:	9300      	str	r3, [sp, #0]
 801e65c:	2331      	movs	r3, #49	; 0x31
 801e65e:	4a20      	ldr	r2, [pc, #128]	; (801e6e0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801e660:	4933      	ldr	r1, [pc, #204]	; (801e730 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 801e662:	68f8      	ldr	r0, [r7, #12]
 801e664:	47a0      	blx	r4
 801e666:	2301      	movs	r3, #1
 801e668:	e0de      	b.n	801e828 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 801e66a:	68bb      	ldr	r3, [r7, #8]
 801e66c:	781b      	ldrb	r3, [r3, #0]
 801e66e:	2b07      	cmp	r3, #7
 801e670:	d160      	bne.n	801e734 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 801e672:	68bb      	ldr	r3, [r7, #8]
 801e674:	68db      	ldr	r3, [r3, #12]
 801e676:	4618      	mov	r0, r3
 801e678:	f7e1 ff70 	bl	800055c <__aeabi_f2d>
 801e67c:	4604      	mov	r4, r0
 801e67e:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 801e680:	683b      	ldr	r3, [r7, #0]
 801e682:	681b      	ldr	r3, [r3, #0]
 801e684:	4618      	mov	r0, r3
 801e686:	f7e1 ff69 	bl	800055c <__aeabi_f2d>
 801e68a:	4602      	mov	r2, r0
 801e68c:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 801e68e:	4620      	mov	r0, r4
 801e690:	4629      	mov	r1, r5
 801e692:	f7e1 ffbb 	bl	800060c <__aeabi_dmul>
 801e696:	4602      	mov	r2, r0
 801e698:	460b      	mov	r3, r1
 801e69a:	4610      	mov	r0, r2
 801e69c:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 801e69e:	a30c      	add	r3, pc, #48	; (adr r3, 801e6d0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 801e6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6a4:	f7e2 f8dc 	bl	8000860 <__aeabi_ddiv>
 801e6a8:	4602      	mov	r2, r0
 801e6aa:	460b      	mov	r3, r1
 801e6ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 801e6b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e6b2:	3308      	adds	r3, #8
 801e6b4:	f107 0214 	add.w	r2, r7, #20
 801e6b8:	4611      	mov	r1, r2
 801e6ba:	4618      	mov	r0, r3
 801e6bc:	ed97 0b06 	vldr	d0, [r7, #24]
 801e6c0:	f7fb fdb2 	bl	801a228 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 801e6c4:	697a      	ldr	r2, [r7, #20]
 801e6c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e6c8:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 801e6ca:	e0ac      	b.n	801e826 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 801e6cc:	f3af 8000 	nop.w
 801e6d0:	00140014 	.word	0x00140014
 801e6d4:	3f240014 	.word	0x3f240014
 801e6d8:	08028588 	.word	0x08028588
 801e6dc:	0802858c 	.word	0x0802858c
 801e6e0:	080284d8 	.word	0x080284d8
 801e6e4:	0802856c 	.word	0x0802856c
 801e6e8:	38000000 	.word	0x38000000
 801e6ec:	3303126f 	.word	0x3303126f
 801e6f0:	080285c8 	.word	0x080285c8
 801e6f4:	080285d4 	.word	0x080285d4
 801e6f8:	080285a8 	.word	0x080285a8
 801e6fc:	08028608 	.word	0x08028608
 801e700:	08028614 	.word	0x08028614
 801e704:	080285ec 	.word	0x080285ec
 801e708:	ffff8000 	.word	0xffff8000
 801e70c:	08028620 	.word	0x08028620
 801e710:	37800000 	.word	0x37800000
 801e714:	3283126f 	.word	0x3283126f
 801e718:	3ef00000 	.word	0x3ef00000
 801e71c:	08028628 	.word	0x08028628
 801e720:	08028634 	.word	0x08028634
 801e724:	08028644 	.word	0x08028644
 801e728:	3b800000 	.word	0x3b800000
 801e72c:	08028664 	.word	0x08028664
 801e730:	0802864c 	.word	0x0802864c
          static_cast<double>(params->beta),
 801e734:	683b      	ldr	r3, [r7, #0]
 801e736:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 801e738:	4618      	mov	r0, r3
 801e73a:	f7e1 ff0f 	bl	800055c <__aeabi_f2d>
 801e73e:	4680      	mov	r8, r0
 801e740:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 801e742:	68bb      	ldr	r3, [r7, #8]
 801e744:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 801e746:	4618      	mov	r0, r3
 801e748:	f7e1 ff08 	bl	800055c <__aeabi_f2d>
 801e74c:	4682      	mov	sl, r0
 801e74e:	468b      	mov	fp, r1
 801e750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e752:	3308      	adds	r3, #8
 801e754:	f107 0210 	add.w	r2, r7, #16
 801e758:	4619      	mov	r1, r3
 801e75a:	2005      	movs	r0, #5
 801e75c:	ec4b ab11 	vmov	d1, sl, fp
 801e760:	ec49 8b10 	vmov	d0, r8, r9
 801e764:	f7fb fe2c 	bl	801a3c0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 801e768:	693a      	ldr	r2, [r7, #16]
 801e76a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e76c:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 801e76e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e770:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 801e772:	221f      	movs	r2, #31
 801e774:	4619      	mov	r1, r3
 801e776:	2005      	movs	r0, #5
 801e778:	f7fb fe6a 	bl	801a450 <_ZN6tflite20CalculateInputRadiusEiii>
 801e77c:	4603      	mov	r3, r0
 801e77e:	4618      	mov	r0, r3
 801e780:	f7e1 feda 	bl	8000538 <__aeabi_i2d>
 801e784:	4602      	mov	r2, r0
 801e786:	460b      	mov	r3, r1
 801e788:	4614      	mov	r4, r2
 801e78a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 801e78e:	4620      	mov	r0, r4
 801e790:	4629      	mov	r1, r5
 801e792:	f7e2 f9eb 	bl	8000b6c <__aeabi_d2iz>
 801e796:	4602      	mov	r2, r0
 801e798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e79a:	619a      	str	r2, [r3, #24]
    }
 801e79c:	e043      	b.n	801e826 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 801e79e:	68bb      	ldr	r3, [r7, #8]
 801e7a0:	781b      	ldrb	r3, [r3, #0]
 801e7a2:	2b01      	cmp	r3, #1
 801e7a4:	d018      	beq.n	801e7d8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 801e7a6:	68fb      	ldr	r3, [r7, #12]
 801e7a8:	695c      	ldr	r4, [r3, #20]
 801e7aa:	68bb      	ldr	r3, [r7, #8]
 801e7ac:	781b      	ldrb	r3, [r3, #0]
 801e7ae:	4618      	mov	r0, r3
 801e7b0:	f7fb fcb4 	bl	801a11c <TfLiteTypeGetName>
 801e7b4:	4605      	mov	r5, r0
 801e7b6:	2001      	movs	r0, #1
 801e7b8:	f7fb fcb0 	bl	801a11c <TfLiteTypeGetName>
 801e7bc:	4603      	mov	r3, r0
 801e7be:	9303      	str	r3, [sp, #12]
 801e7c0:	9502      	str	r5, [sp, #8]
 801e7c2:	4b1c      	ldr	r3, [pc, #112]	; (801e834 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 801e7c4:	9301      	str	r3, [sp, #4]
 801e7c6:	4b1c      	ldr	r3, [pc, #112]	; (801e838 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 801e7c8:	9300      	str	r3, [sp, #0]
 801e7ca:	234e      	movs	r3, #78	; 0x4e
 801e7cc:	4a1b      	ldr	r2, [pc, #108]	; (801e83c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 801e7ce:	491c      	ldr	r1, [pc, #112]	; (801e840 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 801e7d0:	68f8      	ldr	r0, [r7, #12]
 801e7d2:	47a0      	blx	r4
 801e7d4:	2301      	movs	r3, #1
 801e7d6:	e027      	b.n	801e828 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 801e7d8:	687b      	ldr	r3, [r7, #4]
 801e7da:	781b      	ldrb	r3, [r3, #0]
 801e7dc:	2b01      	cmp	r3, #1
 801e7de:	d018      	beq.n	801e812 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 801e7e0:	68fb      	ldr	r3, [r7, #12]
 801e7e2:	695c      	ldr	r4, [r3, #20]
 801e7e4:	687b      	ldr	r3, [r7, #4]
 801e7e6:	781b      	ldrb	r3, [r3, #0]
 801e7e8:	4618      	mov	r0, r3
 801e7ea:	f7fb fc97 	bl	801a11c <TfLiteTypeGetName>
 801e7ee:	4605      	mov	r5, r0
 801e7f0:	2001      	movs	r0, #1
 801e7f2:	f7fb fc93 	bl	801a11c <TfLiteTypeGetName>
 801e7f6:	4603      	mov	r3, r0
 801e7f8:	9303      	str	r3, [sp, #12]
 801e7fa:	9502      	str	r5, [sp, #8]
 801e7fc:	4b0d      	ldr	r3, [pc, #52]	; (801e834 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 801e7fe:	9301      	str	r3, [sp, #4]
 801e800:	4b10      	ldr	r3, [pc, #64]	; (801e844 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 801e802:	9300      	str	r3, [sp, #0]
 801e804:	234f      	movs	r3, #79	; 0x4f
 801e806:	4a0d      	ldr	r2, [pc, #52]	; (801e83c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 801e808:	490d      	ldr	r1, [pc, #52]	; (801e840 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 801e80a:	68f8      	ldr	r0, [r7, #12]
 801e80c:	47a0      	blx	r4
 801e80e:	2301      	movs	r3, #1
 801e810:	e00a      	b.n	801e828 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 801e812:	683b      	ldr	r3, [r7, #0]
 801e814:	681b      	ldr	r3, [r3, #0]
 801e816:	4618      	mov	r0, r3
 801e818:	f7e1 fea0 	bl	800055c <__aeabi_f2d>
 801e81c:	4602      	mov	r2, r0
 801e81e:	460b      	mov	r3, r1
 801e820:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801e822:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 801e826:	2300      	movs	r3, #0
}
 801e828:	4618      	mov	r0, r3
 801e82a:	3728      	adds	r7, #40	; 0x28
 801e82c:	46bd      	mov	sp, r7
 801e82e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801e832:	bf00      	nop
 801e834:	08028688 	.word	0x08028688
 801e838:	08028614 	.word	0x08028614
 801e83c:	080284d8 	.word	0x080284d8
 801e840:	080285ec 	.word	0x080285ec
 801e844:	08028634 	.word	0x08028634

0801e848 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 801e848:	b580      	push	{r7, lr}
 801e84a:	b084      	sub	sp, #16
 801e84c:	af00      	add	r7, sp, #0
 801e84e:	60f8      	str	r0, [r7, #12]
 801e850:	60b9      	str	r1, [r7, #8]
 801e852:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801e854:	68fb      	ldr	r3, [r7, #12]
 801e856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e858:	2b00      	cmp	r3, #0
 801e85a:	d101      	bne.n	801e860 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 801e85c:	f004 f84e 	bl	80228fc <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 801e860:	68fb      	ldr	r3, [r7, #12]
 801e862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e864:	2138      	movs	r1, #56	; 0x38
 801e866:	68f8      	ldr	r0, [r7, #12]
 801e868:	4798      	blx	r3
 801e86a:	4603      	mov	r3, r0
}
 801e86c:	4618      	mov	r0, r3
 801e86e:	3710      	adds	r7, #16
 801e870:	46bd      	mov	sp, r7
 801e872:	bd80      	pop	{r7, pc}

0801e874 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 801e874:	b580      	push	{r7, lr}
 801e876:	b082      	sub	sp, #8
 801e878:	af00      	add	r7, sp, #0
 801e87a:	6078      	str	r0, [r7, #4]
 801e87c:	ed87 0a00 	vstr	s0, [r7]
 801e880:	ed97 0a00 	vldr	s0, [r7]
 801e884:	f7e2 ffe5 	bl	8001852 <_ZSt3expf>
 801e888:	eef0 7a40 	vmov.f32	s15, s0
 801e88c:	eeb0 0a67 	vmov.f32	s0, s15
 801e890:	3708      	adds	r7, #8
 801e892:	46bd      	mov	sp, r7
 801e894:	bd80      	pop	{r7, pc}

0801e896 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 801e896:	b580      	push	{r7, lr}
 801e898:	b082      	sub	sp, #8
 801e89a:	af00      	add	r7, sp, #0
 801e89c:	ed87 0a01 	vstr	s0, [r7, #4]
 801e8a0:	ed97 0a01 	vldr	s0, [r7, #4]
 801e8a4:	2000      	movs	r0, #0
 801e8a6:	f7ff ffe5 	bl	801e874 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 801e8aa:	eef0 7a40 	vmov.f32	s15, s0
 801e8ae:	eeb0 0a67 	vmov.f32	s0, s15
 801e8b2:	3708      	adds	r7, #8
 801e8b4:	46bd      	mov	sp, r7
 801e8b6:	bd80      	pop	{r7, pc}

0801e8b8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 801e8b8:	b480      	push	{r7}
 801e8ba:	b083      	sub	sp, #12
 801e8bc:	af00      	add	r7, sp, #0
 801e8be:	6078      	str	r0, [r7, #4]
 801e8c0:	4b03      	ldr	r3, [pc, #12]	; (801e8d0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 801e8c2:	4618      	mov	r0, r3
 801e8c4:	370c      	adds	r7, #12
 801e8c6:	46bd      	mov	sp, r7
 801e8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8cc:	4770      	bx	lr
 801e8ce:	bf00      	nop
 801e8d0:	0801e897 	.word	0x0801e897

0801e8d4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 801e8d4:	b480      	push	{r7}
 801e8d6:	b083      	sub	sp, #12
 801e8d8:	af00      	add	r7, sp, #0
 801e8da:	6078      	str	r0, [r7, #4]
 801e8dc:	ed87 0a00 	vstr	s0, [r7]
 801e8e0:	edd7 7a00 	vldr	s15, [r7]
 801e8e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e8e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e8ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e8f0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801e8f4:	eef0 7a66 	vmov.f32	s15, s13
 801e8f8:	eeb0 0a67 	vmov.f32	s0, s15
 801e8fc:	370c      	adds	r7, #12
 801e8fe:	46bd      	mov	sp, r7
 801e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e904:	4770      	bx	lr

0801e906 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 801e906:	b580      	push	{r7, lr}
 801e908:	b082      	sub	sp, #8
 801e90a:	af00      	add	r7, sp, #0
 801e90c:	ed87 0a01 	vstr	s0, [r7, #4]
 801e910:	ed97 0a01 	vldr	s0, [r7, #4]
 801e914:	2000      	movs	r0, #0
 801e916:	f7ff ffdd 	bl	801e8d4 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 801e91a:	eef0 7a40 	vmov.f32	s15, s0
 801e91e:	eeb0 0a67 	vmov.f32	s0, s15
 801e922:	3708      	adds	r7, #8
 801e924:	46bd      	mov	sp, r7
 801e926:	bd80      	pop	{r7, pc}

0801e928 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 801e928:	b480      	push	{r7}
 801e92a:	b083      	sub	sp, #12
 801e92c:	af00      	add	r7, sp, #0
 801e92e:	6078      	str	r0, [r7, #4]
 801e930:	4b03      	ldr	r3, [pc, #12]	; (801e940 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 801e932:	4618      	mov	r0, r3
 801e934:	370c      	adds	r7, #12
 801e936:	46bd      	mov	sp, r7
 801e938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e93c:	4770      	bx	lr
 801e93e:	bf00      	nop
 801e940:	0801e907 	.word	0x0801e907

0801e944 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 801e944:	b590      	push	{r4, r7, lr}
 801e946:	b08f      	sub	sp, #60	; 0x3c
 801e948:	af04      	add	r7, sp, #16
 801e94a:	6078      	str	r0, [r7, #4]
 801e94c:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 801e94e:	6838      	ldr	r0, [r7, #0]
 801e950:	f7fd fa9b 	bl	801be8a <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801e954:	4603      	mov	r3, r0
 801e956:	2b01      	cmp	r3, #1
 801e958:	bf14      	ite	ne
 801e95a:	2301      	movne	r3, #1
 801e95c:	2300      	moveq	r3, #0
 801e95e:	b2db      	uxtb	r3, r3
 801e960:	2b00      	cmp	r3, #0
 801e962:	d013      	beq.n	801e98c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 801e964:	687b      	ldr	r3, [r7, #4]
 801e966:	695c      	ldr	r4, [r3, #20]
 801e968:	6838      	ldr	r0, [r7, #0]
 801e96a:	f7fd fa8e 	bl	801be8a <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801e96e:	4603      	mov	r3, r0
 801e970:	2201      	movs	r2, #1
 801e972:	9203      	str	r2, [sp, #12]
 801e974:	9302      	str	r3, [sp, #8]
 801e976:	4b7c      	ldr	r3, [pc, #496]	; (801eb68 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 801e978:	9301      	str	r3, [sp, #4]
 801e97a:	4b7c      	ldr	r3, [pc, #496]	; (801eb6c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 801e97c:	9300      	str	r3, [sp, #0]
 801e97e:	235d      	movs	r3, #93	; 0x5d
 801e980:	4a7b      	ldr	r2, [pc, #492]	; (801eb70 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801e982:	497c      	ldr	r1, [pc, #496]	; (801eb74 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801e984:	6878      	ldr	r0, [r7, #4]
 801e986:	47a0      	blx	r4
 801e988:	2301      	movs	r3, #1
 801e98a:	e146      	b.n	801ec1a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 801e98c:	6838      	ldr	r0, [r7, #0]
 801e98e:	f7fd fa89 	bl	801bea4 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801e992:	4603      	mov	r3, r0
 801e994:	2b01      	cmp	r3, #1
 801e996:	bf14      	ite	ne
 801e998:	2301      	movne	r3, #1
 801e99a:	2300      	moveq	r3, #0
 801e99c:	b2db      	uxtb	r3, r3
 801e99e:	2b00      	cmp	r3, #0
 801e9a0:	d013      	beq.n	801e9ca <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 801e9a2:	687b      	ldr	r3, [r7, #4]
 801e9a4:	695c      	ldr	r4, [r3, #20]
 801e9a6:	6838      	ldr	r0, [r7, #0]
 801e9a8:	f7fd fa7c 	bl	801bea4 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801e9ac:	4603      	mov	r3, r0
 801e9ae:	2201      	movs	r2, #1
 801e9b0:	9203      	str	r2, [sp, #12]
 801e9b2:	9302      	str	r3, [sp, #8]
 801e9b4:	4b6c      	ldr	r3, [pc, #432]	; (801eb68 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 801e9b6:	9301      	str	r3, [sp, #4]
 801e9b8:	4b6f      	ldr	r3, [pc, #444]	; (801eb78 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 801e9ba:	9300      	str	r3, [sp, #0]
 801e9bc:	235e      	movs	r3, #94	; 0x5e
 801e9be:	4a6c      	ldr	r2, [pc, #432]	; (801eb70 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801e9c0:	496c      	ldr	r1, [pc, #432]	; (801eb74 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801e9c2:	6878      	ldr	r0, [r7, #4]
 801e9c4:	47a0      	blx	r4
 801e9c6:	2301      	movs	r3, #1
 801e9c8:	e127      	b.n	801ec1a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 801e9ca:	2200      	movs	r2, #0
 801e9cc:	6839      	ldr	r1, [r7, #0]
 801e9ce:	6878      	ldr	r0, [r7, #4]
 801e9d0:	f7fb fe94 	bl	801a6fc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801e9d4:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 801e9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e9d8:	2b00      	cmp	r3, #0
 801e9da:	d10a      	bne.n	801e9f2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 801e9dc:	687b      	ldr	r3, [r7, #4]
 801e9de:	695c      	ldr	r4, [r3, #20]
 801e9e0:	4b66      	ldr	r3, [pc, #408]	; (801eb7c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 801e9e2:	9300      	str	r3, [sp, #0]
 801e9e4:	2360      	movs	r3, #96	; 0x60
 801e9e6:	4a62      	ldr	r2, [pc, #392]	; (801eb70 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801e9e8:	4965      	ldr	r1, [pc, #404]	; (801eb80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801e9ea:	6878      	ldr	r0, [r7, #4]
 801e9ec:	47a0      	blx	r4
 801e9ee:	2301      	movs	r3, #1
 801e9f0:	e113      	b.n	801ec1a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 801e9f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e9f4:	f7fb fe05 	bl	801a602 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 801e9f8:	4603      	mov	r3, r0
 801e9fa:	2b00      	cmp	r3, #0
 801e9fc:	bfd4      	ite	le
 801e9fe:	2301      	movle	r3, #1
 801ea00:	2300      	movgt	r3, #0
 801ea02:	b2db      	uxtb	r3, r3
 801ea04:	2b00      	cmp	r3, #0
 801ea06:	d00a      	beq.n	801ea1e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 801ea08:	687b      	ldr	r3, [r7, #4]
 801ea0a:	695c      	ldr	r4, [r3, #20]
 801ea0c:	4b5d      	ldr	r3, [pc, #372]	; (801eb84 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 801ea0e:	9300      	str	r3, [sp, #0]
 801ea10:	2361      	movs	r3, #97	; 0x61
 801ea12:	4a57      	ldr	r2, [pc, #348]	; (801eb70 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801ea14:	495a      	ldr	r1, [pc, #360]	; (801eb80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801ea16:	6878      	ldr	r0, [r7, #4]
 801ea18:	47a0      	blx	r4
 801ea1a:	2301      	movs	r3, #1
 801ea1c:	e0fd      	b.n	801ec1a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 801ea1e:	2200      	movs	r2, #0
 801ea20:	6839      	ldr	r1, [r7, #0]
 801ea22:	6878      	ldr	r0, [r7, #4]
 801ea24:	f7fb fe7a 	bl	801a71c <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801ea28:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 801ea2a:	6a3b      	ldr	r3, [r7, #32]
 801ea2c:	2b00      	cmp	r3, #0
 801ea2e:	d10a      	bne.n	801ea46 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 801ea30:	687b      	ldr	r3, [r7, #4]
 801ea32:	695c      	ldr	r4, [r3, #20]
 801ea34:	4b54      	ldr	r3, [pc, #336]	; (801eb88 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 801ea36:	9300      	str	r3, [sp, #0]
 801ea38:	2363      	movs	r3, #99	; 0x63
 801ea3a:	4a4d      	ldr	r2, [pc, #308]	; (801eb70 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801ea3c:	4950      	ldr	r1, [pc, #320]	; (801eb80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801ea3e:	6878      	ldr	r0, [r7, #4]
 801ea40:	47a0      	blx	r4
 801ea42:	2301      	movs	r3, #1
 801ea44:	e0e9      	b.n	801ec1a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 801ea46:	683b      	ldr	r3, [r7, #0]
 801ea48:	691b      	ldr	r3, [r3, #16]
 801ea4a:	2b00      	cmp	r3, #0
 801ea4c:	d10a      	bne.n	801ea64 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 801ea4e:	687b      	ldr	r3, [r7, #4]
 801ea50:	695c      	ldr	r4, [r3, #20]
 801ea52:	4b4e      	ldr	r3, [pc, #312]	; (801eb8c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 801ea54:	9300      	str	r3, [sp, #0]
 801ea56:	2365      	movs	r3, #101	; 0x65
 801ea58:	4a45      	ldr	r2, [pc, #276]	; (801eb70 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801ea5a:	4949      	ldr	r1, [pc, #292]	; (801eb80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801ea5c:	6878      	ldr	r0, [r7, #4]
 801ea5e:	47a0      	blx	r4
 801ea60:	2301      	movs	r3, #1
 801ea62:	e0da      	b.n	801ec1a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 801ea64:	683b      	ldr	r3, [r7, #0]
 801ea66:	691b      	ldr	r3, [r3, #16]
 801ea68:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 801ea6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea6c:	781b      	ldrb	r3, [r3, #0]
 801ea6e:	2b07      	cmp	r3, #7
 801ea70:	d12f      	bne.n	801ead2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 801ea72:	687b      	ldr	r3, [r7, #4]
 801ea74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ea76:	f240 4102 	movw	r1, #1026	; 0x402
 801ea7a:	6878      	ldr	r0, [r7, #4]
 801ea7c:	4798      	blx	r3
 801ea7e:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 801ea80:	69bb      	ldr	r3, [r7, #24]
 801ea82:	2b00      	cmp	r3, #0
 801ea84:	d10a      	bne.n	801ea9c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 801ea86:	687b      	ldr	r3, [r7, #4]
 801ea88:	695c      	ldr	r4, [r3, #20]
 801ea8a:	4b41      	ldr	r3, [pc, #260]	; (801eb90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 801ea8c:	9300      	str	r3, [sp, #0]
 801ea8e:	236b      	movs	r3, #107	; 0x6b
 801ea90:	4a37      	ldr	r2, [pc, #220]	; (801eb70 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801ea92:	493b      	ldr	r1, [pc, #236]	; (801eb80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801ea94:	6878      	ldr	r0, [r7, #4]
 801ea96:	47a0      	blx	r4
 801ea98:	2301      	movs	r3, #1
 801ea9a:	e0be      	b.n	801ec1a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 801ea9c:	69fb      	ldr	r3, [r7, #28]
 801ea9e:	69ba      	ldr	r2, [r7, #24]
 801eaa0:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 801eaa2:	687b      	ldr	r3, [r7, #4]
 801eaa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eaa6:	f240 4102 	movw	r1, #1026	; 0x402
 801eaaa:	6878      	ldr	r0, [r7, #4]
 801eaac:	4798      	blx	r3
 801eaae:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 801eab0:	697b      	ldr	r3, [r7, #20]
 801eab2:	2b00      	cmp	r3, #0
 801eab4:	d10a      	bne.n	801eacc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 801eab6:	687b      	ldr	r3, [r7, #4]
 801eab8:	695c      	ldr	r4, [r3, #20]
 801eaba:	4b36      	ldr	r3, [pc, #216]	; (801eb94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 801eabc:	9300      	str	r3, [sp, #0]
 801eabe:	236f      	movs	r3, #111	; 0x6f
 801eac0:	4a2b      	ldr	r2, [pc, #172]	; (801eb70 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801eac2:	492f      	ldr	r1, [pc, #188]	; (801eb80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801eac4:	6878      	ldr	r0, [r7, #4]
 801eac6:	47a0      	blx	r4
 801eac8:	2301      	movs	r3, #1
 801eaca:	e0a6      	b.n	801ec1a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 801eacc:	69fb      	ldr	r3, [r7, #28]
 801eace:	697a      	ldr	r2, [r7, #20]
 801ead0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 801ead2:	6a3b      	ldr	r3, [r7, #32]
 801ead4:	781b      	ldrb	r3, [r3, #0]
 801ead6:	2b07      	cmp	r3, #7
 801ead8:	d112      	bne.n	801eb00 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 801eada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eadc:	781b      	ldrb	r3, [r3, #0]
 801eade:	2b09      	cmp	r3, #9
 801eae0:	d028      	beq.n	801eb34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801eae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eae4:	781b      	ldrb	r3, [r3, #0]
 801eae6:	2b07      	cmp	r3, #7
 801eae8:	d024      	beq.n	801eb34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801eaea:	687b      	ldr	r3, [r7, #4]
 801eaec:	695c      	ldr	r4, [r3, #20]
 801eaee:	4b2a      	ldr	r3, [pc, #168]	; (801eb98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 801eaf0:	9300      	str	r3, [sp, #0]
 801eaf2:	2375      	movs	r3, #117	; 0x75
 801eaf4:	4a1e      	ldr	r2, [pc, #120]	; (801eb70 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801eaf6:	4922      	ldr	r1, [pc, #136]	; (801eb80 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801eaf8:	6878      	ldr	r0, [r7, #4]
 801eafa:	47a0      	blx	r4
 801eafc:	2301      	movs	r3, #1
 801eafe:	e08c      	b.n	801ec1a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 801eb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb02:	781a      	ldrb	r2, [r3, #0]
 801eb04:	6a3b      	ldr	r3, [r7, #32]
 801eb06:	781b      	ldrb	r3, [r3, #0]
 801eb08:	429a      	cmp	r2, r3
 801eb0a:	d013      	beq.n	801eb34 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 801eb0c:	687b      	ldr	r3, [r7, #4]
 801eb0e:	695c      	ldr	r4, [r3, #20]
 801eb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb12:	781b      	ldrb	r3, [r3, #0]
 801eb14:	461a      	mov	r2, r3
 801eb16:	6a3b      	ldr	r3, [r7, #32]
 801eb18:	781b      	ldrb	r3, [r3, #0]
 801eb1a:	9303      	str	r3, [sp, #12]
 801eb1c:	9202      	str	r2, [sp, #8]
 801eb1e:	4b1f      	ldr	r3, [pc, #124]	; (801eb9c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 801eb20:	9301      	str	r3, [sp, #4]
 801eb22:	4b1f      	ldr	r3, [pc, #124]	; (801eba0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 801eb24:	9300      	str	r3, [sp, #0]
 801eb26:	2378      	movs	r3, #120	; 0x78
 801eb28:	4a11      	ldr	r2, [pc, #68]	; (801eb70 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801eb2a:	4912      	ldr	r1, [pc, #72]	; (801eb74 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801eb2c:	6878      	ldr	r0, [r7, #4]
 801eb2e:	47a0      	blx	r4
 801eb30:	2301      	movs	r3, #1
 801eb32:	e072      	b.n	801ec1a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 801eb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb36:	781b      	ldrb	r3, [r3, #0]
 801eb38:	2b07      	cmp	r3, #7
 801eb3a:	d161      	bne.n	801ec00 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 801eb3c:	6a3b      	ldr	r3, [r7, #32]
 801eb3e:	691b      	ldr	r3, [r3, #16]
 801eb40:	2b00      	cmp	r3, #0
 801eb42:	d035      	beq.n	801ebb0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 801eb44:	687b      	ldr	r3, [r7, #4]
 801eb46:	695c      	ldr	r4, [r3, #20]
 801eb48:	6a3b      	ldr	r3, [r7, #32]
 801eb4a:	691b      	ldr	r3, [r3, #16]
 801eb4c:	2200      	movs	r2, #0
 801eb4e:	9203      	str	r2, [sp, #12]
 801eb50:	9302      	str	r3, [sp, #8]
 801eb52:	4b14      	ldr	r3, [pc, #80]	; (801eba4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 801eb54:	9301      	str	r3, [sp, #4]
 801eb56:	4b14      	ldr	r3, [pc, #80]	; (801eba8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 801eb58:	9300      	str	r3, [sp, #0]
 801eb5a:	237d      	movs	r3, #125	; 0x7d
 801eb5c:	4a04      	ldr	r2, [pc, #16]	; (801eb70 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801eb5e:	4905      	ldr	r1, [pc, #20]	; (801eb74 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 801eb60:	6878      	ldr	r0, [r7, #4]
 801eb62:	47a0      	blx	r4
 801eb64:	2301      	movs	r3, #1
 801eb66:	e058      	b.n	801ec1a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 801eb68:	08028698 	.word	0x08028698
 801eb6c:	0802869c 	.word	0x0802869c
 801eb70:	080284d8 	.word	0x080284d8
 801eb74:	0802856c 	.word	0x0802856c
 801eb78:	080286ac 	.word	0x080286ac
 801eb7c:	080286c0 	.word	0x080286c0
 801eb80:	0802864c 	.word	0x0802864c
 801eb84:	080286d4 	.word	0x080286d4
 801eb88:	080286f0 	.word	0x080286f0
 801eb8c:	08028704 	.word	0x08028704
 801eb90:	08028720 	.word	0x08028720
 801eb94:	08028738 	.word	0x08028738
 801eb98:	0802875c 	.word	0x0802875c
 801eb9c:	08028634 	.word	0x08028634
 801eba0:	08028614 	.word	0x08028614
 801eba4:	08028588 	.word	0x08028588
 801eba8:	0802858c 	.word	0x0802858c
 801ebac:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 801ebb0:	f107 0308 	add.w	r3, r7, #8
 801ebb4:	4618      	mov	r0, r3
 801ebb6:	f7ff fe7f 	bl	801e8b8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 801ebba:	69fb      	ldr	r3, [r7, #28]
 801ebbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ebbe:	f240 2201 	movw	r2, #513	; 0x201
 801ebc2:	4619      	mov	r1, r3
 801ebc4:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 801ebac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 801ebc8:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 801ebcc:	f7ff faf4 	bl	801e1b8 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 801ebd0:	f107 030c 	add.w	r3, r7, #12
 801ebd4:	4618      	mov	r0, r3
 801ebd6:	f7ff fea7 	bl	801e928 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 801ebda:	69fb      	ldr	r3, [r7, #28]
 801ebdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ebde:	f240 2201 	movw	r2, #513	; 0x201
 801ebe2:	4619      	mov	r1, r3
 801ebe4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801ebe8:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 801ebac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 801ebec:	f7ff fae4 	bl	801e1b8 <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 801ebf0:	6a3b      	ldr	r3, [r7, #32]
 801ebf2:	691a      	ldr	r2, [r3, #16]
 801ebf4:	69fb      	ldr	r3, [r7, #28]
 801ebf6:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 801ebf8:	6a3b      	ldr	r3, [r7, #32]
 801ebfa:	68da      	ldr	r2, [r3, #12]
 801ebfc:	69fb      	ldr	r3, [r7, #28]
 801ebfe:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 801ec00:	683b      	ldr	r3, [r7, #0]
 801ec02:	695b      	ldr	r3, [r3, #20]
 801ec04:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 801ec06:	69fb      	ldr	r3, [r7, #28]
 801ec08:	9300      	str	r3, [sp, #0]
 801ec0a:	693b      	ldr	r3, [r7, #16]
 801ec0c:	6a3a      	ldr	r2, [r7, #32]
 801ec0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ec10:	6878      	ldr	r0, [r7, #4]
 801ec12:	f7ff fbfd 	bl	801e410 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 801ec16:	4603      	mov	r3, r0
 801ec18:	bf00      	nop
}
 801ec1a:	4618      	mov	r0, r3
 801ec1c:	372c      	adds	r7, #44	; 0x2c
 801ec1e:	46bd      	mov	sp, r7
 801ec20:	bd90      	pop	{r4, r7, pc}
 801ec22:	bf00      	nop

0801ec24 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
 801ec24:	b580      	push	{r7, lr}
 801ec26:	b084      	sub	sp, #16
 801ec28:	af00      	add	r7, sp, #0
 801ec2a:	6078      	str	r0, [r7, #4]
 801ec2c:	6039      	str	r1, [r7, #0]
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
 801ec2e:	4b21      	ldr	r3, [pc, #132]	; (801ecb4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801ec30:	681a      	ldr	r2, [r3, #0]
 801ec32:	683b      	ldr	r3, [r7, #0]
 801ec34:	425b      	negs	r3, r3
 801ec36:	441a      	add	r2, r3
 801ec38:	4b1f      	ldr	r3, [pc, #124]	; (801ecb8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x94>)
 801ec3a:	681b      	ldr	r3, [r3, #0]
 801ec3c:	429a      	cmp	r2, r3
 801ec3e:	d224      	bcs.n	801ec8a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x66>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 801ec40:	4b1e      	ldr	r3, [pc, #120]	; (801ecbc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 801ec42:	681b      	ldr	r3, [r3, #0]
 801ec44:	2b09      	cmp	r3, #9
 801ec46:	d906      	bls.n	801ec56 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x32>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 801ec48:	683b      	ldr	r3, [r7, #0]
 801ec4a:	4619      	mov	r1, r3
 801ec4c:	481c      	ldr	r0, [pc, #112]	; (801ecc0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x9c>)
 801ec4e:	f7e7 f87a 	bl	8005d46 <_Z9ei_printfPKcz>
        (int)bytes);
      return NULL;
 801ec52:	2300      	movs	r3, #0
 801ec54:	e029      	b.n	801ecaa <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 801ec56:	2101      	movs	r1, #1
 801ec58:	6838      	ldr	r0, [r7, #0]
 801ec5a:	f7fb fa29 	bl	801a0b0 <_Z9ei_callocjj>
 801ec5e:	60f8      	str	r0, [r7, #12]
    if (ptr == NULL) {
 801ec60:	68fb      	ldr	r3, [r7, #12]
 801ec62:	2b00      	cmp	r3, #0
 801ec64:	d106      	bne.n	801ec74 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x50>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 801ec66:	683b      	ldr	r3, [r7, #0]
 801ec68:	4619      	mov	r1, r3
 801ec6a:	4816      	ldr	r0, [pc, #88]	; (801ecc4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa0>)
 801ec6c:	f7e7 f86b 	bl	8005d46 <_Z9ei_printfPKcz>
      return NULL;
 801ec70:	2300      	movs	r3, #0
 801ec72:	e01a      	b.n	801ecaa <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
 801ec74:	4b11      	ldr	r3, [pc, #68]	; (801ecbc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 801ec76:	681b      	ldr	r3, [r3, #0]
 801ec78:	1c5a      	adds	r2, r3, #1
 801ec7a:	4910      	ldr	r1, [pc, #64]	; (801ecbc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x98>)
 801ec7c:	600a      	str	r2, [r1, #0]
 801ec7e:	4912      	ldr	r1, [pc, #72]	; (801ecc8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0xa4>)
 801ec80:	68fa      	ldr	r2, [r7, #12]
 801ec82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return ptr;
 801ec86:	68fb      	ldr	r3, [r7, #12]
 801ec88:	e00f      	b.n	801ecaa <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x86>
  }

  current_location -= bytes;
 801ec8a:	4b0a      	ldr	r3, [pc, #40]	; (801ecb4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801ec8c:	681a      	ldr	r2, [r3, #0]
 801ec8e:	683b      	ldr	r3, [r7, #0]
 801ec90:	425b      	negs	r3, r3
 801ec92:	4413      	add	r3, r2
 801ec94:	4a07      	ldr	r2, [pc, #28]	; (801ecb4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801ec96:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 801ec98:	4b06      	ldr	r3, [pc, #24]	; (801ecb4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x90>)
 801ec9a:	681b      	ldr	r3, [r3, #0]
 801ec9c:	60fb      	str	r3, [r7, #12]
  memset(ptr, 0, bytes);
 801ec9e:	683a      	ldr	r2, [r7, #0]
 801eca0:	2100      	movs	r1, #0
 801eca2:	68f8      	ldr	r0, [r7, #12]
 801eca4:	f003 fed4 	bl	8022a50 <memset>

  return ptr;
 801eca8:	68fb      	ldr	r3, [r7, #12]
}
 801ecaa:	4618      	mov	r0, r3
 801ecac:	3710      	adds	r7, #16
 801ecae:	46bd      	mov	sp, r7
 801ecb0:	bd80      	pop	{r7, pc}
 801ecb2:	bf00      	nop
 801ecb4:	20000678 	.word	0x20000678
 801ecb8:	20000674 	.word	0x20000674
 801ecbc:	20000b10 	.word	0x20000b10
 801ecc0:	080287ac 	.word	0x080287ac
 801ecc4:	0802882c 	.word	0x0802882c
 801ecc8:	20000ae8 	.word	0x20000ae8

0801eccc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 801eccc:	b580      	push	{r7, lr}
 801ecce:	b086      	sub	sp, #24
 801ecd0:	af00      	add	r7, sp, #0
 801ecd2:	60f8      	str	r0, [r7, #12]
 801ecd4:	60b9      	str	r1, [r7, #8]
 801ecd6:	607a      	str	r2, [r7, #4]
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 801ecd8:	4b1b      	ldr	r3, [pc, #108]	; (801ed48 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801ecda:	681b      	ldr	r3, [r3, #0]
 801ecdc:	2b03      	cmp	r3, #3
 801ecde:	d906      	bls.n	801ecee <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x22>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 801ece0:	68bb      	ldr	r3, [r7, #8]
 801ece2:	4619      	mov	r1, r3
 801ece4:	4819      	ldr	r0, [pc, #100]	; (801ed4c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x80>)
 801ece6:	f7e7 f82e 	bl	8005d46 <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 801ecea:	2301      	movs	r3, #1
 801ecec:	e028      	b.n	801ed40 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffer_t b;
  b.bytes = bytes;
 801ecee:	68bb      	ldr	r3, [r7, #8]
 801ecf0:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
 801ecf2:	693b      	ldr	r3, [r7, #16]
 801ecf4:	4619      	mov	r1, r3
 801ecf6:	68f8      	ldr	r0, [r7, #12]
 801ecf8:	f7ff ff94 	bl	801ec24 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
 801ecfc:	4603      	mov	r3, r0
 801ecfe:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 801ed00:	697b      	ldr	r3, [r7, #20]
 801ed02:	2b00      	cmp	r3, #0
 801ed04:	d106      	bne.n	801ed14 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x48>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 801ed06:	68bb      	ldr	r3, [r7, #8]
 801ed08:	4619      	mov	r1, r3
 801ed0a:	4811      	ldr	r0, [pc, #68]	; (801ed50 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x84>)
 801ed0c:	f7e7 f81b 	bl	8005d46 <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 801ed10:	2301      	movs	r3, #1
 801ed12:	e015      	b.n	801ed40 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x74>
  }

  scratch_buffers[scratch_buffers_ix] = b;
 801ed14:	4b0c      	ldr	r3, [pc, #48]	; (801ed48 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801ed16:	681b      	ldr	r3, [r3, #0]
 801ed18:	4a0e      	ldr	r2, [pc, #56]	; (801ed54 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x88>)
 801ed1a:	00db      	lsls	r3, r3, #3
 801ed1c:	4413      	add	r3, r2
 801ed1e:	f107 0210 	add.w	r2, r7, #16
 801ed22:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ed26:	e883 0003 	stmia.w	r3, {r0, r1}
  *buffer_idx = scratch_buffers_ix;
 801ed2a:	4b07      	ldr	r3, [pc, #28]	; (801ed48 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801ed2c:	681b      	ldr	r3, [r3, #0]
 801ed2e:	461a      	mov	r2, r3
 801ed30:	687b      	ldr	r3, [r7, #4]
 801ed32:	601a      	str	r2, [r3, #0]

  scratch_buffers_ix++;
 801ed34:	4b04      	ldr	r3, [pc, #16]	; (801ed48 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801ed36:	681b      	ldr	r3, [r3, #0]
 801ed38:	3301      	adds	r3, #1
 801ed3a:	4a03      	ldr	r2, [pc, #12]	; (801ed48 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x7c>)
 801ed3c:	6013      	str	r3, [r2, #0]

  return kTfLiteOk;
 801ed3e:	2300      	movs	r3, #0
}
 801ed40:	4618      	mov	r0, r3
 801ed42:	3718      	adds	r7, #24
 801ed44:	46bd      	mov	sp, r7
 801ed46:	bd80      	pop	{r7, pc}
 801ed48:	20000b34 	.word	0x20000b34
 801ed4c:	08028864 	.word	0x08028864
 801ed50:	080288bc 	.word	0x080288bc
 801ed54:	20000b14 	.word	0x20000b14

0801ed58 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 801ed58:	b480      	push	{r7}
 801ed5a:	b083      	sub	sp, #12
 801ed5c:	af00      	add	r7, sp, #0
 801ed5e:	6078      	str	r0, [r7, #4]
 801ed60:	6039      	str	r1, [r7, #0]
  if (buffer_idx > (int)scratch_buffers_ix) {
 801ed62:	4b09      	ldr	r3, [pc, #36]	; (801ed88 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x30>)
 801ed64:	681b      	ldr	r3, [r3, #0]
 801ed66:	461a      	mov	r2, r3
 801ed68:	683b      	ldr	r3, [r7, #0]
 801ed6a:	4293      	cmp	r3, r2
 801ed6c:	dd01      	ble.n	801ed72 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x1a>
    return NULL;
 801ed6e:	2300      	movs	r3, #0
 801ed70:	e004      	b.n	801ed7c <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x24>
  }
  return scratch_buffers[buffer_idx].ptr;
 801ed72:	4a06      	ldr	r2, [pc, #24]	; (801ed8c <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x34>)
 801ed74:	683b      	ldr	r3, [r7, #0]
 801ed76:	00db      	lsls	r3, r3, #3
 801ed78:	4413      	add	r3, r2
 801ed7a:	685b      	ldr	r3, [r3, #4]
}
 801ed7c:	4618      	mov	r0, r3
 801ed7e:	370c      	adds	r7, #12
 801ed80:	46bd      	mov	sp, r7
 801ed82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed86:	4770      	bx	lr
 801ed88:	20000b34 	.word	0x20000b34
 801ed8c:	20000b14 	.word	0x20000b14

0801ed90 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
 801ed90:	b480      	push	{r7}
 801ed92:	b083      	sub	sp, #12
 801ed94:	af00      	add	r7, sp, #0
 801ed96:	6078      	str	r0, [r7, #4]
 801ed98:	6039      	str	r1, [r7, #0]
  return &tflTensors[tensor_idx];
 801ed9a:	683b      	ldr	r3, [r7, #0]
 801ed9c:	019b      	lsls	r3, r3, #6
 801ed9e:	4a04      	ldr	r2, [pc, #16]	; (801edb0 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x20>)
 801eda0:	4413      	add	r3, r2
}
 801eda2:	4618      	mov	r0, r3
 801eda4:	370c      	adds	r7, #12
 801eda6:	46bd      	mov	sp, r7
 801eda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edac:	4770      	bx	lr
 801edae:	bf00      	nop
 801edb0:	200006d4 	.word	0x200006d4

0801edb4 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 801edb4:	b480      	push	{r7}
 801edb6:	b083      	sub	sp, #12
 801edb8:	af00      	add	r7, sp, #0
 801edba:	6078      	str	r0, [r7, #4]
 801edbc:	6039      	str	r1, [r7, #0]
  return &tflEvalTensors[tensor_idx];
 801edbe:	683a      	ldr	r2, [r7, #0]
 801edc0:	4613      	mov	r3, r2
 801edc2:	005b      	lsls	r3, r3, #1
 801edc4:	4413      	add	r3, r2
 801edc6:	009b      	lsls	r3, r3, #2
 801edc8:	4a03      	ldr	r2, [pc, #12]	; (801edd8 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x24>)
 801edca:	4413      	add	r3, r2
}
 801edcc:	4618      	mov	r0, r3
 801edce:	370c      	adds	r7, #12
 801edd0:	46bd      	mov	sp, r7
 801edd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edd6:	4770      	bx	lr
 801edd8:	20000994 	.word	0x20000994

0801eddc <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 801eddc:	b5b0      	push	{r4, r5, r7, lr}
 801edde:	b092      	sub	sp, #72	; 0x48
 801ede0:	af00      	add	r7, sp, #0
 801ede2:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 801ede4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ede6:	f44f 7188 	mov.w	r1, #272	; 0x110
 801edea:	2010      	movs	r0, #16
 801edec:	4798      	blx	r3
 801edee:	4603      	mov	r3, r0
 801edf0:	4aa3      	ldr	r2, [pc, #652]	; (801f080 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801edf2:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 801edf4:	4ba2      	ldr	r3, [pc, #648]	; (801f080 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801edf6:	681b      	ldr	r3, [r3, #0]
 801edf8:	2b00      	cmp	r3, #0
 801edfa:	d104      	bne.n	801ee06 <_Z18trained_model_initPFPvjjE+0x2a>
    ei_printf("ERR: failed to allocate tensor arena\n");
 801edfc:	48a1      	ldr	r0, [pc, #644]	; (801f084 <_Z18trained_model_initPFPvjjE+0x2a8>)
 801edfe:	f7e6 ffa2 	bl	8005d46 <_Z9ei_printfPKcz>
    return kTfLiteError;
 801ee02:	2301      	movs	r3, #1
 801ee04:	e21d      	b.n	801f242 <_Z18trained_model_initPFPvjjE+0x466>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 801ee06:	4b9e      	ldr	r3, [pc, #632]	; (801f080 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801ee08:	681b      	ldr	r3, [r3, #0]
 801ee0a:	4a9f      	ldr	r2, [pc, #636]	; (801f088 <_Z18trained_model_initPFPvjjE+0x2ac>)
 801ee0c:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 801ee0e:	4b9c      	ldr	r3, [pc, #624]	; (801f080 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801ee10:	681b      	ldr	r3, [r3, #0]
 801ee12:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801ee16:	4a9d      	ldr	r2, [pc, #628]	; (801f08c <_Z18trained_model_initPFPvjjE+0x2b0>)
 801ee18:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 801ee1a:	4b9d      	ldr	r3, [pc, #628]	; (801f090 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801ee1c:	4a9d      	ldr	r2, [pc, #628]	; (801f094 <_Z18trained_model_initPFPvjjE+0x2b8>)
 801ee1e:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 801ee20:	4b9b      	ldr	r3, [pc, #620]	; (801f090 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801ee22:	4a9d      	ldr	r2, [pc, #628]	; (801f098 <_Z18trained_model_initPFPvjjE+0x2bc>)
 801ee24:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 801ee26:	4b9a      	ldr	r3, [pc, #616]	; (801f090 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801ee28:	4a9c      	ldr	r2, [pc, #624]	; (801f09c <_Z18trained_model_initPFPvjjE+0x2c0>)
 801ee2a:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
 801ee2c:	4b98      	ldr	r3, [pc, #608]	; (801f090 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801ee2e:	4a9c      	ldr	r2, [pc, #624]	; (801f0a0 <_Z18trained_model_initPFPvjjE+0x2c4>)
 801ee30:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
 801ee32:	4b97      	ldr	r3, [pc, #604]	; (801f090 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801ee34:	4a9b      	ldr	r2, [pc, #620]	; (801f0a4 <_Z18trained_model_initPFPvjjE+0x2c8>)
 801ee36:	655a      	str	r2, [r3, #84]	; 0x54
  ctx.tensors = tflTensors;
 801ee38:	4b95      	ldr	r3, [pc, #596]	; (801f090 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801ee3a:	4a9b      	ldr	r2, [pc, #620]	; (801f0a8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ee3c:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 11;
 801ee3e:	4b94      	ldr	r3, [pc, #592]	; (801f090 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801ee40:	220b      	movs	r2, #11
 801ee42:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 11; ++i) {
 801ee44:	2300      	movs	r3, #0
 801ee46:	647b      	str	r3, [r7, #68]	; 0x44
 801ee48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ee4a:	2b0a      	cmp	r3, #10
 801ee4c:	f200 810c 	bhi.w	801f068 <_Z18trained_model_initPFPvjjE+0x28c>
    tflTensors[i].type = tensorData[i].type;
 801ee50:	4996      	ldr	r1, [pc, #600]	; (801f0ac <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ee52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ee54:	4613      	mov	r3, r2
 801ee56:	005b      	lsls	r3, r3, #1
 801ee58:	4413      	add	r3, r2
 801ee5a:	00db      	lsls	r3, r3, #3
 801ee5c:	440b      	add	r3, r1
 801ee5e:	3301      	adds	r3, #1
 801ee60:	7819      	ldrb	r1, [r3, #0]
 801ee62:	4a91      	ldr	r2, [pc, #580]	; (801f0a8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ee64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ee66:	019b      	lsls	r3, r3, #6
 801ee68:	4413      	add	r3, r2
 801ee6a:	460a      	mov	r2, r1
 801ee6c:	701a      	strb	r2, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
 801ee6e:	498f      	ldr	r1, [pc, #572]	; (801f0ac <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ee70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ee72:	4613      	mov	r3, r2
 801ee74:	005b      	lsls	r3, r3, #1
 801ee76:	4413      	add	r3, r2
 801ee78:	00db      	lsls	r3, r3, #3
 801ee7a:	440b      	add	r3, r1
 801ee7c:	3301      	adds	r3, #1
 801ee7e:	7818      	ldrb	r0, [r3, #0]
 801ee80:	498b      	ldr	r1, [pc, #556]	; (801f0b0 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801ee82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ee84:	4613      	mov	r3, r2
 801ee86:	005b      	lsls	r3, r3, #1
 801ee88:	4413      	add	r3, r2
 801ee8a:	009b      	lsls	r3, r3, #2
 801ee8c:	440b      	add	r3, r1
 801ee8e:	3308      	adds	r3, #8
 801ee90:	4602      	mov	r2, r0
 801ee92:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 801ee94:	4a84      	ldr	r2, [pc, #528]	; (801f0a8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ee96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ee98:	019b      	lsls	r3, r3, #6
 801ee9a:	4413      	add	r3, r2
 801ee9c:	332d      	adds	r3, #45	; 0x2d
 801ee9e:	2200      	movs	r2, #0
 801eea0:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 801eea2:	4982      	ldr	r1, [pc, #520]	; (801f0ac <_Z18trained_model_initPFPvjjE+0x2d0>)
 801eea4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801eea6:	4613      	mov	r3, r2
 801eea8:	005b      	lsls	r3, r3, #1
 801eeaa:	4413      	add	r3, r2
 801eeac:	00db      	lsls	r3, r3, #3
 801eeae:	440b      	add	r3, r1
 801eeb0:	7819      	ldrb	r1, [r3, #0]
 801eeb2:	4a7d      	ldr	r2, [pc, #500]	; (801f0a8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801eeb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801eeb6:	019b      	lsls	r3, r3, #6
 801eeb8:	4413      	add	r3, r2
 801eeba:	3314      	adds	r3, #20
 801eebc:	460a      	mov	r2, r1
 801eebe:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 801eec0:	497a      	ldr	r1, [pc, #488]	; (801f0ac <_Z18trained_model_initPFPvjjE+0x2d0>)
 801eec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801eec4:	4613      	mov	r3, r2
 801eec6:	005b      	lsls	r3, r3, #1
 801eec8:	4413      	add	r3, r2
 801eeca:	00db      	lsls	r3, r3, #3
 801eecc:	440b      	add	r3, r1
 801eece:	330c      	adds	r3, #12
 801eed0:	681a      	ldr	r2, [r3, #0]
 801eed2:	4975      	ldr	r1, [pc, #468]	; (801f0a8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801eed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801eed6:	019b      	lsls	r3, r3, #6
 801eed8:	440b      	add	r3, r1
 801eeda:	3318      	adds	r3, #24
 801eedc:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 801eede:	4973      	ldr	r1, [pc, #460]	; (801f0ac <_Z18trained_model_initPFPvjjE+0x2d0>)
 801eee0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801eee2:	4613      	mov	r3, r2
 801eee4:	005b      	lsls	r3, r3, #1
 801eee6:	4413      	add	r3, r2
 801eee8:	00db      	lsls	r3, r3, #3
 801eeea:	440b      	add	r3, r1
 801eeec:	3308      	adds	r3, #8
 801eeee:	681a      	ldr	r2, [r3, #0]
 801eef0:	496d      	ldr	r1, [pc, #436]	; (801f0a8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801eef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801eef4:	019b      	lsls	r3, r3, #6
 801eef6:	440b      	add	r3, r1
 801eef8:	3308      	adds	r3, #8
 801eefa:	601a      	str	r2, [r3, #0]
    tflEvalTensors[i].dims = tensorData[i].dims;
 801eefc:	496b      	ldr	r1, [pc, #428]	; (801f0ac <_Z18trained_model_initPFPvjjE+0x2d0>)
 801eefe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ef00:	4613      	mov	r3, r2
 801ef02:	005b      	lsls	r3, r3, #1
 801ef04:	4413      	add	r3, r2
 801ef06:	00db      	lsls	r3, r3, #3
 801ef08:	440b      	add	r3, r1
 801ef0a:	3308      	adds	r3, #8
 801ef0c:	6819      	ldr	r1, [r3, #0]
 801ef0e:	4868      	ldr	r0, [pc, #416]	; (801f0b0 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801ef10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ef12:	4613      	mov	r3, r2
 801ef14:	005b      	lsls	r3, r3, #1
 801ef16:	4413      	add	r3, r2
 801ef18:	009b      	lsls	r3, r3, #2
 801ef1a:	4403      	add	r3, r0
 801ef1c:	3304      	adds	r3, #4
 801ef1e:	6019      	str	r1, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 801ef20:	4a61      	ldr	r2, [pc, #388]	; (801f0a8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ef22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ef24:	019b      	lsls	r3, r3, #6
 801ef26:	4413      	add	r3, r2
 801ef28:	3314      	adds	r3, #20
 801ef2a:	781b      	ldrb	r3, [r3, #0]
 801ef2c:	2b02      	cmp	r3, #2
 801ef2e:	d11e      	bne.n	801ef6e <_Z18trained_model_initPFPvjjE+0x192>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 801ef30:	495e      	ldr	r1, [pc, #376]	; (801f0ac <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ef32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ef34:	4613      	mov	r3, r2
 801ef36:	005b      	lsls	r3, r3, #1
 801ef38:	4413      	add	r3, r2
 801ef3a:	00db      	lsls	r3, r3, #3
 801ef3c:	440b      	add	r3, r1
 801ef3e:	3304      	adds	r3, #4
 801ef40:	681b      	ldr	r3, [r3, #0]
 801ef42:	461a      	mov	r2, r3
 801ef44:	4b4e      	ldr	r3, [pc, #312]	; (801f080 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801ef46:	681b      	ldr	r3, [r3, #0]
 801ef48:	4413      	add	r3, r2
 801ef4a:	63bb      	str	r3, [r7, #56]	; 0x38

     tflTensors[i].data.data =  start;
 801ef4c:	4a56      	ldr	r2, [pc, #344]	; (801f0a8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ef4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ef50:	019b      	lsls	r3, r3, #6
 801ef52:	4413      	add	r3, r2
 801ef54:	3304      	adds	r3, #4
 801ef56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ef58:	601a      	str	r2, [r3, #0]
     tflEvalTensors[i].data.data =  start;
 801ef5a:	4955      	ldr	r1, [pc, #340]	; (801f0b0 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801ef5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ef5e:	4613      	mov	r3, r2
 801ef60:	005b      	lsls	r3, r3, #1
 801ef62:	4413      	add	r3, r2
 801ef64:	009b      	lsls	r3, r3, #2
 801ef66:	440b      	add	r3, r1
 801ef68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ef6a:	601a      	str	r2, [r3, #0]
 801ef6c:	e01f      	b.n	801efae <_Z18trained_model_initPFPvjjE+0x1d2>
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
 801ef6e:	494f      	ldr	r1, [pc, #316]	; (801f0ac <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ef70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ef72:	4613      	mov	r3, r2
 801ef74:	005b      	lsls	r3, r3, #1
 801ef76:	4413      	add	r3, r2
 801ef78:	00db      	lsls	r3, r3, #3
 801ef7a:	440b      	add	r3, r1
 801ef7c:	3304      	adds	r3, #4
 801ef7e:	681a      	ldr	r2, [r3, #0]
 801ef80:	4949      	ldr	r1, [pc, #292]	; (801f0a8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801ef82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ef84:	019b      	lsls	r3, r3, #6
 801ef86:	440b      	add	r3, r1
 801ef88:	3304      	adds	r3, #4
 801ef8a:	601a      	str	r2, [r3, #0]
       tflEvalTensors[i].data.data = tensorData[i].data;
 801ef8c:	4947      	ldr	r1, [pc, #284]	; (801f0ac <_Z18trained_model_initPFPvjjE+0x2d0>)
 801ef8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ef90:	4613      	mov	r3, r2
 801ef92:	005b      	lsls	r3, r3, #1
 801ef94:	4413      	add	r3, r2
 801ef96:	00db      	lsls	r3, r3, #3
 801ef98:	440b      	add	r3, r1
 801ef9a:	3304      	adds	r3, #4
 801ef9c:	6819      	ldr	r1, [r3, #0]
 801ef9e:	4844      	ldr	r0, [pc, #272]	; (801f0b0 <_Z18trained_model_initPFPvjjE+0x2d4>)
 801efa0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801efa2:	4613      	mov	r3, r2
 801efa4:	005b      	lsls	r3, r3, #1
 801efa6:	4413      	add	r3, r2
 801efa8:	009b      	lsls	r3, r3, #2
 801efaa:	4403      	add	r3, r0
 801efac:	6019      	str	r1, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 801efae:	4a3e      	ldr	r2, [pc, #248]	; (801f0a8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801efb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801efb2:	019b      	lsls	r3, r3, #6
 801efb4:	4413      	add	r3, r2
 801efb6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801efba:	493c      	ldr	r1, [pc, #240]	; (801f0ac <_Z18trained_model_initPFPvjjE+0x2d0>)
 801efbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801efbe:	4613      	mov	r3, r2
 801efc0:	005b      	lsls	r3, r3, #1
 801efc2:	4413      	add	r3, r2
 801efc4:	00db      	lsls	r3, r3, #3
 801efc6:	440b      	add	r3, r1
 801efc8:	f103 0210 	add.w	r2, r3, #16
 801efcc:	4603      	mov	r3, r0
 801efce:	e892 0003 	ldmia.w	r2, {r0, r1}
 801efd2:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 801efd6:	4a34      	ldr	r2, [pc, #208]	; (801f0a8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801efd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801efda:	019b      	lsls	r3, r3, #6
 801efdc:	4413      	add	r3, r2
 801efde:	3330      	adds	r3, #48	; 0x30
 801efe0:	781b      	ldrb	r3, [r3, #0]
 801efe2:	2b01      	cmp	r3, #1
 801efe4:	d11b      	bne.n	801f01e <_Z18trained_model_initPFPvjjE+0x242>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 801efe6:	4931      	ldr	r1, [pc, #196]	; (801f0ac <_Z18trained_model_initPFPvjjE+0x2d0>)
 801efe8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801efea:	4613      	mov	r3, r2
 801efec:	005b      	lsls	r3, r3, #1
 801efee:	4413      	add	r3, r2
 801eff0:	00db      	lsls	r3, r3, #3
 801eff2:	440b      	add	r3, r1
 801eff4:	3314      	adds	r3, #20
 801eff6:	681b      	ldr	r3, [r3, #0]
 801eff8:	637b      	str	r3, [r7, #52]	; 0x34
      tflTensors[i].params.scale = quant->scale->data[0];
 801effa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801effc:	681b      	ldr	r3, [r3, #0]
 801effe:	685a      	ldr	r2, [r3, #4]
 801f000:	4929      	ldr	r1, [pc, #164]	; (801f0a8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801f002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f004:	019b      	lsls	r3, r3, #6
 801f006:	440b      	add	r3, r1
 801f008:	330c      	adds	r3, #12
 801f00a:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 801f00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f00e:	685b      	ldr	r3, [r3, #4]
 801f010:	685a      	ldr	r2, [r3, #4]
 801f012:	4925      	ldr	r1, [pc, #148]	; (801f0a8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801f014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f016:	019b      	lsls	r3, r3, #6
 801f018:	440b      	add	r3, r1
 801f01a:	3310      	adds	r3, #16
 801f01c:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 801f01e:	4a22      	ldr	r2, [pc, #136]	; (801f0a8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801f020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f022:	019b      	lsls	r3, r3, #6
 801f024:	4413      	add	r3, r2
 801f026:	3314      	adds	r3, #20
 801f028:	781b      	ldrb	r3, [r3, #0]
 801f02a:	2b02      	cmp	r3, #2
 801f02c:	d118      	bne.n	801f060 <_Z18trained_model_initPFPvjjE+0x284>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 801f02e:	4a1e      	ldr	r2, [pc, #120]	; (801f0a8 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801f030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f032:	019b      	lsls	r3, r3, #6
 801f034:	4413      	add	r3, r2
 801f036:	3304      	adds	r3, #4
 801f038:	6819      	ldr	r1, [r3, #0]
 801f03a:	481c      	ldr	r0, [pc, #112]	; (801f0ac <_Z18trained_model_initPFPvjjE+0x2d0>)
 801f03c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f03e:	4613      	mov	r3, r2
 801f040:	005b      	lsls	r3, r3, #1
 801f042:	4413      	add	r3, r2
 801f044:	00db      	lsls	r3, r3, #3
 801f046:	4403      	add	r3, r0
 801f048:	330c      	adds	r3, #12
 801f04a:	681b      	ldr	r3, [r3, #0]
 801f04c:	440b      	add	r3, r1
 801f04e:	633b      	str	r3, [r7, #48]	; 0x30
      if (data_end_ptr > tensor_boundary) {
 801f050:	4b0d      	ldr	r3, [pc, #52]	; (801f088 <_Z18trained_model_initPFPvjjE+0x2ac>)
 801f052:	681b      	ldr	r3, [r3, #0]
 801f054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f056:	429a      	cmp	r2, r3
 801f058:	d902      	bls.n	801f060 <_Z18trained_model_initPFPvjjE+0x284>
        tensor_boundary = data_end_ptr;
 801f05a:	4a0b      	ldr	r2, [pc, #44]	; (801f088 <_Z18trained_model_initPFPvjjE+0x2ac>)
 801f05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f05e:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < 11; ++i) {
 801f060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f062:	3301      	adds	r3, #1
 801f064:	647b      	str	r3, [r7, #68]	; 0x44
 801f066:	e6ef      	b.n	801ee48 <_Z18trained_model_initPFPvjjE+0x6c>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 801f068:	4b07      	ldr	r3, [pc, #28]	; (801f088 <_Z18trained_model_initPFPvjjE+0x2ac>)
 801f06a:	681a      	ldr	r2, [r3, #0]
 801f06c:	4b07      	ldr	r3, [pc, #28]	; (801f08c <_Z18trained_model_initPFPvjjE+0x2b0>)
 801f06e:	681b      	ldr	r3, [r3, #0]
 801f070:	429a      	cmp	r2, r3
 801f072:	d921      	bls.n	801f0b8 <_Z18trained_model_initPFPvjjE+0x2dc>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 801f074:	480f      	ldr	r0, [pc, #60]	; (801f0b4 <_Z18trained_model_initPFPvjjE+0x2d8>)
 801f076:	f7e6 fe66 	bl	8005d46 <_Z9ei_printfPKcz>
    return kTfLiteError;
 801f07a:	2301      	movs	r3, #1
 801f07c:	e0e1      	b.n	801f242 <_Z18trained_model_initPFPvjjE+0x466>
 801f07e:	bf00      	nop
 801f080:	20000670 	.word	0x20000670
 801f084:	080288f0 	.word	0x080288f0
 801f088:	20000674 	.word	0x20000674
 801f08c:	20000678 	.word	0x20000678
 801f090:	2000067c 	.word	0x2000067c
 801f094:	0801ec25 	.word	0x0801ec25
 801f098:	0801eccd 	.word	0x0801eccd
 801f09c:	0801ed59 	.word	0x0801ed59
 801f0a0:	0801ed91 	.word	0x0801ed91
 801f0a4:	0801edb5 	.word	0x0801edb5
 801f0a8:	200006d4 	.word	0x200006d4
 801f0ac:	2000011c 	.word	0x2000011c
 801f0b0:	20000994 	.word	0x20000994
 801f0b4:	08028918 	.word	0x08028918
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 801f0b8:	4c64      	ldr	r4, [pc, #400]	; (801f24c <_Z18trained_model_initPFPvjjE+0x470>)
 801f0ba:	463b      	mov	r3, r7
 801f0bc:	4618      	mov	r0, r3
 801f0be:	f7fd fe59 	bl	801cd74 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 801f0c2:	4625      	mov	r5, r4
 801f0c4:	463c      	mov	r4, r7
 801f0c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f0c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801f0ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801f0ce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 801f0d2:	4c5e      	ldr	r4, [pc, #376]	; (801f24c <_Z18trained_model_initPFPvjjE+0x470>)
 801f0d4:	463b      	mov	r3, r7
 801f0d6:	4618      	mov	r0, r3
 801f0d8:	f7fe fc7c 	bl	801d9d4 <_ZN6tflite16Register_SOFTMAXEv>
 801f0dc:	3420      	adds	r4, #32
 801f0de:	463d      	mov	r5, r7
 801f0e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801f0e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801f0e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801f0e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for (size_t i = 0; i < 4; ++i) {
 801f0ec:	2300      	movs	r3, #0
 801f0ee:	643b      	str	r3, [r7, #64]	; 0x40
 801f0f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f0f2:	2b03      	cmp	r3, #3
 801f0f4:	d86f      	bhi.n	801f1d6 <_Z18trained_model_initPFPvjjE+0x3fa>
    tflNodes[i].inputs = nodeData[i].inputs;
 801f0f6:	4a56      	ldr	r2, [pc, #344]	; (801f250 <_Z18trained_model_initPFPvjjE+0x474>)
 801f0f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f0fa:	011b      	lsls	r3, r3, #4
 801f0fc:	4413      	add	r3, r2
 801f0fe:	6819      	ldr	r1, [r3, #0]
 801f100:	4854      	ldr	r0, [pc, #336]	; (801f254 <_Z18trained_model_initPFPvjjE+0x478>)
 801f102:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f104:	4613      	mov	r3, r2
 801f106:	00db      	lsls	r3, r3, #3
 801f108:	4413      	add	r3, r2
 801f10a:	009b      	lsls	r3, r3, #2
 801f10c:	4403      	add	r3, r0
 801f10e:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 801f110:	4a4f      	ldr	r2, [pc, #316]	; (801f250 <_Z18trained_model_initPFPvjjE+0x474>)
 801f112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f114:	011b      	lsls	r3, r3, #4
 801f116:	4413      	add	r3, r2
 801f118:	3304      	adds	r3, #4
 801f11a:	6819      	ldr	r1, [r3, #0]
 801f11c:	484d      	ldr	r0, [pc, #308]	; (801f254 <_Z18trained_model_initPFPvjjE+0x478>)
 801f11e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f120:	4613      	mov	r3, r2
 801f122:	00db      	lsls	r3, r3, #3
 801f124:	4413      	add	r3, r2
 801f126:	009b      	lsls	r3, r3, #2
 801f128:	4403      	add	r3, r0
 801f12a:	3304      	adds	r3, #4
 801f12c:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 801f12e:	4a48      	ldr	r2, [pc, #288]	; (801f250 <_Z18trained_model_initPFPvjjE+0x474>)
 801f130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f132:	011b      	lsls	r3, r3, #4
 801f134:	4413      	add	r3, r2
 801f136:	3308      	adds	r3, #8
 801f138:	6819      	ldr	r1, [r3, #0]
 801f13a:	4846      	ldr	r0, [pc, #280]	; (801f254 <_Z18trained_model_initPFPvjjE+0x478>)
 801f13c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f13e:	4613      	mov	r3, r2
 801f140:	00db      	lsls	r3, r3, #3
 801f142:	4413      	add	r3, r2
 801f144:	009b      	lsls	r3, r3, #2
 801f146:	4403      	add	r3, r0
 801f148:	3314      	adds	r3, #20
 801f14a:	6019      	str	r1, [r3, #0]
tflNodes[i].custom_initial_data = nullptr;
 801f14c:	4941      	ldr	r1, [pc, #260]	; (801f254 <_Z18trained_model_initPFPvjjE+0x478>)
 801f14e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f150:	4613      	mov	r3, r2
 801f152:	00db      	lsls	r3, r3, #3
 801f154:	4413      	add	r3, r2
 801f156:	009b      	lsls	r3, r3, #2
 801f158:	440b      	add	r3, r1
 801f15a:	3318      	adds	r3, #24
 801f15c:	2200      	movs	r2, #0
 801f15e:	601a      	str	r2, [r3, #0]
      tflNodes[i].custom_initial_data_size = 0;
 801f160:	493c      	ldr	r1, [pc, #240]	; (801f254 <_Z18trained_model_initPFPvjjE+0x478>)
 801f162:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f164:	4613      	mov	r3, r2
 801f166:	00db      	lsls	r3, r3, #3
 801f168:	4413      	add	r3, r2
 801f16a:	009b      	lsls	r3, r3, #2
 801f16c:	440b      	add	r3, r1
 801f16e:	331c      	adds	r3, #28
 801f170:	2200      	movs	r2, #0
 801f172:	601a      	str	r2, [r3, #0]
if (registrations[nodeData[i].used_op_index].init) {
 801f174:	4a36      	ldr	r2, [pc, #216]	; (801f250 <_Z18trained_model_initPFPvjjE+0x474>)
 801f176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f178:	011b      	lsls	r3, r3, #4
 801f17a:	4413      	add	r3, r2
 801f17c:	330c      	adds	r3, #12
 801f17e:	781b      	ldrb	r3, [r3, #0]
 801f180:	4a32      	ldr	r2, [pc, #200]	; (801f24c <_Z18trained_model_initPFPvjjE+0x470>)
 801f182:	015b      	lsls	r3, r3, #5
 801f184:	4413      	add	r3, r2
 801f186:	681b      	ldr	r3, [r3, #0]
 801f188:	2b00      	cmp	r3, #0
 801f18a:	d020      	beq.n	801f1ce <_Z18trained_model_initPFPvjjE+0x3f2>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 801f18c:	4a30      	ldr	r2, [pc, #192]	; (801f250 <_Z18trained_model_initPFPvjjE+0x474>)
 801f18e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f190:	011b      	lsls	r3, r3, #4
 801f192:	4413      	add	r3, r2
 801f194:	330c      	adds	r3, #12
 801f196:	781b      	ldrb	r3, [r3, #0]
 801f198:	4a2c      	ldr	r2, [pc, #176]	; (801f24c <_Z18trained_model_initPFPvjjE+0x470>)
 801f19a:	015b      	lsls	r3, r3, #5
 801f19c:	4413      	add	r3, r2
 801f19e:	681c      	ldr	r4, [r3, #0]
 801f1a0:	492c      	ldr	r1, [pc, #176]	; (801f254 <_Z18trained_model_initPFPvjjE+0x478>)
 801f1a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f1a4:	4613      	mov	r3, r2
 801f1a6:	00db      	lsls	r3, r3, #3
 801f1a8:	4413      	add	r3, r2
 801f1aa:	009b      	lsls	r3, r3, #2
 801f1ac:	440b      	add	r3, r1
 801f1ae:	3314      	adds	r3, #20
 801f1b0:	681b      	ldr	r3, [r3, #0]
 801f1b2:	2200      	movs	r2, #0
 801f1b4:	4619      	mov	r1, r3
 801f1b6:	4828      	ldr	r0, [pc, #160]	; (801f258 <_Z18trained_model_initPFPvjjE+0x47c>)
 801f1b8:	47a0      	blx	r4
 801f1ba:	4601      	mov	r1, r0
 801f1bc:	4825      	ldr	r0, [pc, #148]	; (801f254 <_Z18trained_model_initPFPvjjE+0x478>)
 801f1be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f1c0:	4613      	mov	r3, r2
 801f1c2:	00db      	lsls	r3, r3, #3
 801f1c4:	4413      	add	r3, r2
 801f1c6:	009b      	lsls	r3, r3, #2
 801f1c8:	4403      	add	r3, r0
 801f1ca:	3310      	adds	r3, #16
 801f1cc:	6019      	str	r1, [r3, #0]
  for (size_t i = 0; i < 4; ++i) {
 801f1ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f1d0:	3301      	adds	r3, #1
 801f1d2:	643b      	str	r3, [r7, #64]	; 0x40
 801f1d4:	e78c      	b.n	801f0f0 <_Z18trained_model_initPFPvjjE+0x314>
    }
  }
  for (size_t i = 0; i < 4; ++i) {
 801f1d6:	2300      	movs	r3, #0
 801f1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801f1da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f1dc:	2b03      	cmp	r3, #3
 801f1de:	d82f      	bhi.n	801f240 <_Z18trained_model_initPFPvjjE+0x464>
    if (registrations[nodeData[i].used_op_index].prepare) {
 801f1e0:	4a1b      	ldr	r2, [pc, #108]	; (801f250 <_Z18trained_model_initPFPvjjE+0x474>)
 801f1e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f1e4:	011b      	lsls	r3, r3, #4
 801f1e6:	4413      	add	r3, r2
 801f1e8:	330c      	adds	r3, #12
 801f1ea:	781b      	ldrb	r3, [r3, #0]
 801f1ec:	4a17      	ldr	r2, [pc, #92]	; (801f24c <_Z18trained_model_initPFPvjjE+0x470>)
 801f1ee:	015b      	lsls	r3, r3, #5
 801f1f0:	4413      	add	r3, r2
 801f1f2:	3308      	adds	r3, #8
 801f1f4:	681b      	ldr	r3, [r3, #0]
 801f1f6:	2b00      	cmp	r3, #0
 801f1f8:	d01e      	beq.n	801f238 <_Z18trained_model_initPFPvjjE+0x45c>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 801f1fa:	4a15      	ldr	r2, [pc, #84]	; (801f250 <_Z18trained_model_initPFPvjjE+0x474>)
 801f1fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f1fe:	011b      	lsls	r3, r3, #4
 801f200:	4413      	add	r3, r2
 801f202:	330c      	adds	r3, #12
 801f204:	781b      	ldrb	r3, [r3, #0]
 801f206:	4a11      	ldr	r2, [pc, #68]	; (801f24c <_Z18trained_model_initPFPvjjE+0x470>)
 801f208:	015b      	lsls	r3, r3, #5
 801f20a:	4413      	add	r3, r2
 801f20c:	3308      	adds	r3, #8
 801f20e:	681c      	ldr	r4, [r3, #0]
 801f210:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801f212:	4613      	mov	r3, r2
 801f214:	00db      	lsls	r3, r3, #3
 801f216:	4413      	add	r3, r2
 801f218:	009b      	lsls	r3, r3, #2
 801f21a:	4a0e      	ldr	r2, [pc, #56]	; (801f254 <_Z18trained_model_initPFPvjjE+0x478>)
 801f21c:	4413      	add	r3, r2
 801f21e:	4619      	mov	r1, r3
 801f220:	480d      	ldr	r0, [pc, #52]	; (801f258 <_Z18trained_model_initPFPvjjE+0x47c>)
 801f222:	47a0      	blx	r4
 801f224:	4603      	mov	r3, r0
 801f226:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (status != kTfLiteOk) {
 801f22a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f22e:	2b00      	cmp	r3, #0
 801f230:	d002      	beq.n	801f238 <_Z18trained_model_initPFPvjjE+0x45c>
        return status;
 801f232:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801f236:	e004      	b.n	801f242 <_Z18trained_model_initPFPvjjE+0x466>
  for (size_t i = 0; i < 4; ++i) {
 801f238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f23a:	3301      	adds	r3, #1
 801f23c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801f23e:	e7cc      	b.n	801f1da <_Z18trained_model_initPFPvjjE+0x3fe>
      }
    }
  }
  return kTfLiteOk;
 801f240:	2300      	movs	r3, #0
}
 801f242:	4618      	mov	r0, r3
 801f244:	3748      	adds	r7, #72	; 0x48
 801f246:	46bd      	mov	sp, r7
 801f248:	bdb0      	pop	{r4, r5, r7, pc}
 801f24a:	bf00      	nop
 801f24c:	20000a18 	.word	0x20000a18
 801f250:	080290bc 	.word	0x080290bc
 801f254:	20000a58 	.word	0x20000a58
 801f258:	2000067c 	.word	0x2000067c

0801f25c <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 801f25c:	b480      	push	{r7}
 801f25e:	b083      	sub	sp, #12
 801f260:	af00      	add	r7, sp, #0
 801f262:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 801f264:	4b05      	ldr	r3, [pc, #20]	; (801f27c <_Z19trained_model_inputi+0x20>)
 801f266:	689a      	ldr	r2, [r3, #8]
 801f268:	2300      	movs	r3, #0
 801f26a:	019b      	lsls	r3, r3, #6
 801f26c:	4413      	add	r3, r2
}
 801f26e:	4618      	mov	r0, r3
 801f270:	370c      	adds	r7, #12
 801f272:	46bd      	mov	sp, r7
 801f274:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f278:	4770      	bx	lr
 801f27a:	bf00      	nop
 801f27c:	2000067c 	.word	0x2000067c

0801f280 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
 801f280:	b480      	push	{r7}
 801f282:	b083      	sub	sp, #12
 801f284:	af00      	add	r7, sp, #0
 801f286:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 801f288:	4b05      	ldr	r3, [pc, #20]	; (801f2a0 <_Z20trained_model_outputi+0x20>)
 801f28a:	689a      	ldr	r2, [r3, #8]
 801f28c:	230a      	movs	r3, #10
 801f28e:	019b      	lsls	r3, r3, #6
 801f290:	4413      	add	r3, r2
}
 801f292:	4618      	mov	r0, r3
 801f294:	370c      	adds	r7, #12
 801f296:	46bd      	mov	sp, r7
 801f298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f29c:	4770      	bx	lr
 801f29e:	bf00      	nop
 801f2a0:	2000067c 	.word	0x2000067c

0801f2a4 <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 801f2a4:	b590      	push	{r4, r7, lr}
 801f2a6:	b083      	sub	sp, #12
 801f2a8:	af00      	add	r7, sp, #0
  for (size_t i = 0; i < 4; ++i) {
 801f2aa:	2300      	movs	r3, #0
 801f2ac:	607b      	str	r3, [r7, #4]
 801f2ae:	687b      	ldr	r3, [r7, #4]
 801f2b0:	2b03      	cmp	r3, #3
 801f2b2:	d81f      	bhi.n	801f2f4 <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 801f2b4:	4a12      	ldr	r2, [pc, #72]	; (801f300 <_Z20trained_model_invokev+0x5c>)
 801f2b6:	687b      	ldr	r3, [r7, #4]
 801f2b8:	011b      	lsls	r3, r3, #4
 801f2ba:	4413      	add	r3, r2
 801f2bc:	330c      	adds	r3, #12
 801f2be:	781b      	ldrb	r3, [r3, #0]
 801f2c0:	4a10      	ldr	r2, [pc, #64]	; (801f304 <_Z20trained_model_invokev+0x60>)
 801f2c2:	015b      	lsls	r3, r3, #5
 801f2c4:	4413      	add	r3, r2
 801f2c6:	330c      	adds	r3, #12
 801f2c8:	681c      	ldr	r4, [r3, #0]
 801f2ca:	687a      	ldr	r2, [r7, #4]
 801f2cc:	4613      	mov	r3, r2
 801f2ce:	00db      	lsls	r3, r3, #3
 801f2d0:	4413      	add	r3, r2
 801f2d2:	009b      	lsls	r3, r3, #2
 801f2d4:	4a0c      	ldr	r2, [pc, #48]	; (801f308 <_Z20trained_model_invokev+0x64>)
 801f2d6:	4413      	add	r3, r2
 801f2d8:	4619      	mov	r1, r3
 801f2da:	480c      	ldr	r0, [pc, #48]	; (801f30c <_Z20trained_model_invokev+0x68>)
 801f2dc:	47a0      	blx	r4
 801f2de:	4603      	mov	r3, r0
 801f2e0:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 801f2e2:	78fb      	ldrb	r3, [r7, #3]
 801f2e4:	2b00      	cmp	r3, #0
 801f2e6:	d001      	beq.n	801f2ec <_Z20trained_model_invokev+0x48>
      return status;
 801f2e8:	78fb      	ldrb	r3, [r7, #3]
 801f2ea:	e004      	b.n	801f2f6 <_Z20trained_model_invokev+0x52>
  for (size_t i = 0; i < 4; ++i) {
 801f2ec:	687b      	ldr	r3, [r7, #4]
 801f2ee:	3301      	adds	r3, #1
 801f2f0:	607b      	str	r3, [r7, #4]
 801f2f2:	e7dc      	b.n	801f2ae <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 801f2f4:	2300      	movs	r3, #0
}
 801f2f6:	4618      	mov	r0, r3
 801f2f8:	370c      	adds	r7, #12
 801f2fa:	46bd      	mov	sp, r7
 801f2fc:	bd90      	pop	{r4, r7, pc}
 801f2fe:	bf00      	nop
 801f300:	080290bc 	.word	0x080290bc
 801f304:	20000a18 	.word	0x20000a18
 801f308:	20000a58 	.word	0x20000a58
 801f30c:	2000067c 	.word	0x2000067c

0801f310 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 801f310:	b580      	push	{r7, lr}
 801f312:	b084      	sub	sp, #16
 801f314:	af00      	add	r7, sp, #0
 801f316:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 801f318:	4b10      	ldr	r3, [pc, #64]	; (801f35c <_Z19trained_model_resetPFvPvE+0x4c>)
 801f31a:	681a      	ldr	r2, [r3, #0]
 801f31c:	687b      	ldr	r3, [r7, #4]
 801f31e:	4610      	mov	r0, r2
 801f320:	4798      	blx	r3
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 801f322:	4b0f      	ldr	r3, [pc, #60]	; (801f360 <_Z19trained_model_resetPFvPvE+0x50>)
 801f324:	2200      	movs	r2, #0
 801f326:	601a      	str	r2, [r3, #0]

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 801f328:	2300      	movs	r3, #0
 801f32a:	60fb      	str	r3, [r7, #12]
 801f32c:	4b0d      	ldr	r3, [pc, #52]	; (801f364 <_Z19trained_model_resetPFvPvE+0x54>)
 801f32e:	681b      	ldr	r3, [r3, #0]
 801f330:	68fa      	ldr	r2, [r7, #12]
 801f332:	429a      	cmp	r2, r3
 801f334:	d20a      	bcs.n	801f34c <_Z19trained_model_resetPFvPvE+0x3c>
    ei_free(overflow_buffers[ix]);
 801f336:	4a0c      	ldr	r2, [pc, #48]	; (801f368 <_Z19trained_model_resetPFvPvE+0x58>)
 801f338:	68fb      	ldr	r3, [r7, #12]
 801f33a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f33e:	4618      	mov	r0, r3
 801f340:	f7fa fec4 	bl	801a0cc <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 801f344:	68fb      	ldr	r3, [r7, #12]
 801f346:	3301      	adds	r3, #1
 801f348:	60fb      	str	r3, [r7, #12]
 801f34a:	e7ef      	b.n	801f32c <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers_ix = 0;
 801f34c:	4b05      	ldr	r3, [pc, #20]	; (801f364 <_Z19trained_model_resetPFvPvE+0x54>)
 801f34e:	2200      	movs	r2, #0
 801f350:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 801f352:	2300      	movs	r3, #0
}
 801f354:	4618      	mov	r0, r3
 801f356:	3710      	adds	r7, #16
 801f358:	46bd      	mov	sp, r7
 801f35a:	bd80      	pop	{r7, pc}
 801f35c:	20000670 	.word	0x20000670
 801f360:	20000b34 	.word	0x20000b34
 801f364:	20000b10 	.word	0x20000b10
 801f368:	20000ae8 	.word	0x20000ae8

0801f36c <_Z41__static_initialization_and_destruction_0ii>:
 801f36c:	b480      	push	{r7}
 801f36e:	b083      	sub	sp, #12
 801f370:	af00      	add	r7, sp, #0
 801f372:	6078      	str	r0, [r7, #4]
 801f374:	6039      	str	r1, [r7, #0]
 801f376:	687b      	ldr	r3, [r7, #4]
 801f378:	2b01      	cmp	r3, #1
 801f37a:	d11e      	bne.n	801f3ba <_Z41__static_initialization_and_destruction_0ii+0x4e>
 801f37c:	683b      	ldr	r3, [r7, #0]
 801f37e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f382:	4293      	cmp	r3, r2
 801f384:	d119      	bne.n	801f3ba <_Z41__static_initialization_and_destruction_0ii+0x4e>
};const NodeInfo_t nodeData[] = {
 801f386:	4b10      	ldr	r3, [pc, #64]	; (801f3c8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801f388:	681b      	ldr	r3, [r3, #0]
 801f38a:	4a10      	ldr	r2, [pc, #64]	; (801f3cc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801f38c:	6053      	str	r3, [r2, #4]
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
 801f38e:	4b0e      	ldr	r3, [pc, #56]	; (801f3c8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801f390:	681b      	ldr	r3, [r3, #0]
 801f392:	3330      	adds	r3, #48	; 0x30
};const NodeInfo_t nodeData[] = {
 801f394:	4a0d      	ldr	r2, [pc, #52]	; (801f3cc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801f396:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 801f39a:	4b0b      	ldr	r3, [pc, #44]	; (801f3c8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801f39c:	681b      	ldr	r3, [r3, #0]
 801f39e:	4a0b      	ldr	r2, [pc, #44]	; (801f3cc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801f3a0:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
 801f3a4:	4b08      	ldr	r3, [pc, #32]	; (801f3c8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801f3a6:	681b      	ldr	r3, [r3, #0]
 801f3a8:	3310      	adds	r3, #16
};const NodeInfo_t nodeData[] = {
 801f3aa:	4a08      	ldr	r2, [pc, #32]	; (801f3cc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801f3ac:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 801f3b0:	4b05      	ldr	r3, [pc, #20]	; (801f3c8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801f3b2:	681b      	ldr	r3, [r3, #0]
 801f3b4:	4a05      	ldr	r2, [pc, #20]	; (801f3cc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801f3b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 801f3ba:	bf00      	nop
 801f3bc:	370c      	adds	r7, #12
 801f3be:	46bd      	mov	sp, r7
 801f3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3c4:	4770      	bx	lr
 801f3c6:	bf00      	nop
 801f3c8:	20000670 	.word	0x20000670
 801f3cc:	2000011c 	.word	0x2000011c

0801f3d0 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 801f3d0:	b580      	push	{r7, lr}
 801f3d2:	af00      	add	r7, sp, #0
 801f3d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801f3d8:	2001      	movs	r0, #1
 801f3da:	f7ff ffc7 	bl	801f36c <_Z41__static_initialization_and_destruction_0ii>
 801f3de:	bd80      	pop	{r7, pc}

0801f3e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801f3e0:	b580      	push	{r7, lr}
 801f3e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801f3e4:	2200      	movs	r2, #0
 801f3e6:	4912      	ldr	r1, [pc, #72]	; (801f430 <MX_USB_DEVICE_Init+0x50>)
 801f3e8:	4812      	ldr	r0, [pc, #72]	; (801f434 <MX_USB_DEVICE_Init+0x54>)
 801f3ea:	f7ee fb43 	bl	800da74 <USBD_Init>
 801f3ee:	4603      	mov	r3, r0
 801f3f0:	2b00      	cmp	r3, #0
 801f3f2:	d001      	beq.n	801f3f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801f3f4:	f7e6 fea0 	bl	8006138 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801f3f8:	490f      	ldr	r1, [pc, #60]	; (801f438 <MX_USB_DEVICE_Init+0x58>)
 801f3fa:	480e      	ldr	r0, [pc, #56]	; (801f434 <MX_USB_DEVICE_Init+0x54>)
 801f3fc:	f7ee fb6a 	bl	800dad4 <USBD_RegisterClass>
 801f400:	4603      	mov	r3, r0
 801f402:	2b00      	cmp	r3, #0
 801f404:	d001      	beq.n	801f40a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801f406:	f7e6 fe97 	bl	8006138 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801f40a:	490c      	ldr	r1, [pc, #48]	; (801f43c <MX_USB_DEVICE_Init+0x5c>)
 801f40c:	4809      	ldr	r0, [pc, #36]	; (801f434 <MX_USB_DEVICE_Init+0x54>)
 801f40e:	f7ee fa5b 	bl	800d8c8 <USBD_CDC_RegisterInterface>
 801f412:	4603      	mov	r3, r0
 801f414:	2b00      	cmp	r3, #0
 801f416:	d001      	beq.n	801f41c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801f418:	f7e6 fe8e 	bl	8006138 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801f41c:	4805      	ldr	r0, [pc, #20]	; (801f434 <MX_USB_DEVICE_Init+0x54>)
 801f41e:	f7ee fb8f 	bl	800db40 <USBD_Start>
 801f422:	4603      	mov	r3, r0
 801f424:	2b00      	cmp	r3, #0
 801f426:	d001      	beq.n	801f42c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801f428:	f7e6 fe86 	bl	8006138 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801f42c:	bf00      	nop
 801f42e:	bd80      	pop	{r7, pc}
 801f430:	20000238 	.word	0x20000238
 801f434:	20000b38 	.word	0x20000b38
 801f438:	2000008c 	.word	0x2000008c
 801f43c:	20000224 	.word	0x20000224

0801f440 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801f440:	b580      	push	{r7, lr}
 801f442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801f444:	2200      	movs	r2, #0
 801f446:	4905      	ldr	r1, [pc, #20]	; (801f45c <CDC_Init_FS+0x1c>)
 801f448:	4805      	ldr	r0, [pc, #20]	; (801f460 <CDC_Init_FS+0x20>)
 801f44a:	f7ee fa57 	bl	800d8fc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801f44e:	4905      	ldr	r1, [pc, #20]	; (801f464 <CDC_Init_FS+0x24>)
 801f450:	4803      	ldr	r0, [pc, #12]	; (801f460 <CDC_Init_FS+0x20>)
 801f452:	f7ee fa75 	bl	800d940 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801f456:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801f458:	4618      	mov	r0, r3
 801f45a:	bd80      	pop	{r7, pc}
 801f45c:	20001614 	.word	0x20001614
 801f460:	20000b38 	.word	0x20000b38
 801f464:	20000e14 	.word	0x20000e14

0801f468 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801f468:	b480      	push	{r7}
 801f46a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801f46c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801f46e:	4618      	mov	r0, r3
 801f470:	46bd      	mov	sp, r7
 801f472:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f476:	4770      	bx	lr

0801f478 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801f478:	b480      	push	{r7}
 801f47a:	b083      	sub	sp, #12
 801f47c:	af00      	add	r7, sp, #0
 801f47e:	4603      	mov	r3, r0
 801f480:	6039      	str	r1, [r7, #0]
 801f482:	71fb      	strb	r3, [r7, #7]
 801f484:	4613      	mov	r3, r2
 801f486:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801f488:	79fb      	ldrb	r3, [r7, #7]
 801f48a:	2b23      	cmp	r3, #35	; 0x23
 801f48c:	d84a      	bhi.n	801f524 <CDC_Control_FS+0xac>
 801f48e:	a201      	add	r2, pc, #4	; (adr r2, 801f494 <CDC_Control_FS+0x1c>)
 801f490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f494:	0801f525 	.word	0x0801f525
 801f498:	0801f525 	.word	0x0801f525
 801f49c:	0801f525 	.word	0x0801f525
 801f4a0:	0801f525 	.word	0x0801f525
 801f4a4:	0801f525 	.word	0x0801f525
 801f4a8:	0801f525 	.word	0x0801f525
 801f4ac:	0801f525 	.word	0x0801f525
 801f4b0:	0801f525 	.word	0x0801f525
 801f4b4:	0801f525 	.word	0x0801f525
 801f4b8:	0801f525 	.word	0x0801f525
 801f4bc:	0801f525 	.word	0x0801f525
 801f4c0:	0801f525 	.word	0x0801f525
 801f4c4:	0801f525 	.word	0x0801f525
 801f4c8:	0801f525 	.word	0x0801f525
 801f4cc:	0801f525 	.word	0x0801f525
 801f4d0:	0801f525 	.word	0x0801f525
 801f4d4:	0801f525 	.word	0x0801f525
 801f4d8:	0801f525 	.word	0x0801f525
 801f4dc:	0801f525 	.word	0x0801f525
 801f4e0:	0801f525 	.word	0x0801f525
 801f4e4:	0801f525 	.word	0x0801f525
 801f4e8:	0801f525 	.word	0x0801f525
 801f4ec:	0801f525 	.word	0x0801f525
 801f4f0:	0801f525 	.word	0x0801f525
 801f4f4:	0801f525 	.word	0x0801f525
 801f4f8:	0801f525 	.word	0x0801f525
 801f4fc:	0801f525 	.word	0x0801f525
 801f500:	0801f525 	.word	0x0801f525
 801f504:	0801f525 	.word	0x0801f525
 801f508:	0801f525 	.word	0x0801f525
 801f50c:	0801f525 	.word	0x0801f525
 801f510:	0801f525 	.word	0x0801f525
 801f514:	0801f525 	.word	0x0801f525
 801f518:	0801f525 	.word	0x0801f525
 801f51c:	0801f525 	.word	0x0801f525
 801f520:	0801f525 	.word	0x0801f525
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801f524:	bf00      	nop
  }

  return (USBD_OK);
 801f526:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801f528:	4618      	mov	r0, r3
 801f52a:	370c      	adds	r7, #12
 801f52c:	46bd      	mov	sp, r7
 801f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f532:	4770      	bx	lr

0801f534 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801f534:	b580      	push	{r7, lr}
 801f536:	b084      	sub	sp, #16
 801f538:	af00      	add	r7, sp, #0
 801f53a:	6078      	str	r0, [r7, #4]
 801f53c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801f53e:	6879      	ldr	r1, [r7, #4]
 801f540:	480f      	ldr	r0, [pc, #60]	; (801f580 <CDC_Receive_FS+0x4c>)
 801f542:	f7ee f9fd 	bl	800d940 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801f546:	480e      	ldr	r0, [pc, #56]	; (801f580 <CDC_Receive_FS+0x4c>)
 801f548:	f7ee fa5e 	bl	800da08 <USBD_CDC_ReceivePacket>
  memset (recivebuffer, '\0', 64);  // clear the buffer
 801f54c:	2240      	movs	r2, #64	; 0x40
 801f54e:	2100      	movs	r1, #0
 801f550:	480c      	ldr	r0, [pc, #48]	; (801f584 <CDC_Receive_FS+0x50>)
 801f552:	f003 fa7d 	bl	8022a50 <memset>
    uint8_t len = (uint8_t)*Len;
 801f556:	683b      	ldr	r3, [r7, #0]
 801f558:	681b      	ldr	r3, [r3, #0]
 801f55a:	73fb      	strb	r3, [r7, #15]
    memcpy(recivebuffer, Buf, len);  // copy the data to the buffer
 801f55c:	7bfb      	ldrb	r3, [r7, #15]
 801f55e:	461a      	mov	r2, r3
 801f560:	6879      	ldr	r1, [r7, #4]
 801f562:	4808      	ldr	r0, [pc, #32]	; (801f584 <CDC_Receive_FS+0x50>)
 801f564:	f003 fa4c 	bl	8022a00 <memcpy>
    memset(Buf, '\0', len);   // clear the Buf also
 801f568:	7bfb      	ldrb	r3, [r7, #15]
 801f56a:	461a      	mov	r2, r3
 801f56c:	2100      	movs	r1, #0
 801f56e:	6878      	ldr	r0, [r7, #4]
 801f570:	f003 fa6e 	bl	8022a50 <memset>
  return (USBD_OK);
 801f574:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801f576:	4618      	mov	r0, r3
 801f578:	3710      	adds	r7, #16
 801f57a:	46bd      	mov	sp, r7
 801f57c:	bd80      	pop	{r7, pc}
 801f57e:	bf00      	nop
 801f580:	20000b38 	.word	0x20000b38
 801f584:	20000544 	.word	0x20000544

0801f588 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801f588:	b580      	push	{r7, lr}
 801f58a:	b084      	sub	sp, #16
 801f58c:	af00      	add	r7, sp, #0
 801f58e:	6078      	str	r0, [r7, #4]
 801f590:	460b      	mov	r3, r1
 801f592:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801f594:	2300      	movs	r3, #0
 801f596:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801f598:	4b0d      	ldr	r3, [pc, #52]	; (801f5d0 <CDC_Transmit_FS+0x48>)
 801f59a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801f59e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801f5a0:	68bb      	ldr	r3, [r7, #8]
 801f5a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801f5a6:	2b00      	cmp	r3, #0
 801f5a8:	d001      	beq.n	801f5ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801f5aa:	2301      	movs	r3, #1
 801f5ac:	e00b      	b.n	801f5c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801f5ae:	887b      	ldrh	r3, [r7, #2]
 801f5b0:	461a      	mov	r2, r3
 801f5b2:	6879      	ldr	r1, [r7, #4]
 801f5b4:	4806      	ldr	r0, [pc, #24]	; (801f5d0 <CDC_Transmit_FS+0x48>)
 801f5b6:	f7ee f9a1 	bl	800d8fc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801f5ba:	4805      	ldr	r0, [pc, #20]	; (801f5d0 <CDC_Transmit_FS+0x48>)
 801f5bc:	f7ee f9de 	bl	800d97c <USBD_CDC_TransmitPacket>
 801f5c0:	4603      	mov	r3, r0
 801f5c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801f5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 801f5c6:	4618      	mov	r0, r3
 801f5c8:	3710      	adds	r7, #16
 801f5ca:	46bd      	mov	sp, r7
 801f5cc:	bd80      	pop	{r7, pc}
 801f5ce:	bf00      	nop
 801f5d0:	20000b38 	.word	0x20000b38

0801f5d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801f5d4:	b480      	push	{r7}
 801f5d6:	b087      	sub	sp, #28
 801f5d8:	af00      	add	r7, sp, #0
 801f5da:	60f8      	str	r0, [r7, #12]
 801f5dc:	60b9      	str	r1, [r7, #8]
 801f5de:	4613      	mov	r3, r2
 801f5e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801f5e2:	2300      	movs	r3, #0
 801f5e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801f5e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801f5ea:	4618      	mov	r0, r3
 801f5ec:	371c      	adds	r7, #28
 801f5ee:	46bd      	mov	sp, r7
 801f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5f4:	4770      	bx	lr
	...

0801f5f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f5f8:	b480      	push	{r7}
 801f5fa:	b083      	sub	sp, #12
 801f5fc:	af00      	add	r7, sp, #0
 801f5fe:	4603      	mov	r3, r0
 801f600:	6039      	str	r1, [r7, #0]
 801f602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801f604:	683b      	ldr	r3, [r7, #0]
 801f606:	2212      	movs	r2, #18
 801f608:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801f60a:	4b03      	ldr	r3, [pc, #12]	; (801f618 <USBD_FS_DeviceDescriptor+0x20>)
}
 801f60c:	4618      	mov	r0, r3
 801f60e:	370c      	adds	r7, #12
 801f610:	46bd      	mov	sp, r7
 801f612:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f616:	4770      	bx	lr
 801f618:	20000254 	.word	0x20000254

0801f61c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f61c:	b480      	push	{r7}
 801f61e:	b083      	sub	sp, #12
 801f620:	af00      	add	r7, sp, #0
 801f622:	4603      	mov	r3, r0
 801f624:	6039      	str	r1, [r7, #0]
 801f626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801f628:	683b      	ldr	r3, [r7, #0]
 801f62a:	2204      	movs	r2, #4
 801f62c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801f62e:	4b03      	ldr	r3, [pc, #12]	; (801f63c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801f630:	4618      	mov	r0, r3
 801f632:	370c      	adds	r7, #12
 801f634:	46bd      	mov	sp, r7
 801f636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f63a:	4770      	bx	lr
 801f63c:	20000268 	.word	0x20000268

0801f640 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f640:	b580      	push	{r7, lr}
 801f642:	b082      	sub	sp, #8
 801f644:	af00      	add	r7, sp, #0
 801f646:	4603      	mov	r3, r0
 801f648:	6039      	str	r1, [r7, #0]
 801f64a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801f64c:	79fb      	ldrb	r3, [r7, #7]
 801f64e:	2b00      	cmp	r3, #0
 801f650:	d105      	bne.n	801f65e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801f652:	683a      	ldr	r2, [r7, #0]
 801f654:	4907      	ldr	r1, [pc, #28]	; (801f674 <USBD_FS_ProductStrDescriptor+0x34>)
 801f656:	4808      	ldr	r0, [pc, #32]	; (801f678 <USBD_FS_ProductStrDescriptor+0x38>)
 801f658:	f7ef fc1e 	bl	800ee98 <USBD_GetString>
 801f65c:	e004      	b.n	801f668 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801f65e:	683a      	ldr	r2, [r7, #0]
 801f660:	4904      	ldr	r1, [pc, #16]	; (801f674 <USBD_FS_ProductStrDescriptor+0x34>)
 801f662:	4805      	ldr	r0, [pc, #20]	; (801f678 <USBD_FS_ProductStrDescriptor+0x38>)
 801f664:	f7ef fc18 	bl	800ee98 <USBD_GetString>
  }
  return USBD_StrDesc;
 801f668:	4b02      	ldr	r3, [pc, #8]	; (801f674 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801f66a:	4618      	mov	r0, r3
 801f66c:	3708      	adds	r7, #8
 801f66e:	46bd      	mov	sp, r7
 801f670:	bd80      	pop	{r7, pc}
 801f672:	bf00      	nop
 801f674:	20001e14 	.word	0x20001e14
 801f678:	0802896c 	.word	0x0802896c

0801f67c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f67c:	b580      	push	{r7, lr}
 801f67e:	b082      	sub	sp, #8
 801f680:	af00      	add	r7, sp, #0
 801f682:	4603      	mov	r3, r0
 801f684:	6039      	str	r1, [r7, #0]
 801f686:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801f688:	683a      	ldr	r2, [r7, #0]
 801f68a:	4904      	ldr	r1, [pc, #16]	; (801f69c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801f68c:	4804      	ldr	r0, [pc, #16]	; (801f6a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801f68e:	f7ef fc03 	bl	800ee98 <USBD_GetString>
  return USBD_StrDesc;
 801f692:	4b02      	ldr	r3, [pc, #8]	; (801f69c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801f694:	4618      	mov	r0, r3
 801f696:	3708      	adds	r7, #8
 801f698:	46bd      	mov	sp, r7
 801f69a:	bd80      	pop	{r7, pc}
 801f69c:	20001e14 	.word	0x20001e14
 801f6a0:	08028984 	.word	0x08028984

0801f6a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f6a4:	b580      	push	{r7, lr}
 801f6a6:	b082      	sub	sp, #8
 801f6a8:	af00      	add	r7, sp, #0
 801f6aa:	4603      	mov	r3, r0
 801f6ac:	6039      	str	r1, [r7, #0]
 801f6ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801f6b0:	683b      	ldr	r3, [r7, #0]
 801f6b2:	221a      	movs	r2, #26
 801f6b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801f6b6:	f000 f843 	bl	801f740 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801f6ba:	4b02      	ldr	r3, [pc, #8]	; (801f6c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801f6bc:	4618      	mov	r0, r3
 801f6be:	3708      	adds	r7, #8
 801f6c0:	46bd      	mov	sp, r7
 801f6c2:	bd80      	pop	{r7, pc}
 801f6c4:	2000026c 	.word	0x2000026c

0801f6c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f6c8:	b580      	push	{r7, lr}
 801f6ca:	b082      	sub	sp, #8
 801f6cc:	af00      	add	r7, sp, #0
 801f6ce:	4603      	mov	r3, r0
 801f6d0:	6039      	str	r1, [r7, #0]
 801f6d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801f6d4:	79fb      	ldrb	r3, [r7, #7]
 801f6d6:	2b00      	cmp	r3, #0
 801f6d8:	d105      	bne.n	801f6e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801f6da:	683a      	ldr	r2, [r7, #0]
 801f6dc:	4907      	ldr	r1, [pc, #28]	; (801f6fc <USBD_FS_ConfigStrDescriptor+0x34>)
 801f6de:	4808      	ldr	r0, [pc, #32]	; (801f700 <USBD_FS_ConfigStrDescriptor+0x38>)
 801f6e0:	f7ef fbda 	bl	800ee98 <USBD_GetString>
 801f6e4:	e004      	b.n	801f6f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801f6e6:	683a      	ldr	r2, [r7, #0]
 801f6e8:	4904      	ldr	r1, [pc, #16]	; (801f6fc <USBD_FS_ConfigStrDescriptor+0x34>)
 801f6ea:	4805      	ldr	r0, [pc, #20]	; (801f700 <USBD_FS_ConfigStrDescriptor+0x38>)
 801f6ec:	f7ef fbd4 	bl	800ee98 <USBD_GetString>
  }
  return USBD_StrDesc;
 801f6f0:	4b02      	ldr	r3, [pc, #8]	; (801f6fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801f6f2:	4618      	mov	r0, r3
 801f6f4:	3708      	adds	r7, #8
 801f6f6:	46bd      	mov	sp, r7
 801f6f8:	bd80      	pop	{r7, pc}
 801f6fa:	bf00      	nop
 801f6fc:	20001e14 	.word	0x20001e14
 801f700:	08028998 	.word	0x08028998

0801f704 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f704:	b580      	push	{r7, lr}
 801f706:	b082      	sub	sp, #8
 801f708:	af00      	add	r7, sp, #0
 801f70a:	4603      	mov	r3, r0
 801f70c:	6039      	str	r1, [r7, #0]
 801f70e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801f710:	79fb      	ldrb	r3, [r7, #7]
 801f712:	2b00      	cmp	r3, #0
 801f714:	d105      	bne.n	801f722 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801f716:	683a      	ldr	r2, [r7, #0]
 801f718:	4907      	ldr	r1, [pc, #28]	; (801f738 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801f71a:	4808      	ldr	r0, [pc, #32]	; (801f73c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801f71c:	f7ef fbbc 	bl	800ee98 <USBD_GetString>
 801f720:	e004      	b.n	801f72c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801f722:	683a      	ldr	r2, [r7, #0]
 801f724:	4904      	ldr	r1, [pc, #16]	; (801f738 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801f726:	4805      	ldr	r0, [pc, #20]	; (801f73c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801f728:	f7ef fbb6 	bl	800ee98 <USBD_GetString>
  }
  return USBD_StrDesc;
 801f72c:	4b02      	ldr	r3, [pc, #8]	; (801f738 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801f72e:	4618      	mov	r0, r3
 801f730:	3708      	adds	r7, #8
 801f732:	46bd      	mov	sp, r7
 801f734:	bd80      	pop	{r7, pc}
 801f736:	bf00      	nop
 801f738:	20001e14 	.word	0x20001e14
 801f73c:	080289a4 	.word	0x080289a4

0801f740 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801f740:	b580      	push	{r7, lr}
 801f742:	b084      	sub	sp, #16
 801f744:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801f746:	4b0f      	ldr	r3, [pc, #60]	; (801f784 <Get_SerialNum+0x44>)
 801f748:	681b      	ldr	r3, [r3, #0]
 801f74a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801f74c:	4b0e      	ldr	r3, [pc, #56]	; (801f788 <Get_SerialNum+0x48>)
 801f74e:	681b      	ldr	r3, [r3, #0]
 801f750:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801f752:	4b0e      	ldr	r3, [pc, #56]	; (801f78c <Get_SerialNum+0x4c>)
 801f754:	681b      	ldr	r3, [r3, #0]
 801f756:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801f758:	68fa      	ldr	r2, [r7, #12]
 801f75a:	687b      	ldr	r3, [r7, #4]
 801f75c:	4413      	add	r3, r2
 801f75e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801f760:	68fb      	ldr	r3, [r7, #12]
 801f762:	2b00      	cmp	r3, #0
 801f764:	d009      	beq.n	801f77a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801f766:	2208      	movs	r2, #8
 801f768:	4909      	ldr	r1, [pc, #36]	; (801f790 <Get_SerialNum+0x50>)
 801f76a:	68f8      	ldr	r0, [r7, #12]
 801f76c:	f000 f814 	bl	801f798 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801f770:	2204      	movs	r2, #4
 801f772:	4908      	ldr	r1, [pc, #32]	; (801f794 <Get_SerialNum+0x54>)
 801f774:	68b8      	ldr	r0, [r7, #8]
 801f776:	f000 f80f 	bl	801f798 <IntToUnicode>
  }
}
 801f77a:	bf00      	nop
 801f77c:	3710      	adds	r7, #16
 801f77e:	46bd      	mov	sp, r7
 801f780:	bd80      	pop	{r7, pc}
 801f782:	bf00      	nop
 801f784:	1fff7a10 	.word	0x1fff7a10
 801f788:	1fff7a14 	.word	0x1fff7a14
 801f78c:	1fff7a18 	.word	0x1fff7a18
 801f790:	2000026e 	.word	0x2000026e
 801f794:	2000027e 	.word	0x2000027e

0801f798 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801f798:	b480      	push	{r7}
 801f79a:	b087      	sub	sp, #28
 801f79c:	af00      	add	r7, sp, #0
 801f79e:	60f8      	str	r0, [r7, #12]
 801f7a0:	60b9      	str	r1, [r7, #8]
 801f7a2:	4613      	mov	r3, r2
 801f7a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801f7a6:	2300      	movs	r3, #0
 801f7a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801f7aa:	2300      	movs	r3, #0
 801f7ac:	75fb      	strb	r3, [r7, #23]
 801f7ae:	e027      	b.n	801f800 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801f7b0:	68fb      	ldr	r3, [r7, #12]
 801f7b2:	0f1b      	lsrs	r3, r3, #28
 801f7b4:	2b09      	cmp	r3, #9
 801f7b6:	d80b      	bhi.n	801f7d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801f7b8:	68fb      	ldr	r3, [r7, #12]
 801f7ba:	0f1b      	lsrs	r3, r3, #28
 801f7bc:	b2da      	uxtb	r2, r3
 801f7be:	7dfb      	ldrb	r3, [r7, #23]
 801f7c0:	005b      	lsls	r3, r3, #1
 801f7c2:	4619      	mov	r1, r3
 801f7c4:	68bb      	ldr	r3, [r7, #8]
 801f7c6:	440b      	add	r3, r1
 801f7c8:	3230      	adds	r2, #48	; 0x30
 801f7ca:	b2d2      	uxtb	r2, r2
 801f7cc:	701a      	strb	r2, [r3, #0]
 801f7ce:	e00a      	b.n	801f7e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801f7d0:	68fb      	ldr	r3, [r7, #12]
 801f7d2:	0f1b      	lsrs	r3, r3, #28
 801f7d4:	b2da      	uxtb	r2, r3
 801f7d6:	7dfb      	ldrb	r3, [r7, #23]
 801f7d8:	005b      	lsls	r3, r3, #1
 801f7da:	4619      	mov	r1, r3
 801f7dc:	68bb      	ldr	r3, [r7, #8]
 801f7de:	440b      	add	r3, r1
 801f7e0:	3237      	adds	r2, #55	; 0x37
 801f7e2:	b2d2      	uxtb	r2, r2
 801f7e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801f7e6:	68fb      	ldr	r3, [r7, #12]
 801f7e8:	011b      	lsls	r3, r3, #4
 801f7ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801f7ec:	7dfb      	ldrb	r3, [r7, #23]
 801f7ee:	005b      	lsls	r3, r3, #1
 801f7f0:	3301      	adds	r3, #1
 801f7f2:	68ba      	ldr	r2, [r7, #8]
 801f7f4:	4413      	add	r3, r2
 801f7f6:	2200      	movs	r2, #0
 801f7f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801f7fa:	7dfb      	ldrb	r3, [r7, #23]
 801f7fc:	3301      	adds	r3, #1
 801f7fe:	75fb      	strb	r3, [r7, #23]
 801f800:	7dfa      	ldrb	r2, [r7, #23]
 801f802:	79fb      	ldrb	r3, [r7, #7]
 801f804:	429a      	cmp	r2, r3
 801f806:	d3d3      	bcc.n	801f7b0 <IntToUnicode+0x18>
  }
}
 801f808:	bf00      	nop
 801f80a:	bf00      	nop
 801f80c:	371c      	adds	r7, #28
 801f80e:	46bd      	mov	sp, r7
 801f810:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f814:	4770      	bx	lr
	...

0801f818 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801f818:	b580      	push	{r7, lr}
 801f81a:	b08a      	sub	sp, #40	; 0x28
 801f81c:	af00      	add	r7, sp, #0
 801f81e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801f820:	f107 0314 	add.w	r3, r7, #20
 801f824:	2200      	movs	r2, #0
 801f826:	601a      	str	r2, [r3, #0]
 801f828:	605a      	str	r2, [r3, #4]
 801f82a:	609a      	str	r2, [r3, #8]
 801f82c:	60da      	str	r2, [r3, #12]
 801f82e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801f830:	687b      	ldr	r3, [r7, #4]
 801f832:	681b      	ldr	r3, [r3, #0]
 801f834:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801f838:	d13a      	bne.n	801f8b0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f83a:	2300      	movs	r3, #0
 801f83c:	613b      	str	r3, [r7, #16]
 801f83e:	4b1e      	ldr	r3, [pc, #120]	; (801f8b8 <HAL_PCD_MspInit+0xa0>)
 801f840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f842:	4a1d      	ldr	r2, [pc, #116]	; (801f8b8 <HAL_PCD_MspInit+0xa0>)
 801f844:	f043 0301 	orr.w	r3, r3, #1
 801f848:	6313      	str	r3, [r2, #48]	; 0x30
 801f84a:	4b1b      	ldr	r3, [pc, #108]	; (801f8b8 <HAL_PCD_MspInit+0xa0>)
 801f84c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f84e:	f003 0301 	and.w	r3, r3, #1
 801f852:	613b      	str	r3, [r7, #16]
 801f854:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801f856:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801f85a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f85c:	2302      	movs	r3, #2
 801f85e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f860:	2300      	movs	r3, #0
 801f862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f864:	2303      	movs	r3, #3
 801f866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801f868:	230a      	movs	r3, #10
 801f86a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f86c:	f107 0314 	add.w	r3, r7, #20
 801f870:	4619      	mov	r1, r3
 801f872:	4812      	ldr	r0, [pc, #72]	; (801f8bc <HAL_PCD_MspInit+0xa4>)
 801f874:	f7e9 fca8 	bl	80091c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801f878:	4b0f      	ldr	r3, [pc, #60]	; (801f8b8 <HAL_PCD_MspInit+0xa0>)
 801f87a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f87c:	4a0e      	ldr	r2, [pc, #56]	; (801f8b8 <HAL_PCD_MspInit+0xa0>)
 801f87e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f882:	6353      	str	r3, [r2, #52]	; 0x34
 801f884:	2300      	movs	r3, #0
 801f886:	60fb      	str	r3, [r7, #12]
 801f888:	4b0b      	ldr	r3, [pc, #44]	; (801f8b8 <HAL_PCD_MspInit+0xa0>)
 801f88a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f88c:	4a0a      	ldr	r2, [pc, #40]	; (801f8b8 <HAL_PCD_MspInit+0xa0>)
 801f88e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801f892:	6453      	str	r3, [r2, #68]	; 0x44
 801f894:	4b08      	ldr	r3, [pc, #32]	; (801f8b8 <HAL_PCD_MspInit+0xa0>)
 801f896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801f89c:	60fb      	str	r3, [r7, #12]
 801f89e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801f8a0:	2200      	movs	r2, #0
 801f8a2:	2100      	movs	r1, #0
 801f8a4:	2043      	movs	r0, #67	; 0x43
 801f8a6:	f7e9 fc3c 	bl	8009122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801f8aa:	2043      	movs	r0, #67	; 0x43
 801f8ac:	f7e9 fc55 	bl	800915a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801f8b0:	bf00      	nop
 801f8b2:	3728      	adds	r7, #40	; 0x28
 801f8b4:	46bd      	mov	sp, r7
 801f8b6:	bd80      	pop	{r7, pc}
 801f8b8:	40023800 	.word	0x40023800
 801f8bc:	40020000 	.word	0x40020000

0801f8c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f8c0:	b580      	push	{r7, lr}
 801f8c2:	b082      	sub	sp, #8
 801f8c4:	af00      	add	r7, sp, #0
 801f8c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801f8c8:	687b      	ldr	r3, [r7, #4]
 801f8ca:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801f8ce:	687b      	ldr	r3, [r7, #4]
 801f8d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801f8d4:	4619      	mov	r1, r3
 801f8d6:	4610      	mov	r0, r2
 801f8d8:	f7ee f97f 	bl	800dbda <USBD_LL_SetupStage>
}
 801f8dc:	bf00      	nop
 801f8de:	3708      	adds	r7, #8
 801f8e0:	46bd      	mov	sp, r7
 801f8e2:	bd80      	pop	{r7, pc}

0801f8e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f8e4:	b580      	push	{r7, lr}
 801f8e6:	b082      	sub	sp, #8
 801f8e8:	af00      	add	r7, sp, #0
 801f8ea:	6078      	str	r0, [r7, #4]
 801f8ec:	460b      	mov	r3, r1
 801f8ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801f8f0:	687b      	ldr	r3, [r7, #4]
 801f8f2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801f8f6:	78fa      	ldrb	r2, [r7, #3]
 801f8f8:	6879      	ldr	r1, [r7, #4]
 801f8fa:	4613      	mov	r3, r2
 801f8fc:	00db      	lsls	r3, r3, #3
 801f8fe:	4413      	add	r3, r2
 801f900:	009b      	lsls	r3, r3, #2
 801f902:	440b      	add	r3, r1
 801f904:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801f908:	681a      	ldr	r2, [r3, #0]
 801f90a:	78fb      	ldrb	r3, [r7, #3]
 801f90c:	4619      	mov	r1, r3
 801f90e:	f7ee f9b9 	bl	800dc84 <USBD_LL_DataOutStage>
}
 801f912:	bf00      	nop
 801f914:	3708      	adds	r7, #8
 801f916:	46bd      	mov	sp, r7
 801f918:	bd80      	pop	{r7, pc}

0801f91a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f91a:	b580      	push	{r7, lr}
 801f91c:	b082      	sub	sp, #8
 801f91e:	af00      	add	r7, sp, #0
 801f920:	6078      	str	r0, [r7, #4]
 801f922:	460b      	mov	r3, r1
 801f924:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801f926:	687b      	ldr	r3, [r7, #4]
 801f928:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801f92c:	78fa      	ldrb	r2, [r7, #3]
 801f92e:	6879      	ldr	r1, [r7, #4]
 801f930:	4613      	mov	r3, r2
 801f932:	00db      	lsls	r3, r3, #3
 801f934:	4413      	add	r3, r2
 801f936:	009b      	lsls	r3, r3, #2
 801f938:	440b      	add	r3, r1
 801f93a:	334c      	adds	r3, #76	; 0x4c
 801f93c:	681a      	ldr	r2, [r3, #0]
 801f93e:	78fb      	ldrb	r3, [r7, #3]
 801f940:	4619      	mov	r1, r3
 801f942:	f7ee fa52 	bl	800ddea <USBD_LL_DataInStage>
}
 801f946:	bf00      	nop
 801f948:	3708      	adds	r7, #8
 801f94a:	46bd      	mov	sp, r7
 801f94c:	bd80      	pop	{r7, pc}

0801f94e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f94e:	b580      	push	{r7, lr}
 801f950:	b082      	sub	sp, #8
 801f952:	af00      	add	r7, sp, #0
 801f954:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801f956:	687b      	ldr	r3, [r7, #4]
 801f958:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801f95c:	4618      	mov	r0, r3
 801f95e:	f7ee fb86 	bl	800e06e <USBD_LL_SOF>
}
 801f962:	bf00      	nop
 801f964:	3708      	adds	r7, #8
 801f966:	46bd      	mov	sp, r7
 801f968:	bd80      	pop	{r7, pc}

0801f96a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f96a:	b580      	push	{r7, lr}
 801f96c:	b084      	sub	sp, #16
 801f96e:	af00      	add	r7, sp, #0
 801f970:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801f972:	2301      	movs	r3, #1
 801f974:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801f976:	687b      	ldr	r3, [r7, #4]
 801f978:	68db      	ldr	r3, [r3, #12]
 801f97a:	2b00      	cmp	r3, #0
 801f97c:	d102      	bne.n	801f984 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801f97e:	2300      	movs	r3, #0
 801f980:	73fb      	strb	r3, [r7, #15]
 801f982:	e008      	b.n	801f996 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801f984:	687b      	ldr	r3, [r7, #4]
 801f986:	68db      	ldr	r3, [r3, #12]
 801f988:	2b02      	cmp	r3, #2
 801f98a:	d102      	bne.n	801f992 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801f98c:	2301      	movs	r3, #1
 801f98e:	73fb      	strb	r3, [r7, #15]
 801f990:	e001      	b.n	801f996 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801f992:	f7e6 fbd1 	bl	8006138 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801f996:	687b      	ldr	r3, [r7, #4]
 801f998:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801f99c:	7bfa      	ldrb	r2, [r7, #15]
 801f99e:	4611      	mov	r1, r2
 801f9a0:	4618      	mov	r0, r3
 801f9a2:	f7ee fb26 	bl	800dff2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801f9a6:	687b      	ldr	r3, [r7, #4]
 801f9a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801f9ac:	4618      	mov	r0, r3
 801f9ae:	f7ee face 	bl	800df4e <USBD_LL_Reset>
}
 801f9b2:	bf00      	nop
 801f9b4:	3710      	adds	r7, #16
 801f9b6:	46bd      	mov	sp, r7
 801f9b8:	bd80      	pop	{r7, pc}
	...

0801f9bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801f9bc:	b580      	push	{r7, lr}
 801f9be:	b082      	sub	sp, #8
 801f9c0:	af00      	add	r7, sp, #0
 801f9c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801f9c4:	687b      	ldr	r3, [r7, #4]
 801f9c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801f9ca:	4618      	mov	r0, r3
 801f9cc:	f7ee fb21 	bl	800e012 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801f9d0:	687b      	ldr	r3, [r7, #4]
 801f9d2:	681b      	ldr	r3, [r3, #0]
 801f9d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801f9d8:	681b      	ldr	r3, [r3, #0]
 801f9da:	687a      	ldr	r2, [r7, #4]
 801f9dc:	6812      	ldr	r2, [r2, #0]
 801f9de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801f9e2:	f043 0301 	orr.w	r3, r3, #1
 801f9e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801f9e8:	687b      	ldr	r3, [r7, #4]
 801f9ea:	6a1b      	ldr	r3, [r3, #32]
 801f9ec:	2b00      	cmp	r3, #0
 801f9ee:	d005      	beq.n	801f9fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801f9f0:	4b04      	ldr	r3, [pc, #16]	; (801fa04 <HAL_PCD_SuspendCallback+0x48>)
 801f9f2:	691b      	ldr	r3, [r3, #16]
 801f9f4:	4a03      	ldr	r2, [pc, #12]	; (801fa04 <HAL_PCD_SuspendCallback+0x48>)
 801f9f6:	f043 0306 	orr.w	r3, r3, #6
 801f9fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801f9fc:	bf00      	nop
 801f9fe:	3708      	adds	r7, #8
 801fa00:	46bd      	mov	sp, r7
 801fa02:	bd80      	pop	{r7, pc}
 801fa04:	e000ed00 	.word	0xe000ed00

0801fa08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801fa08:	b580      	push	{r7, lr}
 801fa0a:	b082      	sub	sp, #8
 801fa0c:	af00      	add	r7, sp, #0
 801fa0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801fa10:	687b      	ldr	r3, [r7, #4]
 801fa12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801fa16:	4618      	mov	r0, r3
 801fa18:	f7ee fb11 	bl	800e03e <USBD_LL_Resume>
}
 801fa1c:	bf00      	nop
 801fa1e:	3708      	adds	r7, #8
 801fa20:	46bd      	mov	sp, r7
 801fa22:	bd80      	pop	{r7, pc}

0801fa24 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801fa24:	b580      	push	{r7, lr}
 801fa26:	b082      	sub	sp, #8
 801fa28:	af00      	add	r7, sp, #0
 801fa2a:	6078      	str	r0, [r7, #4]
 801fa2c:	460b      	mov	r3, r1
 801fa2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801fa30:	687b      	ldr	r3, [r7, #4]
 801fa32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801fa36:	78fa      	ldrb	r2, [r7, #3]
 801fa38:	4611      	mov	r1, r2
 801fa3a:	4618      	mov	r0, r3
 801fa3c:	f7ee fb69 	bl	800e112 <USBD_LL_IsoOUTIncomplete>
}
 801fa40:	bf00      	nop
 801fa42:	3708      	adds	r7, #8
 801fa44:	46bd      	mov	sp, r7
 801fa46:	bd80      	pop	{r7, pc}

0801fa48 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801fa48:	b580      	push	{r7, lr}
 801fa4a:	b082      	sub	sp, #8
 801fa4c:	af00      	add	r7, sp, #0
 801fa4e:	6078      	str	r0, [r7, #4]
 801fa50:	460b      	mov	r3, r1
 801fa52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801fa54:	687b      	ldr	r3, [r7, #4]
 801fa56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801fa5a:	78fa      	ldrb	r2, [r7, #3]
 801fa5c:	4611      	mov	r1, r2
 801fa5e:	4618      	mov	r0, r3
 801fa60:	f7ee fb25 	bl	800e0ae <USBD_LL_IsoINIncomplete>
}
 801fa64:	bf00      	nop
 801fa66:	3708      	adds	r7, #8
 801fa68:	46bd      	mov	sp, r7
 801fa6a:	bd80      	pop	{r7, pc}

0801fa6c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801fa6c:	b580      	push	{r7, lr}
 801fa6e:	b082      	sub	sp, #8
 801fa70:	af00      	add	r7, sp, #0
 801fa72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801fa74:	687b      	ldr	r3, [r7, #4]
 801fa76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801fa7a:	4618      	mov	r0, r3
 801fa7c:	f7ee fb7b 	bl	800e176 <USBD_LL_DevConnected>
}
 801fa80:	bf00      	nop
 801fa82:	3708      	adds	r7, #8
 801fa84:	46bd      	mov	sp, r7
 801fa86:	bd80      	pop	{r7, pc}

0801fa88 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801fa88:	b580      	push	{r7, lr}
 801fa8a:	b082      	sub	sp, #8
 801fa8c:	af00      	add	r7, sp, #0
 801fa8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801fa90:	687b      	ldr	r3, [r7, #4]
 801fa92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801fa96:	4618      	mov	r0, r3
 801fa98:	f7ee fb78 	bl	800e18c <USBD_LL_DevDisconnected>
}
 801fa9c:	bf00      	nop
 801fa9e:	3708      	adds	r7, #8
 801faa0:	46bd      	mov	sp, r7
 801faa2:	bd80      	pop	{r7, pc}

0801faa4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801faa4:	b580      	push	{r7, lr}
 801faa6:	b082      	sub	sp, #8
 801faa8:	af00      	add	r7, sp, #0
 801faaa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801faac:	687b      	ldr	r3, [r7, #4]
 801faae:	781b      	ldrb	r3, [r3, #0]
 801fab0:	2b00      	cmp	r3, #0
 801fab2:	d13c      	bne.n	801fb2e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801fab4:	4a20      	ldr	r2, [pc, #128]	; (801fb38 <USBD_LL_Init+0x94>)
 801fab6:	687b      	ldr	r3, [r7, #4]
 801fab8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801fabc:	687b      	ldr	r3, [r7, #4]
 801fabe:	4a1e      	ldr	r2, [pc, #120]	; (801fb38 <USBD_LL_Init+0x94>)
 801fac0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801fac4:	4b1c      	ldr	r3, [pc, #112]	; (801fb38 <USBD_LL_Init+0x94>)
 801fac6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801faca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801facc:	4b1a      	ldr	r3, [pc, #104]	; (801fb38 <USBD_LL_Init+0x94>)
 801face:	2204      	movs	r2, #4
 801fad0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801fad2:	4b19      	ldr	r3, [pc, #100]	; (801fb38 <USBD_LL_Init+0x94>)
 801fad4:	2202      	movs	r2, #2
 801fad6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801fad8:	4b17      	ldr	r3, [pc, #92]	; (801fb38 <USBD_LL_Init+0x94>)
 801fada:	2200      	movs	r2, #0
 801fadc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801fade:	4b16      	ldr	r3, [pc, #88]	; (801fb38 <USBD_LL_Init+0x94>)
 801fae0:	2202      	movs	r2, #2
 801fae2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801fae4:	4b14      	ldr	r3, [pc, #80]	; (801fb38 <USBD_LL_Init+0x94>)
 801fae6:	2200      	movs	r2, #0
 801fae8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801faea:	4b13      	ldr	r3, [pc, #76]	; (801fb38 <USBD_LL_Init+0x94>)
 801faec:	2200      	movs	r2, #0
 801faee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801faf0:	4b11      	ldr	r3, [pc, #68]	; (801fb38 <USBD_LL_Init+0x94>)
 801faf2:	2200      	movs	r2, #0
 801faf4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801faf6:	4b10      	ldr	r3, [pc, #64]	; (801fb38 <USBD_LL_Init+0x94>)
 801faf8:	2200      	movs	r2, #0
 801fafa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801fafc:	4b0e      	ldr	r3, [pc, #56]	; (801fb38 <USBD_LL_Init+0x94>)
 801fafe:	2200      	movs	r2, #0
 801fb00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801fb02:	480d      	ldr	r0, [pc, #52]	; (801fb38 <USBD_LL_Init+0x94>)
 801fb04:	f7e9 fd15 	bl	8009532 <HAL_PCD_Init>
 801fb08:	4603      	mov	r3, r0
 801fb0a:	2b00      	cmp	r3, #0
 801fb0c:	d001      	beq.n	801fb12 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801fb0e:	f7e6 fb13 	bl	8006138 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801fb12:	2180      	movs	r1, #128	; 0x80
 801fb14:	4808      	ldr	r0, [pc, #32]	; (801fb38 <USBD_LL_Init+0x94>)
 801fb16:	f7ea ff6c 	bl	800a9f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801fb1a:	2240      	movs	r2, #64	; 0x40
 801fb1c:	2100      	movs	r1, #0
 801fb1e:	4806      	ldr	r0, [pc, #24]	; (801fb38 <USBD_LL_Init+0x94>)
 801fb20:	f7ea ff20 	bl	800a964 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801fb24:	2280      	movs	r2, #128	; 0x80
 801fb26:	2101      	movs	r1, #1
 801fb28:	4803      	ldr	r0, [pc, #12]	; (801fb38 <USBD_LL_Init+0x94>)
 801fb2a:	f7ea ff1b 	bl	800a964 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801fb2e:	2300      	movs	r3, #0
}
 801fb30:	4618      	mov	r0, r3
 801fb32:	3708      	adds	r7, #8
 801fb34:	46bd      	mov	sp, r7
 801fb36:	bd80      	pop	{r7, pc}
 801fb38:	20002014 	.word	0x20002014

0801fb3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801fb3c:	b580      	push	{r7, lr}
 801fb3e:	b084      	sub	sp, #16
 801fb40:	af00      	add	r7, sp, #0
 801fb42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fb44:	2300      	movs	r3, #0
 801fb46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fb48:	2300      	movs	r3, #0
 801fb4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801fb4c:	687b      	ldr	r3, [r7, #4]
 801fb4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801fb52:	4618      	mov	r0, r3
 801fb54:	f7e9 fe0a 	bl	800976c <HAL_PCD_Start>
 801fb58:	4603      	mov	r3, r0
 801fb5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fb5c:	7bfb      	ldrb	r3, [r7, #15]
 801fb5e:	4618      	mov	r0, r3
 801fb60:	f000 f942 	bl	801fde8 <USBD_Get_USB_Status>
 801fb64:	4603      	mov	r3, r0
 801fb66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801fb68:	7bbb      	ldrb	r3, [r7, #14]
}
 801fb6a:	4618      	mov	r0, r3
 801fb6c:	3710      	adds	r7, #16
 801fb6e:	46bd      	mov	sp, r7
 801fb70:	bd80      	pop	{r7, pc}

0801fb72 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801fb72:	b580      	push	{r7, lr}
 801fb74:	b084      	sub	sp, #16
 801fb76:	af00      	add	r7, sp, #0
 801fb78:	6078      	str	r0, [r7, #4]
 801fb7a:	4608      	mov	r0, r1
 801fb7c:	4611      	mov	r1, r2
 801fb7e:	461a      	mov	r2, r3
 801fb80:	4603      	mov	r3, r0
 801fb82:	70fb      	strb	r3, [r7, #3]
 801fb84:	460b      	mov	r3, r1
 801fb86:	70bb      	strb	r3, [r7, #2]
 801fb88:	4613      	mov	r3, r2
 801fb8a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fb8c:	2300      	movs	r3, #0
 801fb8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fb90:	2300      	movs	r3, #0
 801fb92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801fb94:	687b      	ldr	r3, [r7, #4]
 801fb96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801fb9a:	78bb      	ldrb	r3, [r7, #2]
 801fb9c:	883a      	ldrh	r2, [r7, #0]
 801fb9e:	78f9      	ldrb	r1, [r7, #3]
 801fba0:	f7ea fadb 	bl	800a15a <HAL_PCD_EP_Open>
 801fba4:	4603      	mov	r3, r0
 801fba6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fba8:	7bfb      	ldrb	r3, [r7, #15]
 801fbaa:	4618      	mov	r0, r3
 801fbac:	f000 f91c 	bl	801fde8 <USBD_Get_USB_Status>
 801fbb0:	4603      	mov	r3, r0
 801fbb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801fbb4:	7bbb      	ldrb	r3, [r7, #14]
}
 801fbb6:	4618      	mov	r0, r3
 801fbb8:	3710      	adds	r7, #16
 801fbba:	46bd      	mov	sp, r7
 801fbbc:	bd80      	pop	{r7, pc}

0801fbbe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fbbe:	b580      	push	{r7, lr}
 801fbc0:	b084      	sub	sp, #16
 801fbc2:	af00      	add	r7, sp, #0
 801fbc4:	6078      	str	r0, [r7, #4]
 801fbc6:	460b      	mov	r3, r1
 801fbc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fbca:	2300      	movs	r3, #0
 801fbcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fbce:	2300      	movs	r3, #0
 801fbd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801fbd2:	687b      	ldr	r3, [r7, #4]
 801fbd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801fbd8:	78fa      	ldrb	r2, [r7, #3]
 801fbda:	4611      	mov	r1, r2
 801fbdc:	4618      	mov	r0, r3
 801fbde:	f7ea fb24 	bl	800a22a <HAL_PCD_EP_Close>
 801fbe2:	4603      	mov	r3, r0
 801fbe4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fbe6:	7bfb      	ldrb	r3, [r7, #15]
 801fbe8:	4618      	mov	r0, r3
 801fbea:	f000 f8fd 	bl	801fde8 <USBD_Get_USB_Status>
 801fbee:	4603      	mov	r3, r0
 801fbf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801fbf2:	7bbb      	ldrb	r3, [r7, #14]
}
 801fbf4:	4618      	mov	r0, r3
 801fbf6:	3710      	adds	r7, #16
 801fbf8:	46bd      	mov	sp, r7
 801fbfa:	bd80      	pop	{r7, pc}

0801fbfc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fbfc:	b580      	push	{r7, lr}
 801fbfe:	b084      	sub	sp, #16
 801fc00:	af00      	add	r7, sp, #0
 801fc02:	6078      	str	r0, [r7, #4]
 801fc04:	460b      	mov	r3, r1
 801fc06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fc08:	2300      	movs	r3, #0
 801fc0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fc0c:	2300      	movs	r3, #0
 801fc0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801fc10:	687b      	ldr	r3, [r7, #4]
 801fc12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801fc16:	78fa      	ldrb	r2, [r7, #3]
 801fc18:	4611      	mov	r1, r2
 801fc1a:	4618      	mov	r0, r3
 801fc1c:	f7ea fbfc 	bl	800a418 <HAL_PCD_EP_SetStall>
 801fc20:	4603      	mov	r3, r0
 801fc22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fc24:	7bfb      	ldrb	r3, [r7, #15]
 801fc26:	4618      	mov	r0, r3
 801fc28:	f000 f8de 	bl	801fde8 <USBD_Get_USB_Status>
 801fc2c:	4603      	mov	r3, r0
 801fc2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801fc30:	7bbb      	ldrb	r3, [r7, #14]
}
 801fc32:	4618      	mov	r0, r3
 801fc34:	3710      	adds	r7, #16
 801fc36:	46bd      	mov	sp, r7
 801fc38:	bd80      	pop	{r7, pc}

0801fc3a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fc3a:	b580      	push	{r7, lr}
 801fc3c:	b084      	sub	sp, #16
 801fc3e:	af00      	add	r7, sp, #0
 801fc40:	6078      	str	r0, [r7, #4]
 801fc42:	460b      	mov	r3, r1
 801fc44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fc46:	2300      	movs	r3, #0
 801fc48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fc4a:	2300      	movs	r3, #0
 801fc4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801fc4e:	687b      	ldr	r3, [r7, #4]
 801fc50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801fc54:	78fa      	ldrb	r2, [r7, #3]
 801fc56:	4611      	mov	r1, r2
 801fc58:	4618      	mov	r0, r3
 801fc5a:	f7ea fc41 	bl	800a4e0 <HAL_PCD_EP_ClrStall>
 801fc5e:	4603      	mov	r3, r0
 801fc60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fc62:	7bfb      	ldrb	r3, [r7, #15]
 801fc64:	4618      	mov	r0, r3
 801fc66:	f000 f8bf 	bl	801fde8 <USBD_Get_USB_Status>
 801fc6a:	4603      	mov	r3, r0
 801fc6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801fc6e:	7bbb      	ldrb	r3, [r7, #14]
}
 801fc70:	4618      	mov	r0, r3
 801fc72:	3710      	adds	r7, #16
 801fc74:	46bd      	mov	sp, r7
 801fc76:	bd80      	pop	{r7, pc}

0801fc78 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fc78:	b480      	push	{r7}
 801fc7a:	b085      	sub	sp, #20
 801fc7c:	af00      	add	r7, sp, #0
 801fc7e:	6078      	str	r0, [r7, #4]
 801fc80:	460b      	mov	r3, r1
 801fc82:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801fc84:	687b      	ldr	r3, [r7, #4]
 801fc86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801fc8a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801fc8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801fc90:	2b00      	cmp	r3, #0
 801fc92:	da0b      	bge.n	801fcac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801fc94:	78fb      	ldrb	r3, [r7, #3]
 801fc96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801fc9a:	68f9      	ldr	r1, [r7, #12]
 801fc9c:	4613      	mov	r3, r2
 801fc9e:	00db      	lsls	r3, r3, #3
 801fca0:	4413      	add	r3, r2
 801fca2:	009b      	lsls	r3, r3, #2
 801fca4:	440b      	add	r3, r1
 801fca6:	333e      	adds	r3, #62	; 0x3e
 801fca8:	781b      	ldrb	r3, [r3, #0]
 801fcaa:	e00b      	b.n	801fcc4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801fcac:	78fb      	ldrb	r3, [r7, #3]
 801fcae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801fcb2:	68f9      	ldr	r1, [r7, #12]
 801fcb4:	4613      	mov	r3, r2
 801fcb6:	00db      	lsls	r3, r3, #3
 801fcb8:	4413      	add	r3, r2
 801fcba:	009b      	lsls	r3, r3, #2
 801fcbc:	440b      	add	r3, r1
 801fcbe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801fcc2:	781b      	ldrb	r3, [r3, #0]
  }
}
 801fcc4:	4618      	mov	r0, r3
 801fcc6:	3714      	adds	r7, #20
 801fcc8:	46bd      	mov	sp, r7
 801fcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcce:	4770      	bx	lr

0801fcd0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801fcd0:	b580      	push	{r7, lr}
 801fcd2:	b084      	sub	sp, #16
 801fcd4:	af00      	add	r7, sp, #0
 801fcd6:	6078      	str	r0, [r7, #4]
 801fcd8:	460b      	mov	r3, r1
 801fcda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fcdc:	2300      	movs	r3, #0
 801fcde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fce0:	2300      	movs	r3, #0
 801fce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801fce4:	687b      	ldr	r3, [r7, #4]
 801fce6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801fcea:	78fa      	ldrb	r2, [r7, #3]
 801fcec:	4611      	mov	r1, r2
 801fcee:	4618      	mov	r0, r3
 801fcf0:	f7ea fa0e 	bl	800a110 <HAL_PCD_SetAddress>
 801fcf4:	4603      	mov	r3, r0
 801fcf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fcf8:	7bfb      	ldrb	r3, [r7, #15]
 801fcfa:	4618      	mov	r0, r3
 801fcfc:	f000 f874 	bl	801fde8 <USBD_Get_USB_Status>
 801fd00:	4603      	mov	r3, r0
 801fd02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801fd04:	7bbb      	ldrb	r3, [r7, #14]
}
 801fd06:	4618      	mov	r0, r3
 801fd08:	3710      	adds	r7, #16
 801fd0a:	46bd      	mov	sp, r7
 801fd0c:	bd80      	pop	{r7, pc}

0801fd0e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801fd0e:	b580      	push	{r7, lr}
 801fd10:	b086      	sub	sp, #24
 801fd12:	af00      	add	r7, sp, #0
 801fd14:	60f8      	str	r0, [r7, #12]
 801fd16:	607a      	str	r2, [r7, #4]
 801fd18:	603b      	str	r3, [r7, #0]
 801fd1a:	460b      	mov	r3, r1
 801fd1c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fd1e:	2300      	movs	r3, #0
 801fd20:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fd22:	2300      	movs	r3, #0
 801fd24:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801fd26:	68fb      	ldr	r3, [r7, #12]
 801fd28:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801fd2c:	7af9      	ldrb	r1, [r7, #11]
 801fd2e:	683b      	ldr	r3, [r7, #0]
 801fd30:	687a      	ldr	r2, [r7, #4]
 801fd32:	f7ea fb27 	bl	800a384 <HAL_PCD_EP_Transmit>
 801fd36:	4603      	mov	r3, r0
 801fd38:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fd3a:	7dfb      	ldrb	r3, [r7, #23]
 801fd3c:	4618      	mov	r0, r3
 801fd3e:	f000 f853 	bl	801fde8 <USBD_Get_USB_Status>
 801fd42:	4603      	mov	r3, r0
 801fd44:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801fd46:	7dbb      	ldrb	r3, [r7, #22]
}
 801fd48:	4618      	mov	r0, r3
 801fd4a:	3718      	adds	r7, #24
 801fd4c:	46bd      	mov	sp, r7
 801fd4e:	bd80      	pop	{r7, pc}

0801fd50 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801fd50:	b580      	push	{r7, lr}
 801fd52:	b086      	sub	sp, #24
 801fd54:	af00      	add	r7, sp, #0
 801fd56:	60f8      	str	r0, [r7, #12]
 801fd58:	607a      	str	r2, [r7, #4]
 801fd5a:	603b      	str	r3, [r7, #0]
 801fd5c:	460b      	mov	r3, r1
 801fd5e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fd60:	2300      	movs	r3, #0
 801fd62:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fd64:	2300      	movs	r3, #0
 801fd66:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801fd68:	68fb      	ldr	r3, [r7, #12]
 801fd6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801fd6e:	7af9      	ldrb	r1, [r7, #11]
 801fd70:	683b      	ldr	r3, [r7, #0]
 801fd72:	687a      	ldr	r2, [r7, #4]
 801fd74:	f7ea faa3 	bl	800a2be <HAL_PCD_EP_Receive>
 801fd78:	4603      	mov	r3, r0
 801fd7a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fd7c:	7dfb      	ldrb	r3, [r7, #23]
 801fd7e:	4618      	mov	r0, r3
 801fd80:	f000 f832 	bl	801fde8 <USBD_Get_USB_Status>
 801fd84:	4603      	mov	r3, r0
 801fd86:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801fd88:	7dbb      	ldrb	r3, [r7, #22]
}
 801fd8a:	4618      	mov	r0, r3
 801fd8c:	3718      	adds	r7, #24
 801fd8e:	46bd      	mov	sp, r7
 801fd90:	bd80      	pop	{r7, pc}

0801fd92 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fd92:	b580      	push	{r7, lr}
 801fd94:	b082      	sub	sp, #8
 801fd96:	af00      	add	r7, sp, #0
 801fd98:	6078      	str	r0, [r7, #4]
 801fd9a:	460b      	mov	r3, r1
 801fd9c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801fd9e:	687b      	ldr	r3, [r7, #4]
 801fda0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801fda4:	78fa      	ldrb	r2, [r7, #3]
 801fda6:	4611      	mov	r1, r2
 801fda8:	4618      	mov	r0, r3
 801fdaa:	f7ea fad3 	bl	800a354 <HAL_PCD_EP_GetRxCount>
 801fdae:	4603      	mov	r3, r0
}
 801fdb0:	4618      	mov	r0, r3
 801fdb2:	3708      	adds	r7, #8
 801fdb4:	46bd      	mov	sp, r7
 801fdb6:	bd80      	pop	{r7, pc}

0801fdb8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801fdb8:	b480      	push	{r7}
 801fdba:	b083      	sub	sp, #12
 801fdbc:	af00      	add	r7, sp, #0
 801fdbe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801fdc0:	4b03      	ldr	r3, [pc, #12]	; (801fdd0 <USBD_static_malloc+0x18>)
}
 801fdc2:	4618      	mov	r0, r3
 801fdc4:	370c      	adds	r7, #12
 801fdc6:	46bd      	mov	sp, r7
 801fdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdcc:	4770      	bx	lr
 801fdce:	bf00      	nop
 801fdd0:	20002520 	.word	0x20002520

0801fdd4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801fdd4:	b480      	push	{r7}
 801fdd6:	b083      	sub	sp, #12
 801fdd8:	af00      	add	r7, sp, #0
 801fdda:	6078      	str	r0, [r7, #4]

}
 801fddc:	bf00      	nop
 801fdde:	370c      	adds	r7, #12
 801fde0:	46bd      	mov	sp, r7
 801fde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fde6:	4770      	bx	lr

0801fde8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801fde8:	b480      	push	{r7}
 801fdea:	b085      	sub	sp, #20
 801fdec:	af00      	add	r7, sp, #0
 801fdee:	4603      	mov	r3, r0
 801fdf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fdf2:	2300      	movs	r3, #0
 801fdf4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801fdf6:	79fb      	ldrb	r3, [r7, #7]
 801fdf8:	2b03      	cmp	r3, #3
 801fdfa:	d817      	bhi.n	801fe2c <USBD_Get_USB_Status+0x44>
 801fdfc:	a201      	add	r2, pc, #4	; (adr r2, 801fe04 <USBD_Get_USB_Status+0x1c>)
 801fdfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fe02:	bf00      	nop
 801fe04:	0801fe15 	.word	0x0801fe15
 801fe08:	0801fe1b 	.word	0x0801fe1b
 801fe0c:	0801fe21 	.word	0x0801fe21
 801fe10:	0801fe27 	.word	0x0801fe27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801fe14:	2300      	movs	r3, #0
 801fe16:	73fb      	strb	r3, [r7, #15]
    break;
 801fe18:	e00b      	b.n	801fe32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801fe1a:	2303      	movs	r3, #3
 801fe1c:	73fb      	strb	r3, [r7, #15]
    break;
 801fe1e:	e008      	b.n	801fe32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801fe20:	2301      	movs	r3, #1
 801fe22:	73fb      	strb	r3, [r7, #15]
    break;
 801fe24:	e005      	b.n	801fe32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801fe26:	2303      	movs	r3, #3
 801fe28:	73fb      	strb	r3, [r7, #15]
    break;
 801fe2a:	e002      	b.n	801fe32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801fe2c:	2303      	movs	r3, #3
 801fe2e:	73fb      	strb	r3, [r7, #15]
    break;
 801fe30:	bf00      	nop
  }
  return usb_status;
 801fe32:	7bfb      	ldrb	r3, [r7, #15]
}
 801fe34:	4618      	mov	r0, r3
 801fe36:	3714      	adds	r7, #20
 801fe38:	46bd      	mov	sp, r7
 801fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe3e:	4770      	bx	lr

0801fe40 <_ZdaPv>:
 801fe40:	f000 b816 	b.w	801fe70 <_ZdlPv>

0801fe44 <_Znwj>:
 801fe44:	2801      	cmp	r0, #1
 801fe46:	bf38      	it	cc
 801fe48:	2001      	movcc	r0, #1
 801fe4a:	b510      	push	{r4, lr}
 801fe4c:	4604      	mov	r4, r0
 801fe4e:	4620      	mov	r0, r4
 801fe50:	f002 fdc6 	bl	80229e0 <malloc>
 801fe54:	b930      	cbnz	r0, 801fe64 <_Znwj+0x20>
 801fe56:	f000 f80d 	bl	801fe74 <_ZSt15get_new_handlerv>
 801fe5a:	b908      	cbnz	r0, 801fe60 <_Znwj+0x1c>
 801fe5c:	f002 fd4e 	bl	80228fc <abort>
 801fe60:	4780      	blx	r0
 801fe62:	e7f4      	b.n	801fe4e <_Znwj+0xa>
 801fe64:	bd10      	pop	{r4, pc}

0801fe66 <_Znaj>:
 801fe66:	f7ff bfed 	b.w	801fe44 <_Znwj>

0801fe6a <_ZSt20__throw_length_errorPKc>:
 801fe6a:	b508      	push	{r3, lr}
 801fe6c:	f002 fd46 	bl	80228fc <abort>

0801fe70 <_ZdlPv>:
 801fe70:	f002 bdbe 	b.w	80229f0 <free>

0801fe74 <_ZSt15get_new_handlerv>:
 801fe74:	4b02      	ldr	r3, [pc, #8]	; (801fe80 <_ZSt15get_new_handlerv+0xc>)
 801fe76:	6818      	ldr	r0, [r3, #0]
 801fe78:	f3bf 8f5b 	dmb	ish
 801fe7c:	4770      	bx	lr
 801fe7e:	bf00      	nop
 801fe80:	20002740 	.word	0x20002740
 801fe84:	00000000 	.word	0x00000000

0801fe88 <cos>:
 801fe88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fe8a:	ec53 2b10 	vmov	r2, r3, d0
 801fe8e:	4826      	ldr	r0, [pc, #152]	; (801ff28 <cos+0xa0>)
 801fe90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801fe94:	4281      	cmp	r1, r0
 801fe96:	dc06      	bgt.n	801fea6 <cos+0x1e>
 801fe98:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801ff20 <cos+0x98>
 801fe9c:	b005      	add	sp, #20
 801fe9e:	f85d eb04 	ldr.w	lr, [sp], #4
 801fea2:	f001 bd41 	b.w	8021928 <__kernel_cos>
 801fea6:	4821      	ldr	r0, [pc, #132]	; (801ff2c <cos+0xa4>)
 801fea8:	4281      	cmp	r1, r0
 801feaa:	dd09      	ble.n	801fec0 <cos+0x38>
 801feac:	ee10 0a10 	vmov	r0, s0
 801feb0:	4619      	mov	r1, r3
 801feb2:	f7e0 f9f3 	bl	800029c <__aeabi_dsub>
 801feb6:	ec41 0b10 	vmov	d0, r0, r1
 801feba:	b005      	add	sp, #20
 801febc:	f85d fb04 	ldr.w	pc, [sp], #4
 801fec0:	4668      	mov	r0, sp
 801fec2:	f001 f859 	bl	8020f78 <__ieee754_rem_pio2>
 801fec6:	f000 0003 	and.w	r0, r0, #3
 801feca:	2801      	cmp	r0, #1
 801fecc:	d00b      	beq.n	801fee6 <cos+0x5e>
 801fece:	2802      	cmp	r0, #2
 801fed0:	d016      	beq.n	801ff00 <cos+0x78>
 801fed2:	b9e0      	cbnz	r0, 801ff0e <cos+0x86>
 801fed4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801fed8:	ed9d 0b00 	vldr	d0, [sp]
 801fedc:	f001 fd24 	bl	8021928 <__kernel_cos>
 801fee0:	ec51 0b10 	vmov	r0, r1, d0
 801fee4:	e7e7      	b.n	801feb6 <cos+0x2e>
 801fee6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801feea:	ed9d 0b00 	vldr	d0, [sp]
 801feee:	f002 f933 	bl	8022158 <__kernel_sin>
 801fef2:	ec53 2b10 	vmov	r2, r3, d0
 801fef6:	ee10 0a10 	vmov	r0, s0
 801fefa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801fefe:	e7da      	b.n	801feb6 <cos+0x2e>
 801ff00:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ff04:	ed9d 0b00 	vldr	d0, [sp]
 801ff08:	f001 fd0e 	bl	8021928 <__kernel_cos>
 801ff0c:	e7f1      	b.n	801fef2 <cos+0x6a>
 801ff0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ff12:	ed9d 0b00 	vldr	d0, [sp]
 801ff16:	2001      	movs	r0, #1
 801ff18:	f002 f91e 	bl	8022158 <__kernel_sin>
 801ff1c:	e7e0      	b.n	801fee0 <cos+0x58>
 801ff1e:	bf00      	nop
	...
 801ff28:	3fe921fb 	.word	0x3fe921fb
 801ff2c:	7fefffff 	.word	0x7fefffff

0801ff30 <floor>:
 801ff30:	ec51 0b10 	vmov	r0, r1, d0
 801ff34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff38:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801ff3c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801ff40:	2e13      	cmp	r6, #19
 801ff42:	ee10 5a10 	vmov	r5, s0
 801ff46:	ee10 8a10 	vmov	r8, s0
 801ff4a:	460c      	mov	r4, r1
 801ff4c:	dc32      	bgt.n	801ffb4 <floor+0x84>
 801ff4e:	2e00      	cmp	r6, #0
 801ff50:	da14      	bge.n	801ff7c <floor+0x4c>
 801ff52:	a333      	add	r3, pc, #204	; (adr r3, 8020020 <floor+0xf0>)
 801ff54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff58:	f7e0 f9a2 	bl	80002a0 <__adddf3>
 801ff5c:	2200      	movs	r2, #0
 801ff5e:	2300      	movs	r3, #0
 801ff60:	f7e0 fde4 	bl	8000b2c <__aeabi_dcmpgt>
 801ff64:	b138      	cbz	r0, 801ff76 <floor+0x46>
 801ff66:	2c00      	cmp	r4, #0
 801ff68:	da57      	bge.n	802001a <floor+0xea>
 801ff6a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801ff6e:	431d      	orrs	r5, r3
 801ff70:	d001      	beq.n	801ff76 <floor+0x46>
 801ff72:	4c2d      	ldr	r4, [pc, #180]	; (8020028 <floor+0xf8>)
 801ff74:	2500      	movs	r5, #0
 801ff76:	4621      	mov	r1, r4
 801ff78:	4628      	mov	r0, r5
 801ff7a:	e025      	b.n	801ffc8 <floor+0x98>
 801ff7c:	4f2b      	ldr	r7, [pc, #172]	; (802002c <floor+0xfc>)
 801ff7e:	4137      	asrs	r7, r6
 801ff80:	ea01 0307 	and.w	r3, r1, r7
 801ff84:	4303      	orrs	r3, r0
 801ff86:	d01f      	beq.n	801ffc8 <floor+0x98>
 801ff88:	a325      	add	r3, pc, #148	; (adr r3, 8020020 <floor+0xf0>)
 801ff8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff8e:	f7e0 f987 	bl	80002a0 <__adddf3>
 801ff92:	2200      	movs	r2, #0
 801ff94:	2300      	movs	r3, #0
 801ff96:	f7e0 fdc9 	bl	8000b2c <__aeabi_dcmpgt>
 801ff9a:	2800      	cmp	r0, #0
 801ff9c:	d0eb      	beq.n	801ff76 <floor+0x46>
 801ff9e:	2c00      	cmp	r4, #0
 801ffa0:	bfbe      	ittt	lt
 801ffa2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ffa6:	fa43 f606 	asrlt.w	r6, r3, r6
 801ffaa:	19a4      	addlt	r4, r4, r6
 801ffac:	ea24 0407 	bic.w	r4, r4, r7
 801ffb0:	2500      	movs	r5, #0
 801ffb2:	e7e0      	b.n	801ff76 <floor+0x46>
 801ffb4:	2e33      	cmp	r6, #51	; 0x33
 801ffb6:	dd0b      	ble.n	801ffd0 <floor+0xa0>
 801ffb8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ffbc:	d104      	bne.n	801ffc8 <floor+0x98>
 801ffbe:	ee10 2a10 	vmov	r2, s0
 801ffc2:	460b      	mov	r3, r1
 801ffc4:	f7e0 f96c 	bl	80002a0 <__adddf3>
 801ffc8:	ec41 0b10 	vmov	d0, r0, r1
 801ffcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ffd0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801ffd4:	f04f 33ff 	mov.w	r3, #4294967295
 801ffd8:	fa23 f707 	lsr.w	r7, r3, r7
 801ffdc:	4207      	tst	r7, r0
 801ffde:	d0f3      	beq.n	801ffc8 <floor+0x98>
 801ffe0:	a30f      	add	r3, pc, #60	; (adr r3, 8020020 <floor+0xf0>)
 801ffe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffe6:	f7e0 f95b 	bl	80002a0 <__adddf3>
 801ffea:	2200      	movs	r2, #0
 801ffec:	2300      	movs	r3, #0
 801ffee:	f7e0 fd9d 	bl	8000b2c <__aeabi_dcmpgt>
 801fff2:	2800      	cmp	r0, #0
 801fff4:	d0bf      	beq.n	801ff76 <floor+0x46>
 801fff6:	2c00      	cmp	r4, #0
 801fff8:	da02      	bge.n	8020000 <floor+0xd0>
 801fffa:	2e14      	cmp	r6, #20
 801fffc:	d103      	bne.n	8020006 <floor+0xd6>
 801fffe:	3401      	adds	r4, #1
 8020000:	ea25 0507 	bic.w	r5, r5, r7
 8020004:	e7b7      	b.n	801ff76 <floor+0x46>
 8020006:	2301      	movs	r3, #1
 8020008:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802000c:	fa03 f606 	lsl.w	r6, r3, r6
 8020010:	4435      	add	r5, r6
 8020012:	4545      	cmp	r5, r8
 8020014:	bf38      	it	cc
 8020016:	18e4      	addcc	r4, r4, r3
 8020018:	e7f2      	b.n	8020000 <floor+0xd0>
 802001a:	2500      	movs	r5, #0
 802001c:	462c      	mov	r4, r5
 802001e:	e7aa      	b.n	801ff76 <floor+0x46>
 8020020:	8800759c 	.word	0x8800759c
 8020024:	7e37e43c 	.word	0x7e37e43c
 8020028:	bff00000 	.word	0xbff00000
 802002c:	000fffff 	.word	0x000fffff

08020030 <frexp>:
 8020030:	b570      	push	{r4, r5, r6, lr}
 8020032:	2100      	movs	r1, #0
 8020034:	ec55 4b10 	vmov	r4, r5, d0
 8020038:	6001      	str	r1, [r0, #0]
 802003a:	4916      	ldr	r1, [pc, #88]	; (8020094 <frexp+0x64>)
 802003c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8020040:	428a      	cmp	r2, r1
 8020042:	4606      	mov	r6, r0
 8020044:	462b      	mov	r3, r5
 8020046:	dc22      	bgt.n	802008e <frexp+0x5e>
 8020048:	ee10 1a10 	vmov	r1, s0
 802004c:	4311      	orrs	r1, r2
 802004e:	d01e      	beq.n	802008e <frexp+0x5e>
 8020050:	4911      	ldr	r1, [pc, #68]	; (8020098 <frexp+0x68>)
 8020052:	4029      	ands	r1, r5
 8020054:	b969      	cbnz	r1, 8020072 <frexp+0x42>
 8020056:	4b11      	ldr	r3, [pc, #68]	; (802009c <frexp+0x6c>)
 8020058:	2200      	movs	r2, #0
 802005a:	ee10 0a10 	vmov	r0, s0
 802005e:	4629      	mov	r1, r5
 8020060:	f7e0 fad4 	bl	800060c <__aeabi_dmul>
 8020064:	460b      	mov	r3, r1
 8020066:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 802006a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 802006e:	4604      	mov	r4, r0
 8020070:	6031      	str	r1, [r6, #0]
 8020072:	6831      	ldr	r1, [r6, #0]
 8020074:	1512      	asrs	r2, r2, #20
 8020076:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802007a:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 802007e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8020082:	440a      	add	r2, r1
 8020084:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8020088:	6032      	str	r2, [r6, #0]
 802008a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 802008e:	ec45 4b10 	vmov	d0, r4, r5
 8020092:	bd70      	pop	{r4, r5, r6, pc}
 8020094:	7fefffff 	.word	0x7fefffff
 8020098:	7ff00000 	.word	0x7ff00000
 802009c:	43500000 	.word	0x43500000

080200a0 <round>:
 80200a0:	ec51 0b10 	vmov	r0, r1, d0
 80200a4:	b570      	push	{r4, r5, r6, lr}
 80200a6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80200aa:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80200ae:	2c13      	cmp	r4, #19
 80200b0:	ee10 2a10 	vmov	r2, s0
 80200b4:	460b      	mov	r3, r1
 80200b6:	dc19      	bgt.n	80200ec <round+0x4c>
 80200b8:	2c00      	cmp	r4, #0
 80200ba:	da09      	bge.n	80200d0 <round+0x30>
 80200bc:	3401      	adds	r4, #1
 80200be:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80200c2:	d103      	bne.n	80200cc <round+0x2c>
 80200c4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80200c8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80200cc:	2200      	movs	r2, #0
 80200ce:	e028      	b.n	8020122 <round+0x82>
 80200d0:	4d15      	ldr	r5, [pc, #84]	; (8020128 <round+0x88>)
 80200d2:	4125      	asrs	r5, r4
 80200d4:	ea01 0605 	and.w	r6, r1, r5
 80200d8:	4332      	orrs	r2, r6
 80200da:	d00e      	beq.n	80200fa <round+0x5a>
 80200dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80200e0:	fa42 f404 	asr.w	r4, r2, r4
 80200e4:	4423      	add	r3, r4
 80200e6:	ea23 0305 	bic.w	r3, r3, r5
 80200ea:	e7ef      	b.n	80200cc <round+0x2c>
 80200ec:	2c33      	cmp	r4, #51	; 0x33
 80200ee:	dd07      	ble.n	8020100 <round+0x60>
 80200f0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80200f4:	d101      	bne.n	80200fa <round+0x5a>
 80200f6:	f7e0 f8d3 	bl	80002a0 <__adddf3>
 80200fa:	ec41 0b10 	vmov	d0, r0, r1
 80200fe:	bd70      	pop	{r4, r5, r6, pc}
 8020100:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8020104:	f04f 35ff 	mov.w	r5, #4294967295
 8020108:	40f5      	lsrs	r5, r6
 802010a:	4228      	tst	r0, r5
 802010c:	d0f5      	beq.n	80200fa <round+0x5a>
 802010e:	2101      	movs	r1, #1
 8020110:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8020114:	fa01 f404 	lsl.w	r4, r1, r4
 8020118:	1912      	adds	r2, r2, r4
 802011a:	bf28      	it	cs
 802011c:	185b      	addcs	r3, r3, r1
 802011e:	ea22 0205 	bic.w	r2, r2, r5
 8020122:	4619      	mov	r1, r3
 8020124:	4610      	mov	r0, r2
 8020126:	e7e8      	b.n	80200fa <round+0x5a>
 8020128:	000fffff 	.word	0x000fffff
 802012c:	00000000 	.word	0x00000000

08020130 <sin>:
 8020130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020132:	ec53 2b10 	vmov	r2, r3, d0
 8020136:	4828      	ldr	r0, [pc, #160]	; (80201d8 <sin+0xa8>)
 8020138:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802013c:	4281      	cmp	r1, r0
 802013e:	dc07      	bgt.n	8020150 <sin+0x20>
 8020140:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80201d0 <sin+0xa0>
 8020144:	2000      	movs	r0, #0
 8020146:	b005      	add	sp, #20
 8020148:	f85d eb04 	ldr.w	lr, [sp], #4
 802014c:	f002 b804 	b.w	8022158 <__kernel_sin>
 8020150:	4822      	ldr	r0, [pc, #136]	; (80201dc <sin+0xac>)
 8020152:	4281      	cmp	r1, r0
 8020154:	dd09      	ble.n	802016a <sin+0x3a>
 8020156:	ee10 0a10 	vmov	r0, s0
 802015a:	4619      	mov	r1, r3
 802015c:	f7e0 f89e 	bl	800029c <__aeabi_dsub>
 8020160:	ec41 0b10 	vmov	d0, r0, r1
 8020164:	b005      	add	sp, #20
 8020166:	f85d fb04 	ldr.w	pc, [sp], #4
 802016a:	4668      	mov	r0, sp
 802016c:	f000 ff04 	bl	8020f78 <__ieee754_rem_pio2>
 8020170:	f000 0003 	and.w	r0, r0, #3
 8020174:	2801      	cmp	r0, #1
 8020176:	d00c      	beq.n	8020192 <sin+0x62>
 8020178:	2802      	cmp	r0, #2
 802017a:	d011      	beq.n	80201a0 <sin+0x70>
 802017c:	b9f0      	cbnz	r0, 80201bc <sin+0x8c>
 802017e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020182:	ed9d 0b00 	vldr	d0, [sp]
 8020186:	2001      	movs	r0, #1
 8020188:	f001 ffe6 	bl	8022158 <__kernel_sin>
 802018c:	ec51 0b10 	vmov	r0, r1, d0
 8020190:	e7e6      	b.n	8020160 <sin+0x30>
 8020192:	ed9d 1b02 	vldr	d1, [sp, #8]
 8020196:	ed9d 0b00 	vldr	d0, [sp]
 802019a:	f001 fbc5 	bl	8021928 <__kernel_cos>
 802019e:	e7f5      	b.n	802018c <sin+0x5c>
 80201a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80201a4:	ed9d 0b00 	vldr	d0, [sp]
 80201a8:	2001      	movs	r0, #1
 80201aa:	f001 ffd5 	bl	8022158 <__kernel_sin>
 80201ae:	ec53 2b10 	vmov	r2, r3, d0
 80201b2:	ee10 0a10 	vmov	r0, s0
 80201b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80201ba:	e7d1      	b.n	8020160 <sin+0x30>
 80201bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80201c0:	ed9d 0b00 	vldr	d0, [sp]
 80201c4:	f001 fbb0 	bl	8021928 <__kernel_cos>
 80201c8:	e7f1      	b.n	80201ae <sin+0x7e>
 80201ca:	bf00      	nop
 80201cc:	f3af 8000 	nop.w
	...
 80201d8:	3fe921fb 	.word	0x3fe921fb
 80201dc:	7fefffff 	.word	0x7fefffff

080201e0 <tan>:
 80201e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80201e2:	ec53 2b10 	vmov	r2, r3, d0
 80201e6:	4816      	ldr	r0, [pc, #88]	; (8020240 <tan+0x60>)
 80201e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80201ec:	4281      	cmp	r1, r0
 80201ee:	dc07      	bgt.n	8020200 <tan+0x20>
 80201f0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8020238 <tan+0x58>
 80201f4:	2001      	movs	r0, #1
 80201f6:	b005      	add	sp, #20
 80201f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80201fc:	f002 b86c 	b.w	80222d8 <__kernel_tan>
 8020200:	4810      	ldr	r0, [pc, #64]	; (8020244 <tan+0x64>)
 8020202:	4281      	cmp	r1, r0
 8020204:	dd09      	ble.n	802021a <tan+0x3a>
 8020206:	ee10 0a10 	vmov	r0, s0
 802020a:	4619      	mov	r1, r3
 802020c:	f7e0 f846 	bl	800029c <__aeabi_dsub>
 8020210:	ec41 0b10 	vmov	d0, r0, r1
 8020214:	b005      	add	sp, #20
 8020216:	f85d fb04 	ldr.w	pc, [sp], #4
 802021a:	4668      	mov	r0, sp
 802021c:	f000 feac 	bl	8020f78 <__ieee754_rem_pio2>
 8020220:	0040      	lsls	r0, r0, #1
 8020222:	f000 0002 	and.w	r0, r0, #2
 8020226:	ed9d 1b02 	vldr	d1, [sp, #8]
 802022a:	ed9d 0b00 	vldr	d0, [sp]
 802022e:	f1c0 0001 	rsb	r0, r0, #1
 8020232:	f002 f851 	bl	80222d8 <__kernel_tan>
 8020236:	e7ed      	b.n	8020214 <tan+0x34>
	...
 8020240:	3fe921fb 	.word	0x3fe921fb
 8020244:	7fefffff 	.word	0x7fefffff

08020248 <frexpf>:
 8020248:	ee10 3a10 	vmov	r3, s0
 802024c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8020250:	2100      	movs	r1, #0
 8020252:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8020256:	6001      	str	r1, [r0, #0]
 8020258:	da19      	bge.n	802028e <frexpf+0x46>
 802025a:	b1c2      	cbz	r2, 802028e <frexpf+0x46>
 802025c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8020260:	d10a      	bne.n	8020278 <frexpf+0x30>
 8020262:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8020290 <frexpf+0x48>
 8020266:	ee60 7a27 	vmul.f32	s15, s0, s15
 802026a:	f06f 0118 	mvn.w	r1, #24
 802026e:	ee17 3a90 	vmov	r3, s15
 8020272:	6001      	str	r1, [r0, #0]
 8020274:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8020278:	6801      	ldr	r1, [r0, #0]
 802027a:	15d2      	asrs	r2, r2, #23
 802027c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8020280:	3a7e      	subs	r2, #126	; 0x7e
 8020282:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8020286:	440a      	add	r2, r1
 8020288:	ee00 3a10 	vmov	s0, r3
 802028c:	6002      	str	r2, [r0, #0]
 802028e:	4770      	bx	lr
 8020290:	4c000000 	.word	0x4c000000

08020294 <roundf>:
 8020294:	ee10 0a10 	vmov	r0, s0
 8020298:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 802029c:	3a7f      	subs	r2, #127	; 0x7f
 802029e:	2a16      	cmp	r2, #22
 80202a0:	dc15      	bgt.n	80202ce <roundf+0x3a>
 80202a2:	2a00      	cmp	r2, #0
 80202a4:	da08      	bge.n	80202b8 <roundf+0x24>
 80202a6:	3201      	adds	r2, #1
 80202a8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80202ac:	d101      	bne.n	80202b2 <roundf+0x1e>
 80202ae:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80202b2:	ee00 3a10 	vmov	s0, r3
 80202b6:	4770      	bx	lr
 80202b8:	4907      	ldr	r1, [pc, #28]	; (80202d8 <roundf+0x44>)
 80202ba:	4111      	asrs	r1, r2
 80202bc:	4208      	tst	r0, r1
 80202be:	d0fa      	beq.n	80202b6 <roundf+0x22>
 80202c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80202c4:	4113      	asrs	r3, r2
 80202c6:	4403      	add	r3, r0
 80202c8:	ea23 0301 	bic.w	r3, r3, r1
 80202cc:	e7f1      	b.n	80202b2 <roundf+0x1e>
 80202ce:	2a80      	cmp	r2, #128	; 0x80
 80202d0:	d1f1      	bne.n	80202b6 <roundf+0x22>
 80202d2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80202d6:	4770      	bx	lr
 80202d8:	007fffff 	.word	0x007fffff

080202dc <pow>:
 80202dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80202de:	ed2d 8b02 	vpush	{d8}
 80202e2:	eeb0 8a40 	vmov.f32	s16, s0
 80202e6:	eef0 8a60 	vmov.f32	s17, s1
 80202ea:	ec55 4b11 	vmov	r4, r5, d1
 80202ee:	f000 f913 	bl	8020518 <__ieee754_pow>
 80202f2:	4622      	mov	r2, r4
 80202f4:	462b      	mov	r3, r5
 80202f6:	4620      	mov	r0, r4
 80202f8:	4629      	mov	r1, r5
 80202fa:	ec57 6b10 	vmov	r6, r7, d0
 80202fe:	f7e0 fc1f 	bl	8000b40 <__aeabi_dcmpun>
 8020302:	2800      	cmp	r0, #0
 8020304:	d13b      	bne.n	802037e <pow+0xa2>
 8020306:	ec51 0b18 	vmov	r0, r1, d8
 802030a:	2200      	movs	r2, #0
 802030c:	2300      	movs	r3, #0
 802030e:	f7e0 fbe5 	bl	8000adc <__aeabi_dcmpeq>
 8020312:	b1b8      	cbz	r0, 8020344 <pow+0x68>
 8020314:	2200      	movs	r2, #0
 8020316:	2300      	movs	r3, #0
 8020318:	4620      	mov	r0, r4
 802031a:	4629      	mov	r1, r5
 802031c:	f7e0 fbde 	bl	8000adc <__aeabi_dcmpeq>
 8020320:	2800      	cmp	r0, #0
 8020322:	d146      	bne.n	80203b2 <pow+0xd6>
 8020324:	ec45 4b10 	vmov	d0, r4, r5
 8020328:	f002 fa3b 	bl	80227a2 <finite>
 802032c:	b338      	cbz	r0, 802037e <pow+0xa2>
 802032e:	2200      	movs	r2, #0
 8020330:	2300      	movs	r3, #0
 8020332:	4620      	mov	r0, r4
 8020334:	4629      	mov	r1, r5
 8020336:	f7e0 fbdb 	bl	8000af0 <__aeabi_dcmplt>
 802033a:	b300      	cbz	r0, 802037e <pow+0xa2>
 802033c:	f002 fb10 	bl	8022960 <__errno>
 8020340:	2322      	movs	r3, #34	; 0x22
 8020342:	e01b      	b.n	802037c <pow+0xa0>
 8020344:	ec47 6b10 	vmov	d0, r6, r7
 8020348:	f002 fa2b 	bl	80227a2 <finite>
 802034c:	b9e0      	cbnz	r0, 8020388 <pow+0xac>
 802034e:	eeb0 0a48 	vmov.f32	s0, s16
 8020352:	eef0 0a68 	vmov.f32	s1, s17
 8020356:	f002 fa24 	bl	80227a2 <finite>
 802035a:	b1a8      	cbz	r0, 8020388 <pow+0xac>
 802035c:	ec45 4b10 	vmov	d0, r4, r5
 8020360:	f002 fa1f 	bl	80227a2 <finite>
 8020364:	b180      	cbz	r0, 8020388 <pow+0xac>
 8020366:	4632      	mov	r2, r6
 8020368:	463b      	mov	r3, r7
 802036a:	4630      	mov	r0, r6
 802036c:	4639      	mov	r1, r7
 802036e:	f7e0 fbe7 	bl	8000b40 <__aeabi_dcmpun>
 8020372:	2800      	cmp	r0, #0
 8020374:	d0e2      	beq.n	802033c <pow+0x60>
 8020376:	f002 faf3 	bl	8022960 <__errno>
 802037a:	2321      	movs	r3, #33	; 0x21
 802037c:	6003      	str	r3, [r0, #0]
 802037e:	ecbd 8b02 	vpop	{d8}
 8020382:	ec47 6b10 	vmov	d0, r6, r7
 8020386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020388:	2200      	movs	r2, #0
 802038a:	2300      	movs	r3, #0
 802038c:	4630      	mov	r0, r6
 802038e:	4639      	mov	r1, r7
 8020390:	f7e0 fba4 	bl	8000adc <__aeabi_dcmpeq>
 8020394:	2800      	cmp	r0, #0
 8020396:	d0f2      	beq.n	802037e <pow+0xa2>
 8020398:	eeb0 0a48 	vmov.f32	s0, s16
 802039c:	eef0 0a68 	vmov.f32	s1, s17
 80203a0:	f002 f9ff 	bl	80227a2 <finite>
 80203a4:	2800      	cmp	r0, #0
 80203a6:	d0ea      	beq.n	802037e <pow+0xa2>
 80203a8:	ec45 4b10 	vmov	d0, r4, r5
 80203ac:	f002 f9f9 	bl	80227a2 <finite>
 80203b0:	e7c3      	b.n	802033a <pow+0x5e>
 80203b2:	4f01      	ldr	r7, [pc, #4]	; (80203b8 <pow+0xdc>)
 80203b4:	2600      	movs	r6, #0
 80203b6:	e7e2      	b.n	802037e <pow+0xa2>
 80203b8:	3ff00000 	.word	0x3ff00000

080203bc <sqrt>:
 80203bc:	b538      	push	{r3, r4, r5, lr}
 80203be:	ed2d 8b02 	vpush	{d8}
 80203c2:	ec55 4b10 	vmov	r4, r5, d0
 80203c6:	f000 ffe3 	bl	8021390 <__ieee754_sqrt>
 80203ca:	4622      	mov	r2, r4
 80203cc:	462b      	mov	r3, r5
 80203ce:	4620      	mov	r0, r4
 80203d0:	4629      	mov	r1, r5
 80203d2:	eeb0 8a40 	vmov.f32	s16, s0
 80203d6:	eef0 8a60 	vmov.f32	s17, s1
 80203da:	f7e0 fbb1 	bl	8000b40 <__aeabi_dcmpun>
 80203de:	b990      	cbnz	r0, 8020406 <sqrt+0x4a>
 80203e0:	2200      	movs	r2, #0
 80203e2:	2300      	movs	r3, #0
 80203e4:	4620      	mov	r0, r4
 80203e6:	4629      	mov	r1, r5
 80203e8:	f7e0 fb82 	bl	8000af0 <__aeabi_dcmplt>
 80203ec:	b158      	cbz	r0, 8020406 <sqrt+0x4a>
 80203ee:	f002 fab7 	bl	8022960 <__errno>
 80203f2:	2321      	movs	r3, #33	; 0x21
 80203f4:	6003      	str	r3, [r0, #0]
 80203f6:	2200      	movs	r2, #0
 80203f8:	2300      	movs	r3, #0
 80203fa:	4610      	mov	r0, r2
 80203fc:	4619      	mov	r1, r3
 80203fe:	f7e0 fa2f 	bl	8000860 <__aeabi_ddiv>
 8020402:	ec41 0b18 	vmov	d8, r0, r1
 8020406:	eeb0 0a48 	vmov.f32	s0, s16
 802040a:	eef0 0a68 	vmov.f32	s1, s17
 802040e:	ecbd 8b02 	vpop	{d8}
 8020412:	bd38      	pop	{r3, r4, r5, pc}

08020414 <expf>:
 8020414:	b508      	push	{r3, lr}
 8020416:	ed2d 8b02 	vpush	{d8}
 802041a:	eef0 8a40 	vmov.f32	s17, s0
 802041e:	f001 f869 	bl	80214f4 <__ieee754_expf>
 8020422:	eeb0 8a40 	vmov.f32	s16, s0
 8020426:	eeb0 0a68 	vmov.f32	s0, s17
 802042a:	f002 fa53 	bl	80228d4 <finitef>
 802042e:	b160      	cbz	r0, 802044a <expf+0x36>
 8020430:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8020470 <expf+0x5c>
 8020434:	eef4 8ae7 	vcmpe.f32	s17, s15
 8020438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802043c:	dd0a      	ble.n	8020454 <expf+0x40>
 802043e:	f002 fa8f 	bl	8022960 <__errno>
 8020442:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8020474 <expf+0x60>
 8020446:	2322      	movs	r3, #34	; 0x22
 8020448:	6003      	str	r3, [r0, #0]
 802044a:	eeb0 0a48 	vmov.f32	s0, s16
 802044e:	ecbd 8b02 	vpop	{d8}
 8020452:	bd08      	pop	{r3, pc}
 8020454:	eddf 7a08 	vldr	s15, [pc, #32]	; 8020478 <expf+0x64>
 8020458:	eef4 8ae7 	vcmpe.f32	s17, s15
 802045c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020460:	d5f3      	bpl.n	802044a <expf+0x36>
 8020462:	f002 fa7d 	bl	8022960 <__errno>
 8020466:	2322      	movs	r3, #34	; 0x22
 8020468:	ed9f 8a04 	vldr	s16, [pc, #16]	; 802047c <expf+0x68>
 802046c:	6003      	str	r3, [r0, #0]
 802046e:	e7ec      	b.n	802044a <expf+0x36>
 8020470:	42b17180 	.word	0x42b17180
 8020474:	7f800000 	.word	0x7f800000
 8020478:	c2cff1b5 	.word	0xc2cff1b5
 802047c:	00000000 	.word	0x00000000

08020480 <log10f>:
 8020480:	b508      	push	{r3, lr}
 8020482:	ed2d 8b02 	vpush	{d8}
 8020486:	eeb0 8a40 	vmov.f32	s16, s0
 802048a:	f001 f9f1 	bl	8021870 <__ieee754_log10f>
 802048e:	eeb4 8a48 	vcmp.f32	s16, s16
 8020492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020496:	d60f      	bvs.n	80204b8 <log10f+0x38>
 8020498:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 802049c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204a0:	d80a      	bhi.n	80204b8 <log10f+0x38>
 80204a2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80204a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204aa:	d108      	bne.n	80204be <log10f+0x3e>
 80204ac:	f002 fa58 	bl	8022960 <__errno>
 80204b0:	2322      	movs	r3, #34	; 0x22
 80204b2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80204d4 <log10f+0x54>
 80204b6:	6003      	str	r3, [r0, #0]
 80204b8:	ecbd 8b02 	vpop	{d8}
 80204bc:	bd08      	pop	{r3, pc}
 80204be:	f002 fa4f 	bl	8022960 <__errno>
 80204c2:	ecbd 8b02 	vpop	{d8}
 80204c6:	2321      	movs	r3, #33	; 0x21
 80204c8:	6003      	str	r3, [r0, #0]
 80204ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80204ce:	4802      	ldr	r0, [pc, #8]	; (80204d8 <log10f+0x58>)
 80204d0:	f002 ba0e 	b.w	80228f0 <nanf>
 80204d4:	ff800000 	.word	0xff800000
 80204d8:	0802935b 	.word	0x0802935b

080204dc <sqrtf>:
 80204dc:	b508      	push	{r3, lr}
 80204de:	ed2d 8b02 	vpush	{d8}
 80204e2:	eeb0 8a40 	vmov.f32	s16, s0
 80204e6:	f001 fa1b 	bl	8021920 <__ieee754_sqrtf>
 80204ea:	eeb4 8a48 	vcmp.f32	s16, s16
 80204ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204f2:	d60c      	bvs.n	802050e <sqrtf+0x32>
 80204f4:	eddf 8a07 	vldr	s17, [pc, #28]	; 8020514 <sqrtf+0x38>
 80204f8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80204fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020500:	d505      	bpl.n	802050e <sqrtf+0x32>
 8020502:	f002 fa2d 	bl	8022960 <__errno>
 8020506:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 802050a:	2321      	movs	r3, #33	; 0x21
 802050c:	6003      	str	r3, [r0, #0]
 802050e:	ecbd 8b02 	vpop	{d8}
 8020512:	bd08      	pop	{r3, pc}
 8020514:	00000000 	.word	0x00000000

08020518 <__ieee754_pow>:
 8020518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802051c:	ed2d 8b06 	vpush	{d8-d10}
 8020520:	b089      	sub	sp, #36	; 0x24
 8020522:	ed8d 1b00 	vstr	d1, [sp]
 8020526:	e9dd 2900 	ldrd	r2, r9, [sp]
 802052a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 802052e:	ea58 0102 	orrs.w	r1, r8, r2
 8020532:	ec57 6b10 	vmov	r6, r7, d0
 8020536:	d115      	bne.n	8020564 <__ieee754_pow+0x4c>
 8020538:	19b3      	adds	r3, r6, r6
 802053a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 802053e:	4152      	adcs	r2, r2
 8020540:	4299      	cmp	r1, r3
 8020542:	4b89      	ldr	r3, [pc, #548]	; (8020768 <__ieee754_pow+0x250>)
 8020544:	4193      	sbcs	r3, r2
 8020546:	f080 84d2 	bcs.w	8020eee <__ieee754_pow+0x9d6>
 802054a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802054e:	4630      	mov	r0, r6
 8020550:	4639      	mov	r1, r7
 8020552:	f7df fea5 	bl	80002a0 <__adddf3>
 8020556:	ec41 0b10 	vmov	d0, r0, r1
 802055a:	b009      	add	sp, #36	; 0x24
 802055c:	ecbd 8b06 	vpop	{d8-d10}
 8020560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020564:	4b81      	ldr	r3, [pc, #516]	; (802076c <__ieee754_pow+0x254>)
 8020566:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 802056a:	429c      	cmp	r4, r3
 802056c:	ee10 aa10 	vmov	sl, s0
 8020570:	463d      	mov	r5, r7
 8020572:	dc06      	bgt.n	8020582 <__ieee754_pow+0x6a>
 8020574:	d101      	bne.n	802057a <__ieee754_pow+0x62>
 8020576:	2e00      	cmp	r6, #0
 8020578:	d1e7      	bne.n	802054a <__ieee754_pow+0x32>
 802057a:	4598      	cmp	r8, r3
 802057c:	dc01      	bgt.n	8020582 <__ieee754_pow+0x6a>
 802057e:	d10f      	bne.n	80205a0 <__ieee754_pow+0x88>
 8020580:	b172      	cbz	r2, 80205a0 <__ieee754_pow+0x88>
 8020582:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8020586:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 802058a:	ea55 050a 	orrs.w	r5, r5, sl
 802058e:	d1dc      	bne.n	802054a <__ieee754_pow+0x32>
 8020590:	e9dd 3200 	ldrd	r3, r2, [sp]
 8020594:	18db      	adds	r3, r3, r3
 8020596:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 802059a:	4152      	adcs	r2, r2
 802059c:	429d      	cmp	r5, r3
 802059e:	e7d0      	b.n	8020542 <__ieee754_pow+0x2a>
 80205a0:	2d00      	cmp	r5, #0
 80205a2:	da3b      	bge.n	802061c <__ieee754_pow+0x104>
 80205a4:	4b72      	ldr	r3, [pc, #456]	; (8020770 <__ieee754_pow+0x258>)
 80205a6:	4598      	cmp	r8, r3
 80205a8:	dc51      	bgt.n	802064e <__ieee754_pow+0x136>
 80205aa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80205ae:	4598      	cmp	r8, r3
 80205b0:	f340 84ac 	ble.w	8020f0c <__ieee754_pow+0x9f4>
 80205b4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80205b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80205bc:	2b14      	cmp	r3, #20
 80205be:	dd0f      	ble.n	80205e0 <__ieee754_pow+0xc8>
 80205c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80205c4:	fa22 f103 	lsr.w	r1, r2, r3
 80205c8:	fa01 f303 	lsl.w	r3, r1, r3
 80205cc:	4293      	cmp	r3, r2
 80205ce:	f040 849d 	bne.w	8020f0c <__ieee754_pow+0x9f4>
 80205d2:	f001 0101 	and.w	r1, r1, #1
 80205d6:	f1c1 0302 	rsb	r3, r1, #2
 80205da:	9304      	str	r3, [sp, #16]
 80205dc:	b182      	cbz	r2, 8020600 <__ieee754_pow+0xe8>
 80205de:	e05f      	b.n	80206a0 <__ieee754_pow+0x188>
 80205e0:	2a00      	cmp	r2, #0
 80205e2:	d15b      	bne.n	802069c <__ieee754_pow+0x184>
 80205e4:	f1c3 0314 	rsb	r3, r3, #20
 80205e8:	fa48 f103 	asr.w	r1, r8, r3
 80205ec:	fa01 f303 	lsl.w	r3, r1, r3
 80205f0:	4543      	cmp	r3, r8
 80205f2:	f040 8488 	bne.w	8020f06 <__ieee754_pow+0x9ee>
 80205f6:	f001 0101 	and.w	r1, r1, #1
 80205fa:	f1c1 0302 	rsb	r3, r1, #2
 80205fe:	9304      	str	r3, [sp, #16]
 8020600:	4b5c      	ldr	r3, [pc, #368]	; (8020774 <__ieee754_pow+0x25c>)
 8020602:	4598      	cmp	r8, r3
 8020604:	d132      	bne.n	802066c <__ieee754_pow+0x154>
 8020606:	f1b9 0f00 	cmp.w	r9, #0
 802060a:	f280 8478 	bge.w	8020efe <__ieee754_pow+0x9e6>
 802060e:	4959      	ldr	r1, [pc, #356]	; (8020774 <__ieee754_pow+0x25c>)
 8020610:	4632      	mov	r2, r6
 8020612:	463b      	mov	r3, r7
 8020614:	2000      	movs	r0, #0
 8020616:	f7e0 f923 	bl	8000860 <__aeabi_ddiv>
 802061a:	e79c      	b.n	8020556 <__ieee754_pow+0x3e>
 802061c:	2300      	movs	r3, #0
 802061e:	9304      	str	r3, [sp, #16]
 8020620:	2a00      	cmp	r2, #0
 8020622:	d13d      	bne.n	80206a0 <__ieee754_pow+0x188>
 8020624:	4b51      	ldr	r3, [pc, #324]	; (802076c <__ieee754_pow+0x254>)
 8020626:	4598      	cmp	r8, r3
 8020628:	d1ea      	bne.n	8020600 <__ieee754_pow+0xe8>
 802062a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 802062e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8020632:	ea53 030a 	orrs.w	r3, r3, sl
 8020636:	f000 845a 	beq.w	8020eee <__ieee754_pow+0x9d6>
 802063a:	4b4f      	ldr	r3, [pc, #316]	; (8020778 <__ieee754_pow+0x260>)
 802063c:	429c      	cmp	r4, r3
 802063e:	dd08      	ble.n	8020652 <__ieee754_pow+0x13a>
 8020640:	f1b9 0f00 	cmp.w	r9, #0
 8020644:	f2c0 8457 	blt.w	8020ef6 <__ieee754_pow+0x9de>
 8020648:	e9dd 0100 	ldrd	r0, r1, [sp]
 802064c:	e783      	b.n	8020556 <__ieee754_pow+0x3e>
 802064e:	2302      	movs	r3, #2
 8020650:	e7e5      	b.n	802061e <__ieee754_pow+0x106>
 8020652:	f1b9 0f00 	cmp.w	r9, #0
 8020656:	f04f 0000 	mov.w	r0, #0
 802065a:	f04f 0100 	mov.w	r1, #0
 802065e:	f6bf af7a 	bge.w	8020556 <__ieee754_pow+0x3e>
 8020662:	e9dd 0300 	ldrd	r0, r3, [sp]
 8020666:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802066a:	e774      	b.n	8020556 <__ieee754_pow+0x3e>
 802066c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8020670:	d106      	bne.n	8020680 <__ieee754_pow+0x168>
 8020672:	4632      	mov	r2, r6
 8020674:	463b      	mov	r3, r7
 8020676:	4630      	mov	r0, r6
 8020678:	4639      	mov	r1, r7
 802067a:	f7df ffc7 	bl	800060c <__aeabi_dmul>
 802067e:	e76a      	b.n	8020556 <__ieee754_pow+0x3e>
 8020680:	4b3e      	ldr	r3, [pc, #248]	; (802077c <__ieee754_pow+0x264>)
 8020682:	4599      	cmp	r9, r3
 8020684:	d10c      	bne.n	80206a0 <__ieee754_pow+0x188>
 8020686:	2d00      	cmp	r5, #0
 8020688:	db0a      	blt.n	80206a0 <__ieee754_pow+0x188>
 802068a:	ec47 6b10 	vmov	d0, r6, r7
 802068e:	b009      	add	sp, #36	; 0x24
 8020690:	ecbd 8b06 	vpop	{d8-d10}
 8020694:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020698:	f000 be7a 	b.w	8021390 <__ieee754_sqrt>
 802069c:	2300      	movs	r3, #0
 802069e:	9304      	str	r3, [sp, #16]
 80206a0:	ec47 6b10 	vmov	d0, r6, r7
 80206a4:	f002 f874 	bl	8022790 <fabs>
 80206a8:	ec51 0b10 	vmov	r0, r1, d0
 80206ac:	f1ba 0f00 	cmp.w	sl, #0
 80206b0:	d129      	bne.n	8020706 <__ieee754_pow+0x1ee>
 80206b2:	b124      	cbz	r4, 80206be <__ieee754_pow+0x1a6>
 80206b4:	4b2f      	ldr	r3, [pc, #188]	; (8020774 <__ieee754_pow+0x25c>)
 80206b6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80206ba:	429a      	cmp	r2, r3
 80206bc:	d123      	bne.n	8020706 <__ieee754_pow+0x1ee>
 80206be:	f1b9 0f00 	cmp.w	r9, #0
 80206c2:	da05      	bge.n	80206d0 <__ieee754_pow+0x1b8>
 80206c4:	4602      	mov	r2, r0
 80206c6:	460b      	mov	r3, r1
 80206c8:	2000      	movs	r0, #0
 80206ca:	492a      	ldr	r1, [pc, #168]	; (8020774 <__ieee754_pow+0x25c>)
 80206cc:	f7e0 f8c8 	bl	8000860 <__aeabi_ddiv>
 80206d0:	2d00      	cmp	r5, #0
 80206d2:	f6bf af40 	bge.w	8020556 <__ieee754_pow+0x3e>
 80206d6:	9b04      	ldr	r3, [sp, #16]
 80206d8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80206dc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80206e0:	4323      	orrs	r3, r4
 80206e2:	d108      	bne.n	80206f6 <__ieee754_pow+0x1de>
 80206e4:	4602      	mov	r2, r0
 80206e6:	460b      	mov	r3, r1
 80206e8:	4610      	mov	r0, r2
 80206ea:	4619      	mov	r1, r3
 80206ec:	f7df fdd6 	bl	800029c <__aeabi_dsub>
 80206f0:	4602      	mov	r2, r0
 80206f2:	460b      	mov	r3, r1
 80206f4:	e78f      	b.n	8020616 <__ieee754_pow+0xfe>
 80206f6:	9b04      	ldr	r3, [sp, #16]
 80206f8:	2b01      	cmp	r3, #1
 80206fa:	f47f af2c 	bne.w	8020556 <__ieee754_pow+0x3e>
 80206fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020702:	4619      	mov	r1, r3
 8020704:	e727      	b.n	8020556 <__ieee754_pow+0x3e>
 8020706:	0feb      	lsrs	r3, r5, #31
 8020708:	3b01      	subs	r3, #1
 802070a:	9306      	str	r3, [sp, #24]
 802070c:	9a06      	ldr	r2, [sp, #24]
 802070e:	9b04      	ldr	r3, [sp, #16]
 8020710:	4313      	orrs	r3, r2
 8020712:	d102      	bne.n	802071a <__ieee754_pow+0x202>
 8020714:	4632      	mov	r2, r6
 8020716:	463b      	mov	r3, r7
 8020718:	e7e6      	b.n	80206e8 <__ieee754_pow+0x1d0>
 802071a:	4b19      	ldr	r3, [pc, #100]	; (8020780 <__ieee754_pow+0x268>)
 802071c:	4598      	cmp	r8, r3
 802071e:	f340 80fb 	ble.w	8020918 <__ieee754_pow+0x400>
 8020722:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8020726:	4598      	cmp	r8, r3
 8020728:	4b13      	ldr	r3, [pc, #76]	; (8020778 <__ieee754_pow+0x260>)
 802072a:	dd0c      	ble.n	8020746 <__ieee754_pow+0x22e>
 802072c:	429c      	cmp	r4, r3
 802072e:	dc0f      	bgt.n	8020750 <__ieee754_pow+0x238>
 8020730:	f1b9 0f00 	cmp.w	r9, #0
 8020734:	da0f      	bge.n	8020756 <__ieee754_pow+0x23e>
 8020736:	2000      	movs	r0, #0
 8020738:	b009      	add	sp, #36	; 0x24
 802073a:	ecbd 8b06 	vpop	{d8-d10}
 802073e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020742:	f001 bffa 	b.w	802273a <__math_oflow>
 8020746:	429c      	cmp	r4, r3
 8020748:	dbf2      	blt.n	8020730 <__ieee754_pow+0x218>
 802074a:	4b0a      	ldr	r3, [pc, #40]	; (8020774 <__ieee754_pow+0x25c>)
 802074c:	429c      	cmp	r4, r3
 802074e:	dd19      	ble.n	8020784 <__ieee754_pow+0x26c>
 8020750:	f1b9 0f00 	cmp.w	r9, #0
 8020754:	dcef      	bgt.n	8020736 <__ieee754_pow+0x21e>
 8020756:	2000      	movs	r0, #0
 8020758:	b009      	add	sp, #36	; 0x24
 802075a:	ecbd 8b06 	vpop	{d8-d10}
 802075e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020762:	f001 bfe1 	b.w	8022728 <__math_uflow>
 8020766:	bf00      	nop
 8020768:	fff00000 	.word	0xfff00000
 802076c:	7ff00000 	.word	0x7ff00000
 8020770:	433fffff 	.word	0x433fffff
 8020774:	3ff00000 	.word	0x3ff00000
 8020778:	3fefffff 	.word	0x3fefffff
 802077c:	3fe00000 	.word	0x3fe00000
 8020780:	41e00000 	.word	0x41e00000
 8020784:	4b60      	ldr	r3, [pc, #384]	; (8020908 <__ieee754_pow+0x3f0>)
 8020786:	2200      	movs	r2, #0
 8020788:	f7df fd88 	bl	800029c <__aeabi_dsub>
 802078c:	a354      	add	r3, pc, #336	; (adr r3, 80208e0 <__ieee754_pow+0x3c8>)
 802078e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020792:	4604      	mov	r4, r0
 8020794:	460d      	mov	r5, r1
 8020796:	f7df ff39 	bl	800060c <__aeabi_dmul>
 802079a:	a353      	add	r3, pc, #332	; (adr r3, 80208e8 <__ieee754_pow+0x3d0>)
 802079c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207a0:	4606      	mov	r6, r0
 80207a2:	460f      	mov	r7, r1
 80207a4:	4620      	mov	r0, r4
 80207a6:	4629      	mov	r1, r5
 80207a8:	f7df ff30 	bl	800060c <__aeabi_dmul>
 80207ac:	4b57      	ldr	r3, [pc, #348]	; (802090c <__ieee754_pow+0x3f4>)
 80207ae:	4682      	mov	sl, r0
 80207b0:	468b      	mov	fp, r1
 80207b2:	2200      	movs	r2, #0
 80207b4:	4620      	mov	r0, r4
 80207b6:	4629      	mov	r1, r5
 80207b8:	f7df ff28 	bl	800060c <__aeabi_dmul>
 80207bc:	4602      	mov	r2, r0
 80207be:	460b      	mov	r3, r1
 80207c0:	a14b      	add	r1, pc, #300	; (adr r1, 80208f0 <__ieee754_pow+0x3d8>)
 80207c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80207c6:	f7df fd69 	bl	800029c <__aeabi_dsub>
 80207ca:	4622      	mov	r2, r4
 80207cc:	462b      	mov	r3, r5
 80207ce:	f7df ff1d 	bl	800060c <__aeabi_dmul>
 80207d2:	4602      	mov	r2, r0
 80207d4:	460b      	mov	r3, r1
 80207d6:	2000      	movs	r0, #0
 80207d8:	494d      	ldr	r1, [pc, #308]	; (8020910 <__ieee754_pow+0x3f8>)
 80207da:	f7df fd5f 	bl	800029c <__aeabi_dsub>
 80207de:	4622      	mov	r2, r4
 80207e0:	4680      	mov	r8, r0
 80207e2:	4689      	mov	r9, r1
 80207e4:	462b      	mov	r3, r5
 80207e6:	4620      	mov	r0, r4
 80207e8:	4629      	mov	r1, r5
 80207ea:	f7df ff0f 	bl	800060c <__aeabi_dmul>
 80207ee:	4602      	mov	r2, r0
 80207f0:	460b      	mov	r3, r1
 80207f2:	4640      	mov	r0, r8
 80207f4:	4649      	mov	r1, r9
 80207f6:	f7df ff09 	bl	800060c <__aeabi_dmul>
 80207fa:	a33f      	add	r3, pc, #252	; (adr r3, 80208f8 <__ieee754_pow+0x3e0>)
 80207fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020800:	f7df ff04 	bl	800060c <__aeabi_dmul>
 8020804:	4602      	mov	r2, r0
 8020806:	460b      	mov	r3, r1
 8020808:	4650      	mov	r0, sl
 802080a:	4659      	mov	r1, fp
 802080c:	f7df fd46 	bl	800029c <__aeabi_dsub>
 8020810:	4602      	mov	r2, r0
 8020812:	460b      	mov	r3, r1
 8020814:	4680      	mov	r8, r0
 8020816:	4689      	mov	r9, r1
 8020818:	4630      	mov	r0, r6
 802081a:	4639      	mov	r1, r7
 802081c:	f7df fd40 	bl	80002a0 <__adddf3>
 8020820:	2000      	movs	r0, #0
 8020822:	4632      	mov	r2, r6
 8020824:	463b      	mov	r3, r7
 8020826:	4604      	mov	r4, r0
 8020828:	460d      	mov	r5, r1
 802082a:	f7df fd37 	bl	800029c <__aeabi_dsub>
 802082e:	4602      	mov	r2, r0
 8020830:	460b      	mov	r3, r1
 8020832:	4640      	mov	r0, r8
 8020834:	4649      	mov	r1, r9
 8020836:	f7df fd31 	bl	800029c <__aeabi_dsub>
 802083a:	9b04      	ldr	r3, [sp, #16]
 802083c:	9a06      	ldr	r2, [sp, #24]
 802083e:	3b01      	subs	r3, #1
 8020840:	4313      	orrs	r3, r2
 8020842:	4682      	mov	sl, r0
 8020844:	468b      	mov	fp, r1
 8020846:	f040 81e7 	bne.w	8020c18 <__ieee754_pow+0x700>
 802084a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8020900 <__ieee754_pow+0x3e8>
 802084e:	eeb0 8a47 	vmov.f32	s16, s14
 8020852:	eef0 8a67 	vmov.f32	s17, s15
 8020856:	e9dd 6700 	ldrd	r6, r7, [sp]
 802085a:	2600      	movs	r6, #0
 802085c:	4632      	mov	r2, r6
 802085e:	463b      	mov	r3, r7
 8020860:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020864:	f7df fd1a 	bl	800029c <__aeabi_dsub>
 8020868:	4622      	mov	r2, r4
 802086a:	462b      	mov	r3, r5
 802086c:	f7df fece 	bl	800060c <__aeabi_dmul>
 8020870:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020874:	4680      	mov	r8, r0
 8020876:	4689      	mov	r9, r1
 8020878:	4650      	mov	r0, sl
 802087a:	4659      	mov	r1, fp
 802087c:	f7df fec6 	bl	800060c <__aeabi_dmul>
 8020880:	4602      	mov	r2, r0
 8020882:	460b      	mov	r3, r1
 8020884:	4640      	mov	r0, r8
 8020886:	4649      	mov	r1, r9
 8020888:	f7df fd0a 	bl	80002a0 <__adddf3>
 802088c:	4632      	mov	r2, r6
 802088e:	463b      	mov	r3, r7
 8020890:	4680      	mov	r8, r0
 8020892:	4689      	mov	r9, r1
 8020894:	4620      	mov	r0, r4
 8020896:	4629      	mov	r1, r5
 8020898:	f7df feb8 	bl	800060c <__aeabi_dmul>
 802089c:	460b      	mov	r3, r1
 802089e:	4604      	mov	r4, r0
 80208a0:	460d      	mov	r5, r1
 80208a2:	4602      	mov	r2, r0
 80208a4:	4649      	mov	r1, r9
 80208a6:	4640      	mov	r0, r8
 80208a8:	f7df fcfa 	bl	80002a0 <__adddf3>
 80208ac:	4b19      	ldr	r3, [pc, #100]	; (8020914 <__ieee754_pow+0x3fc>)
 80208ae:	4299      	cmp	r1, r3
 80208b0:	ec45 4b19 	vmov	d9, r4, r5
 80208b4:	4606      	mov	r6, r0
 80208b6:	460f      	mov	r7, r1
 80208b8:	468b      	mov	fp, r1
 80208ba:	f340 82f1 	ble.w	8020ea0 <__ieee754_pow+0x988>
 80208be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80208c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80208c6:	4303      	orrs	r3, r0
 80208c8:	f000 81e4 	beq.w	8020c94 <__ieee754_pow+0x77c>
 80208cc:	ec51 0b18 	vmov	r0, r1, d8
 80208d0:	2200      	movs	r2, #0
 80208d2:	2300      	movs	r3, #0
 80208d4:	f7e0 f90c 	bl	8000af0 <__aeabi_dcmplt>
 80208d8:	3800      	subs	r0, #0
 80208da:	bf18      	it	ne
 80208dc:	2001      	movne	r0, #1
 80208de:	e72b      	b.n	8020738 <__ieee754_pow+0x220>
 80208e0:	60000000 	.word	0x60000000
 80208e4:	3ff71547 	.word	0x3ff71547
 80208e8:	f85ddf44 	.word	0xf85ddf44
 80208ec:	3e54ae0b 	.word	0x3e54ae0b
 80208f0:	55555555 	.word	0x55555555
 80208f4:	3fd55555 	.word	0x3fd55555
 80208f8:	652b82fe 	.word	0x652b82fe
 80208fc:	3ff71547 	.word	0x3ff71547
 8020900:	00000000 	.word	0x00000000
 8020904:	bff00000 	.word	0xbff00000
 8020908:	3ff00000 	.word	0x3ff00000
 802090c:	3fd00000 	.word	0x3fd00000
 8020910:	3fe00000 	.word	0x3fe00000
 8020914:	408fffff 	.word	0x408fffff
 8020918:	4bd5      	ldr	r3, [pc, #852]	; (8020c70 <__ieee754_pow+0x758>)
 802091a:	402b      	ands	r3, r5
 802091c:	2200      	movs	r2, #0
 802091e:	b92b      	cbnz	r3, 802092c <__ieee754_pow+0x414>
 8020920:	4bd4      	ldr	r3, [pc, #848]	; (8020c74 <__ieee754_pow+0x75c>)
 8020922:	f7df fe73 	bl	800060c <__aeabi_dmul>
 8020926:	f06f 0234 	mvn.w	r2, #52	; 0x34
 802092a:	460c      	mov	r4, r1
 802092c:	1523      	asrs	r3, r4, #20
 802092e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8020932:	4413      	add	r3, r2
 8020934:	9305      	str	r3, [sp, #20]
 8020936:	4bd0      	ldr	r3, [pc, #832]	; (8020c78 <__ieee754_pow+0x760>)
 8020938:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802093c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8020940:	429c      	cmp	r4, r3
 8020942:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8020946:	dd08      	ble.n	802095a <__ieee754_pow+0x442>
 8020948:	4bcc      	ldr	r3, [pc, #816]	; (8020c7c <__ieee754_pow+0x764>)
 802094a:	429c      	cmp	r4, r3
 802094c:	f340 8162 	ble.w	8020c14 <__ieee754_pow+0x6fc>
 8020950:	9b05      	ldr	r3, [sp, #20]
 8020952:	3301      	adds	r3, #1
 8020954:	9305      	str	r3, [sp, #20]
 8020956:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 802095a:	2400      	movs	r4, #0
 802095c:	00e3      	lsls	r3, r4, #3
 802095e:	9307      	str	r3, [sp, #28]
 8020960:	4bc7      	ldr	r3, [pc, #796]	; (8020c80 <__ieee754_pow+0x768>)
 8020962:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8020966:	ed93 7b00 	vldr	d7, [r3]
 802096a:	4629      	mov	r1, r5
 802096c:	ec53 2b17 	vmov	r2, r3, d7
 8020970:	eeb0 9a47 	vmov.f32	s18, s14
 8020974:	eef0 9a67 	vmov.f32	s19, s15
 8020978:	4682      	mov	sl, r0
 802097a:	f7df fc8f 	bl	800029c <__aeabi_dsub>
 802097e:	4652      	mov	r2, sl
 8020980:	4606      	mov	r6, r0
 8020982:	460f      	mov	r7, r1
 8020984:	462b      	mov	r3, r5
 8020986:	ec51 0b19 	vmov	r0, r1, d9
 802098a:	f7df fc89 	bl	80002a0 <__adddf3>
 802098e:	4602      	mov	r2, r0
 8020990:	460b      	mov	r3, r1
 8020992:	2000      	movs	r0, #0
 8020994:	49bb      	ldr	r1, [pc, #748]	; (8020c84 <__ieee754_pow+0x76c>)
 8020996:	f7df ff63 	bl	8000860 <__aeabi_ddiv>
 802099a:	ec41 0b1a 	vmov	d10, r0, r1
 802099e:	4602      	mov	r2, r0
 80209a0:	460b      	mov	r3, r1
 80209a2:	4630      	mov	r0, r6
 80209a4:	4639      	mov	r1, r7
 80209a6:	f7df fe31 	bl	800060c <__aeabi_dmul>
 80209aa:	2300      	movs	r3, #0
 80209ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80209b0:	9302      	str	r3, [sp, #8]
 80209b2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80209b6:	46ab      	mov	fp, r5
 80209b8:	106d      	asrs	r5, r5, #1
 80209ba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80209be:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80209c2:	ec41 0b18 	vmov	d8, r0, r1
 80209c6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80209ca:	2200      	movs	r2, #0
 80209cc:	4640      	mov	r0, r8
 80209ce:	4649      	mov	r1, r9
 80209d0:	4614      	mov	r4, r2
 80209d2:	461d      	mov	r5, r3
 80209d4:	f7df fe1a 	bl	800060c <__aeabi_dmul>
 80209d8:	4602      	mov	r2, r0
 80209da:	460b      	mov	r3, r1
 80209dc:	4630      	mov	r0, r6
 80209de:	4639      	mov	r1, r7
 80209e0:	f7df fc5c 	bl	800029c <__aeabi_dsub>
 80209e4:	ec53 2b19 	vmov	r2, r3, d9
 80209e8:	4606      	mov	r6, r0
 80209ea:	460f      	mov	r7, r1
 80209ec:	4620      	mov	r0, r4
 80209ee:	4629      	mov	r1, r5
 80209f0:	f7df fc54 	bl	800029c <__aeabi_dsub>
 80209f4:	4602      	mov	r2, r0
 80209f6:	460b      	mov	r3, r1
 80209f8:	4650      	mov	r0, sl
 80209fa:	4659      	mov	r1, fp
 80209fc:	f7df fc4e 	bl	800029c <__aeabi_dsub>
 8020a00:	4642      	mov	r2, r8
 8020a02:	464b      	mov	r3, r9
 8020a04:	f7df fe02 	bl	800060c <__aeabi_dmul>
 8020a08:	4602      	mov	r2, r0
 8020a0a:	460b      	mov	r3, r1
 8020a0c:	4630      	mov	r0, r6
 8020a0e:	4639      	mov	r1, r7
 8020a10:	f7df fc44 	bl	800029c <__aeabi_dsub>
 8020a14:	ec53 2b1a 	vmov	r2, r3, d10
 8020a18:	f7df fdf8 	bl	800060c <__aeabi_dmul>
 8020a1c:	ec53 2b18 	vmov	r2, r3, d8
 8020a20:	ec41 0b19 	vmov	d9, r0, r1
 8020a24:	ec51 0b18 	vmov	r0, r1, d8
 8020a28:	f7df fdf0 	bl	800060c <__aeabi_dmul>
 8020a2c:	a37c      	add	r3, pc, #496	; (adr r3, 8020c20 <__ieee754_pow+0x708>)
 8020a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a32:	4604      	mov	r4, r0
 8020a34:	460d      	mov	r5, r1
 8020a36:	f7df fde9 	bl	800060c <__aeabi_dmul>
 8020a3a:	a37b      	add	r3, pc, #492	; (adr r3, 8020c28 <__ieee754_pow+0x710>)
 8020a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a40:	f7df fc2e 	bl	80002a0 <__adddf3>
 8020a44:	4622      	mov	r2, r4
 8020a46:	462b      	mov	r3, r5
 8020a48:	f7df fde0 	bl	800060c <__aeabi_dmul>
 8020a4c:	a378      	add	r3, pc, #480	; (adr r3, 8020c30 <__ieee754_pow+0x718>)
 8020a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a52:	f7df fc25 	bl	80002a0 <__adddf3>
 8020a56:	4622      	mov	r2, r4
 8020a58:	462b      	mov	r3, r5
 8020a5a:	f7df fdd7 	bl	800060c <__aeabi_dmul>
 8020a5e:	a376      	add	r3, pc, #472	; (adr r3, 8020c38 <__ieee754_pow+0x720>)
 8020a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a64:	f7df fc1c 	bl	80002a0 <__adddf3>
 8020a68:	4622      	mov	r2, r4
 8020a6a:	462b      	mov	r3, r5
 8020a6c:	f7df fdce 	bl	800060c <__aeabi_dmul>
 8020a70:	a373      	add	r3, pc, #460	; (adr r3, 8020c40 <__ieee754_pow+0x728>)
 8020a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a76:	f7df fc13 	bl	80002a0 <__adddf3>
 8020a7a:	4622      	mov	r2, r4
 8020a7c:	462b      	mov	r3, r5
 8020a7e:	f7df fdc5 	bl	800060c <__aeabi_dmul>
 8020a82:	a371      	add	r3, pc, #452	; (adr r3, 8020c48 <__ieee754_pow+0x730>)
 8020a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a88:	f7df fc0a 	bl	80002a0 <__adddf3>
 8020a8c:	4622      	mov	r2, r4
 8020a8e:	4606      	mov	r6, r0
 8020a90:	460f      	mov	r7, r1
 8020a92:	462b      	mov	r3, r5
 8020a94:	4620      	mov	r0, r4
 8020a96:	4629      	mov	r1, r5
 8020a98:	f7df fdb8 	bl	800060c <__aeabi_dmul>
 8020a9c:	4602      	mov	r2, r0
 8020a9e:	460b      	mov	r3, r1
 8020aa0:	4630      	mov	r0, r6
 8020aa2:	4639      	mov	r1, r7
 8020aa4:	f7df fdb2 	bl	800060c <__aeabi_dmul>
 8020aa8:	4642      	mov	r2, r8
 8020aaa:	4604      	mov	r4, r0
 8020aac:	460d      	mov	r5, r1
 8020aae:	464b      	mov	r3, r9
 8020ab0:	ec51 0b18 	vmov	r0, r1, d8
 8020ab4:	f7df fbf4 	bl	80002a0 <__adddf3>
 8020ab8:	ec53 2b19 	vmov	r2, r3, d9
 8020abc:	f7df fda6 	bl	800060c <__aeabi_dmul>
 8020ac0:	4622      	mov	r2, r4
 8020ac2:	462b      	mov	r3, r5
 8020ac4:	f7df fbec 	bl	80002a0 <__adddf3>
 8020ac8:	4642      	mov	r2, r8
 8020aca:	4682      	mov	sl, r0
 8020acc:	468b      	mov	fp, r1
 8020ace:	464b      	mov	r3, r9
 8020ad0:	4640      	mov	r0, r8
 8020ad2:	4649      	mov	r1, r9
 8020ad4:	f7df fd9a 	bl	800060c <__aeabi_dmul>
 8020ad8:	4b6b      	ldr	r3, [pc, #428]	; (8020c88 <__ieee754_pow+0x770>)
 8020ada:	2200      	movs	r2, #0
 8020adc:	4606      	mov	r6, r0
 8020ade:	460f      	mov	r7, r1
 8020ae0:	f7df fbde 	bl	80002a0 <__adddf3>
 8020ae4:	4652      	mov	r2, sl
 8020ae6:	465b      	mov	r3, fp
 8020ae8:	f7df fbda 	bl	80002a0 <__adddf3>
 8020aec:	2000      	movs	r0, #0
 8020aee:	4604      	mov	r4, r0
 8020af0:	460d      	mov	r5, r1
 8020af2:	4602      	mov	r2, r0
 8020af4:	460b      	mov	r3, r1
 8020af6:	4640      	mov	r0, r8
 8020af8:	4649      	mov	r1, r9
 8020afa:	f7df fd87 	bl	800060c <__aeabi_dmul>
 8020afe:	4b62      	ldr	r3, [pc, #392]	; (8020c88 <__ieee754_pow+0x770>)
 8020b00:	4680      	mov	r8, r0
 8020b02:	4689      	mov	r9, r1
 8020b04:	2200      	movs	r2, #0
 8020b06:	4620      	mov	r0, r4
 8020b08:	4629      	mov	r1, r5
 8020b0a:	f7df fbc7 	bl	800029c <__aeabi_dsub>
 8020b0e:	4632      	mov	r2, r6
 8020b10:	463b      	mov	r3, r7
 8020b12:	f7df fbc3 	bl	800029c <__aeabi_dsub>
 8020b16:	4602      	mov	r2, r0
 8020b18:	460b      	mov	r3, r1
 8020b1a:	4650      	mov	r0, sl
 8020b1c:	4659      	mov	r1, fp
 8020b1e:	f7df fbbd 	bl	800029c <__aeabi_dsub>
 8020b22:	ec53 2b18 	vmov	r2, r3, d8
 8020b26:	f7df fd71 	bl	800060c <__aeabi_dmul>
 8020b2a:	4622      	mov	r2, r4
 8020b2c:	4606      	mov	r6, r0
 8020b2e:	460f      	mov	r7, r1
 8020b30:	462b      	mov	r3, r5
 8020b32:	ec51 0b19 	vmov	r0, r1, d9
 8020b36:	f7df fd69 	bl	800060c <__aeabi_dmul>
 8020b3a:	4602      	mov	r2, r0
 8020b3c:	460b      	mov	r3, r1
 8020b3e:	4630      	mov	r0, r6
 8020b40:	4639      	mov	r1, r7
 8020b42:	f7df fbad 	bl	80002a0 <__adddf3>
 8020b46:	4606      	mov	r6, r0
 8020b48:	460f      	mov	r7, r1
 8020b4a:	4602      	mov	r2, r0
 8020b4c:	460b      	mov	r3, r1
 8020b4e:	4640      	mov	r0, r8
 8020b50:	4649      	mov	r1, r9
 8020b52:	f7df fba5 	bl	80002a0 <__adddf3>
 8020b56:	a33e      	add	r3, pc, #248	; (adr r3, 8020c50 <__ieee754_pow+0x738>)
 8020b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b5c:	2000      	movs	r0, #0
 8020b5e:	4604      	mov	r4, r0
 8020b60:	460d      	mov	r5, r1
 8020b62:	f7df fd53 	bl	800060c <__aeabi_dmul>
 8020b66:	4642      	mov	r2, r8
 8020b68:	ec41 0b18 	vmov	d8, r0, r1
 8020b6c:	464b      	mov	r3, r9
 8020b6e:	4620      	mov	r0, r4
 8020b70:	4629      	mov	r1, r5
 8020b72:	f7df fb93 	bl	800029c <__aeabi_dsub>
 8020b76:	4602      	mov	r2, r0
 8020b78:	460b      	mov	r3, r1
 8020b7a:	4630      	mov	r0, r6
 8020b7c:	4639      	mov	r1, r7
 8020b7e:	f7df fb8d 	bl	800029c <__aeabi_dsub>
 8020b82:	a335      	add	r3, pc, #212	; (adr r3, 8020c58 <__ieee754_pow+0x740>)
 8020b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b88:	f7df fd40 	bl	800060c <__aeabi_dmul>
 8020b8c:	a334      	add	r3, pc, #208	; (adr r3, 8020c60 <__ieee754_pow+0x748>)
 8020b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b92:	4606      	mov	r6, r0
 8020b94:	460f      	mov	r7, r1
 8020b96:	4620      	mov	r0, r4
 8020b98:	4629      	mov	r1, r5
 8020b9a:	f7df fd37 	bl	800060c <__aeabi_dmul>
 8020b9e:	4602      	mov	r2, r0
 8020ba0:	460b      	mov	r3, r1
 8020ba2:	4630      	mov	r0, r6
 8020ba4:	4639      	mov	r1, r7
 8020ba6:	f7df fb7b 	bl	80002a0 <__adddf3>
 8020baa:	9a07      	ldr	r2, [sp, #28]
 8020bac:	4b37      	ldr	r3, [pc, #220]	; (8020c8c <__ieee754_pow+0x774>)
 8020bae:	4413      	add	r3, r2
 8020bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bb4:	f7df fb74 	bl	80002a0 <__adddf3>
 8020bb8:	4682      	mov	sl, r0
 8020bba:	9805      	ldr	r0, [sp, #20]
 8020bbc:	468b      	mov	fp, r1
 8020bbe:	f7df fcbb 	bl	8000538 <__aeabi_i2d>
 8020bc2:	9a07      	ldr	r2, [sp, #28]
 8020bc4:	4b32      	ldr	r3, [pc, #200]	; (8020c90 <__ieee754_pow+0x778>)
 8020bc6:	4413      	add	r3, r2
 8020bc8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020bcc:	4606      	mov	r6, r0
 8020bce:	460f      	mov	r7, r1
 8020bd0:	4652      	mov	r2, sl
 8020bd2:	465b      	mov	r3, fp
 8020bd4:	ec51 0b18 	vmov	r0, r1, d8
 8020bd8:	f7df fb62 	bl	80002a0 <__adddf3>
 8020bdc:	4642      	mov	r2, r8
 8020bde:	464b      	mov	r3, r9
 8020be0:	f7df fb5e 	bl	80002a0 <__adddf3>
 8020be4:	4632      	mov	r2, r6
 8020be6:	463b      	mov	r3, r7
 8020be8:	f7df fb5a 	bl	80002a0 <__adddf3>
 8020bec:	2000      	movs	r0, #0
 8020bee:	4632      	mov	r2, r6
 8020bf0:	463b      	mov	r3, r7
 8020bf2:	4604      	mov	r4, r0
 8020bf4:	460d      	mov	r5, r1
 8020bf6:	f7df fb51 	bl	800029c <__aeabi_dsub>
 8020bfa:	4642      	mov	r2, r8
 8020bfc:	464b      	mov	r3, r9
 8020bfe:	f7df fb4d 	bl	800029c <__aeabi_dsub>
 8020c02:	ec53 2b18 	vmov	r2, r3, d8
 8020c06:	f7df fb49 	bl	800029c <__aeabi_dsub>
 8020c0a:	4602      	mov	r2, r0
 8020c0c:	460b      	mov	r3, r1
 8020c0e:	4650      	mov	r0, sl
 8020c10:	4659      	mov	r1, fp
 8020c12:	e610      	b.n	8020836 <__ieee754_pow+0x31e>
 8020c14:	2401      	movs	r4, #1
 8020c16:	e6a1      	b.n	802095c <__ieee754_pow+0x444>
 8020c18:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8020c68 <__ieee754_pow+0x750>
 8020c1c:	e617      	b.n	802084e <__ieee754_pow+0x336>
 8020c1e:	bf00      	nop
 8020c20:	4a454eef 	.word	0x4a454eef
 8020c24:	3fca7e28 	.word	0x3fca7e28
 8020c28:	93c9db65 	.word	0x93c9db65
 8020c2c:	3fcd864a 	.word	0x3fcd864a
 8020c30:	a91d4101 	.word	0xa91d4101
 8020c34:	3fd17460 	.word	0x3fd17460
 8020c38:	518f264d 	.word	0x518f264d
 8020c3c:	3fd55555 	.word	0x3fd55555
 8020c40:	db6fabff 	.word	0xdb6fabff
 8020c44:	3fdb6db6 	.word	0x3fdb6db6
 8020c48:	33333303 	.word	0x33333303
 8020c4c:	3fe33333 	.word	0x3fe33333
 8020c50:	e0000000 	.word	0xe0000000
 8020c54:	3feec709 	.word	0x3feec709
 8020c58:	dc3a03fd 	.word	0xdc3a03fd
 8020c5c:	3feec709 	.word	0x3feec709
 8020c60:	145b01f5 	.word	0x145b01f5
 8020c64:	be3e2fe0 	.word	0xbe3e2fe0
 8020c68:	00000000 	.word	0x00000000
 8020c6c:	3ff00000 	.word	0x3ff00000
 8020c70:	7ff00000 	.word	0x7ff00000
 8020c74:	43400000 	.word	0x43400000
 8020c78:	0003988e 	.word	0x0003988e
 8020c7c:	000bb679 	.word	0x000bb679
 8020c80:	08029100 	.word	0x08029100
 8020c84:	3ff00000 	.word	0x3ff00000
 8020c88:	40080000 	.word	0x40080000
 8020c8c:	08029120 	.word	0x08029120
 8020c90:	08029110 	.word	0x08029110
 8020c94:	a3b5      	add	r3, pc, #724	; (adr r3, 8020f6c <__ieee754_pow+0xa54>)
 8020c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c9a:	4640      	mov	r0, r8
 8020c9c:	4649      	mov	r1, r9
 8020c9e:	f7df faff 	bl	80002a0 <__adddf3>
 8020ca2:	4622      	mov	r2, r4
 8020ca4:	ec41 0b1a 	vmov	d10, r0, r1
 8020ca8:	462b      	mov	r3, r5
 8020caa:	4630      	mov	r0, r6
 8020cac:	4639      	mov	r1, r7
 8020cae:	f7df faf5 	bl	800029c <__aeabi_dsub>
 8020cb2:	4602      	mov	r2, r0
 8020cb4:	460b      	mov	r3, r1
 8020cb6:	ec51 0b1a 	vmov	r0, r1, d10
 8020cba:	f7df ff37 	bl	8000b2c <__aeabi_dcmpgt>
 8020cbe:	2800      	cmp	r0, #0
 8020cc0:	f47f ae04 	bne.w	80208cc <__ieee754_pow+0x3b4>
 8020cc4:	4aa4      	ldr	r2, [pc, #656]	; (8020f58 <__ieee754_pow+0xa40>)
 8020cc6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020cca:	4293      	cmp	r3, r2
 8020ccc:	f340 8108 	ble.w	8020ee0 <__ieee754_pow+0x9c8>
 8020cd0:	151b      	asrs	r3, r3, #20
 8020cd2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8020cd6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8020cda:	fa4a f303 	asr.w	r3, sl, r3
 8020cde:	445b      	add	r3, fp
 8020ce0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8020ce4:	4e9d      	ldr	r6, [pc, #628]	; (8020f5c <__ieee754_pow+0xa44>)
 8020ce6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8020cea:	4116      	asrs	r6, r2
 8020cec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8020cf0:	2000      	movs	r0, #0
 8020cf2:	ea23 0106 	bic.w	r1, r3, r6
 8020cf6:	f1c2 0214 	rsb	r2, r2, #20
 8020cfa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8020cfe:	fa4a fa02 	asr.w	sl, sl, r2
 8020d02:	f1bb 0f00 	cmp.w	fp, #0
 8020d06:	4602      	mov	r2, r0
 8020d08:	460b      	mov	r3, r1
 8020d0a:	4620      	mov	r0, r4
 8020d0c:	4629      	mov	r1, r5
 8020d0e:	bfb8      	it	lt
 8020d10:	f1ca 0a00 	rsblt	sl, sl, #0
 8020d14:	f7df fac2 	bl	800029c <__aeabi_dsub>
 8020d18:	ec41 0b19 	vmov	d9, r0, r1
 8020d1c:	4642      	mov	r2, r8
 8020d1e:	464b      	mov	r3, r9
 8020d20:	ec51 0b19 	vmov	r0, r1, d9
 8020d24:	f7df fabc 	bl	80002a0 <__adddf3>
 8020d28:	a37b      	add	r3, pc, #492	; (adr r3, 8020f18 <__ieee754_pow+0xa00>)
 8020d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d2e:	2000      	movs	r0, #0
 8020d30:	4604      	mov	r4, r0
 8020d32:	460d      	mov	r5, r1
 8020d34:	f7df fc6a 	bl	800060c <__aeabi_dmul>
 8020d38:	ec53 2b19 	vmov	r2, r3, d9
 8020d3c:	4606      	mov	r6, r0
 8020d3e:	460f      	mov	r7, r1
 8020d40:	4620      	mov	r0, r4
 8020d42:	4629      	mov	r1, r5
 8020d44:	f7df faaa 	bl	800029c <__aeabi_dsub>
 8020d48:	4602      	mov	r2, r0
 8020d4a:	460b      	mov	r3, r1
 8020d4c:	4640      	mov	r0, r8
 8020d4e:	4649      	mov	r1, r9
 8020d50:	f7df faa4 	bl	800029c <__aeabi_dsub>
 8020d54:	a372      	add	r3, pc, #456	; (adr r3, 8020f20 <__ieee754_pow+0xa08>)
 8020d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d5a:	f7df fc57 	bl	800060c <__aeabi_dmul>
 8020d5e:	a372      	add	r3, pc, #456	; (adr r3, 8020f28 <__ieee754_pow+0xa10>)
 8020d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d64:	4680      	mov	r8, r0
 8020d66:	4689      	mov	r9, r1
 8020d68:	4620      	mov	r0, r4
 8020d6a:	4629      	mov	r1, r5
 8020d6c:	f7df fc4e 	bl	800060c <__aeabi_dmul>
 8020d70:	4602      	mov	r2, r0
 8020d72:	460b      	mov	r3, r1
 8020d74:	4640      	mov	r0, r8
 8020d76:	4649      	mov	r1, r9
 8020d78:	f7df fa92 	bl	80002a0 <__adddf3>
 8020d7c:	4604      	mov	r4, r0
 8020d7e:	460d      	mov	r5, r1
 8020d80:	4602      	mov	r2, r0
 8020d82:	460b      	mov	r3, r1
 8020d84:	4630      	mov	r0, r6
 8020d86:	4639      	mov	r1, r7
 8020d88:	f7df fa8a 	bl	80002a0 <__adddf3>
 8020d8c:	4632      	mov	r2, r6
 8020d8e:	463b      	mov	r3, r7
 8020d90:	4680      	mov	r8, r0
 8020d92:	4689      	mov	r9, r1
 8020d94:	f7df fa82 	bl	800029c <__aeabi_dsub>
 8020d98:	4602      	mov	r2, r0
 8020d9a:	460b      	mov	r3, r1
 8020d9c:	4620      	mov	r0, r4
 8020d9e:	4629      	mov	r1, r5
 8020da0:	f7df fa7c 	bl	800029c <__aeabi_dsub>
 8020da4:	4642      	mov	r2, r8
 8020da6:	4606      	mov	r6, r0
 8020da8:	460f      	mov	r7, r1
 8020daa:	464b      	mov	r3, r9
 8020dac:	4640      	mov	r0, r8
 8020dae:	4649      	mov	r1, r9
 8020db0:	f7df fc2c 	bl	800060c <__aeabi_dmul>
 8020db4:	a35e      	add	r3, pc, #376	; (adr r3, 8020f30 <__ieee754_pow+0xa18>)
 8020db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020dba:	4604      	mov	r4, r0
 8020dbc:	460d      	mov	r5, r1
 8020dbe:	f7df fc25 	bl	800060c <__aeabi_dmul>
 8020dc2:	a35d      	add	r3, pc, #372	; (adr r3, 8020f38 <__ieee754_pow+0xa20>)
 8020dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020dc8:	f7df fa68 	bl	800029c <__aeabi_dsub>
 8020dcc:	4622      	mov	r2, r4
 8020dce:	462b      	mov	r3, r5
 8020dd0:	f7df fc1c 	bl	800060c <__aeabi_dmul>
 8020dd4:	a35a      	add	r3, pc, #360	; (adr r3, 8020f40 <__ieee754_pow+0xa28>)
 8020dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020dda:	f7df fa61 	bl	80002a0 <__adddf3>
 8020dde:	4622      	mov	r2, r4
 8020de0:	462b      	mov	r3, r5
 8020de2:	f7df fc13 	bl	800060c <__aeabi_dmul>
 8020de6:	a358      	add	r3, pc, #352	; (adr r3, 8020f48 <__ieee754_pow+0xa30>)
 8020de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020dec:	f7df fa56 	bl	800029c <__aeabi_dsub>
 8020df0:	4622      	mov	r2, r4
 8020df2:	462b      	mov	r3, r5
 8020df4:	f7df fc0a 	bl	800060c <__aeabi_dmul>
 8020df8:	a355      	add	r3, pc, #340	; (adr r3, 8020f50 <__ieee754_pow+0xa38>)
 8020dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020dfe:	f7df fa4f 	bl	80002a0 <__adddf3>
 8020e02:	4622      	mov	r2, r4
 8020e04:	462b      	mov	r3, r5
 8020e06:	f7df fc01 	bl	800060c <__aeabi_dmul>
 8020e0a:	4602      	mov	r2, r0
 8020e0c:	460b      	mov	r3, r1
 8020e0e:	4640      	mov	r0, r8
 8020e10:	4649      	mov	r1, r9
 8020e12:	f7df fa43 	bl	800029c <__aeabi_dsub>
 8020e16:	4604      	mov	r4, r0
 8020e18:	460d      	mov	r5, r1
 8020e1a:	4602      	mov	r2, r0
 8020e1c:	460b      	mov	r3, r1
 8020e1e:	4640      	mov	r0, r8
 8020e20:	4649      	mov	r1, r9
 8020e22:	f7df fbf3 	bl	800060c <__aeabi_dmul>
 8020e26:	2200      	movs	r2, #0
 8020e28:	ec41 0b19 	vmov	d9, r0, r1
 8020e2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020e30:	4620      	mov	r0, r4
 8020e32:	4629      	mov	r1, r5
 8020e34:	f7df fa32 	bl	800029c <__aeabi_dsub>
 8020e38:	4602      	mov	r2, r0
 8020e3a:	460b      	mov	r3, r1
 8020e3c:	ec51 0b19 	vmov	r0, r1, d9
 8020e40:	f7df fd0e 	bl	8000860 <__aeabi_ddiv>
 8020e44:	4632      	mov	r2, r6
 8020e46:	4604      	mov	r4, r0
 8020e48:	460d      	mov	r5, r1
 8020e4a:	463b      	mov	r3, r7
 8020e4c:	4640      	mov	r0, r8
 8020e4e:	4649      	mov	r1, r9
 8020e50:	f7df fbdc 	bl	800060c <__aeabi_dmul>
 8020e54:	4632      	mov	r2, r6
 8020e56:	463b      	mov	r3, r7
 8020e58:	f7df fa22 	bl	80002a0 <__adddf3>
 8020e5c:	4602      	mov	r2, r0
 8020e5e:	460b      	mov	r3, r1
 8020e60:	4620      	mov	r0, r4
 8020e62:	4629      	mov	r1, r5
 8020e64:	f7df fa1a 	bl	800029c <__aeabi_dsub>
 8020e68:	4642      	mov	r2, r8
 8020e6a:	464b      	mov	r3, r9
 8020e6c:	f7df fa16 	bl	800029c <__aeabi_dsub>
 8020e70:	460b      	mov	r3, r1
 8020e72:	4602      	mov	r2, r0
 8020e74:	493a      	ldr	r1, [pc, #232]	; (8020f60 <__ieee754_pow+0xa48>)
 8020e76:	2000      	movs	r0, #0
 8020e78:	f7df fa10 	bl	800029c <__aeabi_dsub>
 8020e7c:	ec41 0b10 	vmov	d0, r0, r1
 8020e80:	ee10 3a90 	vmov	r3, s1
 8020e84:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8020e88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8020e8c:	da2b      	bge.n	8020ee6 <__ieee754_pow+0x9ce>
 8020e8e:	4650      	mov	r0, sl
 8020e90:	f001 fc9a 	bl	80227c8 <scalbn>
 8020e94:	ec51 0b10 	vmov	r0, r1, d0
 8020e98:	ec53 2b18 	vmov	r2, r3, d8
 8020e9c:	f7ff bbed 	b.w	802067a <__ieee754_pow+0x162>
 8020ea0:	4b30      	ldr	r3, [pc, #192]	; (8020f64 <__ieee754_pow+0xa4c>)
 8020ea2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8020ea6:	429e      	cmp	r6, r3
 8020ea8:	f77f af0c 	ble.w	8020cc4 <__ieee754_pow+0x7ac>
 8020eac:	4b2e      	ldr	r3, [pc, #184]	; (8020f68 <__ieee754_pow+0xa50>)
 8020eae:	440b      	add	r3, r1
 8020eb0:	4303      	orrs	r3, r0
 8020eb2:	d009      	beq.n	8020ec8 <__ieee754_pow+0x9b0>
 8020eb4:	ec51 0b18 	vmov	r0, r1, d8
 8020eb8:	2200      	movs	r2, #0
 8020eba:	2300      	movs	r3, #0
 8020ebc:	f7df fe18 	bl	8000af0 <__aeabi_dcmplt>
 8020ec0:	3800      	subs	r0, #0
 8020ec2:	bf18      	it	ne
 8020ec4:	2001      	movne	r0, #1
 8020ec6:	e447      	b.n	8020758 <__ieee754_pow+0x240>
 8020ec8:	4622      	mov	r2, r4
 8020eca:	462b      	mov	r3, r5
 8020ecc:	f7df f9e6 	bl	800029c <__aeabi_dsub>
 8020ed0:	4642      	mov	r2, r8
 8020ed2:	464b      	mov	r3, r9
 8020ed4:	f7df fe20 	bl	8000b18 <__aeabi_dcmpge>
 8020ed8:	2800      	cmp	r0, #0
 8020eda:	f43f aef3 	beq.w	8020cc4 <__ieee754_pow+0x7ac>
 8020ede:	e7e9      	b.n	8020eb4 <__ieee754_pow+0x99c>
 8020ee0:	f04f 0a00 	mov.w	sl, #0
 8020ee4:	e71a      	b.n	8020d1c <__ieee754_pow+0x804>
 8020ee6:	ec51 0b10 	vmov	r0, r1, d0
 8020eea:	4619      	mov	r1, r3
 8020eec:	e7d4      	b.n	8020e98 <__ieee754_pow+0x980>
 8020eee:	491c      	ldr	r1, [pc, #112]	; (8020f60 <__ieee754_pow+0xa48>)
 8020ef0:	2000      	movs	r0, #0
 8020ef2:	f7ff bb30 	b.w	8020556 <__ieee754_pow+0x3e>
 8020ef6:	2000      	movs	r0, #0
 8020ef8:	2100      	movs	r1, #0
 8020efa:	f7ff bb2c 	b.w	8020556 <__ieee754_pow+0x3e>
 8020efe:	4630      	mov	r0, r6
 8020f00:	4639      	mov	r1, r7
 8020f02:	f7ff bb28 	b.w	8020556 <__ieee754_pow+0x3e>
 8020f06:	9204      	str	r2, [sp, #16]
 8020f08:	f7ff bb7a 	b.w	8020600 <__ieee754_pow+0xe8>
 8020f0c:	2300      	movs	r3, #0
 8020f0e:	f7ff bb64 	b.w	80205da <__ieee754_pow+0xc2>
 8020f12:	bf00      	nop
 8020f14:	f3af 8000 	nop.w
 8020f18:	00000000 	.word	0x00000000
 8020f1c:	3fe62e43 	.word	0x3fe62e43
 8020f20:	fefa39ef 	.word	0xfefa39ef
 8020f24:	3fe62e42 	.word	0x3fe62e42
 8020f28:	0ca86c39 	.word	0x0ca86c39
 8020f2c:	be205c61 	.word	0xbe205c61
 8020f30:	72bea4d0 	.word	0x72bea4d0
 8020f34:	3e663769 	.word	0x3e663769
 8020f38:	c5d26bf1 	.word	0xc5d26bf1
 8020f3c:	3ebbbd41 	.word	0x3ebbbd41
 8020f40:	af25de2c 	.word	0xaf25de2c
 8020f44:	3f11566a 	.word	0x3f11566a
 8020f48:	16bebd93 	.word	0x16bebd93
 8020f4c:	3f66c16c 	.word	0x3f66c16c
 8020f50:	5555553e 	.word	0x5555553e
 8020f54:	3fc55555 	.word	0x3fc55555
 8020f58:	3fe00000 	.word	0x3fe00000
 8020f5c:	000fffff 	.word	0x000fffff
 8020f60:	3ff00000 	.word	0x3ff00000
 8020f64:	4090cbff 	.word	0x4090cbff
 8020f68:	3f6f3400 	.word	0x3f6f3400
 8020f6c:	652b82fe 	.word	0x652b82fe
 8020f70:	3c971547 	.word	0x3c971547
 8020f74:	00000000 	.word	0x00000000

08020f78 <__ieee754_rem_pio2>:
 8020f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f7c:	ed2d 8b02 	vpush	{d8}
 8020f80:	ec55 4b10 	vmov	r4, r5, d0
 8020f84:	4bca      	ldr	r3, [pc, #808]	; (80212b0 <__ieee754_rem_pio2+0x338>)
 8020f86:	b08b      	sub	sp, #44	; 0x2c
 8020f88:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8020f8c:	4598      	cmp	r8, r3
 8020f8e:	4682      	mov	sl, r0
 8020f90:	9502      	str	r5, [sp, #8]
 8020f92:	dc08      	bgt.n	8020fa6 <__ieee754_rem_pio2+0x2e>
 8020f94:	2200      	movs	r2, #0
 8020f96:	2300      	movs	r3, #0
 8020f98:	ed80 0b00 	vstr	d0, [r0]
 8020f9c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8020fa0:	f04f 0b00 	mov.w	fp, #0
 8020fa4:	e028      	b.n	8020ff8 <__ieee754_rem_pio2+0x80>
 8020fa6:	4bc3      	ldr	r3, [pc, #780]	; (80212b4 <__ieee754_rem_pio2+0x33c>)
 8020fa8:	4598      	cmp	r8, r3
 8020faa:	dc78      	bgt.n	802109e <__ieee754_rem_pio2+0x126>
 8020fac:	9b02      	ldr	r3, [sp, #8]
 8020fae:	4ec2      	ldr	r6, [pc, #776]	; (80212b8 <__ieee754_rem_pio2+0x340>)
 8020fb0:	2b00      	cmp	r3, #0
 8020fb2:	ee10 0a10 	vmov	r0, s0
 8020fb6:	a3b0      	add	r3, pc, #704	; (adr r3, 8021278 <__ieee754_rem_pio2+0x300>)
 8020fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fbc:	4629      	mov	r1, r5
 8020fbe:	dd39      	ble.n	8021034 <__ieee754_rem_pio2+0xbc>
 8020fc0:	f7df f96c 	bl	800029c <__aeabi_dsub>
 8020fc4:	45b0      	cmp	r8, r6
 8020fc6:	4604      	mov	r4, r0
 8020fc8:	460d      	mov	r5, r1
 8020fca:	d01b      	beq.n	8021004 <__ieee754_rem_pio2+0x8c>
 8020fcc:	a3ac      	add	r3, pc, #688	; (adr r3, 8021280 <__ieee754_rem_pio2+0x308>)
 8020fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fd2:	f7df f963 	bl	800029c <__aeabi_dsub>
 8020fd6:	4602      	mov	r2, r0
 8020fd8:	460b      	mov	r3, r1
 8020fda:	e9ca 2300 	strd	r2, r3, [sl]
 8020fde:	4620      	mov	r0, r4
 8020fe0:	4629      	mov	r1, r5
 8020fe2:	f7df f95b 	bl	800029c <__aeabi_dsub>
 8020fe6:	a3a6      	add	r3, pc, #664	; (adr r3, 8021280 <__ieee754_rem_pio2+0x308>)
 8020fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fec:	f7df f956 	bl	800029c <__aeabi_dsub>
 8020ff0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8020ff4:	f04f 0b01 	mov.w	fp, #1
 8020ff8:	4658      	mov	r0, fp
 8020ffa:	b00b      	add	sp, #44	; 0x2c
 8020ffc:	ecbd 8b02 	vpop	{d8}
 8021000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021004:	a3a0      	add	r3, pc, #640	; (adr r3, 8021288 <__ieee754_rem_pio2+0x310>)
 8021006:	e9d3 2300 	ldrd	r2, r3, [r3]
 802100a:	f7df f947 	bl	800029c <__aeabi_dsub>
 802100e:	a3a0      	add	r3, pc, #640	; (adr r3, 8021290 <__ieee754_rem_pio2+0x318>)
 8021010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021014:	4604      	mov	r4, r0
 8021016:	460d      	mov	r5, r1
 8021018:	f7df f940 	bl	800029c <__aeabi_dsub>
 802101c:	4602      	mov	r2, r0
 802101e:	460b      	mov	r3, r1
 8021020:	e9ca 2300 	strd	r2, r3, [sl]
 8021024:	4620      	mov	r0, r4
 8021026:	4629      	mov	r1, r5
 8021028:	f7df f938 	bl	800029c <__aeabi_dsub>
 802102c:	a398      	add	r3, pc, #608	; (adr r3, 8021290 <__ieee754_rem_pio2+0x318>)
 802102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021032:	e7db      	b.n	8020fec <__ieee754_rem_pio2+0x74>
 8021034:	f7df f934 	bl	80002a0 <__adddf3>
 8021038:	45b0      	cmp	r8, r6
 802103a:	4604      	mov	r4, r0
 802103c:	460d      	mov	r5, r1
 802103e:	d016      	beq.n	802106e <__ieee754_rem_pio2+0xf6>
 8021040:	a38f      	add	r3, pc, #572	; (adr r3, 8021280 <__ieee754_rem_pio2+0x308>)
 8021042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021046:	f7df f92b 	bl	80002a0 <__adddf3>
 802104a:	4602      	mov	r2, r0
 802104c:	460b      	mov	r3, r1
 802104e:	e9ca 2300 	strd	r2, r3, [sl]
 8021052:	4620      	mov	r0, r4
 8021054:	4629      	mov	r1, r5
 8021056:	f7df f921 	bl	800029c <__aeabi_dsub>
 802105a:	a389      	add	r3, pc, #548	; (adr r3, 8021280 <__ieee754_rem_pio2+0x308>)
 802105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021060:	f7df f91e 	bl	80002a0 <__adddf3>
 8021064:	f04f 3bff 	mov.w	fp, #4294967295
 8021068:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802106c:	e7c4      	b.n	8020ff8 <__ieee754_rem_pio2+0x80>
 802106e:	a386      	add	r3, pc, #536	; (adr r3, 8021288 <__ieee754_rem_pio2+0x310>)
 8021070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021074:	f7df f914 	bl	80002a0 <__adddf3>
 8021078:	a385      	add	r3, pc, #532	; (adr r3, 8021290 <__ieee754_rem_pio2+0x318>)
 802107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802107e:	4604      	mov	r4, r0
 8021080:	460d      	mov	r5, r1
 8021082:	f7df f90d 	bl	80002a0 <__adddf3>
 8021086:	4602      	mov	r2, r0
 8021088:	460b      	mov	r3, r1
 802108a:	e9ca 2300 	strd	r2, r3, [sl]
 802108e:	4620      	mov	r0, r4
 8021090:	4629      	mov	r1, r5
 8021092:	f7df f903 	bl	800029c <__aeabi_dsub>
 8021096:	a37e      	add	r3, pc, #504	; (adr r3, 8021290 <__ieee754_rem_pio2+0x318>)
 8021098:	e9d3 2300 	ldrd	r2, r3, [r3]
 802109c:	e7e0      	b.n	8021060 <__ieee754_rem_pio2+0xe8>
 802109e:	4b87      	ldr	r3, [pc, #540]	; (80212bc <__ieee754_rem_pio2+0x344>)
 80210a0:	4598      	cmp	r8, r3
 80210a2:	f300 80d9 	bgt.w	8021258 <__ieee754_rem_pio2+0x2e0>
 80210a6:	f001 fb73 	bl	8022790 <fabs>
 80210aa:	ec55 4b10 	vmov	r4, r5, d0
 80210ae:	ee10 0a10 	vmov	r0, s0
 80210b2:	a379      	add	r3, pc, #484	; (adr r3, 8021298 <__ieee754_rem_pio2+0x320>)
 80210b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210b8:	4629      	mov	r1, r5
 80210ba:	f7df faa7 	bl	800060c <__aeabi_dmul>
 80210be:	4b80      	ldr	r3, [pc, #512]	; (80212c0 <__ieee754_rem_pio2+0x348>)
 80210c0:	2200      	movs	r2, #0
 80210c2:	f7df f8ed 	bl	80002a0 <__adddf3>
 80210c6:	f7df fd51 	bl	8000b6c <__aeabi_d2iz>
 80210ca:	4683      	mov	fp, r0
 80210cc:	f7df fa34 	bl	8000538 <__aeabi_i2d>
 80210d0:	4602      	mov	r2, r0
 80210d2:	460b      	mov	r3, r1
 80210d4:	ec43 2b18 	vmov	d8, r2, r3
 80210d8:	a367      	add	r3, pc, #412	; (adr r3, 8021278 <__ieee754_rem_pio2+0x300>)
 80210da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210de:	f7df fa95 	bl	800060c <__aeabi_dmul>
 80210e2:	4602      	mov	r2, r0
 80210e4:	460b      	mov	r3, r1
 80210e6:	4620      	mov	r0, r4
 80210e8:	4629      	mov	r1, r5
 80210ea:	f7df f8d7 	bl	800029c <__aeabi_dsub>
 80210ee:	a364      	add	r3, pc, #400	; (adr r3, 8021280 <__ieee754_rem_pio2+0x308>)
 80210f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210f4:	4606      	mov	r6, r0
 80210f6:	460f      	mov	r7, r1
 80210f8:	ec51 0b18 	vmov	r0, r1, d8
 80210fc:	f7df fa86 	bl	800060c <__aeabi_dmul>
 8021100:	f1bb 0f1f 	cmp.w	fp, #31
 8021104:	4604      	mov	r4, r0
 8021106:	460d      	mov	r5, r1
 8021108:	dc0d      	bgt.n	8021126 <__ieee754_rem_pio2+0x1ae>
 802110a:	4b6e      	ldr	r3, [pc, #440]	; (80212c4 <__ieee754_rem_pio2+0x34c>)
 802110c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8021110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021114:	4543      	cmp	r3, r8
 8021116:	d006      	beq.n	8021126 <__ieee754_rem_pio2+0x1ae>
 8021118:	4622      	mov	r2, r4
 802111a:	462b      	mov	r3, r5
 802111c:	4630      	mov	r0, r6
 802111e:	4639      	mov	r1, r7
 8021120:	f7df f8bc 	bl	800029c <__aeabi_dsub>
 8021124:	e00f      	b.n	8021146 <__ieee754_rem_pio2+0x1ce>
 8021126:	462b      	mov	r3, r5
 8021128:	4622      	mov	r2, r4
 802112a:	4630      	mov	r0, r6
 802112c:	4639      	mov	r1, r7
 802112e:	f7df f8b5 	bl	800029c <__aeabi_dsub>
 8021132:	ea4f 5328 	mov.w	r3, r8, asr #20
 8021136:	9303      	str	r3, [sp, #12]
 8021138:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802113c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8021140:	f1b8 0f10 	cmp.w	r8, #16
 8021144:	dc02      	bgt.n	802114c <__ieee754_rem_pio2+0x1d4>
 8021146:	e9ca 0100 	strd	r0, r1, [sl]
 802114a:	e039      	b.n	80211c0 <__ieee754_rem_pio2+0x248>
 802114c:	a34e      	add	r3, pc, #312	; (adr r3, 8021288 <__ieee754_rem_pio2+0x310>)
 802114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021152:	ec51 0b18 	vmov	r0, r1, d8
 8021156:	f7df fa59 	bl	800060c <__aeabi_dmul>
 802115a:	4604      	mov	r4, r0
 802115c:	460d      	mov	r5, r1
 802115e:	4602      	mov	r2, r0
 8021160:	460b      	mov	r3, r1
 8021162:	4630      	mov	r0, r6
 8021164:	4639      	mov	r1, r7
 8021166:	f7df f899 	bl	800029c <__aeabi_dsub>
 802116a:	4602      	mov	r2, r0
 802116c:	460b      	mov	r3, r1
 802116e:	4680      	mov	r8, r0
 8021170:	4689      	mov	r9, r1
 8021172:	4630      	mov	r0, r6
 8021174:	4639      	mov	r1, r7
 8021176:	f7df f891 	bl	800029c <__aeabi_dsub>
 802117a:	4622      	mov	r2, r4
 802117c:	462b      	mov	r3, r5
 802117e:	f7df f88d 	bl	800029c <__aeabi_dsub>
 8021182:	a343      	add	r3, pc, #268	; (adr r3, 8021290 <__ieee754_rem_pio2+0x318>)
 8021184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021188:	4604      	mov	r4, r0
 802118a:	460d      	mov	r5, r1
 802118c:	ec51 0b18 	vmov	r0, r1, d8
 8021190:	f7df fa3c 	bl	800060c <__aeabi_dmul>
 8021194:	4622      	mov	r2, r4
 8021196:	462b      	mov	r3, r5
 8021198:	f7df f880 	bl	800029c <__aeabi_dsub>
 802119c:	4602      	mov	r2, r0
 802119e:	460b      	mov	r3, r1
 80211a0:	4604      	mov	r4, r0
 80211a2:	460d      	mov	r5, r1
 80211a4:	4640      	mov	r0, r8
 80211a6:	4649      	mov	r1, r9
 80211a8:	f7df f878 	bl	800029c <__aeabi_dsub>
 80211ac:	9a03      	ldr	r2, [sp, #12]
 80211ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80211b2:	1ad3      	subs	r3, r2, r3
 80211b4:	2b31      	cmp	r3, #49	; 0x31
 80211b6:	dc24      	bgt.n	8021202 <__ieee754_rem_pio2+0x28a>
 80211b8:	e9ca 0100 	strd	r0, r1, [sl]
 80211bc:	4646      	mov	r6, r8
 80211be:	464f      	mov	r7, r9
 80211c0:	e9da 8900 	ldrd	r8, r9, [sl]
 80211c4:	4630      	mov	r0, r6
 80211c6:	4642      	mov	r2, r8
 80211c8:	464b      	mov	r3, r9
 80211ca:	4639      	mov	r1, r7
 80211cc:	f7df f866 	bl	800029c <__aeabi_dsub>
 80211d0:	462b      	mov	r3, r5
 80211d2:	4622      	mov	r2, r4
 80211d4:	f7df f862 	bl	800029c <__aeabi_dsub>
 80211d8:	9b02      	ldr	r3, [sp, #8]
 80211da:	2b00      	cmp	r3, #0
 80211dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80211e0:	f6bf af0a 	bge.w	8020ff8 <__ieee754_rem_pio2+0x80>
 80211e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80211e8:	f8ca 3004 	str.w	r3, [sl, #4]
 80211ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80211f0:	f8ca 8000 	str.w	r8, [sl]
 80211f4:	f8ca 0008 	str.w	r0, [sl, #8]
 80211f8:	f8ca 300c 	str.w	r3, [sl, #12]
 80211fc:	f1cb 0b00 	rsb	fp, fp, #0
 8021200:	e6fa      	b.n	8020ff8 <__ieee754_rem_pio2+0x80>
 8021202:	a327      	add	r3, pc, #156	; (adr r3, 80212a0 <__ieee754_rem_pio2+0x328>)
 8021204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021208:	ec51 0b18 	vmov	r0, r1, d8
 802120c:	f7df f9fe 	bl	800060c <__aeabi_dmul>
 8021210:	4604      	mov	r4, r0
 8021212:	460d      	mov	r5, r1
 8021214:	4602      	mov	r2, r0
 8021216:	460b      	mov	r3, r1
 8021218:	4640      	mov	r0, r8
 802121a:	4649      	mov	r1, r9
 802121c:	f7df f83e 	bl	800029c <__aeabi_dsub>
 8021220:	4602      	mov	r2, r0
 8021222:	460b      	mov	r3, r1
 8021224:	4606      	mov	r6, r0
 8021226:	460f      	mov	r7, r1
 8021228:	4640      	mov	r0, r8
 802122a:	4649      	mov	r1, r9
 802122c:	f7df f836 	bl	800029c <__aeabi_dsub>
 8021230:	4622      	mov	r2, r4
 8021232:	462b      	mov	r3, r5
 8021234:	f7df f832 	bl	800029c <__aeabi_dsub>
 8021238:	a31b      	add	r3, pc, #108	; (adr r3, 80212a8 <__ieee754_rem_pio2+0x330>)
 802123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802123e:	4604      	mov	r4, r0
 8021240:	460d      	mov	r5, r1
 8021242:	ec51 0b18 	vmov	r0, r1, d8
 8021246:	f7df f9e1 	bl	800060c <__aeabi_dmul>
 802124a:	4622      	mov	r2, r4
 802124c:	462b      	mov	r3, r5
 802124e:	f7df f825 	bl	800029c <__aeabi_dsub>
 8021252:	4604      	mov	r4, r0
 8021254:	460d      	mov	r5, r1
 8021256:	e75f      	b.n	8021118 <__ieee754_rem_pio2+0x1a0>
 8021258:	4b1b      	ldr	r3, [pc, #108]	; (80212c8 <__ieee754_rem_pio2+0x350>)
 802125a:	4598      	cmp	r8, r3
 802125c:	dd36      	ble.n	80212cc <__ieee754_rem_pio2+0x354>
 802125e:	ee10 2a10 	vmov	r2, s0
 8021262:	462b      	mov	r3, r5
 8021264:	4620      	mov	r0, r4
 8021266:	4629      	mov	r1, r5
 8021268:	f7df f818 	bl	800029c <__aeabi_dsub>
 802126c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8021270:	e9ca 0100 	strd	r0, r1, [sl]
 8021274:	e694      	b.n	8020fa0 <__ieee754_rem_pio2+0x28>
 8021276:	bf00      	nop
 8021278:	54400000 	.word	0x54400000
 802127c:	3ff921fb 	.word	0x3ff921fb
 8021280:	1a626331 	.word	0x1a626331
 8021284:	3dd0b461 	.word	0x3dd0b461
 8021288:	1a600000 	.word	0x1a600000
 802128c:	3dd0b461 	.word	0x3dd0b461
 8021290:	2e037073 	.word	0x2e037073
 8021294:	3ba3198a 	.word	0x3ba3198a
 8021298:	6dc9c883 	.word	0x6dc9c883
 802129c:	3fe45f30 	.word	0x3fe45f30
 80212a0:	2e000000 	.word	0x2e000000
 80212a4:	3ba3198a 	.word	0x3ba3198a
 80212a8:	252049c1 	.word	0x252049c1
 80212ac:	397b839a 	.word	0x397b839a
 80212b0:	3fe921fb 	.word	0x3fe921fb
 80212b4:	4002d97b 	.word	0x4002d97b
 80212b8:	3ff921fb 	.word	0x3ff921fb
 80212bc:	413921fb 	.word	0x413921fb
 80212c0:	3fe00000 	.word	0x3fe00000
 80212c4:	08029130 	.word	0x08029130
 80212c8:	7fefffff 	.word	0x7fefffff
 80212cc:	ea4f 5428 	mov.w	r4, r8, asr #20
 80212d0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80212d4:	ee10 0a10 	vmov	r0, s0
 80212d8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80212dc:	ee10 6a10 	vmov	r6, s0
 80212e0:	460f      	mov	r7, r1
 80212e2:	f7df fc43 	bl	8000b6c <__aeabi_d2iz>
 80212e6:	f7df f927 	bl	8000538 <__aeabi_i2d>
 80212ea:	4602      	mov	r2, r0
 80212ec:	460b      	mov	r3, r1
 80212ee:	4630      	mov	r0, r6
 80212f0:	4639      	mov	r1, r7
 80212f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80212f6:	f7de ffd1 	bl	800029c <__aeabi_dsub>
 80212fa:	4b23      	ldr	r3, [pc, #140]	; (8021388 <__ieee754_rem_pio2+0x410>)
 80212fc:	2200      	movs	r2, #0
 80212fe:	f7df f985 	bl	800060c <__aeabi_dmul>
 8021302:	460f      	mov	r7, r1
 8021304:	4606      	mov	r6, r0
 8021306:	f7df fc31 	bl	8000b6c <__aeabi_d2iz>
 802130a:	f7df f915 	bl	8000538 <__aeabi_i2d>
 802130e:	4602      	mov	r2, r0
 8021310:	460b      	mov	r3, r1
 8021312:	4630      	mov	r0, r6
 8021314:	4639      	mov	r1, r7
 8021316:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802131a:	f7de ffbf 	bl	800029c <__aeabi_dsub>
 802131e:	4b1a      	ldr	r3, [pc, #104]	; (8021388 <__ieee754_rem_pio2+0x410>)
 8021320:	2200      	movs	r2, #0
 8021322:	f7df f973 	bl	800060c <__aeabi_dmul>
 8021326:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802132a:	ad04      	add	r5, sp, #16
 802132c:	f04f 0803 	mov.w	r8, #3
 8021330:	46a9      	mov	r9, r5
 8021332:	2600      	movs	r6, #0
 8021334:	2700      	movs	r7, #0
 8021336:	4632      	mov	r2, r6
 8021338:	463b      	mov	r3, r7
 802133a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 802133e:	46c3      	mov	fp, r8
 8021340:	3d08      	subs	r5, #8
 8021342:	f108 38ff 	add.w	r8, r8, #4294967295
 8021346:	f7df fbc9 	bl	8000adc <__aeabi_dcmpeq>
 802134a:	2800      	cmp	r0, #0
 802134c:	d1f3      	bne.n	8021336 <__ieee754_rem_pio2+0x3be>
 802134e:	4b0f      	ldr	r3, [pc, #60]	; (802138c <__ieee754_rem_pio2+0x414>)
 8021350:	9301      	str	r3, [sp, #4]
 8021352:	2302      	movs	r3, #2
 8021354:	9300      	str	r3, [sp, #0]
 8021356:	4622      	mov	r2, r4
 8021358:	465b      	mov	r3, fp
 802135a:	4651      	mov	r1, sl
 802135c:	4648      	mov	r0, r9
 802135e:	f000 fbab 	bl	8021ab8 <__kernel_rem_pio2>
 8021362:	9b02      	ldr	r3, [sp, #8]
 8021364:	2b00      	cmp	r3, #0
 8021366:	4683      	mov	fp, r0
 8021368:	f6bf ae46 	bge.w	8020ff8 <__ieee754_rem_pio2+0x80>
 802136c:	e9da 2100 	ldrd	r2, r1, [sl]
 8021370:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021374:	e9ca 2300 	strd	r2, r3, [sl]
 8021378:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 802137c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021380:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8021384:	e73a      	b.n	80211fc <__ieee754_rem_pio2+0x284>
 8021386:	bf00      	nop
 8021388:	41700000 	.word	0x41700000
 802138c:	080291b0 	.word	0x080291b0

08021390 <__ieee754_sqrt>:
 8021390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021394:	ec55 4b10 	vmov	r4, r5, d0
 8021398:	4e55      	ldr	r6, [pc, #340]	; (80214f0 <__ieee754_sqrt+0x160>)
 802139a:	43ae      	bics	r6, r5
 802139c:	ee10 0a10 	vmov	r0, s0
 80213a0:	ee10 3a10 	vmov	r3, s0
 80213a4:	462a      	mov	r2, r5
 80213a6:	4629      	mov	r1, r5
 80213a8:	d110      	bne.n	80213cc <__ieee754_sqrt+0x3c>
 80213aa:	ee10 2a10 	vmov	r2, s0
 80213ae:	462b      	mov	r3, r5
 80213b0:	f7df f92c 	bl	800060c <__aeabi_dmul>
 80213b4:	4602      	mov	r2, r0
 80213b6:	460b      	mov	r3, r1
 80213b8:	4620      	mov	r0, r4
 80213ba:	4629      	mov	r1, r5
 80213bc:	f7de ff70 	bl	80002a0 <__adddf3>
 80213c0:	4604      	mov	r4, r0
 80213c2:	460d      	mov	r5, r1
 80213c4:	ec45 4b10 	vmov	d0, r4, r5
 80213c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80213cc:	2d00      	cmp	r5, #0
 80213ce:	dc10      	bgt.n	80213f2 <__ieee754_sqrt+0x62>
 80213d0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80213d4:	4330      	orrs	r0, r6
 80213d6:	d0f5      	beq.n	80213c4 <__ieee754_sqrt+0x34>
 80213d8:	b15d      	cbz	r5, 80213f2 <__ieee754_sqrt+0x62>
 80213da:	ee10 2a10 	vmov	r2, s0
 80213de:	462b      	mov	r3, r5
 80213e0:	ee10 0a10 	vmov	r0, s0
 80213e4:	f7de ff5a 	bl	800029c <__aeabi_dsub>
 80213e8:	4602      	mov	r2, r0
 80213ea:	460b      	mov	r3, r1
 80213ec:	f7df fa38 	bl	8000860 <__aeabi_ddiv>
 80213f0:	e7e6      	b.n	80213c0 <__ieee754_sqrt+0x30>
 80213f2:	1512      	asrs	r2, r2, #20
 80213f4:	d074      	beq.n	80214e0 <__ieee754_sqrt+0x150>
 80213f6:	07d4      	lsls	r4, r2, #31
 80213f8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80213fc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8021400:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8021404:	bf5e      	ittt	pl
 8021406:	0fda      	lsrpl	r2, r3, #31
 8021408:	005b      	lslpl	r3, r3, #1
 802140a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 802140e:	2400      	movs	r4, #0
 8021410:	0fda      	lsrs	r2, r3, #31
 8021412:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8021416:	107f      	asrs	r7, r7, #1
 8021418:	005b      	lsls	r3, r3, #1
 802141a:	2516      	movs	r5, #22
 802141c:	4620      	mov	r0, r4
 802141e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8021422:	1886      	adds	r6, r0, r2
 8021424:	428e      	cmp	r6, r1
 8021426:	bfde      	ittt	le
 8021428:	1b89      	suble	r1, r1, r6
 802142a:	18b0      	addle	r0, r6, r2
 802142c:	18a4      	addle	r4, r4, r2
 802142e:	0049      	lsls	r1, r1, #1
 8021430:	3d01      	subs	r5, #1
 8021432:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8021436:	ea4f 0252 	mov.w	r2, r2, lsr #1
 802143a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802143e:	d1f0      	bne.n	8021422 <__ieee754_sqrt+0x92>
 8021440:	462a      	mov	r2, r5
 8021442:	f04f 0e20 	mov.w	lr, #32
 8021446:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 802144a:	4281      	cmp	r1, r0
 802144c:	eb06 0c05 	add.w	ip, r6, r5
 8021450:	dc02      	bgt.n	8021458 <__ieee754_sqrt+0xc8>
 8021452:	d113      	bne.n	802147c <__ieee754_sqrt+0xec>
 8021454:	459c      	cmp	ip, r3
 8021456:	d811      	bhi.n	802147c <__ieee754_sqrt+0xec>
 8021458:	f1bc 0f00 	cmp.w	ip, #0
 802145c:	eb0c 0506 	add.w	r5, ip, r6
 8021460:	da43      	bge.n	80214ea <__ieee754_sqrt+0x15a>
 8021462:	2d00      	cmp	r5, #0
 8021464:	db41      	blt.n	80214ea <__ieee754_sqrt+0x15a>
 8021466:	f100 0801 	add.w	r8, r0, #1
 802146a:	1a09      	subs	r1, r1, r0
 802146c:	459c      	cmp	ip, r3
 802146e:	bf88      	it	hi
 8021470:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8021474:	eba3 030c 	sub.w	r3, r3, ip
 8021478:	4432      	add	r2, r6
 802147a:	4640      	mov	r0, r8
 802147c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8021480:	f1be 0e01 	subs.w	lr, lr, #1
 8021484:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8021488:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802148c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8021490:	d1db      	bne.n	802144a <__ieee754_sqrt+0xba>
 8021492:	430b      	orrs	r3, r1
 8021494:	d006      	beq.n	80214a4 <__ieee754_sqrt+0x114>
 8021496:	1c50      	adds	r0, r2, #1
 8021498:	bf13      	iteet	ne
 802149a:	3201      	addne	r2, #1
 802149c:	3401      	addeq	r4, #1
 802149e:	4672      	moveq	r2, lr
 80214a0:	f022 0201 	bicne.w	r2, r2, #1
 80214a4:	1063      	asrs	r3, r4, #1
 80214a6:	0852      	lsrs	r2, r2, #1
 80214a8:	07e1      	lsls	r1, r4, #31
 80214aa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80214ae:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80214b2:	bf48      	it	mi
 80214b4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80214b8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80214bc:	4614      	mov	r4, r2
 80214be:	e781      	b.n	80213c4 <__ieee754_sqrt+0x34>
 80214c0:	0ad9      	lsrs	r1, r3, #11
 80214c2:	3815      	subs	r0, #21
 80214c4:	055b      	lsls	r3, r3, #21
 80214c6:	2900      	cmp	r1, #0
 80214c8:	d0fa      	beq.n	80214c0 <__ieee754_sqrt+0x130>
 80214ca:	02cd      	lsls	r5, r1, #11
 80214cc:	d50a      	bpl.n	80214e4 <__ieee754_sqrt+0x154>
 80214ce:	f1c2 0420 	rsb	r4, r2, #32
 80214d2:	fa23 f404 	lsr.w	r4, r3, r4
 80214d6:	1e55      	subs	r5, r2, #1
 80214d8:	4093      	lsls	r3, r2
 80214da:	4321      	orrs	r1, r4
 80214dc:	1b42      	subs	r2, r0, r5
 80214de:	e78a      	b.n	80213f6 <__ieee754_sqrt+0x66>
 80214e0:	4610      	mov	r0, r2
 80214e2:	e7f0      	b.n	80214c6 <__ieee754_sqrt+0x136>
 80214e4:	0049      	lsls	r1, r1, #1
 80214e6:	3201      	adds	r2, #1
 80214e8:	e7ef      	b.n	80214ca <__ieee754_sqrt+0x13a>
 80214ea:	4680      	mov	r8, r0
 80214ec:	e7bd      	b.n	802146a <__ieee754_sqrt+0xda>
 80214ee:	bf00      	nop
 80214f0:	7ff00000 	.word	0x7ff00000

080214f4 <__ieee754_expf>:
 80214f4:	ee10 2a10 	vmov	r2, s0
 80214f8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80214fc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8021500:	d902      	bls.n	8021508 <__ieee754_expf+0x14>
 8021502:	ee30 0a00 	vadd.f32	s0, s0, s0
 8021506:	4770      	bx	lr
 8021508:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 802150c:	d106      	bne.n	802151c <__ieee754_expf+0x28>
 802150e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8021648 <__ieee754_expf+0x154>
 8021512:	2b00      	cmp	r3, #0
 8021514:	bf18      	it	ne
 8021516:	eeb0 0a67 	vmovne.f32	s0, s15
 802151a:	4770      	bx	lr
 802151c:	484b      	ldr	r0, [pc, #300]	; (802164c <__ieee754_expf+0x158>)
 802151e:	4282      	cmp	r2, r0
 8021520:	dd02      	ble.n	8021528 <__ieee754_expf+0x34>
 8021522:	2000      	movs	r0, #0
 8021524:	f001 b92e 	b.w	8022784 <__math_oflowf>
 8021528:	2a00      	cmp	r2, #0
 802152a:	da05      	bge.n	8021538 <__ieee754_expf+0x44>
 802152c:	4a48      	ldr	r2, [pc, #288]	; (8021650 <__ieee754_expf+0x15c>)
 802152e:	4291      	cmp	r1, r2
 8021530:	d902      	bls.n	8021538 <__ieee754_expf+0x44>
 8021532:	2000      	movs	r0, #0
 8021534:	f001 b920 	b.w	8022778 <__math_uflowf>
 8021538:	4a46      	ldr	r2, [pc, #280]	; (8021654 <__ieee754_expf+0x160>)
 802153a:	4291      	cmp	r1, r2
 802153c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8021540:	d952      	bls.n	80215e8 <__ieee754_expf+0xf4>
 8021542:	4a45      	ldr	r2, [pc, #276]	; (8021658 <__ieee754_expf+0x164>)
 8021544:	4291      	cmp	r1, r2
 8021546:	ea4f 0283 	mov.w	r2, r3, lsl #2
 802154a:	d834      	bhi.n	80215b6 <__ieee754_expf+0xc2>
 802154c:	4943      	ldr	r1, [pc, #268]	; (802165c <__ieee754_expf+0x168>)
 802154e:	4411      	add	r1, r2
 8021550:	ed91 7a00 	vldr	s14, [r1]
 8021554:	4942      	ldr	r1, [pc, #264]	; (8021660 <__ieee754_expf+0x16c>)
 8021556:	440a      	add	r2, r1
 8021558:	edd2 7a00 	vldr	s15, [r2]
 802155c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8021560:	f1c3 0201 	rsb	r2, r3, #1
 8021564:	1ad2      	subs	r2, r2, r3
 8021566:	ee37 0a67 	vsub.f32	s0, s14, s15
 802156a:	ee20 6a00 	vmul.f32	s12, s0, s0
 802156e:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8021664 <__ieee754_expf+0x170>
 8021572:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8021668 <__ieee754_expf+0x174>
 8021576:	eee6 6a05 	vfma.f32	s13, s12, s10
 802157a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 802166c <__ieee754_expf+0x178>
 802157e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8021582:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8021670 <__ieee754_expf+0x17c>
 8021586:	eee5 6a06 	vfma.f32	s13, s10, s12
 802158a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8021674 <__ieee754_expf+0x180>
 802158e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8021592:	eef0 6a40 	vmov.f32	s13, s0
 8021596:	eee5 6a46 	vfms.f32	s13, s10, s12
 802159a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 802159e:	ee20 5a26 	vmul.f32	s10, s0, s13
 80215a2:	bb92      	cbnz	r2, 802160a <__ieee754_expf+0x116>
 80215a4:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80215a8:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80215ac:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80215b0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80215b4:	4770      	bx	lr
 80215b6:	4b30      	ldr	r3, [pc, #192]	; (8021678 <__ieee754_expf+0x184>)
 80215b8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 802167c <__ieee754_expf+0x188>
 80215bc:	eddf 6a30 	vldr	s13, [pc, #192]	; 8021680 <__ieee754_expf+0x18c>
 80215c0:	4413      	add	r3, r2
 80215c2:	edd3 7a00 	vldr	s15, [r3]
 80215c6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80215ca:	eeb0 7a40 	vmov.f32	s14, s0
 80215ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80215d2:	ee17 2a90 	vmov	r2, s15
 80215d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80215da:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80215de:	eddf 6a29 	vldr	s13, [pc, #164]	; 8021684 <__ieee754_expf+0x190>
 80215e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80215e6:	e7be      	b.n	8021566 <__ieee754_expf+0x72>
 80215e8:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 80215ec:	d20b      	bcs.n	8021606 <__ieee754_expf+0x112>
 80215ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8021688 <__ieee754_expf+0x194>
 80215f2:	ee70 6a26 	vadd.f32	s13, s0, s13
 80215f6:	eef4 6ae5 	vcmpe.f32	s13, s11
 80215fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215fe:	dd02      	ble.n	8021606 <__ieee754_expf+0x112>
 8021600:	ee30 0a25 	vadd.f32	s0, s0, s11
 8021604:	4770      	bx	lr
 8021606:	2200      	movs	r2, #0
 8021608:	e7af      	b.n	802156a <__ieee754_expf+0x76>
 802160a:	ee76 6a66 	vsub.f32	s13, s12, s13
 802160e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8021612:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8021616:	bfb8      	it	lt
 8021618:	3264      	addlt	r2, #100	; 0x64
 802161a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802161e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8021622:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8021626:	ee17 3a90 	vmov	r3, s15
 802162a:	bfab      	itete	ge
 802162c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8021630:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8021634:	ee00 3a10 	vmovge	s0, r3
 8021638:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 802168c <__ieee754_expf+0x198>
 802163c:	bfbc      	itt	lt
 802163e:	ee00 3a10 	vmovlt	s0, r3
 8021642:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8021646:	4770      	bx	lr
 8021648:	00000000 	.word	0x00000000
 802164c:	42b17217 	.word	0x42b17217
 8021650:	42cff1b5 	.word	0x42cff1b5
 8021654:	3eb17218 	.word	0x3eb17218
 8021658:	3f851591 	.word	0x3f851591
 802165c:	080292c0 	.word	0x080292c0
 8021660:	080292c8 	.word	0x080292c8
 8021664:	3331bb4c 	.word	0x3331bb4c
 8021668:	b5ddea0e 	.word	0xb5ddea0e
 802166c:	388ab355 	.word	0x388ab355
 8021670:	bb360b61 	.word	0xbb360b61
 8021674:	3e2aaaab 	.word	0x3e2aaaab
 8021678:	080292b8 	.word	0x080292b8
 802167c:	3fb8aa3b 	.word	0x3fb8aa3b
 8021680:	3f317180 	.word	0x3f317180
 8021684:	3717f7d1 	.word	0x3717f7d1
 8021688:	7149f2ca 	.word	0x7149f2ca
 802168c:	0d800000 	.word	0x0d800000

08021690 <__ieee754_logf>:
 8021690:	ee10 3a10 	vmov	r3, s0
 8021694:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8021698:	d106      	bne.n	80216a8 <__ieee754_logf+0x18>
 802169a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8021830 <__ieee754_logf+0x1a0>
 802169e:	eddf 7a65 	vldr	s15, [pc, #404]	; 8021834 <__ieee754_logf+0x1a4>
 80216a2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80216a6:	4770      	bx	lr
 80216a8:	2b00      	cmp	r3, #0
 80216aa:	da02      	bge.n	80216b2 <__ieee754_logf+0x22>
 80216ac:	ee30 7a40 	vsub.f32	s14, s0, s0
 80216b0:	e7f5      	b.n	802169e <__ieee754_logf+0xe>
 80216b2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80216b6:	db02      	blt.n	80216be <__ieee754_logf+0x2e>
 80216b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80216bc:	4770      	bx	lr
 80216be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80216c2:	bfb8      	it	lt
 80216c4:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8021838 <__ieee754_logf+0x1a8>
 80216c8:	485c      	ldr	r0, [pc, #368]	; (802183c <__ieee754_logf+0x1ac>)
 80216ca:	bfbe      	ittt	lt
 80216cc:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80216d0:	f06f 0118 	mvnlt.w	r1, #24
 80216d4:	ee17 3a90 	vmovlt	r3, s15
 80216d8:	ea4f 52e3 	mov.w	r2, r3, asr #23
 80216dc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80216e0:	4418      	add	r0, r3
 80216e2:	bfa8      	it	ge
 80216e4:	2100      	movge	r1, #0
 80216e6:	3a7f      	subs	r2, #127	; 0x7f
 80216e8:	440a      	add	r2, r1
 80216ea:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 80216ee:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 80216f2:	4319      	orrs	r1, r3
 80216f4:	ee00 1a10 	vmov	s0, r1
 80216f8:	4951      	ldr	r1, [pc, #324]	; (8021840 <__ieee754_logf+0x1b0>)
 80216fa:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 80216fe:	f103 000f 	add.w	r0, r3, #15
 8021702:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8021706:	4001      	ands	r1, r0
 8021708:	ee30 0a67 	vsub.f32	s0, s0, s15
 802170c:	bb89      	cbnz	r1, 8021772 <__ieee754_logf+0xe2>
 802170e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8021712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021716:	d10f      	bne.n	8021738 <__ieee754_logf+0xa8>
 8021718:	2a00      	cmp	r2, #0
 802171a:	f000 8085 	beq.w	8021828 <__ieee754_logf+0x198>
 802171e:	ee07 2a90 	vmov	s15, r2
 8021722:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8021844 <__ieee754_logf+0x1b4>
 8021726:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8021848 <__ieee754_logf+0x1b8>
 802172a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802172e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8021732:	eea7 0a87 	vfma.f32	s0, s15, s14
 8021736:	4770      	bx	lr
 8021738:	eddf 6a44 	vldr	s13, [pc, #272]	; 802184c <__ieee754_logf+0x1bc>
 802173c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8021740:	eee0 7a66 	vfms.f32	s15, s0, s13
 8021744:	ee20 7a00 	vmul.f32	s14, s0, s0
 8021748:	ee27 7a27 	vmul.f32	s14, s14, s15
 802174c:	b912      	cbnz	r2, 8021754 <__ieee754_logf+0xc4>
 802174e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8021752:	4770      	bx	lr
 8021754:	ee07 2a90 	vmov	s15, r2
 8021758:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8021844 <__ieee754_logf+0x1b4>
 802175c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021760:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8021764:	ee37 0a40 	vsub.f32	s0, s14, s0
 8021768:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8021848 <__ieee754_logf+0x1b8>
 802176c:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8021770:	4770      	bx	lr
 8021772:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8021776:	ee70 7a27 	vadd.f32	s15, s0, s15
 802177a:	eddf 5a35 	vldr	s11, [pc, #212]	; 8021850 <__ieee754_logf+0x1c0>
 802177e:	eddf 4a35 	vldr	s9, [pc, #212]	; 8021854 <__ieee754_logf+0x1c4>
 8021782:	4935      	ldr	r1, [pc, #212]	; (8021858 <__ieee754_logf+0x1c8>)
 8021784:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8021788:	4419      	add	r1, r3
 802178a:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 802178e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8021792:	430b      	orrs	r3, r1
 8021794:	2b00      	cmp	r3, #0
 8021796:	ee07 2a90 	vmov	s15, r2
 802179a:	ee26 5a06 	vmul.f32	s10, s12, s12
 802179e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80217a2:	ee25 7a05 	vmul.f32	s14, s10, s10
 80217a6:	eddf 7a2d 	vldr	s15, [pc, #180]	; 802185c <__ieee754_logf+0x1cc>
 80217aa:	eee7 7a25 	vfma.f32	s15, s14, s11
 80217ae:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8021860 <__ieee754_logf+0x1d0>
 80217b2:	eee7 5a87 	vfma.f32	s11, s15, s14
 80217b6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8021864 <__ieee754_logf+0x1d4>
 80217ba:	eee7 7a24 	vfma.f32	s15, s14, s9
 80217be:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8021868 <__ieee754_logf+0x1d8>
 80217c2:	eee7 4a87 	vfma.f32	s9, s15, s14
 80217c6:	eddf 7a29 	vldr	s15, [pc, #164]	; 802186c <__ieee754_logf+0x1dc>
 80217ca:	eee4 7a87 	vfma.f32	s15, s9, s14
 80217ce:	ee67 7a85 	vmul.f32	s15, s15, s10
 80217d2:	eee5 7a87 	vfma.f32	s15, s11, s14
 80217d6:	dd1c      	ble.n	8021812 <__ieee754_logf+0x182>
 80217d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80217dc:	ee20 7a07 	vmul.f32	s14, s0, s14
 80217e0:	ee27 7a00 	vmul.f32	s14, s14, s0
 80217e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80217e8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80217ec:	b922      	cbnz	r2, 80217f8 <__ieee754_logf+0x168>
 80217ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80217f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80217f6:	4770      	bx	lr
 80217f8:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8021844 <__ieee754_logf+0x1b4>
 80217fc:	eee6 7a86 	vfma.f32	s15, s13, s12
 8021800:	ee77 7a67 	vsub.f32	s15, s14, s15
 8021804:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8021808:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8021848 <__ieee754_logf+0x1b8>
 802180c:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8021810:	4770      	bx	lr
 8021812:	ee70 7a67 	vsub.f32	s15, s0, s15
 8021816:	ee67 7a86 	vmul.f32	s15, s15, s12
 802181a:	2a00      	cmp	r2, #0
 802181c:	d0e9      	beq.n	80217f2 <__ieee754_logf+0x162>
 802181e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8021844 <__ieee754_logf+0x1b4>
 8021822:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8021826:	e7ed      	b.n	8021804 <__ieee754_logf+0x174>
 8021828:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8021834 <__ieee754_logf+0x1a4>
 802182c:	4770      	bx	lr
 802182e:	bf00      	nop
 8021830:	cc000000 	.word	0xcc000000
 8021834:	00000000 	.word	0x00000000
 8021838:	4c000000 	.word	0x4c000000
 802183c:	004afb20 	.word	0x004afb20
 8021840:	007ffff0 	.word	0x007ffff0
 8021844:	3717f7d1 	.word	0x3717f7d1
 8021848:	3f317180 	.word	0x3f317180
 802184c:	3eaaaaab 	.word	0x3eaaaaab
 8021850:	3e1cd04f 	.word	0x3e1cd04f
 8021854:	3e178897 	.word	0x3e178897
 8021858:	ffcf5c30 	.word	0xffcf5c30
 802185c:	3e638e29 	.word	0x3e638e29
 8021860:	3ecccccd 	.word	0x3ecccccd
 8021864:	3e3a3325 	.word	0x3e3a3325
 8021868:	3e924925 	.word	0x3e924925
 802186c:	3f2aaaab 	.word	0x3f2aaaab

08021870 <__ieee754_log10f>:
 8021870:	b508      	push	{r3, lr}
 8021872:	ee10 2a10 	vmov	r2, s0
 8021876:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 802187a:	ed2d 8b02 	vpush	{d8}
 802187e:	d108      	bne.n	8021892 <__ieee754_log10f+0x22>
 8021880:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8021908 <__ieee754_log10f+0x98>
 8021884:	eddf 7a21 	vldr	s15, [pc, #132]	; 802190c <__ieee754_log10f+0x9c>
 8021888:	ee87 0a27 	vdiv.f32	s0, s14, s15
 802188c:	ecbd 8b02 	vpop	{d8}
 8021890:	bd08      	pop	{r3, pc}
 8021892:	2a00      	cmp	r2, #0
 8021894:	da02      	bge.n	802189c <__ieee754_log10f+0x2c>
 8021896:	ee30 7a40 	vsub.f32	s14, s0, s0
 802189a:	e7f3      	b.n	8021884 <__ieee754_log10f+0x14>
 802189c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80218a0:	db02      	blt.n	80218a8 <__ieee754_log10f+0x38>
 80218a2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80218a6:	e7f1      	b.n	802188c <__ieee754_log10f+0x1c>
 80218a8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80218ac:	bfbf      	itttt	lt
 80218ae:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8021910 <__ieee754_log10f+0xa0>
 80218b2:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80218b6:	f06f 0118 	mvnlt.w	r1, #24
 80218ba:	ee17 2a90 	vmovlt	r2, s15
 80218be:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80218c2:	bfa8      	it	ge
 80218c4:	2100      	movge	r1, #0
 80218c6:	3b7f      	subs	r3, #127	; 0x7f
 80218c8:	440b      	add	r3, r1
 80218ca:	0fd9      	lsrs	r1, r3, #31
 80218cc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80218d0:	ee07 3a90 	vmov	s15, r3
 80218d4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80218d8:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 80218dc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80218e0:	ee00 3a10 	vmov	s0, r3
 80218e4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80218e8:	f7ff fed2 	bl	8021690 <__ieee754_logf>
 80218ec:	eddf 7a09 	vldr	s15, [pc, #36]	; 8021914 <__ieee754_log10f+0xa4>
 80218f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80218f4:	eddf 7a08 	vldr	s15, [pc, #32]	; 8021918 <__ieee754_log10f+0xa8>
 80218f8:	eea8 0a27 	vfma.f32	s0, s16, s15
 80218fc:	eddf 7a07 	vldr	s15, [pc, #28]	; 802191c <__ieee754_log10f+0xac>
 8021900:	eea8 0a27 	vfma.f32	s0, s16, s15
 8021904:	e7c2      	b.n	802188c <__ieee754_log10f+0x1c>
 8021906:	bf00      	nop
 8021908:	cc000000 	.word	0xcc000000
 802190c:	00000000 	.word	0x00000000
 8021910:	4c000000 	.word	0x4c000000
 8021914:	3ede5bd9 	.word	0x3ede5bd9
 8021918:	355427db 	.word	0x355427db
 802191c:	3e9a2080 	.word	0x3e9a2080

08021920 <__ieee754_sqrtf>:
 8021920:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8021924:	4770      	bx	lr
	...

08021928 <__kernel_cos>:
 8021928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802192c:	ec57 6b10 	vmov	r6, r7, d0
 8021930:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8021934:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8021938:	ed8d 1b00 	vstr	d1, [sp]
 802193c:	da07      	bge.n	802194e <__kernel_cos+0x26>
 802193e:	ee10 0a10 	vmov	r0, s0
 8021942:	4639      	mov	r1, r7
 8021944:	f7df f912 	bl	8000b6c <__aeabi_d2iz>
 8021948:	2800      	cmp	r0, #0
 802194a:	f000 8088 	beq.w	8021a5e <__kernel_cos+0x136>
 802194e:	4632      	mov	r2, r6
 8021950:	463b      	mov	r3, r7
 8021952:	4630      	mov	r0, r6
 8021954:	4639      	mov	r1, r7
 8021956:	f7de fe59 	bl	800060c <__aeabi_dmul>
 802195a:	4b51      	ldr	r3, [pc, #324]	; (8021aa0 <__kernel_cos+0x178>)
 802195c:	2200      	movs	r2, #0
 802195e:	4604      	mov	r4, r0
 8021960:	460d      	mov	r5, r1
 8021962:	f7de fe53 	bl	800060c <__aeabi_dmul>
 8021966:	a340      	add	r3, pc, #256	; (adr r3, 8021a68 <__kernel_cos+0x140>)
 8021968:	e9d3 2300 	ldrd	r2, r3, [r3]
 802196c:	4682      	mov	sl, r0
 802196e:	468b      	mov	fp, r1
 8021970:	4620      	mov	r0, r4
 8021972:	4629      	mov	r1, r5
 8021974:	f7de fe4a 	bl	800060c <__aeabi_dmul>
 8021978:	a33d      	add	r3, pc, #244	; (adr r3, 8021a70 <__kernel_cos+0x148>)
 802197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802197e:	f7de fc8f 	bl	80002a0 <__adddf3>
 8021982:	4622      	mov	r2, r4
 8021984:	462b      	mov	r3, r5
 8021986:	f7de fe41 	bl	800060c <__aeabi_dmul>
 802198a:	a33b      	add	r3, pc, #236	; (adr r3, 8021a78 <__kernel_cos+0x150>)
 802198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021990:	f7de fc84 	bl	800029c <__aeabi_dsub>
 8021994:	4622      	mov	r2, r4
 8021996:	462b      	mov	r3, r5
 8021998:	f7de fe38 	bl	800060c <__aeabi_dmul>
 802199c:	a338      	add	r3, pc, #224	; (adr r3, 8021a80 <__kernel_cos+0x158>)
 802199e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219a2:	f7de fc7d 	bl	80002a0 <__adddf3>
 80219a6:	4622      	mov	r2, r4
 80219a8:	462b      	mov	r3, r5
 80219aa:	f7de fe2f 	bl	800060c <__aeabi_dmul>
 80219ae:	a336      	add	r3, pc, #216	; (adr r3, 8021a88 <__kernel_cos+0x160>)
 80219b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219b4:	f7de fc72 	bl	800029c <__aeabi_dsub>
 80219b8:	4622      	mov	r2, r4
 80219ba:	462b      	mov	r3, r5
 80219bc:	f7de fe26 	bl	800060c <__aeabi_dmul>
 80219c0:	a333      	add	r3, pc, #204	; (adr r3, 8021a90 <__kernel_cos+0x168>)
 80219c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219c6:	f7de fc6b 	bl	80002a0 <__adddf3>
 80219ca:	4622      	mov	r2, r4
 80219cc:	462b      	mov	r3, r5
 80219ce:	f7de fe1d 	bl	800060c <__aeabi_dmul>
 80219d2:	4622      	mov	r2, r4
 80219d4:	462b      	mov	r3, r5
 80219d6:	f7de fe19 	bl	800060c <__aeabi_dmul>
 80219da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80219de:	4604      	mov	r4, r0
 80219e0:	460d      	mov	r5, r1
 80219e2:	4630      	mov	r0, r6
 80219e4:	4639      	mov	r1, r7
 80219e6:	f7de fe11 	bl	800060c <__aeabi_dmul>
 80219ea:	460b      	mov	r3, r1
 80219ec:	4602      	mov	r2, r0
 80219ee:	4629      	mov	r1, r5
 80219f0:	4620      	mov	r0, r4
 80219f2:	f7de fc53 	bl	800029c <__aeabi_dsub>
 80219f6:	4b2b      	ldr	r3, [pc, #172]	; (8021aa4 <__kernel_cos+0x17c>)
 80219f8:	4598      	cmp	r8, r3
 80219fa:	4606      	mov	r6, r0
 80219fc:	460f      	mov	r7, r1
 80219fe:	dc10      	bgt.n	8021a22 <__kernel_cos+0xfa>
 8021a00:	4602      	mov	r2, r0
 8021a02:	460b      	mov	r3, r1
 8021a04:	4650      	mov	r0, sl
 8021a06:	4659      	mov	r1, fp
 8021a08:	f7de fc48 	bl	800029c <__aeabi_dsub>
 8021a0c:	460b      	mov	r3, r1
 8021a0e:	4926      	ldr	r1, [pc, #152]	; (8021aa8 <__kernel_cos+0x180>)
 8021a10:	4602      	mov	r2, r0
 8021a12:	2000      	movs	r0, #0
 8021a14:	f7de fc42 	bl	800029c <__aeabi_dsub>
 8021a18:	ec41 0b10 	vmov	d0, r0, r1
 8021a1c:	b003      	add	sp, #12
 8021a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a22:	4b22      	ldr	r3, [pc, #136]	; (8021aac <__kernel_cos+0x184>)
 8021a24:	4920      	ldr	r1, [pc, #128]	; (8021aa8 <__kernel_cos+0x180>)
 8021a26:	4598      	cmp	r8, r3
 8021a28:	bfcc      	ite	gt
 8021a2a:	4d21      	ldrgt	r5, [pc, #132]	; (8021ab0 <__kernel_cos+0x188>)
 8021a2c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8021a30:	2400      	movs	r4, #0
 8021a32:	4622      	mov	r2, r4
 8021a34:	462b      	mov	r3, r5
 8021a36:	2000      	movs	r0, #0
 8021a38:	f7de fc30 	bl	800029c <__aeabi_dsub>
 8021a3c:	4622      	mov	r2, r4
 8021a3e:	4680      	mov	r8, r0
 8021a40:	4689      	mov	r9, r1
 8021a42:	462b      	mov	r3, r5
 8021a44:	4650      	mov	r0, sl
 8021a46:	4659      	mov	r1, fp
 8021a48:	f7de fc28 	bl	800029c <__aeabi_dsub>
 8021a4c:	4632      	mov	r2, r6
 8021a4e:	463b      	mov	r3, r7
 8021a50:	f7de fc24 	bl	800029c <__aeabi_dsub>
 8021a54:	4602      	mov	r2, r0
 8021a56:	460b      	mov	r3, r1
 8021a58:	4640      	mov	r0, r8
 8021a5a:	4649      	mov	r1, r9
 8021a5c:	e7da      	b.n	8021a14 <__kernel_cos+0xec>
 8021a5e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8021a98 <__kernel_cos+0x170>
 8021a62:	e7db      	b.n	8021a1c <__kernel_cos+0xf4>
 8021a64:	f3af 8000 	nop.w
 8021a68:	be8838d4 	.word	0xbe8838d4
 8021a6c:	bda8fae9 	.word	0xbda8fae9
 8021a70:	bdb4b1c4 	.word	0xbdb4b1c4
 8021a74:	3e21ee9e 	.word	0x3e21ee9e
 8021a78:	809c52ad 	.word	0x809c52ad
 8021a7c:	3e927e4f 	.word	0x3e927e4f
 8021a80:	19cb1590 	.word	0x19cb1590
 8021a84:	3efa01a0 	.word	0x3efa01a0
 8021a88:	16c15177 	.word	0x16c15177
 8021a8c:	3f56c16c 	.word	0x3f56c16c
 8021a90:	5555554c 	.word	0x5555554c
 8021a94:	3fa55555 	.word	0x3fa55555
 8021a98:	00000000 	.word	0x00000000
 8021a9c:	3ff00000 	.word	0x3ff00000
 8021aa0:	3fe00000 	.word	0x3fe00000
 8021aa4:	3fd33332 	.word	0x3fd33332
 8021aa8:	3ff00000 	.word	0x3ff00000
 8021aac:	3fe90000 	.word	0x3fe90000
 8021ab0:	3fd20000 	.word	0x3fd20000
 8021ab4:	00000000 	.word	0x00000000

08021ab8 <__kernel_rem_pio2>:
 8021ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021abc:	ed2d 8b02 	vpush	{d8}
 8021ac0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8021ac4:	f112 0f14 	cmn.w	r2, #20
 8021ac8:	9308      	str	r3, [sp, #32]
 8021aca:	9101      	str	r1, [sp, #4]
 8021acc:	4bc4      	ldr	r3, [pc, #784]	; (8021de0 <__kernel_rem_pio2+0x328>)
 8021ace:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8021ad0:	900b      	str	r0, [sp, #44]	; 0x2c
 8021ad2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8021ad6:	9302      	str	r3, [sp, #8]
 8021ad8:	9b08      	ldr	r3, [sp, #32]
 8021ada:	f103 33ff 	add.w	r3, r3, #4294967295
 8021ade:	bfa8      	it	ge
 8021ae0:	1ed4      	subge	r4, r2, #3
 8021ae2:	9306      	str	r3, [sp, #24]
 8021ae4:	bfb2      	itee	lt
 8021ae6:	2400      	movlt	r4, #0
 8021ae8:	2318      	movge	r3, #24
 8021aea:	fb94 f4f3 	sdivge	r4, r4, r3
 8021aee:	f06f 0317 	mvn.w	r3, #23
 8021af2:	fb04 3303 	mla	r3, r4, r3, r3
 8021af6:	eb03 0a02 	add.w	sl, r3, r2
 8021afa:	9b02      	ldr	r3, [sp, #8]
 8021afc:	9a06      	ldr	r2, [sp, #24]
 8021afe:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8021dd0 <__kernel_rem_pio2+0x318>
 8021b02:	eb03 0802 	add.w	r8, r3, r2
 8021b06:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8021b08:	1aa7      	subs	r7, r4, r2
 8021b0a:	ae22      	add	r6, sp, #136	; 0x88
 8021b0c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8021b10:	2500      	movs	r5, #0
 8021b12:	4545      	cmp	r5, r8
 8021b14:	dd13      	ble.n	8021b3e <__kernel_rem_pio2+0x86>
 8021b16:	9b08      	ldr	r3, [sp, #32]
 8021b18:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8021dd0 <__kernel_rem_pio2+0x318>
 8021b1c:	aa22      	add	r2, sp, #136	; 0x88
 8021b1e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8021b22:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8021b26:	f04f 0800 	mov.w	r8, #0
 8021b2a:	9b02      	ldr	r3, [sp, #8]
 8021b2c:	4598      	cmp	r8, r3
 8021b2e:	dc2f      	bgt.n	8021b90 <__kernel_rem_pio2+0xd8>
 8021b30:	ed8d 8b04 	vstr	d8, [sp, #16]
 8021b34:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8021b38:	462f      	mov	r7, r5
 8021b3a:	2600      	movs	r6, #0
 8021b3c:	e01b      	b.n	8021b76 <__kernel_rem_pio2+0xbe>
 8021b3e:	42ef      	cmn	r7, r5
 8021b40:	d407      	bmi.n	8021b52 <__kernel_rem_pio2+0x9a>
 8021b42:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8021b46:	f7de fcf7 	bl	8000538 <__aeabi_i2d>
 8021b4a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8021b4e:	3501      	adds	r5, #1
 8021b50:	e7df      	b.n	8021b12 <__kernel_rem_pio2+0x5a>
 8021b52:	ec51 0b18 	vmov	r0, r1, d8
 8021b56:	e7f8      	b.n	8021b4a <__kernel_rem_pio2+0x92>
 8021b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021b5c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8021b60:	f7de fd54 	bl	800060c <__aeabi_dmul>
 8021b64:	4602      	mov	r2, r0
 8021b66:	460b      	mov	r3, r1
 8021b68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8021b6c:	f7de fb98 	bl	80002a0 <__adddf3>
 8021b70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8021b74:	3601      	adds	r6, #1
 8021b76:	9b06      	ldr	r3, [sp, #24]
 8021b78:	429e      	cmp	r6, r3
 8021b7a:	f1a7 0708 	sub.w	r7, r7, #8
 8021b7e:	ddeb      	ble.n	8021b58 <__kernel_rem_pio2+0xa0>
 8021b80:	ed9d 7b04 	vldr	d7, [sp, #16]
 8021b84:	f108 0801 	add.w	r8, r8, #1
 8021b88:	ecab 7b02 	vstmia	fp!, {d7}
 8021b8c:	3508      	adds	r5, #8
 8021b8e:	e7cc      	b.n	8021b2a <__kernel_rem_pio2+0x72>
 8021b90:	9b02      	ldr	r3, [sp, #8]
 8021b92:	aa0e      	add	r2, sp, #56	; 0x38
 8021b94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021b98:	930d      	str	r3, [sp, #52]	; 0x34
 8021b9a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8021b9c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8021ba0:	9c02      	ldr	r4, [sp, #8]
 8021ba2:	930c      	str	r3, [sp, #48]	; 0x30
 8021ba4:	00e3      	lsls	r3, r4, #3
 8021ba6:	930a      	str	r3, [sp, #40]	; 0x28
 8021ba8:	ab9a      	add	r3, sp, #616	; 0x268
 8021baa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8021bae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8021bb2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8021bb6:	ab72      	add	r3, sp, #456	; 0x1c8
 8021bb8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8021bbc:	46c3      	mov	fp, r8
 8021bbe:	46a1      	mov	r9, r4
 8021bc0:	f1b9 0f00 	cmp.w	r9, #0
 8021bc4:	f1a5 0508 	sub.w	r5, r5, #8
 8021bc8:	dc77      	bgt.n	8021cba <__kernel_rem_pio2+0x202>
 8021bca:	ec47 6b10 	vmov	d0, r6, r7
 8021bce:	4650      	mov	r0, sl
 8021bd0:	f000 fdfa 	bl	80227c8 <scalbn>
 8021bd4:	ec57 6b10 	vmov	r6, r7, d0
 8021bd8:	2200      	movs	r2, #0
 8021bda:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8021bde:	ee10 0a10 	vmov	r0, s0
 8021be2:	4639      	mov	r1, r7
 8021be4:	f7de fd12 	bl	800060c <__aeabi_dmul>
 8021be8:	ec41 0b10 	vmov	d0, r0, r1
 8021bec:	f7fe f9a0 	bl	801ff30 <floor>
 8021bf0:	4b7c      	ldr	r3, [pc, #496]	; (8021de4 <__kernel_rem_pio2+0x32c>)
 8021bf2:	ec51 0b10 	vmov	r0, r1, d0
 8021bf6:	2200      	movs	r2, #0
 8021bf8:	f7de fd08 	bl	800060c <__aeabi_dmul>
 8021bfc:	4602      	mov	r2, r0
 8021bfe:	460b      	mov	r3, r1
 8021c00:	4630      	mov	r0, r6
 8021c02:	4639      	mov	r1, r7
 8021c04:	f7de fb4a 	bl	800029c <__aeabi_dsub>
 8021c08:	460f      	mov	r7, r1
 8021c0a:	4606      	mov	r6, r0
 8021c0c:	f7de ffae 	bl	8000b6c <__aeabi_d2iz>
 8021c10:	9004      	str	r0, [sp, #16]
 8021c12:	f7de fc91 	bl	8000538 <__aeabi_i2d>
 8021c16:	4602      	mov	r2, r0
 8021c18:	460b      	mov	r3, r1
 8021c1a:	4630      	mov	r0, r6
 8021c1c:	4639      	mov	r1, r7
 8021c1e:	f7de fb3d 	bl	800029c <__aeabi_dsub>
 8021c22:	f1ba 0f00 	cmp.w	sl, #0
 8021c26:	4606      	mov	r6, r0
 8021c28:	460f      	mov	r7, r1
 8021c2a:	dd6d      	ble.n	8021d08 <__kernel_rem_pio2+0x250>
 8021c2c:	1e62      	subs	r2, r4, #1
 8021c2e:	ab0e      	add	r3, sp, #56	; 0x38
 8021c30:	9d04      	ldr	r5, [sp, #16]
 8021c32:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8021c36:	f1ca 0118 	rsb	r1, sl, #24
 8021c3a:	fa40 f301 	asr.w	r3, r0, r1
 8021c3e:	441d      	add	r5, r3
 8021c40:	408b      	lsls	r3, r1
 8021c42:	1ac0      	subs	r0, r0, r3
 8021c44:	ab0e      	add	r3, sp, #56	; 0x38
 8021c46:	9504      	str	r5, [sp, #16]
 8021c48:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8021c4c:	f1ca 0317 	rsb	r3, sl, #23
 8021c50:	fa40 fb03 	asr.w	fp, r0, r3
 8021c54:	f1bb 0f00 	cmp.w	fp, #0
 8021c58:	dd65      	ble.n	8021d26 <__kernel_rem_pio2+0x26e>
 8021c5a:	9b04      	ldr	r3, [sp, #16]
 8021c5c:	2200      	movs	r2, #0
 8021c5e:	3301      	adds	r3, #1
 8021c60:	9304      	str	r3, [sp, #16]
 8021c62:	4615      	mov	r5, r2
 8021c64:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8021c68:	4294      	cmp	r4, r2
 8021c6a:	f300 809c 	bgt.w	8021da6 <__kernel_rem_pio2+0x2ee>
 8021c6e:	f1ba 0f00 	cmp.w	sl, #0
 8021c72:	dd07      	ble.n	8021c84 <__kernel_rem_pio2+0x1cc>
 8021c74:	f1ba 0f01 	cmp.w	sl, #1
 8021c78:	f000 80c0 	beq.w	8021dfc <__kernel_rem_pio2+0x344>
 8021c7c:	f1ba 0f02 	cmp.w	sl, #2
 8021c80:	f000 80c6 	beq.w	8021e10 <__kernel_rem_pio2+0x358>
 8021c84:	f1bb 0f02 	cmp.w	fp, #2
 8021c88:	d14d      	bne.n	8021d26 <__kernel_rem_pio2+0x26e>
 8021c8a:	4632      	mov	r2, r6
 8021c8c:	463b      	mov	r3, r7
 8021c8e:	4956      	ldr	r1, [pc, #344]	; (8021de8 <__kernel_rem_pio2+0x330>)
 8021c90:	2000      	movs	r0, #0
 8021c92:	f7de fb03 	bl	800029c <__aeabi_dsub>
 8021c96:	4606      	mov	r6, r0
 8021c98:	460f      	mov	r7, r1
 8021c9a:	2d00      	cmp	r5, #0
 8021c9c:	d043      	beq.n	8021d26 <__kernel_rem_pio2+0x26e>
 8021c9e:	4650      	mov	r0, sl
 8021ca0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8021dd8 <__kernel_rem_pio2+0x320>
 8021ca4:	f000 fd90 	bl	80227c8 <scalbn>
 8021ca8:	4630      	mov	r0, r6
 8021caa:	4639      	mov	r1, r7
 8021cac:	ec53 2b10 	vmov	r2, r3, d0
 8021cb0:	f7de faf4 	bl	800029c <__aeabi_dsub>
 8021cb4:	4606      	mov	r6, r0
 8021cb6:	460f      	mov	r7, r1
 8021cb8:	e035      	b.n	8021d26 <__kernel_rem_pio2+0x26e>
 8021cba:	4b4c      	ldr	r3, [pc, #304]	; (8021dec <__kernel_rem_pio2+0x334>)
 8021cbc:	2200      	movs	r2, #0
 8021cbe:	4630      	mov	r0, r6
 8021cc0:	4639      	mov	r1, r7
 8021cc2:	f7de fca3 	bl	800060c <__aeabi_dmul>
 8021cc6:	f7de ff51 	bl	8000b6c <__aeabi_d2iz>
 8021cca:	f7de fc35 	bl	8000538 <__aeabi_i2d>
 8021cce:	4602      	mov	r2, r0
 8021cd0:	460b      	mov	r3, r1
 8021cd2:	ec43 2b18 	vmov	d8, r2, r3
 8021cd6:	4b46      	ldr	r3, [pc, #280]	; (8021df0 <__kernel_rem_pio2+0x338>)
 8021cd8:	2200      	movs	r2, #0
 8021cda:	f7de fc97 	bl	800060c <__aeabi_dmul>
 8021cde:	4602      	mov	r2, r0
 8021ce0:	460b      	mov	r3, r1
 8021ce2:	4630      	mov	r0, r6
 8021ce4:	4639      	mov	r1, r7
 8021ce6:	f7de fad9 	bl	800029c <__aeabi_dsub>
 8021cea:	f7de ff3f 	bl	8000b6c <__aeabi_d2iz>
 8021cee:	e9d5 2300 	ldrd	r2, r3, [r5]
 8021cf2:	f84b 0b04 	str.w	r0, [fp], #4
 8021cf6:	ec51 0b18 	vmov	r0, r1, d8
 8021cfa:	f7de fad1 	bl	80002a0 <__adddf3>
 8021cfe:	f109 39ff 	add.w	r9, r9, #4294967295
 8021d02:	4606      	mov	r6, r0
 8021d04:	460f      	mov	r7, r1
 8021d06:	e75b      	b.n	8021bc0 <__kernel_rem_pio2+0x108>
 8021d08:	d106      	bne.n	8021d18 <__kernel_rem_pio2+0x260>
 8021d0a:	1e63      	subs	r3, r4, #1
 8021d0c:	aa0e      	add	r2, sp, #56	; 0x38
 8021d0e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8021d12:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8021d16:	e79d      	b.n	8021c54 <__kernel_rem_pio2+0x19c>
 8021d18:	4b36      	ldr	r3, [pc, #216]	; (8021df4 <__kernel_rem_pio2+0x33c>)
 8021d1a:	2200      	movs	r2, #0
 8021d1c:	f7de fefc 	bl	8000b18 <__aeabi_dcmpge>
 8021d20:	2800      	cmp	r0, #0
 8021d22:	d13d      	bne.n	8021da0 <__kernel_rem_pio2+0x2e8>
 8021d24:	4683      	mov	fp, r0
 8021d26:	2200      	movs	r2, #0
 8021d28:	2300      	movs	r3, #0
 8021d2a:	4630      	mov	r0, r6
 8021d2c:	4639      	mov	r1, r7
 8021d2e:	f7de fed5 	bl	8000adc <__aeabi_dcmpeq>
 8021d32:	2800      	cmp	r0, #0
 8021d34:	f000 80c0 	beq.w	8021eb8 <__kernel_rem_pio2+0x400>
 8021d38:	1e65      	subs	r5, r4, #1
 8021d3a:	462b      	mov	r3, r5
 8021d3c:	2200      	movs	r2, #0
 8021d3e:	9902      	ldr	r1, [sp, #8]
 8021d40:	428b      	cmp	r3, r1
 8021d42:	da6c      	bge.n	8021e1e <__kernel_rem_pio2+0x366>
 8021d44:	2a00      	cmp	r2, #0
 8021d46:	f000 8089 	beq.w	8021e5c <__kernel_rem_pio2+0x3a4>
 8021d4a:	ab0e      	add	r3, sp, #56	; 0x38
 8021d4c:	f1aa 0a18 	sub.w	sl, sl, #24
 8021d50:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8021d54:	2b00      	cmp	r3, #0
 8021d56:	f000 80ad 	beq.w	8021eb4 <__kernel_rem_pio2+0x3fc>
 8021d5a:	4650      	mov	r0, sl
 8021d5c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8021dd8 <__kernel_rem_pio2+0x320>
 8021d60:	f000 fd32 	bl	80227c8 <scalbn>
 8021d64:	ab9a      	add	r3, sp, #616	; 0x268
 8021d66:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8021d6a:	ec57 6b10 	vmov	r6, r7, d0
 8021d6e:	00ec      	lsls	r4, r5, #3
 8021d70:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8021d74:	46aa      	mov	sl, r5
 8021d76:	f1ba 0f00 	cmp.w	sl, #0
 8021d7a:	f280 80d6 	bge.w	8021f2a <__kernel_rem_pio2+0x472>
 8021d7e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8021dd0 <__kernel_rem_pio2+0x318>
 8021d82:	462e      	mov	r6, r5
 8021d84:	2e00      	cmp	r6, #0
 8021d86:	f2c0 8104 	blt.w	8021f92 <__kernel_rem_pio2+0x4da>
 8021d8a:	ab72      	add	r3, sp, #456	; 0x1c8
 8021d8c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8021d90:	f8df a064 	ldr.w	sl, [pc, #100]	; 8021df8 <__kernel_rem_pio2+0x340>
 8021d94:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8021d98:	f04f 0800 	mov.w	r8, #0
 8021d9c:	1baf      	subs	r7, r5, r6
 8021d9e:	e0ea      	b.n	8021f76 <__kernel_rem_pio2+0x4be>
 8021da0:	f04f 0b02 	mov.w	fp, #2
 8021da4:	e759      	b.n	8021c5a <__kernel_rem_pio2+0x1a2>
 8021da6:	f8d8 3000 	ldr.w	r3, [r8]
 8021daa:	b955      	cbnz	r5, 8021dc2 <__kernel_rem_pio2+0x30a>
 8021dac:	b123      	cbz	r3, 8021db8 <__kernel_rem_pio2+0x300>
 8021dae:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8021db2:	f8c8 3000 	str.w	r3, [r8]
 8021db6:	2301      	movs	r3, #1
 8021db8:	3201      	adds	r2, #1
 8021dba:	f108 0804 	add.w	r8, r8, #4
 8021dbe:	461d      	mov	r5, r3
 8021dc0:	e752      	b.n	8021c68 <__kernel_rem_pio2+0x1b0>
 8021dc2:	1acb      	subs	r3, r1, r3
 8021dc4:	f8c8 3000 	str.w	r3, [r8]
 8021dc8:	462b      	mov	r3, r5
 8021dca:	e7f5      	b.n	8021db8 <__kernel_rem_pio2+0x300>
 8021dcc:	f3af 8000 	nop.w
	...
 8021ddc:	3ff00000 	.word	0x3ff00000
 8021de0:	08029310 	.word	0x08029310
 8021de4:	40200000 	.word	0x40200000
 8021de8:	3ff00000 	.word	0x3ff00000
 8021dec:	3e700000 	.word	0x3e700000
 8021df0:	41700000 	.word	0x41700000
 8021df4:	3fe00000 	.word	0x3fe00000
 8021df8:	080292d0 	.word	0x080292d0
 8021dfc:	1e62      	subs	r2, r4, #1
 8021dfe:	ab0e      	add	r3, sp, #56	; 0x38
 8021e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021e04:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8021e08:	a90e      	add	r1, sp, #56	; 0x38
 8021e0a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8021e0e:	e739      	b.n	8021c84 <__kernel_rem_pio2+0x1cc>
 8021e10:	1e62      	subs	r2, r4, #1
 8021e12:	ab0e      	add	r3, sp, #56	; 0x38
 8021e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021e18:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8021e1c:	e7f4      	b.n	8021e08 <__kernel_rem_pio2+0x350>
 8021e1e:	a90e      	add	r1, sp, #56	; 0x38
 8021e20:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8021e24:	3b01      	subs	r3, #1
 8021e26:	430a      	orrs	r2, r1
 8021e28:	e789      	b.n	8021d3e <__kernel_rem_pio2+0x286>
 8021e2a:	3301      	adds	r3, #1
 8021e2c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8021e30:	2900      	cmp	r1, #0
 8021e32:	d0fa      	beq.n	8021e2a <__kernel_rem_pio2+0x372>
 8021e34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021e36:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8021e3a:	446a      	add	r2, sp
 8021e3c:	3a98      	subs	r2, #152	; 0x98
 8021e3e:	920a      	str	r2, [sp, #40]	; 0x28
 8021e40:	9a08      	ldr	r2, [sp, #32]
 8021e42:	18e3      	adds	r3, r4, r3
 8021e44:	18a5      	adds	r5, r4, r2
 8021e46:	aa22      	add	r2, sp, #136	; 0x88
 8021e48:	f104 0801 	add.w	r8, r4, #1
 8021e4c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8021e50:	9304      	str	r3, [sp, #16]
 8021e52:	9b04      	ldr	r3, [sp, #16]
 8021e54:	4543      	cmp	r3, r8
 8021e56:	da04      	bge.n	8021e62 <__kernel_rem_pio2+0x3aa>
 8021e58:	461c      	mov	r4, r3
 8021e5a:	e6a3      	b.n	8021ba4 <__kernel_rem_pio2+0xec>
 8021e5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021e5e:	2301      	movs	r3, #1
 8021e60:	e7e4      	b.n	8021e2c <__kernel_rem_pio2+0x374>
 8021e62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021e64:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8021e68:	f7de fb66 	bl	8000538 <__aeabi_i2d>
 8021e6c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8021e70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021e72:	46ab      	mov	fp, r5
 8021e74:	461c      	mov	r4, r3
 8021e76:	f04f 0900 	mov.w	r9, #0
 8021e7a:	2600      	movs	r6, #0
 8021e7c:	2700      	movs	r7, #0
 8021e7e:	9b06      	ldr	r3, [sp, #24]
 8021e80:	4599      	cmp	r9, r3
 8021e82:	dd06      	ble.n	8021e92 <__kernel_rem_pio2+0x3da>
 8021e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021e86:	e8e3 6702 	strd	r6, r7, [r3], #8
 8021e8a:	f108 0801 	add.w	r8, r8, #1
 8021e8e:	930a      	str	r3, [sp, #40]	; 0x28
 8021e90:	e7df      	b.n	8021e52 <__kernel_rem_pio2+0x39a>
 8021e92:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8021e96:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8021e9a:	f7de fbb7 	bl	800060c <__aeabi_dmul>
 8021e9e:	4602      	mov	r2, r0
 8021ea0:	460b      	mov	r3, r1
 8021ea2:	4630      	mov	r0, r6
 8021ea4:	4639      	mov	r1, r7
 8021ea6:	f7de f9fb 	bl	80002a0 <__adddf3>
 8021eaa:	f109 0901 	add.w	r9, r9, #1
 8021eae:	4606      	mov	r6, r0
 8021eb0:	460f      	mov	r7, r1
 8021eb2:	e7e4      	b.n	8021e7e <__kernel_rem_pio2+0x3c6>
 8021eb4:	3d01      	subs	r5, #1
 8021eb6:	e748      	b.n	8021d4a <__kernel_rem_pio2+0x292>
 8021eb8:	ec47 6b10 	vmov	d0, r6, r7
 8021ebc:	f1ca 0000 	rsb	r0, sl, #0
 8021ec0:	f000 fc82 	bl	80227c8 <scalbn>
 8021ec4:	ec57 6b10 	vmov	r6, r7, d0
 8021ec8:	4ba0      	ldr	r3, [pc, #640]	; (802214c <__kernel_rem_pio2+0x694>)
 8021eca:	ee10 0a10 	vmov	r0, s0
 8021ece:	2200      	movs	r2, #0
 8021ed0:	4639      	mov	r1, r7
 8021ed2:	f7de fe21 	bl	8000b18 <__aeabi_dcmpge>
 8021ed6:	b1f8      	cbz	r0, 8021f18 <__kernel_rem_pio2+0x460>
 8021ed8:	4b9d      	ldr	r3, [pc, #628]	; (8022150 <__kernel_rem_pio2+0x698>)
 8021eda:	2200      	movs	r2, #0
 8021edc:	4630      	mov	r0, r6
 8021ede:	4639      	mov	r1, r7
 8021ee0:	f7de fb94 	bl	800060c <__aeabi_dmul>
 8021ee4:	f7de fe42 	bl	8000b6c <__aeabi_d2iz>
 8021ee8:	4680      	mov	r8, r0
 8021eea:	f7de fb25 	bl	8000538 <__aeabi_i2d>
 8021eee:	4b97      	ldr	r3, [pc, #604]	; (802214c <__kernel_rem_pio2+0x694>)
 8021ef0:	2200      	movs	r2, #0
 8021ef2:	f7de fb8b 	bl	800060c <__aeabi_dmul>
 8021ef6:	460b      	mov	r3, r1
 8021ef8:	4602      	mov	r2, r0
 8021efa:	4639      	mov	r1, r7
 8021efc:	4630      	mov	r0, r6
 8021efe:	f7de f9cd 	bl	800029c <__aeabi_dsub>
 8021f02:	f7de fe33 	bl	8000b6c <__aeabi_d2iz>
 8021f06:	1c65      	adds	r5, r4, #1
 8021f08:	ab0e      	add	r3, sp, #56	; 0x38
 8021f0a:	f10a 0a18 	add.w	sl, sl, #24
 8021f0e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8021f12:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8021f16:	e720      	b.n	8021d5a <__kernel_rem_pio2+0x2a2>
 8021f18:	4630      	mov	r0, r6
 8021f1a:	4639      	mov	r1, r7
 8021f1c:	f7de fe26 	bl	8000b6c <__aeabi_d2iz>
 8021f20:	ab0e      	add	r3, sp, #56	; 0x38
 8021f22:	4625      	mov	r5, r4
 8021f24:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8021f28:	e717      	b.n	8021d5a <__kernel_rem_pio2+0x2a2>
 8021f2a:	ab0e      	add	r3, sp, #56	; 0x38
 8021f2c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8021f30:	f7de fb02 	bl	8000538 <__aeabi_i2d>
 8021f34:	4632      	mov	r2, r6
 8021f36:	463b      	mov	r3, r7
 8021f38:	f7de fb68 	bl	800060c <__aeabi_dmul>
 8021f3c:	4b84      	ldr	r3, [pc, #528]	; (8022150 <__kernel_rem_pio2+0x698>)
 8021f3e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8021f42:	2200      	movs	r2, #0
 8021f44:	4630      	mov	r0, r6
 8021f46:	4639      	mov	r1, r7
 8021f48:	f7de fb60 	bl	800060c <__aeabi_dmul>
 8021f4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021f50:	4606      	mov	r6, r0
 8021f52:	460f      	mov	r7, r1
 8021f54:	e70f      	b.n	8021d76 <__kernel_rem_pio2+0x2be>
 8021f56:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8021f5a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8021f5e:	f7de fb55 	bl	800060c <__aeabi_dmul>
 8021f62:	4602      	mov	r2, r0
 8021f64:	460b      	mov	r3, r1
 8021f66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8021f6a:	f7de f999 	bl	80002a0 <__adddf3>
 8021f6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8021f72:	f108 0801 	add.w	r8, r8, #1
 8021f76:	9b02      	ldr	r3, [sp, #8]
 8021f78:	4598      	cmp	r8, r3
 8021f7a:	dc01      	bgt.n	8021f80 <__kernel_rem_pio2+0x4c8>
 8021f7c:	45b8      	cmp	r8, r7
 8021f7e:	ddea      	ble.n	8021f56 <__kernel_rem_pio2+0x49e>
 8021f80:	ed9d 7b06 	vldr	d7, [sp, #24]
 8021f84:	ab4a      	add	r3, sp, #296	; 0x128
 8021f86:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8021f8a:	ed87 7b00 	vstr	d7, [r7]
 8021f8e:	3e01      	subs	r6, #1
 8021f90:	e6f8      	b.n	8021d84 <__kernel_rem_pio2+0x2cc>
 8021f92:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8021f94:	2b02      	cmp	r3, #2
 8021f96:	dc0b      	bgt.n	8021fb0 <__kernel_rem_pio2+0x4f8>
 8021f98:	2b00      	cmp	r3, #0
 8021f9a:	dc35      	bgt.n	8022008 <__kernel_rem_pio2+0x550>
 8021f9c:	d059      	beq.n	8022052 <__kernel_rem_pio2+0x59a>
 8021f9e:	9b04      	ldr	r3, [sp, #16]
 8021fa0:	f003 0007 	and.w	r0, r3, #7
 8021fa4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8021fa8:	ecbd 8b02 	vpop	{d8}
 8021fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021fb0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8021fb2:	2b03      	cmp	r3, #3
 8021fb4:	d1f3      	bne.n	8021f9e <__kernel_rem_pio2+0x4e6>
 8021fb6:	ab4a      	add	r3, sp, #296	; 0x128
 8021fb8:	4423      	add	r3, r4
 8021fba:	9306      	str	r3, [sp, #24]
 8021fbc:	461c      	mov	r4, r3
 8021fbe:	469a      	mov	sl, r3
 8021fc0:	9502      	str	r5, [sp, #8]
 8021fc2:	9b02      	ldr	r3, [sp, #8]
 8021fc4:	2b00      	cmp	r3, #0
 8021fc6:	f1aa 0a08 	sub.w	sl, sl, #8
 8021fca:	dc6b      	bgt.n	80220a4 <__kernel_rem_pio2+0x5ec>
 8021fcc:	46aa      	mov	sl, r5
 8021fce:	f1ba 0f01 	cmp.w	sl, #1
 8021fd2:	f1a4 0408 	sub.w	r4, r4, #8
 8021fd6:	f300 8085 	bgt.w	80220e4 <__kernel_rem_pio2+0x62c>
 8021fda:	9c06      	ldr	r4, [sp, #24]
 8021fdc:	2000      	movs	r0, #0
 8021fde:	3408      	adds	r4, #8
 8021fe0:	2100      	movs	r1, #0
 8021fe2:	2d01      	cmp	r5, #1
 8021fe4:	f300 809d 	bgt.w	8022122 <__kernel_rem_pio2+0x66a>
 8021fe8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8021fec:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8021ff0:	f1bb 0f00 	cmp.w	fp, #0
 8021ff4:	f040 809b 	bne.w	802212e <__kernel_rem_pio2+0x676>
 8021ff8:	9b01      	ldr	r3, [sp, #4]
 8021ffa:	e9c3 5600 	strd	r5, r6, [r3]
 8021ffe:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8022002:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8022006:	e7ca      	b.n	8021f9e <__kernel_rem_pio2+0x4e6>
 8022008:	3408      	adds	r4, #8
 802200a:	ab4a      	add	r3, sp, #296	; 0x128
 802200c:	441c      	add	r4, r3
 802200e:	462e      	mov	r6, r5
 8022010:	2000      	movs	r0, #0
 8022012:	2100      	movs	r1, #0
 8022014:	2e00      	cmp	r6, #0
 8022016:	da36      	bge.n	8022086 <__kernel_rem_pio2+0x5ce>
 8022018:	f1bb 0f00 	cmp.w	fp, #0
 802201c:	d039      	beq.n	8022092 <__kernel_rem_pio2+0x5da>
 802201e:	4602      	mov	r2, r0
 8022020:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022024:	9c01      	ldr	r4, [sp, #4]
 8022026:	e9c4 2300 	strd	r2, r3, [r4]
 802202a:	4602      	mov	r2, r0
 802202c:	460b      	mov	r3, r1
 802202e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8022032:	f7de f933 	bl	800029c <__aeabi_dsub>
 8022036:	ae4c      	add	r6, sp, #304	; 0x130
 8022038:	2401      	movs	r4, #1
 802203a:	42a5      	cmp	r5, r4
 802203c:	da2c      	bge.n	8022098 <__kernel_rem_pio2+0x5e0>
 802203e:	f1bb 0f00 	cmp.w	fp, #0
 8022042:	d002      	beq.n	802204a <__kernel_rem_pio2+0x592>
 8022044:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022048:	4619      	mov	r1, r3
 802204a:	9b01      	ldr	r3, [sp, #4]
 802204c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8022050:	e7a5      	b.n	8021f9e <__kernel_rem_pio2+0x4e6>
 8022052:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8022056:	eb0d 0403 	add.w	r4, sp, r3
 802205a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 802205e:	2000      	movs	r0, #0
 8022060:	2100      	movs	r1, #0
 8022062:	2d00      	cmp	r5, #0
 8022064:	da09      	bge.n	802207a <__kernel_rem_pio2+0x5c2>
 8022066:	f1bb 0f00 	cmp.w	fp, #0
 802206a:	d002      	beq.n	8022072 <__kernel_rem_pio2+0x5ba>
 802206c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022070:	4619      	mov	r1, r3
 8022072:	9b01      	ldr	r3, [sp, #4]
 8022074:	e9c3 0100 	strd	r0, r1, [r3]
 8022078:	e791      	b.n	8021f9e <__kernel_rem_pio2+0x4e6>
 802207a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802207e:	f7de f90f 	bl	80002a0 <__adddf3>
 8022082:	3d01      	subs	r5, #1
 8022084:	e7ed      	b.n	8022062 <__kernel_rem_pio2+0x5aa>
 8022086:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802208a:	f7de f909 	bl	80002a0 <__adddf3>
 802208e:	3e01      	subs	r6, #1
 8022090:	e7c0      	b.n	8022014 <__kernel_rem_pio2+0x55c>
 8022092:	4602      	mov	r2, r0
 8022094:	460b      	mov	r3, r1
 8022096:	e7c5      	b.n	8022024 <__kernel_rem_pio2+0x56c>
 8022098:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 802209c:	f7de f900 	bl	80002a0 <__adddf3>
 80220a0:	3401      	adds	r4, #1
 80220a2:	e7ca      	b.n	802203a <__kernel_rem_pio2+0x582>
 80220a4:	e9da 8900 	ldrd	r8, r9, [sl]
 80220a8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80220ac:	9b02      	ldr	r3, [sp, #8]
 80220ae:	3b01      	subs	r3, #1
 80220b0:	9302      	str	r3, [sp, #8]
 80220b2:	4632      	mov	r2, r6
 80220b4:	463b      	mov	r3, r7
 80220b6:	4640      	mov	r0, r8
 80220b8:	4649      	mov	r1, r9
 80220ba:	f7de f8f1 	bl	80002a0 <__adddf3>
 80220be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80220c2:	4602      	mov	r2, r0
 80220c4:	460b      	mov	r3, r1
 80220c6:	4640      	mov	r0, r8
 80220c8:	4649      	mov	r1, r9
 80220ca:	f7de f8e7 	bl	800029c <__aeabi_dsub>
 80220ce:	4632      	mov	r2, r6
 80220d0:	463b      	mov	r3, r7
 80220d2:	f7de f8e5 	bl	80002a0 <__adddf3>
 80220d6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80220da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80220de:	ed8a 7b00 	vstr	d7, [sl]
 80220e2:	e76e      	b.n	8021fc2 <__kernel_rem_pio2+0x50a>
 80220e4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80220e8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80220ec:	4640      	mov	r0, r8
 80220ee:	4632      	mov	r2, r6
 80220f0:	463b      	mov	r3, r7
 80220f2:	4649      	mov	r1, r9
 80220f4:	f7de f8d4 	bl	80002a0 <__adddf3>
 80220f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80220fc:	4602      	mov	r2, r0
 80220fe:	460b      	mov	r3, r1
 8022100:	4640      	mov	r0, r8
 8022102:	4649      	mov	r1, r9
 8022104:	f7de f8ca 	bl	800029c <__aeabi_dsub>
 8022108:	4632      	mov	r2, r6
 802210a:	463b      	mov	r3, r7
 802210c:	f7de f8c8 	bl	80002a0 <__adddf3>
 8022110:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022114:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8022118:	ed84 7b00 	vstr	d7, [r4]
 802211c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022120:	e755      	b.n	8021fce <__kernel_rem_pio2+0x516>
 8022122:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8022126:	f7de f8bb 	bl	80002a0 <__adddf3>
 802212a:	3d01      	subs	r5, #1
 802212c:	e759      	b.n	8021fe2 <__kernel_rem_pio2+0x52a>
 802212e:	9b01      	ldr	r3, [sp, #4]
 8022130:	9a01      	ldr	r2, [sp, #4]
 8022132:	601d      	str	r5, [r3, #0]
 8022134:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8022138:	605c      	str	r4, [r3, #4]
 802213a:	609f      	str	r7, [r3, #8]
 802213c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8022140:	60d3      	str	r3, [r2, #12]
 8022142:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022146:	6110      	str	r0, [r2, #16]
 8022148:	6153      	str	r3, [r2, #20]
 802214a:	e728      	b.n	8021f9e <__kernel_rem_pio2+0x4e6>
 802214c:	41700000 	.word	0x41700000
 8022150:	3e700000 	.word	0x3e700000
 8022154:	00000000 	.word	0x00000000

08022158 <__kernel_sin>:
 8022158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802215c:	ed2d 8b04 	vpush	{d8-d9}
 8022160:	eeb0 8a41 	vmov.f32	s16, s2
 8022164:	eef0 8a61 	vmov.f32	s17, s3
 8022168:	ec55 4b10 	vmov	r4, r5, d0
 802216c:	b083      	sub	sp, #12
 802216e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8022172:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8022176:	9001      	str	r0, [sp, #4]
 8022178:	da06      	bge.n	8022188 <__kernel_sin+0x30>
 802217a:	ee10 0a10 	vmov	r0, s0
 802217e:	4629      	mov	r1, r5
 8022180:	f7de fcf4 	bl	8000b6c <__aeabi_d2iz>
 8022184:	2800      	cmp	r0, #0
 8022186:	d051      	beq.n	802222c <__kernel_sin+0xd4>
 8022188:	4622      	mov	r2, r4
 802218a:	462b      	mov	r3, r5
 802218c:	4620      	mov	r0, r4
 802218e:	4629      	mov	r1, r5
 8022190:	f7de fa3c 	bl	800060c <__aeabi_dmul>
 8022194:	4682      	mov	sl, r0
 8022196:	468b      	mov	fp, r1
 8022198:	4602      	mov	r2, r0
 802219a:	460b      	mov	r3, r1
 802219c:	4620      	mov	r0, r4
 802219e:	4629      	mov	r1, r5
 80221a0:	f7de fa34 	bl	800060c <__aeabi_dmul>
 80221a4:	a341      	add	r3, pc, #260	; (adr r3, 80222ac <__kernel_sin+0x154>)
 80221a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221aa:	4680      	mov	r8, r0
 80221ac:	4689      	mov	r9, r1
 80221ae:	4650      	mov	r0, sl
 80221b0:	4659      	mov	r1, fp
 80221b2:	f7de fa2b 	bl	800060c <__aeabi_dmul>
 80221b6:	a33f      	add	r3, pc, #252	; (adr r3, 80222b4 <__kernel_sin+0x15c>)
 80221b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221bc:	f7de f86e 	bl	800029c <__aeabi_dsub>
 80221c0:	4652      	mov	r2, sl
 80221c2:	465b      	mov	r3, fp
 80221c4:	f7de fa22 	bl	800060c <__aeabi_dmul>
 80221c8:	a33c      	add	r3, pc, #240	; (adr r3, 80222bc <__kernel_sin+0x164>)
 80221ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221ce:	f7de f867 	bl	80002a0 <__adddf3>
 80221d2:	4652      	mov	r2, sl
 80221d4:	465b      	mov	r3, fp
 80221d6:	f7de fa19 	bl	800060c <__aeabi_dmul>
 80221da:	a33a      	add	r3, pc, #232	; (adr r3, 80222c4 <__kernel_sin+0x16c>)
 80221dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221e0:	f7de f85c 	bl	800029c <__aeabi_dsub>
 80221e4:	4652      	mov	r2, sl
 80221e6:	465b      	mov	r3, fp
 80221e8:	f7de fa10 	bl	800060c <__aeabi_dmul>
 80221ec:	a337      	add	r3, pc, #220	; (adr r3, 80222cc <__kernel_sin+0x174>)
 80221ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221f2:	f7de f855 	bl	80002a0 <__adddf3>
 80221f6:	9b01      	ldr	r3, [sp, #4]
 80221f8:	4606      	mov	r6, r0
 80221fa:	460f      	mov	r7, r1
 80221fc:	b9eb      	cbnz	r3, 802223a <__kernel_sin+0xe2>
 80221fe:	4602      	mov	r2, r0
 8022200:	460b      	mov	r3, r1
 8022202:	4650      	mov	r0, sl
 8022204:	4659      	mov	r1, fp
 8022206:	f7de fa01 	bl	800060c <__aeabi_dmul>
 802220a:	a325      	add	r3, pc, #148	; (adr r3, 80222a0 <__kernel_sin+0x148>)
 802220c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022210:	f7de f844 	bl	800029c <__aeabi_dsub>
 8022214:	4642      	mov	r2, r8
 8022216:	464b      	mov	r3, r9
 8022218:	f7de f9f8 	bl	800060c <__aeabi_dmul>
 802221c:	4602      	mov	r2, r0
 802221e:	460b      	mov	r3, r1
 8022220:	4620      	mov	r0, r4
 8022222:	4629      	mov	r1, r5
 8022224:	f7de f83c 	bl	80002a0 <__adddf3>
 8022228:	4604      	mov	r4, r0
 802222a:	460d      	mov	r5, r1
 802222c:	ec45 4b10 	vmov	d0, r4, r5
 8022230:	b003      	add	sp, #12
 8022232:	ecbd 8b04 	vpop	{d8-d9}
 8022236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802223a:	4b1b      	ldr	r3, [pc, #108]	; (80222a8 <__kernel_sin+0x150>)
 802223c:	ec51 0b18 	vmov	r0, r1, d8
 8022240:	2200      	movs	r2, #0
 8022242:	f7de f9e3 	bl	800060c <__aeabi_dmul>
 8022246:	4632      	mov	r2, r6
 8022248:	ec41 0b19 	vmov	d9, r0, r1
 802224c:	463b      	mov	r3, r7
 802224e:	4640      	mov	r0, r8
 8022250:	4649      	mov	r1, r9
 8022252:	f7de f9db 	bl	800060c <__aeabi_dmul>
 8022256:	4602      	mov	r2, r0
 8022258:	460b      	mov	r3, r1
 802225a:	ec51 0b19 	vmov	r0, r1, d9
 802225e:	f7de f81d 	bl	800029c <__aeabi_dsub>
 8022262:	4652      	mov	r2, sl
 8022264:	465b      	mov	r3, fp
 8022266:	f7de f9d1 	bl	800060c <__aeabi_dmul>
 802226a:	ec53 2b18 	vmov	r2, r3, d8
 802226e:	f7de f815 	bl	800029c <__aeabi_dsub>
 8022272:	a30b      	add	r3, pc, #44	; (adr r3, 80222a0 <__kernel_sin+0x148>)
 8022274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022278:	4606      	mov	r6, r0
 802227a:	460f      	mov	r7, r1
 802227c:	4640      	mov	r0, r8
 802227e:	4649      	mov	r1, r9
 8022280:	f7de f9c4 	bl	800060c <__aeabi_dmul>
 8022284:	4602      	mov	r2, r0
 8022286:	460b      	mov	r3, r1
 8022288:	4630      	mov	r0, r6
 802228a:	4639      	mov	r1, r7
 802228c:	f7de f808 	bl	80002a0 <__adddf3>
 8022290:	4602      	mov	r2, r0
 8022292:	460b      	mov	r3, r1
 8022294:	4620      	mov	r0, r4
 8022296:	4629      	mov	r1, r5
 8022298:	f7de f800 	bl	800029c <__aeabi_dsub>
 802229c:	e7c4      	b.n	8022228 <__kernel_sin+0xd0>
 802229e:	bf00      	nop
 80222a0:	55555549 	.word	0x55555549
 80222a4:	3fc55555 	.word	0x3fc55555
 80222a8:	3fe00000 	.word	0x3fe00000
 80222ac:	5acfd57c 	.word	0x5acfd57c
 80222b0:	3de5d93a 	.word	0x3de5d93a
 80222b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80222b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80222bc:	57b1fe7d 	.word	0x57b1fe7d
 80222c0:	3ec71de3 	.word	0x3ec71de3
 80222c4:	19c161d5 	.word	0x19c161d5
 80222c8:	3f2a01a0 	.word	0x3f2a01a0
 80222cc:	1110f8a6 	.word	0x1110f8a6
 80222d0:	3f811111 	.word	0x3f811111
 80222d4:	00000000 	.word	0x00000000

080222d8 <__kernel_tan>:
 80222d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222dc:	ed2d 8b06 	vpush	{d8-d10}
 80222e0:	ec5b ab10 	vmov	sl, fp, d0
 80222e4:	4be0      	ldr	r3, [pc, #896]	; (8022668 <__kernel_tan+0x390>)
 80222e6:	b083      	sub	sp, #12
 80222e8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80222ec:	429f      	cmp	r7, r3
 80222ee:	ec59 8b11 	vmov	r8, r9, d1
 80222f2:	4606      	mov	r6, r0
 80222f4:	f8cd b000 	str.w	fp, [sp]
 80222f8:	dc61      	bgt.n	80223be <__kernel_tan+0xe6>
 80222fa:	ee10 0a10 	vmov	r0, s0
 80222fe:	4659      	mov	r1, fp
 8022300:	f7de fc34 	bl	8000b6c <__aeabi_d2iz>
 8022304:	4605      	mov	r5, r0
 8022306:	2800      	cmp	r0, #0
 8022308:	f040 8083 	bne.w	8022412 <__kernel_tan+0x13a>
 802230c:	1c73      	adds	r3, r6, #1
 802230e:	4652      	mov	r2, sl
 8022310:	4313      	orrs	r3, r2
 8022312:	433b      	orrs	r3, r7
 8022314:	d112      	bne.n	802233c <__kernel_tan+0x64>
 8022316:	ec4b ab10 	vmov	d0, sl, fp
 802231a:	f000 fa39 	bl	8022790 <fabs>
 802231e:	49d3      	ldr	r1, [pc, #844]	; (802266c <__kernel_tan+0x394>)
 8022320:	ec53 2b10 	vmov	r2, r3, d0
 8022324:	2000      	movs	r0, #0
 8022326:	f7de fa9b 	bl	8000860 <__aeabi_ddiv>
 802232a:	4682      	mov	sl, r0
 802232c:	468b      	mov	fp, r1
 802232e:	ec4b ab10 	vmov	d0, sl, fp
 8022332:	b003      	add	sp, #12
 8022334:	ecbd 8b06 	vpop	{d8-d10}
 8022338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802233c:	2e01      	cmp	r6, #1
 802233e:	d0f6      	beq.n	802232e <__kernel_tan+0x56>
 8022340:	4642      	mov	r2, r8
 8022342:	464b      	mov	r3, r9
 8022344:	4650      	mov	r0, sl
 8022346:	4659      	mov	r1, fp
 8022348:	f7dd ffaa 	bl	80002a0 <__adddf3>
 802234c:	4602      	mov	r2, r0
 802234e:	460b      	mov	r3, r1
 8022350:	460f      	mov	r7, r1
 8022352:	2000      	movs	r0, #0
 8022354:	49c6      	ldr	r1, [pc, #792]	; (8022670 <__kernel_tan+0x398>)
 8022356:	f7de fa83 	bl	8000860 <__aeabi_ddiv>
 802235a:	e9cd 0100 	strd	r0, r1, [sp]
 802235e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022362:	462e      	mov	r6, r5
 8022364:	4652      	mov	r2, sl
 8022366:	462c      	mov	r4, r5
 8022368:	4630      	mov	r0, r6
 802236a:	461d      	mov	r5, r3
 802236c:	4639      	mov	r1, r7
 802236e:	465b      	mov	r3, fp
 8022370:	f7dd ff94 	bl	800029c <__aeabi_dsub>
 8022374:	4602      	mov	r2, r0
 8022376:	460b      	mov	r3, r1
 8022378:	4640      	mov	r0, r8
 802237a:	4649      	mov	r1, r9
 802237c:	f7dd ff8e 	bl	800029c <__aeabi_dsub>
 8022380:	4632      	mov	r2, r6
 8022382:	462b      	mov	r3, r5
 8022384:	f7de f942 	bl	800060c <__aeabi_dmul>
 8022388:	4632      	mov	r2, r6
 802238a:	4680      	mov	r8, r0
 802238c:	4689      	mov	r9, r1
 802238e:	462b      	mov	r3, r5
 8022390:	4630      	mov	r0, r6
 8022392:	4639      	mov	r1, r7
 8022394:	f7de f93a 	bl	800060c <__aeabi_dmul>
 8022398:	4bb4      	ldr	r3, [pc, #720]	; (802266c <__kernel_tan+0x394>)
 802239a:	2200      	movs	r2, #0
 802239c:	f7dd ff80 	bl	80002a0 <__adddf3>
 80223a0:	4602      	mov	r2, r0
 80223a2:	460b      	mov	r3, r1
 80223a4:	4640      	mov	r0, r8
 80223a6:	4649      	mov	r1, r9
 80223a8:	f7dd ff7a 	bl	80002a0 <__adddf3>
 80223ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80223b0:	f7de f92c 	bl	800060c <__aeabi_dmul>
 80223b4:	4622      	mov	r2, r4
 80223b6:	462b      	mov	r3, r5
 80223b8:	f7dd ff72 	bl	80002a0 <__adddf3>
 80223bc:	e7b5      	b.n	802232a <__kernel_tan+0x52>
 80223be:	4bad      	ldr	r3, [pc, #692]	; (8022674 <__kernel_tan+0x39c>)
 80223c0:	429f      	cmp	r7, r3
 80223c2:	dd26      	ble.n	8022412 <__kernel_tan+0x13a>
 80223c4:	9b00      	ldr	r3, [sp, #0]
 80223c6:	2b00      	cmp	r3, #0
 80223c8:	da09      	bge.n	80223de <__kernel_tan+0x106>
 80223ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80223ce:	469b      	mov	fp, r3
 80223d0:	ee10 aa10 	vmov	sl, s0
 80223d4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80223d8:	ee11 8a10 	vmov	r8, s2
 80223dc:	4699      	mov	r9, r3
 80223de:	4652      	mov	r2, sl
 80223e0:	465b      	mov	r3, fp
 80223e2:	a183      	add	r1, pc, #524	; (adr r1, 80225f0 <__kernel_tan+0x318>)
 80223e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80223e8:	f7dd ff58 	bl	800029c <__aeabi_dsub>
 80223ec:	4642      	mov	r2, r8
 80223ee:	464b      	mov	r3, r9
 80223f0:	4604      	mov	r4, r0
 80223f2:	460d      	mov	r5, r1
 80223f4:	a180      	add	r1, pc, #512	; (adr r1, 80225f8 <__kernel_tan+0x320>)
 80223f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80223fa:	f7dd ff4f 	bl	800029c <__aeabi_dsub>
 80223fe:	4622      	mov	r2, r4
 8022400:	462b      	mov	r3, r5
 8022402:	f7dd ff4d 	bl	80002a0 <__adddf3>
 8022406:	f04f 0800 	mov.w	r8, #0
 802240a:	4682      	mov	sl, r0
 802240c:	468b      	mov	fp, r1
 802240e:	f04f 0900 	mov.w	r9, #0
 8022412:	4652      	mov	r2, sl
 8022414:	465b      	mov	r3, fp
 8022416:	4650      	mov	r0, sl
 8022418:	4659      	mov	r1, fp
 802241a:	f7de f8f7 	bl	800060c <__aeabi_dmul>
 802241e:	4602      	mov	r2, r0
 8022420:	460b      	mov	r3, r1
 8022422:	ec43 2b18 	vmov	d8, r2, r3
 8022426:	f7de f8f1 	bl	800060c <__aeabi_dmul>
 802242a:	ec53 2b18 	vmov	r2, r3, d8
 802242e:	4604      	mov	r4, r0
 8022430:	460d      	mov	r5, r1
 8022432:	4650      	mov	r0, sl
 8022434:	4659      	mov	r1, fp
 8022436:	f7de f8e9 	bl	800060c <__aeabi_dmul>
 802243a:	a371      	add	r3, pc, #452	; (adr r3, 8022600 <__kernel_tan+0x328>)
 802243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022440:	ec41 0b19 	vmov	d9, r0, r1
 8022444:	4620      	mov	r0, r4
 8022446:	4629      	mov	r1, r5
 8022448:	f7de f8e0 	bl	800060c <__aeabi_dmul>
 802244c:	a36e      	add	r3, pc, #440	; (adr r3, 8022608 <__kernel_tan+0x330>)
 802244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022452:	f7dd ff25 	bl	80002a0 <__adddf3>
 8022456:	4622      	mov	r2, r4
 8022458:	462b      	mov	r3, r5
 802245a:	f7de f8d7 	bl	800060c <__aeabi_dmul>
 802245e:	a36c      	add	r3, pc, #432	; (adr r3, 8022610 <__kernel_tan+0x338>)
 8022460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022464:	f7dd ff1c 	bl	80002a0 <__adddf3>
 8022468:	4622      	mov	r2, r4
 802246a:	462b      	mov	r3, r5
 802246c:	f7de f8ce 	bl	800060c <__aeabi_dmul>
 8022470:	a369      	add	r3, pc, #420	; (adr r3, 8022618 <__kernel_tan+0x340>)
 8022472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022476:	f7dd ff13 	bl	80002a0 <__adddf3>
 802247a:	4622      	mov	r2, r4
 802247c:	462b      	mov	r3, r5
 802247e:	f7de f8c5 	bl	800060c <__aeabi_dmul>
 8022482:	a367      	add	r3, pc, #412	; (adr r3, 8022620 <__kernel_tan+0x348>)
 8022484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022488:	f7dd ff0a 	bl	80002a0 <__adddf3>
 802248c:	4622      	mov	r2, r4
 802248e:	462b      	mov	r3, r5
 8022490:	f7de f8bc 	bl	800060c <__aeabi_dmul>
 8022494:	a364      	add	r3, pc, #400	; (adr r3, 8022628 <__kernel_tan+0x350>)
 8022496:	e9d3 2300 	ldrd	r2, r3, [r3]
 802249a:	f7dd ff01 	bl	80002a0 <__adddf3>
 802249e:	ec53 2b18 	vmov	r2, r3, d8
 80224a2:	f7de f8b3 	bl	800060c <__aeabi_dmul>
 80224a6:	a362      	add	r3, pc, #392	; (adr r3, 8022630 <__kernel_tan+0x358>)
 80224a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224ac:	ec41 0b1a 	vmov	d10, r0, r1
 80224b0:	4620      	mov	r0, r4
 80224b2:	4629      	mov	r1, r5
 80224b4:	f7de f8aa 	bl	800060c <__aeabi_dmul>
 80224b8:	a35f      	add	r3, pc, #380	; (adr r3, 8022638 <__kernel_tan+0x360>)
 80224ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224be:	f7dd feef 	bl	80002a0 <__adddf3>
 80224c2:	4622      	mov	r2, r4
 80224c4:	462b      	mov	r3, r5
 80224c6:	f7de f8a1 	bl	800060c <__aeabi_dmul>
 80224ca:	a35d      	add	r3, pc, #372	; (adr r3, 8022640 <__kernel_tan+0x368>)
 80224cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224d0:	f7dd fee6 	bl	80002a0 <__adddf3>
 80224d4:	4622      	mov	r2, r4
 80224d6:	462b      	mov	r3, r5
 80224d8:	f7de f898 	bl	800060c <__aeabi_dmul>
 80224dc:	a35a      	add	r3, pc, #360	; (adr r3, 8022648 <__kernel_tan+0x370>)
 80224de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224e2:	f7dd fedd 	bl	80002a0 <__adddf3>
 80224e6:	4622      	mov	r2, r4
 80224e8:	462b      	mov	r3, r5
 80224ea:	f7de f88f 	bl	800060c <__aeabi_dmul>
 80224ee:	a358      	add	r3, pc, #352	; (adr r3, 8022650 <__kernel_tan+0x378>)
 80224f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224f4:	f7dd fed4 	bl	80002a0 <__adddf3>
 80224f8:	4622      	mov	r2, r4
 80224fa:	462b      	mov	r3, r5
 80224fc:	f7de f886 	bl	800060c <__aeabi_dmul>
 8022500:	a355      	add	r3, pc, #340	; (adr r3, 8022658 <__kernel_tan+0x380>)
 8022502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022506:	f7dd fecb 	bl	80002a0 <__adddf3>
 802250a:	4602      	mov	r2, r0
 802250c:	460b      	mov	r3, r1
 802250e:	ec51 0b1a 	vmov	r0, r1, d10
 8022512:	f7dd fec5 	bl	80002a0 <__adddf3>
 8022516:	ec53 2b19 	vmov	r2, r3, d9
 802251a:	f7de f877 	bl	800060c <__aeabi_dmul>
 802251e:	4642      	mov	r2, r8
 8022520:	464b      	mov	r3, r9
 8022522:	f7dd febd 	bl	80002a0 <__adddf3>
 8022526:	ec53 2b18 	vmov	r2, r3, d8
 802252a:	f7de f86f 	bl	800060c <__aeabi_dmul>
 802252e:	4642      	mov	r2, r8
 8022530:	464b      	mov	r3, r9
 8022532:	f7dd feb5 	bl	80002a0 <__adddf3>
 8022536:	a34a      	add	r3, pc, #296	; (adr r3, 8022660 <__kernel_tan+0x388>)
 8022538:	e9d3 2300 	ldrd	r2, r3, [r3]
 802253c:	4604      	mov	r4, r0
 802253e:	460d      	mov	r5, r1
 8022540:	ec51 0b19 	vmov	r0, r1, d9
 8022544:	f7de f862 	bl	800060c <__aeabi_dmul>
 8022548:	4622      	mov	r2, r4
 802254a:	462b      	mov	r3, r5
 802254c:	f7dd fea8 	bl	80002a0 <__adddf3>
 8022550:	460b      	mov	r3, r1
 8022552:	ec41 0b18 	vmov	d8, r0, r1
 8022556:	4602      	mov	r2, r0
 8022558:	4659      	mov	r1, fp
 802255a:	4650      	mov	r0, sl
 802255c:	f7dd fea0 	bl	80002a0 <__adddf3>
 8022560:	4b44      	ldr	r3, [pc, #272]	; (8022674 <__kernel_tan+0x39c>)
 8022562:	429f      	cmp	r7, r3
 8022564:	4604      	mov	r4, r0
 8022566:	460d      	mov	r5, r1
 8022568:	f340 8086 	ble.w	8022678 <__kernel_tan+0x3a0>
 802256c:	4630      	mov	r0, r6
 802256e:	f7dd ffe3 	bl	8000538 <__aeabi_i2d>
 8022572:	4622      	mov	r2, r4
 8022574:	4680      	mov	r8, r0
 8022576:	4689      	mov	r9, r1
 8022578:	462b      	mov	r3, r5
 802257a:	4620      	mov	r0, r4
 802257c:	4629      	mov	r1, r5
 802257e:	f7de f845 	bl	800060c <__aeabi_dmul>
 8022582:	4642      	mov	r2, r8
 8022584:	4606      	mov	r6, r0
 8022586:	460f      	mov	r7, r1
 8022588:	464b      	mov	r3, r9
 802258a:	4620      	mov	r0, r4
 802258c:	4629      	mov	r1, r5
 802258e:	f7dd fe87 	bl	80002a0 <__adddf3>
 8022592:	4602      	mov	r2, r0
 8022594:	460b      	mov	r3, r1
 8022596:	4630      	mov	r0, r6
 8022598:	4639      	mov	r1, r7
 802259a:	f7de f961 	bl	8000860 <__aeabi_ddiv>
 802259e:	ec53 2b18 	vmov	r2, r3, d8
 80225a2:	f7dd fe7b 	bl	800029c <__aeabi_dsub>
 80225a6:	4602      	mov	r2, r0
 80225a8:	460b      	mov	r3, r1
 80225aa:	4650      	mov	r0, sl
 80225ac:	4659      	mov	r1, fp
 80225ae:	f7dd fe75 	bl	800029c <__aeabi_dsub>
 80225b2:	4602      	mov	r2, r0
 80225b4:	460b      	mov	r3, r1
 80225b6:	f7dd fe73 	bl	80002a0 <__adddf3>
 80225ba:	4602      	mov	r2, r0
 80225bc:	460b      	mov	r3, r1
 80225be:	4640      	mov	r0, r8
 80225c0:	4649      	mov	r1, r9
 80225c2:	f7dd fe6b 	bl	800029c <__aeabi_dsub>
 80225c6:	9b00      	ldr	r3, [sp, #0]
 80225c8:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80225cc:	f00a 0a02 	and.w	sl, sl, #2
 80225d0:	4604      	mov	r4, r0
 80225d2:	f1ca 0001 	rsb	r0, sl, #1
 80225d6:	460d      	mov	r5, r1
 80225d8:	f7dd ffae 	bl	8000538 <__aeabi_i2d>
 80225dc:	4602      	mov	r2, r0
 80225de:	460b      	mov	r3, r1
 80225e0:	4620      	mov	r0, r4
 80225e2:	4629      	mov	r1, r5
 80225e4:	f7de f812 	bl	800060c <__aeabi_dmul>
 80225e8:	e69f      	b.n	802232a <__kernel_tan+0x52>
 80225ea:	bf00      	nop
 80225ec:	f3af 8000 	nop.w
 80225f0:	54442d18 	.word	0x54442d18
 80225f4:	3fe921fb 	.word	0x3fe921fb
 80225f8:	33145c07 	.word	0x33145c07
 80225fc:	3c81a626 	.word	0x3c81a626
 8022600:	74bf7ad4 	.word	0x74bf7ad4
 8022604:	3efb2a70 	.word	0x3efb2a70
 8022608:	32f0a7e9 	.word	0x32f0a7e9
 802260c:	3f12b80f 	.word	0x3f12b80f
 8022610:	1a8d1068 	.word	0x1a8d1068
 8022614:	3f3026f7 	.word	0x3f3026f7
 8022618:	fee08315 	.word	0xfee08315
 802261c:	3f57dbc8 	.word	0x3f57dbc8
 8022620:	e96e8493 	.word	0xe96e8493
 8022624:	3f8226e3 	.word	0x3f8226e3
 8022628:	1bb341fe 	.word	0x1bb341fe
 802262c:	3faba1ba 	.word	0x3faba1ba
 8022630:	db605373 	.word	0xdb605373
 8022634:	bef375cb 	.word	0xbef375cb
 8022638:	a03792a6 	.word	0xa03792a6
 802263c:	3f147e88 	.word	0x3f147e88
 8022640:	f2f26501 	.word	0xf2f26501
 8022644:	3f4344d8 	.word	0x3f4344d8
 8022648:	c9560328 	.word	0xc9560328
 802264c:	3f6d6d22 	.word	0x3f6d6d22
 8022650:	8406d637 	.word	0x8406d637
 8022654:	3f9664f4 	.word	0x3f9664f4
 8022658:	1110fe7a 	.word	0x1110fe7a
 802265c:	3fc11111 	.word	0x3fc11111
 8022660:	55555563 	.word	0x55555563
 8022664:	3fd55555 	.word	0x3fd55555
 8022668:	3e2fffff 	.word	0x3e2fffff
 802266c:	3ff00000 	.word	0x3ff00000
 8022670:	bff00000 	.word	0xbff00000
 8022674:	3fe59427 	.word	0x3fe59427
 8022678:	2e01      	cmp	r6, #1
 802267a:	d02f      	beq.n	80226dc <__kernel_tan+0x404>
 802267c:	460f      	mov	r7, r1
 802267e:	4602      	mov	r2, r0
 8022680:	460b      	mov	r3, r1
 8022682:	4689      	mov	r9, r1
 8022684:	2000      	movs	r0, #0
 8022686:	4917      	ldr	r1, [pc, #92]	; (80226e4 <__kernel_tan+0x40c>)
 8022688:	f7de f8ea 	bl	8000860 <__aeabi_ddiv>
 802268c:	2600      	movs	r6, #0
 802268e:	e9cd 0100 	strd	r0, r1, [sp]
 8022692:	4652      	mov	r2, sl
 8022694:	465b      	mov	r3, fp
 8022696:	4630      	mov	r0, r6
 8022698:	4639      	mov	r1, r7
 802269a:	f7dd fdff 	bl	800029c <__aeabi_dsub>
 802269e:	e9dd 4500 	ldrd	r4, r5, [sp]
 80226a2:	4602      	mov	r2, r0
 80226a4:	460b      	mov	r3, r1
 80226a6:	ec51 0b18 	vmov	r0, r1, d8
 80226aa:	f7dd fdf7 	bl	800029c <__aeabi_dsub>
 80226ae:	4632      	mov	r2, r6
 80226b0:	462b      	mov	r3, r5
 80226b2:	f7dd ffab 	bl	800060c <__aeabi_dmul>
 80226b6:	46b0      	mov	r8, r6
 80226b8:	460f      	mov	r7, r1
 80226ba:	4642      	mov	r2, r8
 80226bc:	462b      	mov	r3, r5
 80226be:	4634      	mov	r4, r6
 80226c0:	4649      	mov	r1, r9
 80226c2:	4606      	mov	r6, r0
 80226c4:	4640      	mov	r0, r8
 80226c6:	f7dd ffa1 	bl	800060c <__aeabi_dmul>
 80226ca:	4b07      	ldr	r3, [pc, #28]	; (80226e8 <__kernel_tan+0x410>)
 80226cc:	2200      	movs	r2, #0
 80226ce:	f7dd fde7 	bl	80002a0 <__adddf3>
 80226d2:	4602      	mov	r2, r0
 80226d4:	460b      	mov	r3, r1
 80226d6:	4630      	mov	r0, r6
 80226d8:	4639      	mov	r1, r7
 80226da:	e665      	b.n	80223a8 <__kernel_tan+0xd0>
 80226dc:	4682      	mov	sl, r0
 80226de:	468b      	mov	fp, r1
 80226e0:	e625      	b.n	802232e <__kernel_tan+0x56>
 80226e2:	bf00      	nop
 80226e4:	bff00000 	.word	0xbff00000
 80226e8:	3ff00000 	.word	0x3ff00000

080226ec <with_errno>:
 80226ec:	b570      	push	{r4, r5, r6, lr}
 80226ee:	4604      	mov	r4, r0
 80226f0:	460d      	mov	r5, r1
 80226f2:	4616      	mov	r6, r2
 80226f4:	f000 f934 	bl	8022960 <__errno>
 80226f8:	4629      	mov	r1, r5
 80226fa:	6006      	str	r6, [r0, #0]
 80226fc:	4620      	mov	r0, r4
 80226fe:	bd70      	pop	{r4, r5, r6, pc}

08022700 <xflow>:
 8022700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022702:	4614      	mov	r4, r2
 8022704:	461d      	mov	r5, r3
 8022706:	b108      	cbz	r0, 802270c <xflow+0xc>
 8022708:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802270c:	e9cd 2300 	strd	r2, r3, [sp]
 8022710:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022714:	4620      	mov	r0, r4
 8022716:	4629      	mov	r1, r5
 8022718:	f7dd ff78 	bl	800060c <__aeabi_dmul>
 802271c:	2222      	movs	r2, #34	; 0x22
 802271e:	b003      	add	sp, #12
 8022720:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022724:	f7ff bfe2 	b.w	80226ec <with_errno>

08022728 <__math_uflow>:
 8022728:	b508      	push	{r3, lr}
 802272a:	2200      	movs	r2, #0
 802272c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8022730:	f7ff ffe6 	bl	8022700 <xflow>
 8022734:	ec41 0b10 	vmov	d0, r0, r1
 8022738:	bd08      	pop	{r3, pc}

0802273a <__math_oflow>:
 802273a:	b508      	push	{r3, lr}
 802273c:	2200      	movs	r2, #0
 802273e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8022742:	f7ff ffdd 	bl	8022700 <xflow>
 8022746:	ec41 0b10 	vmov	d0, r0, r1
 802274a:	bd08      	pop	{r3, pc}

0802274c <with_errnof>:
 802274c:	b513      	push	{r0, r1, r4, lr}
 802274e:	4604      	mov	r4, r0
 8022750:	ed8d 0a01 	vstr	s0, [sp, #4]
 8022754:	f000 f904 	bl	8022960 <__errno>
 8022758:	ed9d 0a01 	vldr	s0, [sp, #4]
 802275c:	6004      	str	r4, [r0, #0]
 802275e:	b002      	add	sp, #8
 8022760:	bd10      	pop	{r4, pc}

08022762 <xflowf>:
 8022762:	b130      	cbz	r0, 8022772 <xflowf+0x10>
 8022764:	eef1 7a40 	vneg.f32	s15, s0
 8022768:	ee27 0a80 	vmul.f32	s0, s15, s0
 802276c:	2022      	movs	r0, #34	; 0x22
 802276e:	f7ff bfed 	b.w	802274c <with_errnof>
 8022772:	eef0 7a40 	vmov.f32	s15, s0
 8022776:	e7f7      	b.n	8022768 <xflowf+0x6>

08022778 <__math_uflowf>:
 8022778:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8022780 <__math_uflowf+0x8>
 802277c:	f7ff bff1 	b.w	8022762 <xflowf>
 8022780:	10000000 	.word	0x10000000

08022784 <__math_oflowf>:
 8022784:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802278c <__math_oflowf+0x8>
 8022788:	f7ff bfeb 	b.w	8022762 <xflowf>
 802278c:	70000000 	.word	0x70000000

08022790 <fabs>:
 8022790:	ec51 0b10 	vmov	r0, r1, d0
 8022794:	ee10 2a10 	vmov	r2, s0
 8022798:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802279c:	ec43 2b10 	vmov	d0, r2, r3
 80227a0:	4770      	bx	lr

080227a2 <finite>:
 80227a2:	b082      	sub	sp, #8
 80227a4:	ed8d 0b00 	vstr	d0, [sp]
 80227a8:	9801      	ldr	r0, [sp, #4]
 80227aa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80227ae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80227b2:	0fc0      	lsrs	r0, r0, #31
 80227b4:	b002      	add	sp, #8
 80227b6:	4770      	bx	lr

080227b8 <nan>:
 80227b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80227c0 <nan+0x8>
 80227bc:	4770      	bx	lr
 80227be:	bf00      	nop
 80227c0:	00000000 	.word	0x00000000
 80227c4:	7ff80000 	.word	0x7ff80000

080227c8 <scalbn>:
 80227c8:	b570      	push	{r4, r5, r6, lr}
 80227ca:	ec55 4b10 	vmov	r4, r5, d0
 80227ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80227d2:	4606      	mov	r6, r0
 80227d4:	462b      	mov	r3, r5
 80227d6:	b99a      	cbnz	r2, 8022800 <scalbn+0x38>
 80227d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80227dc:	4323      	orrs	r3, r4
 80227de:	d036      	beq.n	802284e <scalbn+0x86>
 80227e0:	4b39      	ldr	r3, [pc, #228]	; (80228c8 <scalbn+0x100>)
 80227e2:	4629      	mov	r1, r5
 80227e4:	ee10 0a10 	vmov	r0, s0
 80227e8:	2200      	movs	r2, #0
 80227ea:	f7dd ff0f 	bl	800060c <__aeabi_dmul>
 80227ee:	4b37      	ldr	r3, [pc, #220]	; (80228cc <scalbn+0x104>)
 80227f0:	429e      	cmp	r6, r3
 80227f2:	4604      	mov	r4, r0
 80227f4:	460d      	mov	r5, r1
 80227f6:	da10      	bge.n	802281a <scalbn+0x52>
 80227f8:	a32b      	add	r3, pc, #172	; (adr r3, 80228a8 <scalbn+0xe0>)
 80227fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227fe:	e03a      	b.n	8022876 <scalbn+0xae>
 8022800:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8022804:	428a      	cmp	r2, r1
 8022806:	d10c      	bne.n	8022822 <scalbn+0x5a>
 8022808:	ee10 2a10 	vmov	r2, s0
 802280c:	4620      	mov	r0, r4
 802280e:	4629      	mov	r1, r5
 8022810:	f7dd fd46 	bl	80002a0 <__adddf3>
 8022814:	4604      	mov	r4, r0
 8022816:	460d      	mov	r5, r1
 8022818:	e019      	b.n	802284e <scalbn+0x86>
 802281a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802281e:	460b      	mov	r3, r1
 8022820:	3a36      	subs	r2, #54	; 0x36
 8022822:	4432      	add	r2, r6
 8022824:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8022828:	428a      	cmp	r2, r1
 802282a:	dd08      	ble.n	802283e <scalbn+0x76>
 802282c:	2d00      	cmp	r5, #0
 802282e:	a120      	add	r1, pc, #128	; (adr r1, 80228b0 <scalbn+0xe8>)
 8022830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022834:	da1c      	bge.n	8022870 <scalbn+0xa8>
 8022836:	a120      	add	r1, pc, #128	; (adr r1, 80228b8 <scalbn+0xf0>)
 8022838:	e9d1 0100 	ldrd	r0, r1, [r1]
 802283c:	e018      	b.n	8022870 <scalbn+0xa8>
 802283e:	2a00      	cmp	r2, #0
 8022840:	dd08      	ble.n	8022854 <scalbn+0x8c>
 8022842:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8022846:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802284a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802284e:	ec45 4b10 	vmov	d0, r4, r5
 8022852:	bd70      	pop	{r4, r5, r6, pc}
 8022854:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8022858:	da19      	bge.n	802288e <scalbn+0xc6>
 802285a:	f24c 3350 	movw	r3, #50000	; 0xc350
 802285e:	429e      	cmp	r6, r3
 8022860:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8022864:	dd0a      	ble.n	802287c <scalbn+0xb4>
 8022866:	a112      	add	r1, pc, #72	; (adr r1, 80228b0 <scalbn+0xe8>)
 8022868:	e9d1 0100 	ldrd	r0, r1, [r1]
 802286c:	2b00      	cmp	r3, #0
 802286e:	d1e2      	bne.n	8022836 <scalbn+0x6e>
 8022870:	a30f      	add	r3, pc, #60	; (adr r3, 80228b0 <scalbn+0xe8>)
 8022872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022876:	f7dd fec9 	bl	800060c <__aeabi_dmul>
 802287a:	e7cb      	b.n	8022814 <scalbn+0x4c>
 802287c:	a10a      	add	r1, pc, #40	; (adr r1, 80228a8 <scalbn+0xe0>)
 802287e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022882:	2b00      	cmp	r3, #0
 8022884:	d0b8      	beq.n	80227f8 <scalbn+0x30>
 8022886:	a10e      	add	r1, pc, #56	; (adr r1, 80228c0 <scalbn+0xf8>)
 8022888:	e9d1 0100 	ldrd	r0, r1, [r1]
 802288c:	e7b4      	b.n	80227f8 <scalbn+0x30>
 802288e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8022892:	3236      	adds	r2, #54	; 0x36
 8022894:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8022898:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 802289c:	4620      	mov	r0, r4
 802289e:	4b0c      	ldr	r3, [pc, #48]	; (80228d0 <scalbn+0x108>)
 80228a0:	2200      	movs	r2, #0
 80228a2:	e7e8      	b.n	8022876 <scalbn+0xae>
 80228a4:	f3af 8000 	nop.w
 80228a8:	c2f8f359 	.word	0xc2f8f359
 80228ac:	01a56e1f 	.word	0x01a56e1f
 80228b0:	8800759c 	.word	0x8800759c
 80228b4:	7e37e43c 	.word	0x7e37e43c
 80228b8:	8800759c 	.word	0x8800759c
 80228bc:	fe37e43c 	.word	0xfe37e43c
 80228c0:	c2f8f359 	.word	0xc2f8f359
 80228c4:	81a56e1f 	.word	0x81a56e1f
 80228c8:	43500000 	.word	0x43500000
 80228cc:	ffff3cb0 	.word	0xffff3cb0
 80228d0:	3c900000 	.word	0x3c900000

080228d4 <finitef>:
 80228d4:	b082      	sub	sp, #8
 80228d6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80228da:	9801      	ldr	r0, [sp, #4]
 80228dc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80228e0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80228e4:	bfac      	ite	ge
 80228e6:	2000      	movge	r0, #0
 80228e8:	2001      	movlt	r0, #1
 80228ea:	b002      	add	sp, #8
 80228ec:	4770      	bx	lr
	...

080228f0 <nanf>:
 80228f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80228f8 <nanf+0x8>
 80228f4:	4770      	bx	lr
 80228f6:	bf00      	nop
 80228f8:	7fc00000 	.word	0x7fc00000

080228fc <abort>:
 80228fc:	b508      	push	{r3, lr}
 80228fe:	2006      	movs	r0, #6
 8022900:	f000 ffa0 	bl	8023844 <raise>
 8022904:	2001      	movs	r0, #1
 8022906:	f7e6 f9b1 	bl	8008c6c <_exit>
	...

0802290c <__assert_func>:
 802290c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802290e:	4614      	mov	r4, r2
 8022910:	461a      	mov	r2, r3
 8022912:	4b09      	ldr	r3, [pc, #36]	; (8022938 <__assert_func+0x2c>)
 8022914:	681b      	ldr	r3, [r3, #0]
 8022916:	4605      	mov	r5, r0
 8022918:	68d8      	ldr	r0, [r3, #12]
 802291a:	b14c      	cbz	r4, 8022930 <__assert_func+0x24>
 802291c:	4b07      	ldr	r3, [pc, #28]	; (802293c <__assert_func+0x30>)
 802291e:	9100      	str	r1, [sp, #0]
 8022920:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022924:	4906      	ldr	r1, [pc, #24]	; (8022940 <__assert_func+0x34>)
 8022926:	462b      	mov	r3, r5
 8022928:	f000 f820 	bl	802296c <fiprintf>
 802292c:	f7ff ffe6 	bl	80228fc <abort>
 8022930:	4b04      	ldr	r3, [pc, #16]	; (8022944 <__assert_func+0x38>)
 8022932:	461c      	mov	r4, r3
 8022934:	e7f3      	b.n	802291e <__assert_func+0x12>
 8022936:	bf00      	nop
 8022938:	20000288 	.word	0x20000288
 802293c:	08029320 	.word	0x08029320
 8022940:	0802932d 	.word	0x0802932d
 8022944:	0802935b 	.word	0x0802935b

08022948 <atof>:
 8022948:	2100      	movs	r1, #0
 802294a:	f001 bdcf 	b.w	80244ec <strtod>
	...

08022950 <calloc>:
 8022950:	4b02      	ldr	r3, [pc, #8]	; (802295c <calloc+0xc>)
 8022952:	460a      	mov	r2, r1
 8022954:	4601      	mov	r1, r0
 8022956:	6818      	ldr	r0, [r3, #0]
 8022958:	f000 b882 	b.w	8022a60 <_calloc_r>
 802295c:	20000288 	.word	0x20000288

08022960 <__errno>:
 8022960:	4b01      	ldr	r3, [pc, #4]	; (8022968 <__errno+0x8>)
 8022962:	6818      	ldr	r0, [r3, #0]
 8022964:	4770      	bx	lr
 8022966:	bf00      	nop
 8022968:	20000288 	.word	0x20000288

0802296c <fiprintf>:
 802296c:	b40e      	push	{r1, r2, r3}
 802296e:	b503      	push	{r0, r1, lr}
 8022970:	4601      	mov	r1, r0
 8022972:	ab03      	add	r3, sp, #12
 8022974:	4805      	ldr	r0, [pc, #20]	; (802298c <fiprintf+0x20>)
 8022976:	f853 2b04 	ldr.w	r2, [r3], #4
 802297a:	6800      	ldr	r0, [r0, #0]
 802297c:	9301      	str	r3, [sp, #4]
 802297e:	f000 f98f 	bl	8022ca0 <_vfiprintf_r>
 8022982:	b002      	add	sp, #8
 8022984:	f85d eb04 	ldr.w	lr, [sp], #4
 8022988:	b003      	add	sp, #12
 802298a:	4770      	bx	lr
 802298c:	20000288 	.word	0x20000288

08022990 <__libc_init_array>:
 8022990:	b570      	push	{r4, r5, r6, lr}
 8022992:	4d0d      	ldr	r5, [pc, #52]	; (80229c8 <__libc_init_array+0x38>)
 8022994:	4c0d      	ldr	r4, [pc, #52]	; (80229cc <__libc_init_array+0x3c>)
 8022996:	1b64      	subs	r4, r4, r5
 8022998:	10a4      	asrs	r4, r4, #2
 802299a:	2600      	movs	r6, #0
 802299c:	42a6      	cmp	r6, r4
 802299e:	d109      	bne.n	80229b4 <__libc_init_array+0x24>
 80229a0:	4d0b      	ldr	r5, [pc, #44]	; (80229d0 <__libc_init_array+0x40>)
 80229a2:	4c0c      	ldr	r4, [pc, #48]	; (80229d4 <__libc_init_array+0x44>)
 80229a4:	f004 f9c4 	bl	8026d30 <_init>
 80229a8:	1b64      	subs	r4, r4, r5
 80229aa:	10a4      	asrs	r4, r4, #2
 80229ac:	2600      	movs	r6, #0
 80229ae:	42a6      	cmp	r6, r4
 80229b0:	d105      	bne.n	80229be <__libc_init_array+0x2e>
 80229b2:	bd70      	pop	{r4, r5, r6, pc}
 80229b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80229b8:	4798      	blx	r3
 80229ba:	3601      	adds	r6, #1
 80229bc:	e7ee      	b.n	802299c <__libc_init_array+0xc>
 80229be:	f855 3b04 	ldr.w	r3, [r5], #4
 80229c2:	4798      	blx	r3
 80229c4:	3601      	adds	r6, #1
 80229c6:	e7f2      	b.n	80229ae <__libc_init_array+0x1e>
 80229c8:	080297cc 	.word	0x080297cc
 80229cc:	080297cc 	.word	0x080297cc
 80229d0:	080297cc 	.word	0x080297cc
 80229d4:	080297d4 	.word	0x080297d4

080229d8 <__retarget_lock_init_recursive>:
 80229d8:	4770      	bx	lr

080229da <__retarget_lock_acquire_recursive>:
 80229da:	4770      	bx	lr

080229dc <__retarget_lock_release_recursive>:
 80229dc:	4770      	bx	lr
	...

080229e0 <malloc>:
 80229e0:	4b02      	ldr	r3, [pc, #8]	; (80229ec <malloc+0xc>)
 80229e2:	4601      	mov	r1, r0
 80229e4:	6818      	ldr	r0, [r3, #0]
 80229e6:	f000 b8bd 	b.w	8022b64 <_malloc_r>
 80229ea:	bf00      	nop
 80229ec:	20000288 	.word	0x20000288

080229f0 <free>:
 80229f0:	4b02      	ldr	r3, [pc, #8]	; (80229fc <free+0xc>)
 80229f2:	4601      	mov	r1, r0
 80229f4:	6818      	ldr	r0, [r3, #0]
 80229f6:	f000 b849 	b.w	8022a8c <_free_r>
 80229fa:	bf00      	nop
 80229fc:	20000288 	.word	0x20000288

08022a00 <memcpy>:
 8022a00:	440a      	add	r2, r1
 8022a02:	4291      	cmp	r1, r2
 8022a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8022a08:	d100      	bne.n	8022a0c <memcpy+0xc>
 8022a0a:	4770      	bx	lr
 8022a0c:	b510      	push	{r4, lr}
 8022a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022a12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022a16:	4291      	cmp	r1, r2
 8022a18:	d1f9      	bne.n	8022a0e <memcpy+0xe>
 8022a1a:	bd10      	pop	{r4, pc}

08022a1c <memmove>:
 8022a1c:	4288      	cmp	r0, r1
 8022a1e:	b510      	push	{r4, lr}
 8022a20:	eb01 0402 	add.w	r4, r1, r2
 8022a24:	d902      	bls.n	8022a2c <memmove+0x10>
 8022a26:	4284      	cmp	r4, r0
 8022a28:	4623      	mov	r3, r4
 8022a2a:	d807      	bhi.n	8022a3c <memmove+0x20>
 8022a2c:	1e43      	subs	r3, r0, #1
 8022a2e:	42a1      	cmp	r1, r4
 8022a30:	d008      	beq.n	8022a44 <memmove+0x28>
 8022a32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022a36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022a3a:	e7f8      	b.n	8022a2e <memmove+0x12>
 8022a3c:	4402      	add	r2, r0
 8022a3e:	4601      	mov	r1, r0
 8022a40:	428a      	cmp	r2, r1
 8022a42:	d100      	bne.n	8022a46 <memmove+0x2a>
 8022a44:	bd10      	pop	{r4, pc}
 8022a46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022a4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022a4e:	e7f7      	b.n	8022a40 <memmove+0x24>

08022a50 <memset>:
 8022a50:	4402      	add	r2, r0
 8022a52:	4603      	mov	r3, r0
 8022a54:	4293      	cmp	r3, r2
 8022a56:	d100      	bne.n	8022a5a <memset+0xa>
 8022a58:	4770      	bx	lr
 8022a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8022a5e:	e7f9      	b.n	8022a54 <memset+0x4>

08022a60 <_calloc_r>:
 8022a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022a62:	fba1 2402 	umull	r2, r4, r1, r2
 8022a66:	b94c      	cbnz	r4, 8022a7c <_calloc_r+0x1c>
 8022a68:	4611      	mov	r1, r2
 8022a6a:	9201      	str	r2, [sp, #4]
 8022a6c:	f000 f87a 	bl	8022b64 <_malloc_r>
 8022a70:	9a01      	ldr	r2, [sp, #4]
 8022a72:	4605      	mov	r5, r0
 8022a74:	b930      	cbnz	r0, 8022a84 <_calloc_r+0x24>
 8022a76:	4628      	mov	r0, r5
 8022a78:	b003      	add	sp, #12
 8022a7a:	bd30      	pop	{r4, r5, pc}
 8022a7c:	220c      	movs	r2, #12
 8022a7e:	6002      	str	r2, [r0, #0]
 8022a80:	2500      	movs	r5, #0
 8022a82:	e7f8      	b.n	8022a76 <_calloc_r+0x16>
 8022a84:	4621      	mov	r1, r4
 8022a86:	f7ff ffe3 	bl	8022a50 <memset>
 8022a8a:	e7f4      	b.n	8022a76 <_calloc_r+0x16>

08022a8c <_free_r>:
 8022a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022a8e:	2900      	cmp	r1, #0
 8022a90:	d044      	beq.n	8022b1c <_free_r+0x90>
 8022a92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022a96:	9001      	str	r0, [sp, #4]
 8022a98:	2b00      	cmp	r3, #0
 8022a9a:	f1a1 0404 	sub.w	r4, r1, #4
 8022a9e:	bfb8      	it	lt
 8022aa0:	18e4      	addlt	r4, r4, r3
 8022aa2:	f003 fa2d 	bl	8025f00 <__malloc_lock>
 8022aa6:	4a1e      	ldr	r2, [pc, #120]	; (8022b20 <_free_r+0x94>)
 8022aa8:	9801      	ldr	r0, [sp, #4]
 8022aaa:	6813      	ldr	r3, [r2, #0]
 8022aac:	b933      	cbnz	r3, 8022abc <_free_r+0x30>
 8022aae:	6063      	str	r3, [r4, #4]
 8022ab0:	6014      	str	r4, [r2, #0]
 8022ab2:	b003      	add	sp, #12
 8022ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022ab8:	f003 ba28 	b.w	8025f0c <__malloc_unlock>
 8022abc:	42a3      	cmp	r3, r4
 8022abe:	d908      	bls.n	8022ad2 <_free_r+0x46>
 8022ac0:	6825      	ldr	r5, [r4, #0]
 8022ac2:	1961      	adds	r1, r4, r5
 8022ac4:	428b      	cmp	r3, r1
 8022ac6:	bf01      	itttt	eq
 8022ac8:	6819      	ldreq	r1, [r3, #0]
 8022aca:	685b      	ldreq	r3, [r3, #4]
 8022acc:	1949      	addeq	r1, r1, r5
 8022ace:	6021      	streq	r1, [r4, #0]
 8022ad0:	e7ed      	b.n	8022aae <_free_r+0x22>
 8022ad2:	461a      	mov	r2, r3
 8022ad4:	685b      	ldr	r3, [r3, #4]
 8022ad6:	b10b      	cbz	r3, 8022adc <_free_r+0x50>
 8022ad8:	42a3      	cmp	r3, r4
 8022ada:	d9fa      	bls.n	8022ad2 <_free_r+0x46>
 8022adc:	6811      	ldr	r1, [r2, #0]
 8022ade:	1855      	adds	r5, r2, r1
 8022ae0:	42a5      	cmp	r5, r4
 8022ae2:	d10b      	bne.n	8022afc <_free_r+0x70>
 8022ae4:	6824      	ldr	r4, [r4, #0]
 8022ae6:	4421      	add	r1, r4
 8022ae8:	1854      	adds	r4, r2, r1
 8022aea:	42a3      	cmp	r3, r4
 8022aec:	6011      	str	r1, [r2, #0]
 8022aee:	d1e0      	bne.n	8022ab2 <_free_r+0x26>
 8022af0:	681c      	ldr	r4, [r3, #0]
 8022af2:	685b      	ldr	r3, [r3, #4]
 8022af4:	6053      	str	r3, [r2, #4]
 8022af6:	4421      	add	r1, r4
 8022af8:	6011      	str	r1, [r2, #0]
 8022afa:	e7da      	b.n	8022ab2 <_free_r+0x26>
 8022afc:	d902      	bls.n	8022b04 <_free_r+0x78>
 8022afe:	230c      	movs	r3, #12
 8022b00:	6003      	str	r3, [r0, #0]
 8022b02:	e7d6      	b.n	8022ab2 <_free_r+0x26>
 8022b04:	6825      	ldr	r5, [r4, #0]
 8022b06:	1961      	adds	r1, r4, r5
 8022b08:	428b      	cmp	r3, r1
 8022b0a:	bf04      	itt	eq
 8022b0c:	6819      	ldreq	r1, [r3, #0]
 8022b0e:	685b      	ldreq	r3, [r3, #4]
 8022b10:	6063      	str	r3, [r4, #4]
 8022b12:	bf04      	itt	eq
 8022b14:	1949      	addeq	r1, r1, r5
 8022b16:	6021      	streq	r1, [r4, #0]
 8022b18:	6054      	str	r4, [r2, #4]
 8022b1a:	e7ca      	b.n	8022ab2 <_free_r+0x26>
 8022b1c:	b003      	add	sp, #12
 8022b1e:	bd30      	pop	{r4, r5, pc}
 8022b20:	20002748 	.word	0x20002748

08022b24 <sbrk_aligned>:
 8022b24:	b570      	push	{r4, r5, r6, lr}
 8022b26:	4e0e      	ldr	r6, [pc, #56]	; (8022b60 <sbrk_aligned+0x3c>)
 8022b28:	460c      	mov	r4, r1
 8022b2a:	6831      	ldr	r1, [r6, #0]
 8022b2c:	4605      	mov	r5, r0
 8022b2e:	b911      	cbnz	r1, 8022b36 <sbrk_aligned+0x12>
 8022b30:	f000 fe50 	bl	80237d4 <_sbrk_r>
 8022b34:	6030      	str	r0, [r6, #0]
 8022b36:	4621      	mov	r1, r4
 8022b38:	4628      	mov	r0, r5
 8022b3a:	f000 fe4b 	bl	80237d4 <_sbrk_r>
 8022b3e:	1c43      	adds	r3, r0, #1
 8022b40:	d00a      	beq.n	8022b58 <sbrk_aligned+0x34>
 8022b42:	1cc4      	adds	r4, r0, #3
 8022b44:	f024 0403 	bic.w	r4, r4, #3
 8022b48:	42a0      	cmp	r0, r4
 8022b4a:	d007      	beq.n	8022b5c <sbrk_aligned+0x38>
 8022b4c:	1a21      	subs	r1, r4, r0
 8022b4e:	4628      	mov	r0, r5
 8022b50:	f000 fe40 	bl	80237d4 <_sbrk_r>
 8022b54:	3001      	adds	r0, #1
 8022b56:	d101      	bne.n	8022b5c <sbrk_aligned+0x38>
 8022b58:	f04f 34ff 	mov.w	r4, #4294967295
 8022b5c:	4620      	mov	r0, r4
 8022b5e:	bd70      	pop	{r4, r5, r6, pc}
 8022b60:	2000274c 	.word	0x2000274c

08022b64 <_malloc_r>:
 8022b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022b68:	1ccd      	adds	r5, r1, #3
 8022b6a:	f025 0503 	bic.w	r5, r5, #3
 8022b6e:	3508      	adds	r5, #8
 8022b70:	2d0c      	cmp	r5, #12
 8022b72:	bf38      	it	cc
 8022b74:	250c      	movcc	r5, #12
 8022b76:	2d00      	cmp	r5, #0
 8022b78:	4607      	mov	r7, r0
 8022b7a:	db01      	blt.n	8022b80 <_malloc_r+0x1c>
 8022b7c:	42a9      	cmp	r1, r5
 8022b7e:	d905      	bls.n	8022b8c <_malloc_r+0x28>
 8022b80:	230c      	movs	r3, #12
 8022b82:	603b      	str	r3, [r7, #0]
 8022b84:	2600      	movs	r6, #0
 8022b86:	4630      	mov	r0, r6
 8022b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022b8c:	4e2e      	ldr	r6, [pc, #184]	; (8022c48 <_malloc_r+0xe4>)
 8022b8e:	f003 f9b7 	bl	8025f00 <__malloc_lock>
 8022b92:	6833      	ldr	r3, [r6, #0]
 8022b94:	461c      	mov	r4, r3
 8022b96:	bb34      	cbnz	r4, 8022be6 <_malloc_r+0x82>
 8022b98:	4629      	mov	r1, r5
 8022b9a:	4638      	mov	r0, r7
 8022b9c:	f7ff ffc2 	bl	8022b24 <sbrk_aligned>
 8022ba0:	1c43      	adds	r3, r0, #1
 8022ba2:	4604      	mov	r4, r0
 8022ba4:	d14d      	bne.n	8022c42 <_malloc_r+0xde>
 8022ba6:	6834      	ldr	r4, [r6, #0]
 8022ba8:	4626      	mov	r6, r4
 8022baa:	2e00      	cmp	r6, #0
 8022bac:	d140      	bne.n	8022c30 <_malloc_r+0xcc>
 8022bae:	6823      	ldr	r3, [r4, #0]
 8022bb0:	4631      	mov	r1, r6
 8022bb2:	4638      	mov	r0, r7
 8022bb4:	eb04 0803 	add.w	r8, r4, r3
 8022bb8:	f000 fe0c 	bl	80237d4 <_sbrk_r>
 8022bbc:	4580      	cmp	r8, r0
 8022bbe:	d13a      	bne.n	8022c36 <_malloc_r+0xd2>
 8022bc0:	6821      	ldr	r1, [r4, #0]
 8022bc2:	3503      	adds	r5, #3
 8022bc4:	1a6d      	subs	r5, r5, r1
 8022bc6:	f025 0503 	bic.w	r5, r5, #3
 8022bca:	3508      	adds	r5, #8
 8022bcc:	2d0c      	cmp	r5, #12
 8022bce:	bf38      	it	cc
 8022bd0:	250c      	movcc	r5, #12
 8022bd2:	4629      	mov	r1, r5
 8022bd4:	4638      	mov	r0, r7
 8022bd6:	f7ff ffa5 	bl	8022b24 <sbrk_aligned>
 8022bda:	3001      	adds	r0, #1
 8022bdc:	d02b      	beq.n	8022c36 <_malloc_r+0xd2>
 8022bde:	6823      	ldr	r3, [r4, #0]
 8022be0:	442b      	add	r3, r5
 8022be2:	6023      	str	r3, [r4, #0]
 8022be4:	e00e      	b.n	8022c04 <_malloc_r+0xa0>
 8022be6:	6822      	ldr	r2, [r4, #0]
 8022be8:	1b52      	subs	r2, r2, r5
 8022bea:	d41e      	bmi.n	8022c2a <_malloc_r+0xc6>
 8022bec:	2a0b      	cmp	r2, #11
 8022bee:	d916      	bls.n	8022c1e <_malloc_r+0xba>
 8022bf0:	1961      	adds	r1, r4, r5
 8022bf2:	42a3      	cmp	r3, r4
 8022bf4:	6025      	str	r5, [r4, #0]
 8022bf6:	bf18      	it	ne
 8022bf8:	6059      	strne	r1, [r3, #4]
 8022bfa:	6863      	ldr	r3, [r4, #4]
 8022bfc:	bf08      	it	eq
 8022bfe:	6031      	streq	r1, [r6, #0]
 8022c00:	5162      	str	r2, [r4, r5]
 8022c02:	604b      	str	r3, [r1, #4]
 8022c04:	4638      	mov	r0, r7
 8022c06:	f104 060b 	add.w	r6, r4, #11
 8022c0a:	f003 f97f 	bl	8025f0c <__malloc_unlock>
 8022c0e:	f026 0607 	bic.w	r6, r6, #7
 8022c12:	1d23      	adds	r3, r4, #4
 8022c14:	1af2      	subs	r2, r6, r3
 8022c16:	d0b6      	beq.n	8022b86 <_malloc_r+0x22>
 8022c18:	1b9b      	subs	r3, r3, r6
 8022c1a:	50a3      	str	r3, [r4, r2]
 8022c1c:	e7b3      	b.n	8022b86 <_malloc_r+0x22>
 8022c1e:	6862      	ldr	r2, [r4, #4]
 8022c20:	42a3      	cmp	r3, r4
 8022c22:	bf0c      	ite	eq
 8022c24:	6032      	streq	r2, [r6, #0]
 8022c26:	605a      	strne	r2, [r3, #4]
 8022c28:	e7ec      	b.n	8022c04 <_malloc_r+0xa0>
 8022c2a:	4623      	mov	r3, r4
 8022c2c:	6864      	ldr	r4, [r4, #4]
 8022c2e:	e7b2      	b.n	8022b96 <_malloc_r+0x32>
 8022c30:	4634      	mov	r4, r6
 8022c32:	6876      	ldr	r6, [r6, #4]
 8022c34:	e7b9      	b.n	8022baa <_malloc_r+0x46>
 8022c36:	230c      	movs	r3, #12
 8022c38:	603b      	str	r3, [r7, #0]
 8022c3a:	4638      	mov	r0, r7
 8022c3c:	f003 f966 	bl	8025f0c <__malloc_unlock>
 8022c40:	e7a1      	b.n	8022b86 <_malloc_r+0x22>
 8022c42:	6025      	str	r5, [r4, #0]
 8022c44:	e7de      	b.n	8022c04 <_malloc_r+0xa0>
 8022c46:	bf00      	nop
 8022c48:	20002748 	.word	0x20002748

08022c4c <__sfputc_r>:
 8022c4c:	6893      	ldr	r3, [r2, #8]
 8022c4e:	3b01      	subs	r3, #1
 8022c50:	2b00      	cmp	r3, #0
 8022c52:	b410      	push	{r4}
 8022c54:	6093      	str	r3, [r2, #8]
 8022c56:	da08      	bge.n	8022c6a <__sfputc_r+0x1e>
 8022c58:	6994      	ldr	r4, [r2, #24]
 8022c5a:	42a3      	cmp	r3, r4
 8022c5c:	db01      	blt.n	8022c62 <__sfputc_r+0x16>
 8022c5e:	290a      	cmp	r1, #10
 8022c60:	d103      	bne.n	8022c6a <__sfputc_r+0x1e>
 8022c62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022c66:	f001 bc6d 	b.w	8024544 <__swbuf_r>
 8022c6a:	6813      	ldr	r3, [r2, #0]
 8022c6c:	1c58      	adds	r0, r3, #1
 8022c6e:	6010      	str	r0, [r2, #0]
 8022c70:	7019      	strb	r1, [r3, #0]
 8022c72:	4608      	mov	r0, r1
 8022c74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022c78:	4770      	bx	lr

08022c7a <__sfputs_r>:
 8022c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022c7c:	4606      	mov	r6, r0
 8022c7e:	460f      	mov	r7, r1
 8022c80:	4614      	mov	r4, r2
 8022c82:	18d5      	adds	r5, r2, r3
 8022c84:	42ac      	cmp	r4, r5
 8022c86:	d101      	bne.n	8022c8c <__sfputs_r+0x12>
 8022c88:	2000      	movs	r0, #0
 8022c8a:	e007      	b.n	8022c9c <__sfputs_r+0x22>
 8022c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022c90:	463a      	mov	r2, r7
 8022c92:	4630      	mov	r0, r6
 8022c94:	f7ff ffda 	bl	8022c4c <__sfputc_r>
 8022c98:	1c43      	adds	r3, r0, #1
 8022c9a:	d1f3      	bne.n	8022c84 <__sfputs_r+0xa>
 8022c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022ca0 <_vfiprintf_r>:
 8022ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ca4:	460d      	mov	r5, r1
 8022ca6:	b09d      	sub	sp, #116	; 0x74
 8022ca8:	4614      	mov	r4, r2
 8022caa:	4698      	mov	r8, r3
 8022cac:	4606      	mov	r6, r0
 8022cae:	b118      	cbz	r0, 8022cb8 <_vfiprintf_r+0x18>
 8022cb0:	6983      	ldr	r3, [r0, #24]
 8022cb2:	b90b      	cbnz	r3, 8022cb8 <_vfiprintf_r+0x18>
 8022cb4:	f002 fc9c 	bl	80255f0 <__sinit>
 8022cb8:	4b89      	ldr	r3, [pc, #548]	; (8022ee0 <_vfiprintf_r+0x240>)
 8022cba:	429d      	cmp	r5, r3
 8022cbc:	d11b      	bne.n	8022cf6 <_vfiprintf_r+0x56>
 8022cbe:	6875      	ldr	r5, [r6, #4]
 8022cc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022cc2:	07d9      	lsls	r1, r3, #31
 8022cc4:	d405      	bmi.n	8022cd2 <_vfiprintf_r+0x32>
 8022cc6:	89ab      	ldrh	r3, [r5, #12]
 8022cc8:	059a      	lsls	r2, r3, #22
 8022cca:	d402      	bmi.n	8022cd2 <_vfiprintf_r+0x32>
 8022ccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022cce:	f7ff fe84 	bl	80229da <__retarget_lock_acquire_recursive>
 8022cd2:	89ab      	ldrh	r3, [r5, #12]
 8022cd4:	071b      	lsls	r3, r3, #28
 8022cd6:	d501      	bpl.n	8022cdc <_vfiprintf_r+0x3c>
 8022cd8:	692b      	ldr	r3, [r5, #16]
 8022cda:	b9eb      	cbnz	r3, 8022d18 <_vfiprintf_r+0x78>
 8022cdc:	4629      	mov	r1, r5
 8022cde:	4630      	mov	r0, r6
 8022ce0:	f001 fc82 	bl	80245e8 <__swsetup_r>
 8022ce4:	b1c0      	cbz	r0, 8022d18 <_vfiprintf_r+0x78>
 8022ce6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022ce8:	07dc      	lsls	r4, r3, #31
 8022cea:	d50e      	bpl.n	8022d0a <_vfiprintf_r+0x6a>
 8022cec:	f04f 30ff 	mov.w	r0, #4294967295
 8022cf0:	b01d      	add	sp, #116	; 0x74
 8022cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022cf6:	4b7b      	ldr	r3, [pc, #492]	; (8022ee4 <_vfiprintf_r+0x244>)
 8022cf8:	429d      	cmp	r5, r3
 8022cfa:	d101      	bne.n	8022d00 <_vfiprintf_r+0x60>
 8022cfc:	68b5      	ldr	r5, [r6, #8]
 8022cfe:	e7df      	b.n	8022cc0 <_vfiprintf_r+0x20>
 8022d00:	4b79      	ldr	r3, [pc, #484]	; (8022ee8 <_vfiprintf_r+0x248>)
 8022d02:	429d      	cmp	r5, r3
 8022d04:	bf08      	it	eq
 8022d06:	68f5      	ldreq	r5, [r6, #12]
 8022d08:	e7da      	b.n	8022cc0 <_vfiprintf_r+0x20>
 8022d0a:	89ab      	ldrh	r3, [r5, #12]
 8022d0c:	0598      	lsls	r0, r3, #22
 8022d0e:	d4ed      	bmi.n	8022cec <_vfiprintf_r+0x4c>
 8022d10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022d12:	f7ff fe63 	bl	80229dc <__retarget_lock_release_recursive>
 8022d16:	e7e9      	b.n	8022cec <_vfiprintf_r+0x4c>
 8022d18:	2300      	movs	r3, #0
 8022d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8022d1c:	2320      	movs	r3, #32
 8022d1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022d22:	f8cd 800c 	str.w	r8, [sp, #12]
 8022d26:	2330      	movs	r3, #48	; 0x30
 8022d28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022eec <_vfiprintf_r+0x24c>
 8022d2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022d30:	f04f 0901 	mov.w	r9, #1
 8022d34:	4623      	mov	r3, r4
 8022d36:	469a      	mov	sl, r3
 8022d38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022d3c:	b10a      	cbz	r2, 8022d42 <_vfiprintf_r+0xa2>
 8022d3e:	2a25      	cmp	r2, #37	; 0x25
 8022d40:	d1f9      	bne.n	8022d36 <_vfiprintf_r+0x96>
 8022d42:	ebba 0b04 	subs.w	fp, sl, r4
 8022d46:	d00b      	beq.n	8022d60 <_vfiprintf_r+0xc0>
 8022d48:	465b      	mov	r3, fp
 8022d4a:	4622      	mov	r2, r4
 8022d4c:	4629      	mov	r1, r5
 8022d4e:	4630      	mov	r0, r6
 8022d50:	f7ff ff93 	bl	8022c7a <__sfputs_r>
 8022d54:	3001      	adds	r0, #1
 8022d56:	f000 80aa 	beq.w	8022eae <_vfiprintf_r+0x20e>
 8022d5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022d5c:	445a      	add	r2, fp
 8022d5e:	9209      	str	r2, [sp, #36]	; 0x24
 8022d60:	f89a 3000 	ldrb.w	r3, [sl]
 8022d64:	2b00      	cmp	r3, #0
 8022d66:	f000 80a2 	beq.w	8022eae <_vfiprintf_r+0x20e>
 8022d6a:	2300      	movs	r3, #0
 8022d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8022d70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022d74:	f10a 0a01 	add.w	sl, sl, #1
 8022d78:	9304      	str	r3, [sp, #16]
 8022d7a:	9307      	str	r3, [sp, #28]
 8022d7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022d80:	931a      	str	r3, [sp, #104]	; 0x68
 8022d82:	4654      	mov	r4, sl
 8022d84:	2205      	movs	r2, #5
 8022d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022d8a:	4858      	ldr	r0, [pc, #352]	; (8022eec <_vfiprintf_r+0x24c>)
 8022d8c:	f7dd fa20 	bl	80001d0 <memchr>
 8022d90:	9a04      	ldr	r2, [sp, #16]
 8022d92:	b9d8      	cbnz	r0, 8022dcc <_vfiprintf_r+0x12c>
 8022d94:	06d1      	lsls	r1, r2, #27
 8022d96:	bf44      	itt	mi
 8022d98:	2320      	movmi	r3, #32
 8022d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022d9e:	0713      	lsls	r3, r2, #28
 8022da0:	bf44      	itt	mi
 8022da2:	232b      	movmi	r3, #43	; 0x2b
 8022da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022da8:	f89a 3000 	ldrb.w	r3, [sl]
 8022dac:	2b2a      	cmp	r3, #42	; 0x2a
 8022dae:	d015      	beq.n	8022ddc <_vfiprintf_r+0x13c>
 8022db0:	9a07      	ldr	r2, [sp, #28]
 8022db2:	4654      	mov	r4, sl
 8022db4:	2000      	movs	r0, #0
 8022db6:	f04f 0c0a 	mov.w	ip, #10
 8022dba:	4621      	mov	r1, r4
 8022dbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022dc0:	3b30      	subs	r3, #48	; 0x30
 8022dc2:	2b09      	cmp	r3, #9
 8022dc4:	d94e      	bls.n	8022e64 <_vfiprintf_r+0x1c4>
 8022dc6:	b1b0      	cbz	r0, 8022df6 <_vfiprintf_r+0x156>
 8022dc8:	9207      	str	r2, [sp, #28]
 8022dca:	e014      	b.n	8022df6 <_vfiprintf_r+0x156>
 8022dcc:	eba0 0308 	sub.w	r3, r0, r8
 8022dd0:	fa09 f303 	lsl.w	r3, r9, r3
 8022dd4:	4313      	orrs	r3, r2
 8022dd6:	9304      	str	r3, [sp, #16]
 8022dd8:	46a2      	mov	sl, r4
 8022dda:	e7d2      	b.n	8022d82 <_vfiprintf_r+0xe2>
 8022ddc:	9b03      	ldr	r3, [sp, #12]
 8022dde:	1d19      	adds	r1, r3, #4
 8022de0:	681b      	ldr	r3, [r3, #0]
 8022de2:	9103      	str	r1, [sp, #12]
 8022de4:	2b00      	cmp	r3, #0
 8022de6:	bfbb      	ittet	lt
 8022de8:	425b      	neglt	r3, r3
 8022dea:	f042 0202 	orrlt.w	r2, r2, #2
 8022dee:	9307      	strge	r3, [sp, #28]
 8022df0:	9307      	strlt	r3, [sp, #28]
 8022df2:	bfb8      	it	lt
 8022df4:	9204      	strlt	r2, [sp, #16]
 8022df6:	7823      	ldrb	r3, [r4, #0]
 8022df8:	2b2e      	cmp	r3, #46	; 0x2e
 8022dfa:	d10c      	bne.n	8022e16 <_vfiprintf_r+0x176>
 8022dfc:	7863      	ldrb	r3, [r4, #1]
 8022dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8022e00:	d135      	bne.n	8022e6e <_vfiprintf_r+0x1ce>
 8022e02:	9b03      	ldr	r3, [sp, #12]
 8022e04:	1d1a      	adds	r2, r3, #4
 8022e06:	681b      	ldr	r3, [r3, #0]
 8022e08:	9203      	str	r2, [sp, #12]
 8022e0a:	2b00      	cmp	r3, #0
 8022e0c:	bfb8      	it	lt
 8022e0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8022e12:	3402      	adds	r4, #2
 8022e14:	9305      	str	r3, [sp, #20]
 8022e16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022efc <_vfiprintf_r+0x25c>
 8022e1a:	7821      	ldrb	r1, [r4, #0]
 8022e1c:	2203      	movs	r2, #3
 8022e1e:	4650      	mov	r0, sl
 8022e20:	f7dd f9d6 	bl	80001d0 <memchr>
 8022e24:	b140      	cbz	r0, 8022e38 <_vfiprintf_r+0x198>
 8022e26:	2340      	movs	r3, #64	; 0x40
 8022e28:	eba0 000a 	sub.w	r0, r0, sl
 8022e2c:	fa03 f000 	lsl.w	r0, r3, r0
 8022e30:	9b04      	ldr	r3, [sp, #16]
 8022e32:	4303      	orrs	r3, r0
 8022e34:	3401      	adds	r4, #1
 8022e36:	9304      	str	r3, [sp, #16]
 8022e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022e3c:	482c      	ldr	r0, [pc, #176]	; (8022ef0 <_vfiprintf_r+0x250>)
 8022e3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022e42:	2206      	movs	r2, #6
 8022e44:	f7dd f9c4 	bl	80001d0 <memchr>
 8022e48:	2800      	cmp	r0, #0
 8022e4a:	d03f      	beq.n	8022ecc <_vfiprintf_r+0x22c>
 8022e4c:	4b29      	ldr	r3, [pc, #164]	; (8022ef4 <_vfiprintf_r+0x254>)
 8022e4e:	bb1b      	cbnz	r3, 8022e98 <_vfiprintf_r+0x1f8>
 8022e50:	9b03      	ldr	r3, [sp, #12]
 8022e52:	3307      	adds	r3, #7
 8022e54:	f023 0307 	bic.w	r3, r3, #7
 8022e58:	3308      	adds	r3, #8
 8022e5a:	9303      	str	r3, [sp, #12]
 8022e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e5e:	443b      	add	r3, r7
 8022e60:	9309      	str	r3, [sp, #36]	; 0x24
 8022e62:	e767      	b.n	8022d34 <_vfiprintf_r+0x94>
 8022e64:	fb0c 3202 	mla	r2, ip, r2, r3
 8022e68:	460c      	mov	r4, r1
 8022e6a:	2001      	movs	r0, #1
 8022e6c:	e7a5      	b.n	8022dba <_vfiprintf_r+0x11a>
 8022e6e:	2300      	movs	r3, #0
 8022e70:	3401      	adds	r4, #1
 8022e72:	9305      	str	r3, [sp, #20]
 8022e74:	4619      	mov	r1, r3
 8022e76:	f04f 0c0a 	mov.w	ip, #10
 8022e7a:	4620      	mov	r0, r4
 8022e7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022e80:	3a30      	subs	r2, #48	; 0x30
 8022e82:	2a09      	cmp	r2, #9
 8022e84:	d903      	bls.n	8022e8e <_vfiprintf_r+0x1ee>
 8022e86:	2b00      	cmp	r3, #0
 8022e88:	d0c5      	beq.n	8022e16 <_vfiprintf_r+0x176>
 8022e8a:	9105      	str	r1, [sp, #20]
 8022e8c:	e7c3      	b.n	8022e16 <_vfiprintf_r+0x176>
 8022e8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8022e92:	4604      	mov	r4, r0
 8022e94:	2301      	movs	r3, #1
 8022e96:	e7f0      	b.n	8022e7a <_vfiprintf_r+0x1da>
 8022e98:	ab03      	add	r3, sp, #12
 8022e9a:	9300      	str	r3, [sp, #0]
 8022e9c:	462a      	mov	r2, r5
 8022e9e:	4b16      	ldr	r3, [pc, #88]	; (8022ef8 <_vfiprintf_r+0x258>)
 8022ea0:	a904      	add	r1, sp, #16
 8022ea2:	4630      	mov	r0, r6
 8022ea4:	f000 f8cc 	bl	8023040 <_printf_float>
 8022ea8:	4607      	mov	r7, r0
 8022eaa:	1c78      	adds	r0, r7, #1
 8022eac:	d1d6      	bne.n	8022e5c <_vfiprintf_r+0x1bc>
 8022eae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022eb0:	07d9      	lsls	r1, r3, #31
 8022eb2:	d405      	bmi.n	8022ec0 <_vfiprintf_r+0x220>
 8022eb4:	89ab      	ldrh	r3, [r5, #12]
 8022eb6:	059a      	lsls	r2, r3, #22
 8022eb8:	d402      	bmi.n	8022ec0 <_vfiprintf_r+0x220>
 8022eba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022ebc:	f7ff fd8e 	bl	80229dc <__retarget_lock_release_recursive>
 8022ec0:	89ab      	ldrh	r3, [r5, #12]
 8022ec2:	065b      	lsls	r3, r3, #25
 8022ec4:	f53f af12 	bmi.w	8022cec <_vfiprintf_r+0x4c>
 8022ec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022eca:	e711      	b.n	8022cf0 <_vfiprintf_r+0x50>
 8022ecc:	ab03      	add	r3, sp, #12
 8022ece:	9300      	str	r3, [sp, #0]
 8022ed0:	462a      	mov	r2, r5
 8022ed2:	4b09      	ldr	r3, [pc, #36]	; (8022ef8 <_vfiprintf_r+0x258>)
 8022ed4:	a904      	add	r1, sp, #16
 8022ed6:	4630      	mov	r0, r6
 8022ed8:	f000 fb56 	bl	8023588 <_printf_i>
 8022edc:	e7e4      	b.n	8022ea8 <_vfiprintf_r+0x208>
 8022ede:	bf00      	nop
 8022ee0:	080295ac 	.word	0x080295ac
 8022ee4:	080295cc 	.word	0x080295cc
 8022ee8:	0802958c 	.word	0x0802958c
 8022eec:	08029360 	.word	0x08029360
 8022ef0:	0802936a 	.word	0x0802936a
 8022ef4:	08023041 	.word	0x08023041
 8022ef8:	08022c7b 	.word	0x08022c7b
 8022efc:	08029366 	.word	0x08029366

08022f00 <__cvt>:
 8022f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022f04:	ec55 4b10 	vmov	r4, r5, d0
 8022f08:	2d00      	cmp	r5, #0
 8022f0a:	460e      	mov	r6, r1
 8022f0c:	4619      	mov	r1, r3
 8022f0e:	462b      	mov	r3, r5
 8022f10:	bfbb      	ittet	lt
 8022f12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8022f16:	461d      	movlt	r5, r3
 8022f18:	2300      	movge	r3, #0
 8022f1a:	232d      	movlt	r3, #45	; 0x2d
 8022f1c:	700b      	strb	r3, [r1, #0]
 8022f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022f20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8022f24:	4691      	mov	r9, r2
 8022f26:	f023 0820 	bic.w	r8, r3, #32
 8022f2a:	bfbc      	itt	lt
 8022f2c:	4622      	movlt	r2, r4
 8022f2e:	4614      	movlt	r4, r2
 8022f30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8022f34:	d005      	beq.n	8022f42 <__cvt+0x42>
 8022f36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8022f3a:	d100      	bne.n	8022f3e <__cvt+0x3e>
 8022f3c:	3601      	adds	r6, #1
 8022f3e:	2102      	movs	r1, #2
 8022f40:	e000      	b.n	8022f44 <__cvt+0x44>
 8022f42:	2103      	movs	r1, #3
 8022f44:	ab03      	add	r3, sp, #12
 8022f46:	9301      	str	r3, [sp, #4]
 8022f48:	ab02      	add	r3, sp, #8
 8022f4a:	9300      	str	r3, [sp, #0]
 8022f4c:	ec45 4b10 	vmov	d0, r4, r5
 8022f50:	4653      	mov	r3, sl
 8022f52:	4632      	mov	r2, r6
 8022f54:	f001 fc44 	bl	80247e0 <_dtoa_r>
 8022f58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8022f5c:	4607      	mov	r7, r0
 8022f5e:	d102      	bne.n	8022f66 <__cvt+0x66>
 8022f60:	f019 0f01 	tst.w	r9, #1
 8022f64:	d022      	beq.n	8022fac <__cvt+0xac>
 8022f66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8022f6a:	eb07 0906 	add.w	r9, r7, r6
 8022f6e:	d110      	bne.n	8022f92 <__cvt+0x92>
 8022f70:	783b      	ldrb	r3, [r7, #0]
 8022f72:	2b30      	cmp	r3, #48	; 0x30
 8022f74:	d10a      	bne.n	8022f8c <__cvt+0x8c>
 8022f76:	2200      	movs	r2, #0
 8022f78:	2300      	movs	r3, #0
 8022f7a:	4620      	mov	r0, r4
 8022f7c:	4629      	mov	r1, r5
 8022f7e:	f7dd fdad 	bl	8000adc <__aeabi_dcmpeq>
 8022f82:	b918      	cbnz	r0, 8022f8c <__cvt+0x8c>
 8022f84:	f1c6 0601 	rsb	r6, r6, #1
 8022f88:	f8ca 6000 	str.w	r6, [sl]
 8022f8c:	f8da 3000 	ldr.w	r3, [sl]
 8022f90:	4499      	add	r9, r3
 8022f92:	2200      	movs	r2, #0
 8022f94:	2300      	movs	r3, #0
 8022f96:	4620      	mov	r0, r4
 8022f98:	4629      	mov	r1, r5
 8022f9a:	f7dd fd9f 	bl	8000adc <__aeabi_dcmpeq>
 8022f9e:	b108      	cbz	r0, 8022fa4 <__cvt+0xa4>
 8022fa0:	f8cd 900c 	str.w	r9, [sp, #12]
 8022fa4:	2230      	movs	r2, #48	; 0x30
 8022fa6:	9b03      	ldr	r3, [sp, #12]
 8022fa8:	454b      	cmp	r3, r9
 8022faa:	d307      	bcc.n	8022fbc <__cvt+0xbc>
 8022fac:	9b03      	ldr	r3, [sp, #12]
 8022fae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022fb0:	1bdb      	subs	r3, r3, r7
 8022fb2:	4638      	mov	r0, r7
 8022fb4:	6013      	str	r3, [r2, #0]
 8022fb6:	b004      	add	sp, #16
 8022fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022fbc:	1c59      	adds	r1, r3, #1
 8022fbe:	9103      	str	r1, [sp, #12]
 8022fc0:	701a      	strb	r2, [r3, #0]
 8022fc2:	e7f0      	b.n	8022fa6 <__cvt+0xa6>

08022fc4 <__exponent>:
 8022fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022fc6:	4603      	mov	r3, r0
 8022fc8:	2900      	cmp	r1, #0
 8022fca:	bfb8      	it	lt
 8022fcc:	4249      	neglt	r1, r1
 8022fce:	f803 2b02 	strb.w	r2, [r3], #2
 8022fd2:	bfb4      	ite	lt
 8022fd4:	222d      	movlt	r2, #45	; 0x2d
 8022fd6:	222b      	movge	r2, #43	; 0x2b
 8022fd8:	2909      	cmp	r1, #9
 8022fda:	7042      	strb	r2, [r0, #1]
 8022fdc:	dd2a      	ble.n	8023034 <__exponent+0x70>
 8022fde:	f10d 0407 	add.w	r4, sp, #7
 8022fe2:	46a4      	mov	ip, r4
 8022fe4:	270a      	movs	r7, #10
 8022fe6:	46a6      	mov	lr, r4
 8022fe8:	460a      	mov	r2, r1
 8022fea:	fb91 f6f7 	sdiv	r6, r1, r7
 8022fee:	fb07 1516 	mls	r5, r7, r6, r1
 8022ff2:	3530      	adds	r5, #48	; 0x30
 8022ff4:	2a63      	cmp	r2, #99	; 0x63
 8022ff6:	f104 34ff 	add.w	r4, r4, #4294967295
 8022ffa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8022ffe:	4631      	mov	r1, r6
 8023000:	dcf1      	bgt.n	8022fe6 <__exponent+0x22>
 8023002:	3130      	adds	r1, #48	; 0x30
 8023004:	f1ae 0502 	sub.w	r5, lr, #2
 8023008:	f804 1c01 	strb.w	r1, [r4, #-1]
 802300c:	1c44      	adds	r4, r0, #1
 802300e:	4629      	mov	r1, r5
 8023010:	4561      	cmp	r1, ip
 8023012:	d30a      	bcc.n	802302a <__exponent+0x66>
 8023014:	f10d 0209 	add.w	r2, sp, #9
 8023018:	eba2 020e 	sub.w	r2, r2, lr
 802301c:	4565      	cmp	r5, ip
 802301e:	bf88      	it	hi
 8023020:	2200      	movhi	r2, #0
 8023022:	4413      	add	r3, r2
 8023024:	1a18      	subs	r0, r3, r0
 8023026:	b003      	add	sp, #12
 8023028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802302a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802302e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8023032:	e7ed      	b.n	8023010 <__exponent+0x4c>
 8023034:	2330      	movs	r3, #48	; 0x30
 8023036:	3130      	adds	r1, #48	; 0x30
 8023038:	7083      	strb	r3, [r0, #2]
 802303a:	70c1      	strb	r1, [r0, #3]
 802303c:	1d03      	adds	r3, r0, #4
 802303e:	e7f1      	b.n	8023024 <__exponent+0x60>

08023040 <_printf_float>:
 8023040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023044:	ed2d 8b02 	vpush	{d8}
 8023048:	b08d      	sub	sp, #52	; 0x34
 802304a:	460c      	mov	r4, r1
 802304c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8023050:	4616      	mov	r6, r2
 8023052:	461f      	mov	r7, r3
 8023054:	4605      	mov	r5, r0
 8023056:	f002 fed7 	bl	8025e08 <_localeconv_r>
 802305a:	f8d0 a000 	ldr.w	sl, [r0]
 802305e:	4650      	mov	r0, sl
 8023060:	f7dd f910 	bl	8000284 <strlen>
 8023064:	2300      	movs	r3, #0
 8023066:	930a      	str	r3, [sp, #40]	; 0x28
 8023068:	6823      	ldr	r3, [r4, #0]
 802306a:	9305      	str	r3, [sp, #20]
 802306c:	f8d8 3000 	ldr.w	r3, [r8]
 8023070:	f894 b018 	ldrb.w	fp, [r4, #24]
 8023074:	3307      	adds	r3, #7
 8023076:	f023 0307 	bic.w	r3, r3, #7
 802307a:	f103 0208 	add.w	r2, r3, #8
 802307e:	f8c8 2000 	str.w	r2, [r8]
 8023082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023086:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 802308a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 802308e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8023092:	9307      	str	r3, [sp, #28]
 8023094:	f8cd 8018 	str.w	r8, [sp, #24]
 8023098:	ee08 0a10 	vmov	s16, r0
 802309c:	4b9f      	ldr	r3, [pc, #636]	; (802331c <_printf_float+0x2dc>)
 802309e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80230a2:	f04f 32ff 	mov.w	r2, #4294967295
 80230a6:	f7dd fd4b 	bl	8000b40 <__aeabi_dcmpun>
 80230aa:	bb88      	cbnz	r0, 8023110 <_printf_float+0xd0>
 80230ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80230b0:	4b9a      	ldr	r3, [pc, #616]	; (802331c <_printf_float+0x2dc>)
 80230b2:	f04f 32ff 	mov.w	r2, #4294967295
 80230b6:	f7dd fd25 	bl	8000b04 <__aeabi_dcmple>
 80230ba:	bb48      	cbnz	r0, 8023110 <_printf_float+0xd0>
 80230bc:	2200      	movs	r2, #0
 80230be:	2300      	movs	r3, #0
 80230c0:	4640      	mov	r0, r8
 80230c2:	4649      	mov	r1, r9
 80230c4:	f7dd fd14 	bl	8000af0 <__aeabi_dcmplt>
 80230c8:	b110      	cbz	r0, 80230d0 <_printf_float+0x90>
 80230ca:	232d      	movs	r3, #45	; 0x2d
 80230cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80230d0:	4b93      	ldr	r3, [pc, #588]	; (8023320 <_printf_float+0x2e0>)
 80230d2:	4894      	ldr	r0, [pc, #592]	; (8023324 <_printf_float+0x2e4>)
 80230d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80230d8:	bf94      	ite	ls
 80230da:	4698      	movls	r8, r3
 80230dc:	4680      	movhi	r8, r0
 80230de:	2303      	movs	r3, #3
 80230e0:	6123      	str	r3, [r4, #16]
 80230e2:	9b05      	ldr	r3, [sp, #20]
 80230e4:	f023 0204 	bic.w	r2, r3, #4
 80230e8:	6022      	str	r2, [r4, #0]
 80230ea:	f04f 0900 	mov.w	r9, #0
 80230ee:	9700      	str	r7, [sp, #0]
 80230f0:	4633      	mov	r3, r6
 80230f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80230f4:	4621      	mov	r1, r4
 80230f6:	4628      	mov	r0, r5
 80230f8:	f000 f9d8 	bl	80234ac <_printf_common>
 80230fc:	3001      	adds	r0, #1
 80230fe:	f040 8090 	bne.w	8023222 <_printf_float+0x1e2>
 8023102:	f04f 30ff 	mov.w	r0, #4294967295
 8023106:	b00d      	add	sp, #52	; 0x34
 8023108:	ecbd 8b02 	vpop	{d8}
 802310c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023110:	4642      	mov	r2, r8
 8023112:	464b      	mov	r3, r9
 8023114:	4640      	mov	r0, r8
 8023116:	4649      	mov	r1, r9
 8023118:	f7dd fd12 	bl	8000b40 <__aeabi_dcmpun>
 802311c:	b140      	cbz	r0, 8023130 <_printf_float+0xf0>
 802311e:	464b      	mov	r3, r9
 8023120:	2b00      	cmp	r3, #0
 8023122:	bfbc      	itt	lt
 8023124:	232d      	movlt	r3, #45	; 0x2d
 8023126:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802312a:	487f      	ldr	r0, [pc, #508]	; (8023328 <_printf_float+0x2e8>)
 802312c:	4b7f      	ldr	r3, [pc, #508]	; (802332c <_printf_float+0x2ec>)
 802312e:	e7d1      	b.n	80230d4 <_printf_float+0x94>
 8023130:	6863      	ldr	r3, [r4, #4]
 8023132:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8023136:	9206      	str	r2, [sp, #24]
 8023138:	1c5a      	adds	r2, r3, #1
 802313a:	d13f      	bne.n	80231bc <_printf_float+0x17c>
 802313c:	2306      	movs	r3, #6
 802313e:	6063      	str	r3, [r4, #4]
 8023140:	9b05      	ldr	r3, [sp, #20]
 8023142:	6861      	ldr	r1, [r4, #4]
 8023144:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8023148:	2300      	movs	r3, #0
 802314a:	9303      	str	r3, [sp, #12]
 802314c:	ab0a      	add	r3, sp, #40	; 0x28
 802314e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8023152:	ab09      	add	r3, sp, #36	; 0x24
 8023154:	ec49 8b10 	vmov	d0, r8, r9
 8023158:	9300      	str	r3, [sp, #0]
 802315a:	6022      	str	r2, [r4, #0]
 802315c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8023160:	4628      	mov	r0, r5
 8023162:	f7ff fecd 	bl	8022f00 <__cvt>
 8023166:	9b06      	ldr	r3, [sp, #24]
 8023168:	9909      	ldr	r1, [sp, #36]	; 0x24
 802316a:	2b47      	cmp	r3, #71	; 0x47
 802316c:	4680      	mov	r8, r0
 802316e:	d108      	bne.n	8023182 <_printf_float+0x142>
 8023170:	1cc8      	adds	r0, r1, #3
 8023172:	db02      	blt.n	802317a <_printf_float+0x13a>
 8023174:	6863      	ldr	r3, [r4, #4]
 8023176:	4299      	cmp	r1, r3
 8023178:	dd41      	ble.n	80231fe <_printf_float+0x1be>
 802317a:	f1ab 0b02 	sub.w	fp, fp, #2
 802317e:	fa5f fb8b 	uxtb.w	fp, fp
 8023182:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8023186:	d820      	bhi.n	80231ca <_printf_float+0x18a>
 8023188:	3901      	subs	r1, #1
 802318a:	465a      	mov	r2, fp
 802318c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8023190:	9109      	str	r1, [sp, #36]	; 0x24
 8023192:	f7ff ff17 	bl	8022fc4 <__exponent>
 8023196:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023198:	1813      	adds	r3, r2, r0
 802319a:	2a01      	cmp	r2, #1
 802319c:	4681      	mov	r9, r0
 802319e:	6123      	str	r3, [r4, #16]
 80231a0:	dc02      	bgt.n	80231a8 <_printf_float+0x168>
 80231a2:	6822      	ldr	r2, [r4, #0]
 80231a4:	07d2      	lsls	r2, r2, #31
 80231a6:	d501      	bpl.n	80231ac <_printf_float+0x16c>
 80231a8:	3301      	adds	r3, #1
 80231aa:	6123      	str	r3, [r4, #16]
 80231ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80231b0:	2b00      	cmp	r3, #0
 80231b2:	d09c      	beq.n	80230ee <_printf_float+0xae>
 80231b4:	232d      	movs	r3, #45	; 0x2d
 80231b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80231ba:	e798      	b.n	80230ee <_printf_float+0xae>
 80231bc:	9a06      	ldr	r2, [sp, #24]
 80231be:	2a47      	cmp	r2, #71	; 0x47
 80231c0:	d1be      	bne.n	8023140 <_printf_float+0x100>
 80231c2:	2b00      	cmp	r3, #0
 80231c4:	d1bc      	bne.n	8023140 <_printf_float+0x100>
 80231c6:	2301      	movs	r3, #1
 80231c8:	e7b9      	b.n	802313e <_printf_float+0xfe>
 80231ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80231ce:	d118      	bne.n	8023202 <_printf_float+0x1c2>
 80231d0:	2900      	cmp	r1, #0
 80231d2:	6863      	ldr	r3, [r4, #4]
 80231d4:	dd0b      	ble.n	80231ee <_printf_float+0x1ae>
 80231d6:	6121      	str	r1, [r4, #16]
 80231d8:	b913      	cbnz	r3, 80231e0 <_printf_float+0x1a0>
 80231da:	6822      	ldr	r2, [r4, #0]
 80231dc:	07d0      	lsls	r0, r2, #31
 80231de:	d502      	bpl.n	80231e6 <_printf_float+0x1a6>
 80231e0:	3301      	adds	r3, #1
 80231e2:	440b      	add	r3, r1
 80231e4:	6123      	str	r3, [r4, #16]
 80231e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80231e8:	f04f 0900 	mov.w	r9, #0
 80231ec:	e7de      	b.n	80231ac <_printf_float+0x16c>
 80231ee:	b913      	cbnz	r3, 80231f6 <_printf_float+0x1b6>
 80231f0:	6822      	ldr	r2, [r4, #0]
 80231f2:	07d2      	lsls	r2, r2, #31
 80231f4:	d501      	bpl.n	80231fa <_printf_float+0x1ba>
 80231f6:	3302      	adds	r3, #2
 80231f8:	e7f4      	b.n	80231e4 <_printf_float+0x1a4>
 80231fa:	2301      	movs	r3, #1
 80231fc:	e7f2      	b.n	80231e4 <_printf_float+0x1a4>
 80231fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8023202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023204:	4299      	cmp	r1, r3
 8023206:	db05      	blt.n	8023214 <_printf_float+0x1d4>
 8023208:	6823      	ldr	r3, [r4, #0]
 802320a:	6121      	str	r1, [r4, #16]
 802320c:	07d8      	lsls	r0, r3, #31
 802320e:	d5ea      	bpl.n	80231e6 <_printf_float+0x1a6>
 8023210:	1c4b      	adds	r3, r1, #1
 8023212:	e7e7      	b.n	80231e4 <_printf_float+0x1a4>
 8023214:	2900      	cmp	r1, #0
 8023216:	bfd4      	ite	le
 8023218:	f1c1 0202 	rsble	r2, r1, #2
 802321c:	2201      	movgt	r2, #1
 802321e:	4413      	add	r3, r2
 8023220:	e7e0      	b.n	80231e4 <_printf_float+0x1a4>
 8023222:	6823      	ldr	r3, [r4, #0]
 8023224:	055a      	lsls	r2, r3, #21
 8023226:	d407      	bmi.n	8023238 <_printf_float+0x1f8>
 8023228:	6923      	ldr	r3, [r4, #16]
 802322a:	4642      	mov	r2, r8
 802322c:	4631      	mov	r1, r6
 802322e:	4628      	mov	r0, r5
 8023230:	47b8      	blx	r7
 8023232:	3001      	adds	r0, #1
 8023234:	d12c      	bne.n	8023290 <_printf_float+0x250>
 8023236:	e764      	b.n	8023102 <_printf_float+0xc2>
 8023238:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802323c:	f240 80e0 	bls.w	8023400 <_printf_float+0x3c0>
 8023240:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8023244:	2200      	movs	r2, #0
 8023246:	2300      	movs	r3, #0
 8023248:	f7dd fc48 	bl	8000adc <__aeabi_dcmpeq>
 802324c:	2800      	cmp	r0, #0
 802324e:	d034      	beq.n	80232ba <_printf_float+0x27a>
 8023250:	4a37      	ldr	r2, [pc, #220]	; (8023330 <_printf_float+0x2f0>)
 8023252:	2301      	movs	r3, #1
 8023254:	4631      	mov	r1, r6
 8023256:	4628      	mov	r0, r5
 8023258:	47b8      	blx	r7
 802325a:	3001      	adds	r0, #1
 802325c:	f43f af51 	beq.w	8023102 <_printf_float+0xc2>
 8023260:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023264:	429a      	cmp	r2, r3
 8023266:	db02      	blt.n	802326e <_printf_float+0x22e>
 8023268:	6823      	ldr	r3, [r4, #0]
 802326a:	07d8      	lsls	r0, r3, #31
 802326c:	d510      	bpl.n	8023290 <_printf_float+0x250>
 802326e:	ee18 3a10 	vmov	r3, s16
 8023272:	4652      	mov	r2, sl
 8023274:	4631      	mov	r1, r6
 8023276:	4628      	mov	r0, r5
 8023278:	47b8      	blx	r7
 802327a:	3001      	adds	r0, #1
 802327c:	f43f af41 	beq.w	8023102 <_printf_float+0xc2>
 8023280:	f04f 0800 	mov.w	r8, #0
 8023284:	f104 091a 	add.w	r9, r4, #26
 8023288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802328a:	3b01      	subs	r3, #1
 802328c:	4543      	cmp	r3, r8
 802328e:	dc09      	bgt.n	80232a4 <_printf_float+0x264>
 8023290:	6823      	ldr	r3, [r4, #0]
 8023292:	079b      	lsls	r3, r3, #30
 8023294:	f100 8105 	bmi.w	80234a2 <_printf_float+0x462>
 8023298:	68e0      	ldr	r0, [r4, #12]
 802329a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802329c:	4298      	cmp	r0, r3
 802329e:	bfb8      	it	lt
 80232a0:	4618      	movlt	r0, r3
 80232a2:	e730      	b.n	8023106 <_printf_float+0xc6>
 80232a4:	2301      	movs	r3, #1
 80232a6:	464a      	mov	r2, r9
 80232a8:	4631      	mov	r1, r6
 80232aa:	4628      	mov	r0, r5
 80232ac:	47b8      	blx	r7
 80232ae:	3001      	adds	r0, #1
 80232b0:	f43f af27 	beq.w	8023102 <_printf_float+0xc2>
 80232b4:	f108 0801 	add.w	r8, r8, #1
 80232b8:	e7e6      	b.n	8023288 <_printf_float+0x248>
 80232ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80232bc:	2b00      	cmp	r3, #0
 80232be:	dc39      	bgt.n	8023334 <_printf_float+0x2f4>
 80232c0:	4a1b      	ldr	r2, [pc, #108]	; (8023330 <_printf_float+0x2f0>)
 80232c2:	2301      	movs	r3, #1
 80232c4:	4631      	mov	r1, r6
 80232c6:	4628      	mov	r0, r5
 80232c8:	47b8      	blx	r7
 80232ca:	3001      	adds	r0, #1
 80232cc:	f43f af19 	beq.w	8023102 <_printf_float+0xc2>
 80232d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80232d4:	4313      	orrs	r3, r2
 80232d6:	d102      	bne.n	80232de <_printf_float+0x29e>
 80232d8:	6823      	ldr	r3, [r4, #0]
 80232da:	07d9      	lsls	r1, r3, #31
 80232dc:	d5d8      	bpl.n	8023290 <_printf_float+0x250>
 80232de:	ee18 3a10 	vmov	r3, s16
 80232e2:	4652      	mov	r2, sl
 80232e4:	4631      	mov	r1, r6
 80232e6:	4628      	mov	r0, r5
 80232e8:	47b8      	blx	r7
 80232ea:	3001      	adds	r0, #1
 80232ec:	f43f af09 	beq.w	8023102 <_printf_float+0xc2>
 80232f0:	f04f 0900 	mov.w	r9, #0
 80232f4:	f104 0a1a 	add.w	sl, r4, #26
 80232f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80232fa:	425b      	negs	r3, r3
 80232fc:	454b      	cmp	r3, r9
 80232fe:	dc01      	bgt.n	8023304 <_printf_float+0x2c4>
 8023300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023302:	e792      	b.n	802322a <_printf_float+0x1ea>
 8023304:	2301      	movs	r3, #1
 8023306:	4652      	mov	r2, sl
 8023308:	4631      	mov	r1, r6
 802330a:	4628      	mov	r0, r5
 802330c:	47b8      	blx	r7
 802330e:	3001      	adds	r0, #1
 8023310:	f43f aef7 	beq.w	8023102 <_printf_float+0xc2>
 8023314:	f109 0901 	add.w	r9, r9, #1
 8023318:	e7ee      	b.n	80232f8 <_printf_float+0x2b8>
 802331a:	bf00      	nop
 802331c:	7fefffff 	.word	0x7fefffff
 8023320:	08029371 	.word	0x08029371
 8023324:	08029375 	.word	0x08029375
 8023328:	0802937d 	.word	0x0802937d
 802332c:	08029379 	.word	0x08029379
 8023330:	08029381 	.word	0x08029381
 8023334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023336:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8023338:	429a      	cmp	r2, r3
 802333a:	bfa8      	it	ge
 802333c:	461a      	movge	r2, r3
 802333e:	2a00      	cmp	r2, #0
 8023340:	4691      	mov	r9, r2
 8023342:	dc37      	bgt.n	80233b4 <_printf_float+0x374>
 8023344:	f04f 0b00 	mov.w	fp, #0
 8023348:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802334c:	f104 021a 	add.w	r2, r4, #26
 8023350:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8023352:	9305      	str	r3, [sp, #20]
 8023354:	eba3 0309 	sub.w	r3, r3, r9
 8023358:	455b      	cmp	r3, fp
 802335a:	dc33      	bgt.n	80233c4 <_printf_float+0x384>
 802335c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023360:	429a      	cmp	r2, r3
 8023362:	db3b      	blt.n	80233dc <_printf_float+0x39c>
 8023364:	6823      	ldr	r3, [r4, #0]
 8023366:	07da      	lsls	r2, r3, #31
 8023368:	d438      	bmi.n	80233dc <_printf_float+0x39c>
 802336a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802336c:	9a05      	ldr	r2, [sp, #20]
 802336e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023370:	1a9a      	subs	r2, r3, r2
 8023372:	eba3 0901 	sub.w	r9, r3, r1
 8023376:	4591      	cmp	r9, r2
 8023378:	bfa8      	it	ge
 802337a:	4691      	movge	r9, r2
 802337c:	f1b9 0f00 	cmp.w	r9, #0
 8023380:	dc35      	bgt.n	80233ee <_printf_float+0x3ae>
 8023382:	f04f 0800 	mov.w	r8, #0
 8023386:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802338a:	f104 0a1a 	add.w	sl, r4, #26
 802338e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023392:	1a9b      	subs	r3, r3, r2
 8023394:	eba3 0309 	sub.w	r3, r3, r9
 8023398:	4543      	cmp	r3, r8
 802339a:	f77f af79 	ble.w	8023290 <_printf_float+0x250>
 802339e:	2301      	movs	r3, #1
 80233a0:	4652      	mov	r2, sl
 80233a2:	4631      	mov	r1, r6
 80233a4:	4628      	mov	r0, r5
 80233a6:	47b8      	blx	r7
 80233a8:	3001      	adds	r0, #1
 80233aa:	f43f aeaa 	beq.w	8023102 <_printf_float+0xc2>
 80233ae:	f108 0801 	add.w	r8, r8, #1
 80233b2:	e7ec      	b.n	802338e <_printf_float+0x34e>
 80233b4:	4613      	mov	r3, r2
 80233b6:	4631      	mov	r1, r6
 80233b8:	4642      	mov	r2, r8
 80233ba:	4628      	mov	r0, r5
 80233bc:	47b8      	blx	r7
 80233be:	3001      	adds	r0, #1
 80233c0:	d1c0      	bne.n	8023344 <_printf_float+0x304>
 80233c2:	e69e      	b.n	8023102 <_printf_float+0xc2>
 80233c4:	2301      	movs	r3, #1
 80233c6:	4631      	mov	r1, r6
 80233c8:	4628      	mov	r0, r5
 80233ca:	9205      	str	r2, [sp, #20]
 80233cc:	47b8      	blx	r7
 80233ce:	3001      	adds	r0, #1
 80233d0:	f43f ae97 	beq.w	8023102 <_printf_float+0xc2>
 80233d4:	9a05      	ldr	r2, [sp, #20]
 80233d6:	f10b 0b01 	add.w	fp, fp, #1
 80233da:	e7b9      	b.n	8023350 <_printf_float+0x310>
 80233dc:	ee18 3a10 	vmov	r3, s16
 80233e0:	4652      	mov	r2, sl
 80233e2:	4631      	mov	r1, r6
 80233e4:	4628      	mov	r0, r5
 80233e6:	47b8      	blx	r7
 80233e8:	3001      	adds	r0, #1
 80233ea:	d1be      	bne.n	802336a <_printf_float+0x32a>
 80233ec:	e689      	b.n	8023102 <_printf_float+0xc2>
 80233ee:	9a05      	ldr	r2, [sp, #20]
 80233f0:	464b      	mov	r3, r9
 80233f2:	4442      	add	r2, r8
 80233f4:	4631      	mov	r1, r6
 80233f6:	4628      	mov	r0, r5
 80233f8:	47b8      	blx	r7
 80233fa:	3001      	adds	r0, #1
 80233fc:	d1c1      	bne.n	8023382 <_printf_float+0x342>
 80233fe:	e680      	b.n	8023102 <_printf_float+0xc2>
 8023400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023402:	2a01      	cmp	r2, #1
 8023404:	dc01      	bgt.n	802340a <_printf_float+0x3ca>
 8023406:	07db      	lsls	r3, r3, #31
 8023408:	d538      	bpl.n	802347c <_printf_float+0x43c>
 802340a:	2301      	movs	r3, #1
 802340c:	4642      	mov	r2, r8
 802340e:	4631      	mov	r1, r6
 8023410:	4628      	mov	r0, r5
 8023412:	47b8      	blx	r7
 8023414:	3001      	adds	r0, #1
 8023416:	f43f ae74 	beq.w	8023102 <_printf_float+0xc2>
 802341a:	ee18 3a10 	vmov	r3, s16
 802341e:	4652      	mov	r2, sl
 8023420:	4631      	mov	r1, r6
 8023422:	4628      	mov	r0, r5
 8023424:	47b8      	blx	r7
 8023426:	3001      	adds	r0, #1
 8023428:	f43f ae6b 	beq.w	8023102 <_printf_float+0xc2>
 802342c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8023430:	2200      	movs	r2, #0
 8023432:	2300      	movs	r3, #0
 8023434:	f7dd fb52 	bl	8000adc <__aeabi_dcmpeq>
 8023438:	b9d8      	cbnz	r0, 8023472 <_printf_float+0x432>
 802343a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802343c:	f108 0201 	add.w	r2, r8, #1
 8023440:	3b01      	subs	r3, #1
 8023442:	4631      	mov	r1, r6
 8023444:	4628      	mov	r0, r5
 8023446:	47b8      	blx	r7
 8023448:	3001      	adds	r0, #1
 802344a:	d10e      	bne.n	802346a <_printf_float+0x42a>
 802344c:	e659      	b.n	8023102 <_printf_float+0xc2>
 802344e:	2301      	movs	r3, #1
 8023450:	4652      	mov	r2, sl
 8023452:	4631      	mov	r1, r6
 8023454:	4628      	mov	r0, r5
 8023456:	47b8      	blx	r7
 8023458:	3001      	adds	r0, #1
 802345a:	f43f ae52 	beq.w	8023102 <_printf_float+0xc2>
 802345e:	f108 0801 	add.w	r8, r8, #1
 8023462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023464:	3b01      	subs	r3, #1
 8023466:	4543      	cmp	r3, r8
 8023468:	dcf1      	bgt.n	802344e <_printf_float+0x40e>
 802346a:	464b      	mov	r3, r9
 802346c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8023470:	e6dc      	b.n	802322c <_printf_float+0x1ec>
 8023472:	f04f 0800 	mov.w	r8, #0
 8023476:	f104 0a1a 	add.w	sl, r4, #26
 802347a:	e7f2      	b.n	8023462 <_printf_float+0x422>
 802347c:	2301      	movs	r3, #1
 802347e:	4642      	mov	r2, r8
 8023480:	e7df      	b.n	8023442 <_printf_float+0x402>
 8023482:	2301      	movs	r3, #1
 8023484:	464a      	mov	r2, r9
 8023486:	4631      	mov	r1, r6
 8023488:	4628      	mov	r0, r5
 802348a:	47b8      	blx	r7
 802348c:	3001      	adds	r0, #1
 802348e:	f43f ae38 	beq.w	8023102 <_printf_float+0xc2>
 8023492:	f108 0801 	add.w	r8, r8, #1
 8023496:	68e3      	ldr	r3, [r4, #12]
 8023498:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802349a:	1a5b      	subs	r3, r3, r1
 802349c:	4543      	cmp	r3, r8
 802349e:	dcf0      	bgt.n	8023482 <_printf_float+0x442>
 80234a0:	e6fa      	b.n	8023298 <_printf_float+0x258>
 80234a2:	f04f 0800 	mov.w	r8, #0
 80234a6:	f104 0919 	add.w	r9, r4, #25
 80234aa:	e7f4      	b.n	8023496 <_printf_float+0x456>

080234ac <_printf_common>:
 80234ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80234b0:	4616      	mov	r6, r2
 80234b2:	4699      	mov	r9, r3
 80234b4:	688a      	ldr	r2, [r1, #8]
 80234b6:	690b      	ldr	r3, [r1, #16]
 80234b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80234bc:	4293      	cmp	r3, r2
 80234be:	bfb8      	it	lt
 80234c0:	4613      	movlt	r3, r2
 80234c2:	6033      	str	r3, [r6, #0]
 80234c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80234c8:	4607      	mov	r7, r0
 80234ca:	460c      	mov	r4, r1
 80234cc:	b10a      	cbz	r2, 80234d2 <_printf_common+0x26>
 80234ce:	3301      	adds	r3, #1
 80234d0:	6033      	str	r3, [r6, #0]
 80234d2:	6823      	ldr	r3, [r4, #0]
 80234d4:	0699      	lsls	r1, r3, #26
 80234d6:	bf42      	ittt	mi
 80234d8:	6833      	ldrmi	r3, [r6, #0]
 80234da:	3302      	addmi	r3, #2
 80234dc:	6033      	strmi	r3, [r6, #0]
 80234de:	6825      	ldr	r5, [r4, #0]
 80234e0:	f015 0506 	ands.w	r5, r5, #6
 80234e4:	d106      	bne.n	80234f4 <_printf_common+0x48>
 80234e6:	f104 0a19 	add.w	sl, r4, #25
 80234ea:	68e3      	ldr	r3, [r4, #12]
 80234ec:	6832      	ldr	r2, [r6, #0]
 80234ee:	1a9b      	subs	r3, r3, r2
 80234f0:	42ab      	cmp	r3, r5
 80234f2:	dc26      	bgt.n	8023542 <_printf_common+0x96>
 80234f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80234f8:	1e13      	subs	r3, r2, #0
 80234fa:	6822      	ldr	r2, [r4, #0]
 80234fc:	bf18      	it	ne
 80234fe:	2301      	movne	r3, #1
 8023500:	0692      	lsls	r2, r2, #26
 8023502:	d42b      	bmi.n	802355c <_printf_common+0xb0>
 8023504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023508:	4649      	mov	r1, r9
 802350a:	4638      	mov	r0, r7
 802350c:	47c0      	blx	r8
 802350e:	3001      	adds	r0, #1
 8023510:	d01e      	beq.n	8023550 <_printf_common+0xa4>
 8023512:	6823      	ldr	r3, [r4, #0]
 8023514:	68e5      	ldr	r5, [r4, #12]
 8023516:	6832      	ldr	r2, [r6, #0]
 8023518:	f003 0306 	and.w	r3, r3, #6
 802351c:	2b04      	cmp	r3, #4
 802351e:	bf08      	it	eq
 8023520:	1aad      	subeq	r5, r5, r2
 8023522:	68a3      	ldr	r3, [r4, #8]
 8023524:	6922      	ldr	r2, [r4, #16]
 8023526:	bf0c      	ite	eq
 8023528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802352c:	2500      	movne	r5, #0
 802352e:	4293      	cmp	r3, r2
 8023530:	bfc4      	itt	gt
 8023532:	1a9b      	subgt	r3, r3, r2
 8023534:	18ed      	addgt	r5, r5, r3
 8023536:	2600      	movs	r6, #0
 8023538:	341a      	adds	r4, #26
 802353a:	42b5      	cmp	r5, r6
 802353c:	d11a      	bne.n	8023574 <_printf_common+0xc8>
 802353e:	2000      	movs	r0, #0
 8023540:	e008      	b.n	8023554 <_printf_common+0xa8>
 8023542:	2301      	movs	r3, #1
 8023544:	4652      	mov	r2, sl
 8023546:	4649      	mov	r1, r9
 8023548:	4638      	mov	r0, r7
 802354a:	47c0      	blx	r8
 802354c:	3001      	adds	r0, #1
 802354e:	d103      	bne.n	8023558 <_printf_common+0xac>
 8023550:	f04f 30ff 	mov.w	r0, #4294967295
 8023554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023558:	3501      	adds	r5, #1
 802355a:	e7c6      	b.n	80234ea <_printf_common+0x3e>
 802355c:	18e1      	adds	r1, r4, r3
 802355e:	1c5a      	adds	r2, r3, #1
 8023560:	2030      	movs	r0, #48	; 0x30
 8023562:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8023566:	4422      	add	r2, r4
 8023568:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802356c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023570:	3302      	adds	r3, #2
 8023572:	e7c7      	b.n	8023504 <_printf_common+0x58>
 8023574:	2301      	movs	r3, #1
 8023576:	4622      	mov	r2, r4
 8023578:	4649      	mov	r1, r9
 802357a:	4638      	mov	r0, r7
 802357c:	47c0      	blx	r8
 802357e:	3001      	adds	r0, #1
 8023580:	d0e6      	beq.n	8023550 <_printf_common+0xa4>
 8023582:	3601      	adds	r6, #1
 8023584:	e7d9      	b.n	802353a <_printf_common+0x8e>
	...

08023588 <_printf_i>:
 8023588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802358c:	7e0f      	ldrb	r7, [r1, #24]
 802358e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023590:	2f78      	cmp	r7, #120	; 0x78
 8023592:	4691      	mov	r9, r2
 8023594:	4680      	mov	r8, r0
 8023596:	460c      	mov	r4, r1
 8023598:	469a      	mov	sl, r3
 802359a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802359e:	d807      	bhi.n	80235b0 <_printf_i+0x28>
 80235a0:	2f62      	cmp	r7, #98	; 0x62
 80235a2:	d80a      	bhi.n	80235ba <_printf_i+0x32>
 80235a4:	2f00      	cmp	r7, #0
 80235a6:	f000 80d8 	beq.w	802375a <_printf_i+0x1d2>
 80235aa:	2f58      	cmp	r7, #88	; 0x58
 80235ac:	f000 80a3 	beq.w	80236f6 <_printf_i+0x16e>
 80235b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80235b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80235b8:	e03a      	b.n	8023630 <_printf_i+0xa8>
 80235ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80235be:	2b15      	cmp	r3, #21
 80235c0:	d8f6      	bhi.n	80235b0 <_printf_i+0x28>
 80235c2:	a101      	add	r1, pc, #4	; (adr r1, 80235c8 <_printf_i+0x40>)
 80235c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80235c8:	08023621 	.word	0x08023621
 80235cc:	08023635 	.word	0x08023635
 80235d0:	080235b1 	.word	0x080235b1
 80235d4:	080235b1 	.word	0x080235b1
 80235d8:	080235b1 	.word	0x080235b1
 80235dc:	080235b1 	.word	0x080235b1
 80235e0:	08023635 	.word	0x08023635
 80235e4:	080235b1 	.word	0x080235b1
 80235e8:	080235b1 	.word	0x080235b1
 80235ec:	080235b1 	.word	0x080235b1
 80235f0:	080235b1 	.word	0x080235b1
 80235f4:	08023741 	.word	0x08023741
 80235f8:	08023665 	.word	0x08023665
 80235fc:	08023723 	.word	0x08023723
 8023600:	080235b1 	.word	0x080235b1
 8023604:	080235b1 	.word	0x080235b1
 8023608:	08023763 	.word	0x08023763
 802360c:	080235b1 	.word	0x080235b1
 8023610:	08023665 	.word	0x08023665
 8023614:	080235b1 	.word	0x080235b1
 8023618:	080235b1 	.word	0x080235b1
 802361c:	0802372b 	.word	0x0802372b
 8023620:	682b      	ldr	r3, [r5, #0]
 8023622:	1d1a      	adds	r2, r3, #4
 8023624:	681b      	ldr	r3, [r3, #0]
 8023626:	602a      	str	r2, [r5, #0]
 8023628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802362c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023630:	2301      	movs	r3, #1
 8023632:	e0a3      	b.n	802377c <_printf_i+0x1f4>
 8023634:	6820      	ldr	r0, [r4, #0]
 8023636:	6829      	ldr	r1, [r5, #0]
 8023638:	0606      	lsls	r6, r0, #24
 802363a:	f101 0304 	add.w	r3, r1, #4
 802363e:	d50a      	bpl.n	8023656 <_printf_i+0xce>
 8023640:	680e      	ldr	r6, [r1, #0]
 8023642:	602b      	str	r3, [r5, #0]
 8023644:	2e00      	cmp	r6, #0
 8023646:	da03      	bge.n	8023650 <_printf_i+0xc8>
 8023648:	232d      	movs	r3, #45	; 0x2d
 802364a:	4276      	negs	r6, r6
 802364c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023650:	485e      	ldr	r0, [pc, #376]	; (80237cc <_printf_i+0x244>)
 8023652:	230a      	movs	r3, #10
 8023654:	e019      	b.n	802368a <_printf_i+0x102>
 8023656:	680e      	ldr	r6, [r1, #0]
 8023658:	602b      	str	r3, [r5, #0]
 802365a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802365e:	bf18      	it	ne
 8023660:	b236      	sxthne	r6, r6
 8023662:	e7ef      	b.n	8023644 <_printf_i+0xbc>
 8023664:	682b      	ldr	r3, [r5, #0]
 8023666:	6820      	ldr	r0, [r4, #0]
 8023668:	1d19      	adds	r1, r3, #4
 802366a:	6029      	str	r1, [r5, #0]
 802366c:	0601      	lsls	r1, r0, #24
 802366e:	d501      	bpl.n	8023674 <_printf_i+0xec>
 8023670:	681e      	ldr	r6, [r3, #0]
 8023672:	e002      	b.n	802367a <_printf_i+0xf2>
 8023674:	0646      	lsls	r6, r0, #25
 8023676:	d5fb      	bpl.n	8023670 <_printf_i+0xe8>
 8023678:	881e      	ldrh	r6, [r3, #0]
 802367a:	4854      	ldr	r0, [pc, #336]	; (80237cc <_printf_i+0x244>)
 802367c:	2f6f      	cmp	r7, #111	; 0x6f
 802367e:	bf0c      	ite	eq
 8023680:	2308      	moveq	r3, #8
 8023682:	230a      	movne	r3, #10
 8023684:	2100      	movs	r1, #0
 8023686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802368a:	6865      	ldr	r5, [r4, #4]
 802368c:	60a5      	str	r5, [r4, #8]
 802368e:	2d00      	cmp	r5, #0
 8023690:	bfa2      	ittt	ge
 8023692:	6821      	ldrge	r1, [r4, #0]
 8023694:	f021 0104 	bicge.w	r1, r1, #4
 8023698:	6021      	strge	r1, [r4, #0]
 802369a:	b90e      	cbnz	r6, 80236a0 <_printf_i+0x118>
 802369c:	2d00      	cmp	r5, #0
 802369e:	d04d      	beq.n	802373c <_printf_i+0x1b4>
 80236a0:	4615      	mov	r5, r2
 80236a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80236a6:	fb03 6711 	mls	r7, r3, r1, r6
 80236aa:	5dc7      	ldrb	r7, [r0, r7]
 80236ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80236b0:	4637      	mov	r7, r6
 80236b2:	42bb      	cmp	r3, r7
 80236b4:	460e      	mov	r6, r1
 80236b6:	d9f4      	bls.n	80236a2 <_printf_i+0x11a>
 80236b8:	2b08      	cmp	r3, #8
 80236ba:	d10b      	bne.n	80236d4 <_printf_i+0x14c>
 80236bc:	6823      	ldr	r3, [r4, #0]
 80236be:	07de      	lsls	r6, r3, #31
 80236c0:	d508      	bpl.n	80236d4 <_printf_i+0x14c>
 80236c2:	6923      	ldr	r3, [r4, #16]
 80236c4:	6861      	ldr	r1, [r4, #4]
 80236c6:	4299      	cmp	r1, r3
 80236c8:	bfde      	ittt	le
 80236ca:	2330      	movle	r3, #48	; 0x30
 80236cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80236d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80236d4:	1b52      	subs	r2, r2, r5
 80236d6:	6122      	str	r2, [r4, #16]
 80236d8:	f8cd a000 	str.w	sl, [sp]
 80236dc:	464b      	mov	r3, r9
 80236de:	aa03      	add	r2, sp, #12
 80236e0:	4621      	mov	r1, r4
 80236e2:	4640      	mov	r0, r8
 80236e4:	f7ff fee2 	bl	80234ac <_printf_common>
 80236e8:	3001      	adds	r0, #1
 80236ea:	d14c      	bne.n	8023786 <_printf_i+0x1fe>
 80236ec:	f04f 30ff 	mov.w	r0, #4294967295
 80236f0:	b004      	add	sp, #16
 80236f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80236f6:	4835      	ldr	r0, [pc, #212]	; (80237cc <_printf_i+0x244>)
 80236f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80236fc:	6829      	ldr	r1, [r5, #0]
 80236fe:	6823      	ldr	r3, [r4, #0]
 8023700:	f851 6b04 	ldr.w	r6, [r1], #4
 8023704:	6029      	str	r1, [r5, #0]
 8023706:	061d      	lsls	r5, r3, #24
 8023708:	d514      	bpl.n	8023734 <_printf_i+0x1ac>
 802370a:	07df      	lsls	r7, r3, #31
 802370c:	bf44      	itt	mi
 802370e:	f043 0320 	orrmi.w	r3, r3, #32
 8023712:	6023      	strmi	r3, [r4, #0]
 8023714:	b91e      	cbnz	r6, 802371e <_printf_i+0x196>
 8023716:	6823      	ldr	r3, [r4, #0]
 8023718:	f023 0320 	bic.w	r3, r3, #32
 802371c:	6023      	str	r3, [r4, #0]
 802371e:	2310      	movs	r3, #16
 8023720:	e7b0      	b.n	8023684 <_printf_i+0xfc>
 8023722:	6823      	ldr	r3, [r4, #0]
 8023724:	f043 0320 	orr.w	r3, r3, #32
 8023728:	6023      	str	r3, [r4, #0]
 802372a:	2378      	movs	r3, #120	; 0x78
 802372c:	4828      	ldr	r0, [pc, #160]	; (80237d0 <_printf_i+0x248>)
 802372e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023732:	e7e3      	b.n	80236fc <_printf_i+0x174>
 8023734:	0659      	lsls	r1, r3, #25
 8023736:	bf48      	it	mi
 8023738:	b2b6      	uxthmi	r6, r6
 802373a:	e7e6      	b.n	802370a <_printf_i+0x182>
 802373c:	4615      	mov	r5, r2
 802373e:	e7bb      	b.n	80236b8 <_printf_i+0x130>
 8023740:	682b      	ldr	r3, [r5, #0]
 8023742:	6826      	ldr	r6, [r4, #0]
 8023744:	6961      	ldr	r1, [r4, #20]
 8023746:	1d18      	adds	r0, r3, #4
 8023748:	6028      	str	r0, [r5, #0]
 802374a:	0635      	lsls	r5, r6, #24
 802374c:	681b      	ldr	r3, [r3, #0]
 802374e:	d501      	bpl.n	8023754 <_printf_i+0x1cc>
 8023750:	6019      	str	r1, [r3, #0]
 8023752:	e002      	b.n	802375a <_printf_i+0x1d2>
 8023754:	0670      	lsls	r0, r6, #25
 8023756:	d5fb      	bpl.n	8023750 <_printf_i+0x1c8>
 8023758:	8019      	strh	r1, [r3, #0]
 802375a:	2300      	movs	r3, #0
 802375c:	6123      	str	r3, [r4, #16]
 802375e:	4615      	mov	r5, r2
 8023760:	e7ba      	b.n	80236d8 <_printf_i+0x150>
 8023762:	682b      	ldr	r3, [r5, #0]
 8023764:	1d1a      	adds	r2, r3, #4
 8023766:	602a      	str	r2, [r5, #0]
 8023768:	681d      	ldr	r5, [r3, #0]
 802376a:	6862      	ldr	r2, [r4, #4]
 802376c:	2100      	movs	r1, #0
 802376e:	4628      	mov	r0, r5
 8023770:	f7dc fd2e 	bl	80001d0 <memchr>
 8023774:	b108      	cbz	r0, 802377a <_printf_i+0x1f2>
 8023776:	1b40      	subs	r0, r0, r5
 8023778:	6060      	str	r0, [r4, #4]
 802377a:	6863      	ldr	r3, [r4, #4]
 802377c:	6123      	str	r3, [r4, #16]
 802377e:	2300      	movs	r3, #0
 8023780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023784:	e7a8      	b.n	80236d8 <_printf_i+0x150>
 8023786:	6923      	ldr	r3, [r4, #16]
 8023788:	462a      	mov	r2, r5
 802378a:	4649      	mov	r1, r9
 802378c:	4640      	mov	r0, r8
 802378e:	47d0      	blx	sl
 8023790:	3001      	adds	r0, #1
 8023792:	d0ab      	beq.n	80236ec <_printf_i+0x164>
 8023794:	6823      	ldr	r3, [r4, #0]
 8023796:	079b      	lsls	r3, r3, #30
 8023798:	d413      	bmi.n	80237c2 <_printf_i+0x23a>
 802379a:	68e0      	ldr	r0, [r4, #12]
 802379c:	9b03      	ldr	r3, [sp, #12]
 802379e:	4298      	cmp	r0, r3
 80237a0:	bfb8      	it	lt
 80237a2:	4618      	movlt	r0, r3
 80237a4:	e7a4      	b.n	80236f0 <_printf_i+0x168>
 80237a6:	2301      	movs	r3, #1
 80237a8:	4632      	mov	r2, r6
 80237aa:	4649      	mov	r1, r9
 80237ac:	4640      	mov	r0, r8
 80237ae:	47d0      	blx	sl
 80237b0:	3001      	adds	r0, #1
 80237b2:	d09b      	beq.n	80236ec <_printf_i+0x164>
 80237b4:	3501      	adds	r5, #1
 80237b6:	68e3      	ldr	r3, [r4, #12]
 80237b8:	9903      	ldr	r1, [sp, #12]
 80237ba:	1a5b      	subs	r3, r3, r1
 80237bc:	42ab      	cmp	r3, r5
 80237be:	dcf2      	bgt.n	80237a6 <_printf_i+0x21e>
 80237c0:	e7eb      	b.n	802379a <_printf_i+0x212>
 80237c2:	2500      	movs	r5, #0
 80237c4:	f104 0619 	add.w	r6, r4, #25
 80237c8:	e7f5      	b.n	80237b6 <_printf_i+0x22e>
 80237ca:	bf00      	nop
 80237cc:	08029383 	.word	0x08029383
 80237d0:	08029394 	.word	0x08029394

080237d4 <_sbrk_r>:
 80237d4:	b538      	push	{r3, r4, r5, lr}
 80237d6:	4d06      	ldr	r5, [pc, #24]	; (80237f0 <_sbrk_r+0x1c>)
 80237d8:	2300      	movs	r3, #0
 80237da:	4604      	mov	r4, r0
 80237dc:	4608      	mov	r0, r1
 80237de:	602b      	str	r3, [r5, #0]
 80237e0:	f7e5 fabc 	bl	8008d5c <_sbrk>
 80237e4:	1c43      	adds	r3, r0, #1
 80237e6:	d102      	bne.n	80237ee <_sbrk_r+0x1a>
 80237e8:	682b      	ldr	r3, [r5, #0]
 80237ea:	b103      	cbz	r3, 80237ee <_sbrk_r+0x1a>
 80237ec:	6023      	str	r3, [r4, #0]
 80237ee:	bd38      	pop	{r3, r4, r5, pc}
 80237f0:	20002750 	.word	0x20002750

080237f4 <_raise_r>:
 80237f4:	291f      	cmp	r1, #31
 80237f6:	b538      	push	{r3, r4, r5, lr}
 80237f8:	4604      	mov	r4, r0
 80237fa:	460d      	mov	r5, r1
 80237fc:	d904      	bls.n	8023808 <_raise_r+0x14>
 80237fe:	2316      	movs	r3, #22
 8023800:	6003      	str	r3, [r0, #0]
 8023802:	f04f 30ff 	mov.w	r0, #4294967295
 8023806:	bd38      	pop	{r3, r4, r5, pc}
 8023808:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802380a:	b112      	cbz	r2, 8023812 <_raise_r+0x1e>
 802380c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023810:	b94b      	cbnz	r3, 8023826 <_raise_r+0x32>
 8023812:	4620      	mov	r0, r4
 8023814:	f000 f830 	bl	8023878 <_getpid_r>
 8023818:	462a      	mov	r2, r5
 802381a:	4601      	mov	r1, r0
 802381c:	4620      	mov	r0, r4
 802381e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023822:	f000 b817 	b.w	8023854 <_kill_r>
 8023826:	2b01      	cmp	r3, #1
 8023828:	d00a      	beq.n	8023840 <_raise_r+0x4c>
 802382a:	1c59      	adds	r1, r3, #1
 802382c:	d103      	bne.n	8023836 <_raise_r+0x42>
 802382e:	2316      	movs	r3, #22
 8023830:	6003      	str	r3, [r0, #0]
 8023832:	2001      	movs	r0, #1
 8023834:	e7e7      	b.n	8023806 <_raise_r+0x12>
 8023836:	2400      	movs	r4, #0
 8023838:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802383c:	4628      	mov	r0, r5
 802383e:	4798      	blx	r3
 8023840:	2000      	movs	r0, #0
 8023842:	e7e0      	b.n	8023806 <_raise_r+0x12>

08023844 <raise>:
 8023844:	4b02      	ldr	r3, [pc, #8]	; (8023850 <raise+0xc>)
 8023846:	4601      	mov	r1, r0
 8023848:	6818      	ldr	r0, [r3, #0]
 802384a:	f7ff bfd3 	b.w	80237f4 <_raise_r>
 802384e:	bf00      	nop
 8023850:	20000288 	.word	0x20000288

08023854 <_kill_r>:
 8023854:	b538      	push	{r3, r4, r5, lr}
 8023856:	4d07      	ldr	r5, [pc, #28]	; (8023874 <_kill_r+0x20>)
 8023858:	2300      	movs	r3, #0
 802385a:	4604      	mov	r4, r0
 802385c:	4608      	mov	r0, r1
 802385e:	4611      	mov	r1, r2
 8023860:	602b      	str	r3, [r5, #0]
 8023862:	f7e5 f9f3 	bl	8008c4c <_kill>
 8023866:	1c43      	adds	r3, r0, #1
 8023868:	d102      	bne.n	8023870 <_kill_r+0x1c>
 802386a:	682b      	ldr	r3, [r5, #0]
 802386c:	b103      	cbz	r3, 8023870 <_kill_r+0x1c>
 802386e:	6023      	str	r3, [r4, #0]
 8023870:	bd38      	pop	{r3, r4, r5, pc}
 8023872:	bf00      	nop
 8023874:	20002750 	.word	0x20002750

08023878 <_getpid_r>:
 8023878:	f7e5 b9e0 	b.w	8008c3c <_getpid>

0802387c <strncmp>:
 802387c:	b510      	push	{r4, lr}
 802387e:	b17a      	cbz	r2, 80238a0 <strncmp+0x24>
 8023880:	4603      	mov	r3, r0
 8023882:	3901      	subs	r1, #1
 8023884:	1884      	adds	r4, r0, r2
 8023886:	f813 0b01 	ldrb.w	r0, [r3], #1
 802388a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802388e:	4290      	cmp	r0, r2
 8023890:	d101      	bne.n	8023896 <strncmp+0x1a>
 8023892:	42a3      	cmp	r3, r4
 8023894:	d101      	bne.n	802389a <strncmp+0x1e>
 8023896:	1a80      	subs	r0, r0, r2
 8023898:	bd10      	pop	{r4, pc}
 802389a:	2800      	cmp	r0, #0
 802389c:	d1f3      	bne.n	8023886 <strncmp+0xa>
 802389e:	e7fa      	b.n	8023896 <strncmp+0x1a>
 80238a0:	4610      	mov	r0, r2
 80238a2:	e7f9      	b.n	8023898 <strncmp+0x1c>

080238a4 <sulp>:
 80238a4:	b570      	push	{r4, r5, r6, lr}
 80238a6:	4604      	mov	r4, r0
 80238a8:	460d      	mov	r5, r1
 80238aa:	ec45 4b10 	vmov	d0, r4, r5
 80238ae:	4616      	mov	r6, r2
 80238b0:	f002 fea4 	bl	80265fc <__ulp>
 80238b4:	ec51 0b10 	vmov	r0, r1, d0
 80238b8:	b17e      	cbz	r6, 80238da <sulp+0x36>
 80238ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80238be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80238c2:	2b00      	cmp	r3, #0
 80238c4:	dd09      	ble.n	80238da <sulp+0x36>
 80238c6:	051b      	lsls	r3, r3, #20
 80238c8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80238cc:	2400      	movs	r4, #0
 80238ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80238d2:	4622      	mov	r2, r4
 80238d4:	462b      	mov	r3, r5
 80238d6:	f7dc fe99 	bl	800060c <__aeabi_dmul>
 80238da:	bd70      	pop	{r4, r5, r6, pc}
 80238dc:	0000      	movs	r0, r0
	...

080238e0 <_strtod_l>:
 80238e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238e4:	ed2d 8b02 	vpush	{d8}
 80238e8:	b09d      	sub	sp, #116	; 0x74
 80238ea:	461f      	mov	r7, r3
 80238ec:	2300      	movs	r3, #0
 80238ee:	9318      	str	r3, [sp, #96]	; 0x60
 80238f0:	4ba2      	ldr	r3, [pc, #648]	; (8023b7c <_strtod_l+0x29c>)
 80238f2:	9213      	str	r2, [sp, #76]	; 0x4c
 80238f4:	681b      	ldr	r3, [r3, #0]
 80238f6:	9305      	str	r3, [sp, #20]
 80238f8:	4604      	mov	r4, r0
 80238fa:	4618      	mov	r0, r3
 80238fc:	4688      	mov	r8, r1
 80238fe:	f7dc fcc1 	bl	8000284 <strlen>
 8023902:	f04f 0a00 	mov.w	sl, #0
 8023906:	4605      	mov	r5, r0
 8023908:	f04f 0b00 	mov.w	fp, #0
 802390c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8023910:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023912:	781a      	ldrb	r2, [r3, #0]
 8023914:	2a2b      	cmp	r2, #43	; 0x2b
 8023916:	d04e      	beq.n	80239b6 <_strtod_l+0xd6>
 8023918:	d83b      	bhi.n	8023992 <_strtod_l+0xb2>
 802391a:	2a0d      	cmp	r2, #13
 802391c:	d834      	bhi.n	8023988 <_strtod_l+0xa8>
 802391e:	2a08      	cmp	r2, #8
 8023920:	d834      	bhi.n	802398c <_strtod_l+0xac>
 8023922:	2a00      	cmp	r2, #0
 8023924:	d03e      	beq.n	80239a4 <_strtod_l+0xc4>
 8023926:	2300      	movs	r3, #0
 8023928:	930a      	str	r3, [sp, #40]	; 0x28
 802392a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 802392c:	7833      	ldrb	r3, [r6, #0]
 802392e:	2b30      	cmp	r3, #48	; 0x30
 8023930:	f040 80b0 	bne.w	8023a94 <_strtod_l+0x1b4>
 8023934:	7873      	ldrb	r3, [r6, #1]
 8023936:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802393a:	2b58      	cmp	r3, #88	; 0x58
 802393c:	d168      	bne.n	8023a10 <_strtod_l+0x130>
 802393e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023940:	9301      	str	r3, [sp, #4]
 8023942:	ab18      	add	r3, sp, #96	; 0x60
 8023944:	9702      	str	r7, [sp, #8]
 8023946:	9300      	str	r3, [sp, #0]
 8023948:	4a8d      	ldr	r2, [pc, #564]	; (8023b80 <_strtod_l+0x2a0>)
 802394a:	ab19      	add	r3, sp, #100	; 0x64
 802394c:	a917      	add	r1, sp, #92	; 0x5c
 802394e:	4620      	mov	r0, r4
 8023950:	f001 ff52 	bl	80257f8 <__gethex>
 8023954:	f010 0707 	ands.w	r7, r0, #7
 8023958:	4605      	mov	r5, r0
 802395a:	d005      	beq.n	8023968 <_strtod_l+0x88>
 802395c:	2f06      	cmp	r7, #6
 802395e:	d12c      	bne.n	80239ba <_strtod_l+0xda>
 8023960:	3601      	adds	r6, #1
 8023962:	2300      	movs	r3, #0
 8023964:	9617      	str	r6, [sp, #92]	; 0x5c
 8023966:	930a      	str	r3, [sp, #40]	; 0x28
 8023968:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802396a:	2b00      	cmp	r3, #0
 802396c:	f040 8590 	bne.w	8024490 <_strtod_l+0xbb0>
 8023970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023972:	b1eb      	cbz	r3, 80239b0 <_strtod_l+0xd0>
 8023974:	4652      	mov	r2, sl
 8023976:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 802397a:	ec43 2b10 	vmov	d0, r2, r3
 802397e:	b01d      	add	sp, #116	; 0x74
 8023980:	ecbd 8b02 	vpop	{d8}
 8023984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023988:	2a20      	cmp	r2, #32
 802398a:	d1cc      	bne.n	8023926 <_strtod_l+0x46>
 802398c:	3301      	adds	r3, #1
 802398e:	9317      	str	r3, [sp, #92]	; 0x5c
 8023990:	e7be      	b.n	8023910 <_strtod_l+0x30>
 8023992:	2a2d      	cmp	r2, #45	; 0x2d
 8023994:	d1c7      	bne.n	8023926 <_strtod_l+0x46>
 8023996:	2201      	movs	r2, #1
 8023998:	920a      	str	r2, [sp, #40]	; 0x28
 802399a:	1c5a      	adds	r2, r3, #1
 802399c:	9217      	str	r2, [sp, #92]	; 0x5c
 802399e:	785b      	ldrb	r3, [r3, #1]
 80239a0:	2b00      	cmp	r3, #0
 80239a2:	d1c2      	bne.n	802392a <_strtod_l+0x4a>
 80239a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80239a6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80239aa:	2b00      	cmp	r3, #0
 80239ac:	f040 856e 	bne.w	802448c <_strtod_l+0xbac>
 80239b0:	4652      	mov	r2, sl
 80239b2:	465b      	mov	r3, fp
 80239b4:	e7e1      	b.n	802397a <_strtod_l+0x9a>
 80239b6:	2200      	movs	r2, #0
 80239b8:	e7ee      	b.n	8023998 <_strtod_l+0xb8>
 80239ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80239bc:	b13a      	cbz	r2, 80239ce <_strtod_l+0xee>
 80239be:	2135      	movs	r1, #53	; 0x35
 80239c0:	a81a      	add	r0, sp, #104	; 0x68
 80239c2:	f002 ff26 	bl	8026812 <__copybits>
 80239c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80239c8:	4620      	mov	r0, r4
 80239ca:	f002 fae5 	bl	8025f98 <_Bfree>
 80239ce:	3f01      	subs	r7, #1
 80239d0:	2f04      	cmp	r7, #4
 80239d2:	d806      	bhi.n	80239e2 <_strtod_l+0x102>
 80239d4:	e8df f007 	tbb	[pc, r7]
 80239d8:	1714030a 	.word	0x1714030a
 80239dc:	0a          	.byte	0x0a
 80239dd:	00          	.byte	0x00
 80239de:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80239e2:	0728      	lsls	r0, r5, #28
 80239e4:	d5c0      	bpl.n	8023968 <_strtod_l+0x88>
 80239e6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80239ea:	e7bd      	b.n	8023968 <_strtod_l+0x88>
 80239ec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80239f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80239f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80239f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80239fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80239fe:	e7f0      	b.n	80239e2 <_strtod_l+0x102>
 8023a00:	f8df b180 	ldr.w	fp, [pc, #384]	; 8023b84 <_strtod_l+0x2a4>
 8023a04:	e7ed      	b.n	80239e2 <_strtod_l+0x102>
 8023a06:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8023a0a:	f04f 3aff 	mov.w	sl, #4294967295
 8023a0e:	e7e8      	b.n	80239e2 <_strtod_l+0x102>
 8023a10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023a12:	1c5a      	adds	r2, r3, #1
 8023a14:	9217      	str	r2, [sp, #92]	; 0x5c
 8023a16:	785b      	ldrb	r3, [r3, #1]
 8023a18:	2b30      	cmp	r3, #48	; 0x30
 8023a1a:	d0f9      	beq.n	8023a10 <_strtod_l+0x130>
 8023a1c:	2b00      	cmp	r3, #0
 8023a1e:	d0a3      	beq.n	8023968 <_strtod_l+0x88>
 8023a20:	2301      	movs	r3, #1
 8023a22:	f04f 0900 	mov.w	r9, #0
 8023a26:	9304      	str	r3, [sp, #16]
 8023a28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023a2a:	9308      	str	r3, [sp, #32]
 8023a2c:	f8cd 901c 	str.w	r9, [sp, #28]
 8023a30:	464f      	mov	r7, r9
 8023a32:	220a      	movs	r2, #10
 8023a34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8023a36:	7806      	ldrb	r6, [r0, #0]
 8023a38:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8023a3c:	b2d9      	uxtb	r1, r3
 8023a3e:	2909      	cmp	r1, #9
 8023a40:	d92a      	bls.n	8023a98 <_strtod_l+0x1b8>
 8023a42:	9905      	ldr	r1, [sp, #20]
 8023a44:	462a      	mov	r2, r5
 8023a46:	f7ff ff19 	bl	802387c <strncmp>
 8023a4a:	b398      	cbz	r0, 8023ab4 <_strtod_l+0x1d4>
 8023a4c:	2000      	movs	r0, #0
 8023a4e:	4632      	mov	r2, r6
 8023a50:	463d      	mov	r5, r7
 8023a52:	9005      	str	r0, [sp, #20]
 8023a54:	4603      	mov	r3, r0
 8023a56:	2a65      	cmp	r2, #101	; 0x65
 8023a58:	d001      	beq.n	8023a5e <_strtod_l+0x17e>
 8023a5a:	2a45      	cmp	r2, #69	; 0x45
 8023a5c:	d118      	bne.n	8023a90 <_strtod_l+0x1b0>
 8023a5e:	b91d      	cbnz	r5, 8023a68 <_strtod_l+0x188>
 8023a60:	9a04      	ldr	r2, [sp, #16]
 8023a62:	4302      	orrs	r2, r0
 8023a64:	d09e      	beq.n	80239a4 <_strtod_l+0xc4>
 8023a66:	2500      	movs	r5, #0
 8023a68:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8023a6c:	f108 0201 	add.w	r2, r8, #1
 8023a70:	9217      	str	r2, [sp, #92]	; 0x5c
 8023a72:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023a76:	2a2b      	cmp	r2, #43	; 0x2b
 8023a78:	d075      	beq.n	8023b66 <_strtod_l+0x286>
 8023a7a:	2a2d      	cmp	r2, #45	; 0x2d
 8023a7c:	d07b      	beq.n	8023b76 <_strtod_l+0x296>
 8023a7e:	f04f 0c00 	mov.w	ip, #0
 8023a82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8023a86:	2909      	cmp	r1, #9
 8023a88:	f240 8082 	bls.w	8023b90 <_strtod_l+0x2b0>
 8023a8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8023a90:	2600      	movs	r6, #0
 8023a92:	e09d      	b.n	8023bd0 <_strtod_l+0x2f0>
 8023a94:	2300      	movs	r3, #0
 8023a96:	e7c4      	b.n	8023a22 <_strtod_l+0x142>
 8023a98:	2f08      	cmp	r7, #8
 8023a9a:	bfd8      	it	le
 8023a9c:	9907      	ldrle	r1, [sp, #28]
 8023a9e:	f100 0001 	add.w	r0, r0, #1
 8023aa2:	bfda      	itte	le
 8023aa4:	fb02 3301 	mlale	r3, r2, r1, r3
 8023aa8:	9307      	strle	r3, [sp, #28]
 8023aaa:	fb02 3909 	mlagt	r9, r2, r9, r3
 8023aae:	3701      	adds	r7, #1
 8023ab0:	9017      	str	r0, [sp, #92]	; 0x5c
 8023ab2:	e7bf      	b.n	8023a34 <_strtod_l+0x154>
 8023ab4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023ab6:	195a      	adds	r2, r3, r5
 8023ab8:	9217      	str	r2, [sp, #92]	; 0x5c
 8023aba:	5d5a      	ldrb	r2, [r3, r5]
 8023abc:	2f00      	cmp	r7, #0
 8023abe:	d037      	beq.n	8023b30 <_strtod_l+0x250>
 8023ac0:	9005      	str	r0, [sp, #20]
 8023ac2:	463d      	mov	r5, r7
 8023ac4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8023ac8:	2b09      	cmp	r3, #9
 8023aca:	d912      	bls.n	8023af2 <_strtod_l+0x212>
 8023acc:	2301      	movs	r3, #1
 8023ace:	e7c2      	b.n	8023a56 <_strtod_l+0x176>
 8023ad0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023ad2:	1c5a      	adds	r2, r3, #1
 8023ad4:	9217      	str	r2, [sp, #92]	; 0x5c
 8023ad6:	785a      	ldrb	r2, [r3, #1]
 8023ad8:	3001      	adds	r0, #1
 8023ada:	2a30      	cmp	r2, #48	; 0x30
 8023adc:	d0f8      	beq.n	8023ad0 <_strtod_l+0x1f0>
 8023ade:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8023ae2:	2b08      	cmp	r3, #8
 8023ae4:	f200 84d9 	bhi.w	802449a <_strtod_l+0xbba>
 8023ae8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023aea:	9005      	str	r0, [sp, #20]
 8023aec:	2000      	movs	r0, #0
 8023aee:	9308      	str	r3, [sp, #32]
 8023af0:	4605      	mov	r5, r0
 8023af2:	3a30      	subs	r2, #48	; 0x30
 8023af4:	f100 0301 	add.w	r3, r0, #1
 8023af8:	d014      	beq.n	8023b24 <_strtod_l+0x244>
 8023afa:	9905      	ldr	r1, [sp, #20]
 8023afc:	4419      	add	r1, r3
 8023afe:	9105      	str	r1, [sp, #20]
 8023b00:	462b      	mov	r3, r5
 8023b02:	eb00 0e05 	add.w	lr, r0, r5
 8023b06:	210a      	movs	r1, #10
 8023b08:	4573      	cmp	r3, lr
 8023b0a:	d113      	bne.n	8023b34 <_strtod_l+0x254>
 8023b0c:	182b      	adds	r3, r5, r0
 8023b0e:	2b08      	cmp	r3, #8
 8023b10:	f105 0501 	add.w	r5, r5, #1
 8023b14:	4405      	add	r5, r0
 8023b16:	dc1c      	bgt.n	8023b52 <_strtod_l+0x272>
 8023b18:	9907      	ldr	r1, [sp, #28]
 8023b1a:	230a      	movs	r3, #10
 8023b1c:	fb03 2301 	mla	r3, r3, r1, r2
 8023b20:	9307      	str	r3, [sp, #28]
 8023b22:	2300      	movs	r3, #0
 8023b24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8023b26:	1c51      	adds	r1, r2, #1
 8023b28:	9117      	str	r1, [sp, #92]	; 0x5c
 8023b2a:	7852      	ldrb	r2, [r2, #1]
 8023b2c:	4618      	mov	r0, r3
 8023b2e:	e7c9      	b.n	8023ac4 <_strtod_l+0x1e4>
 8023b30:	4638      	mov	r0, r7
 8023b32:	e7d2      	b.n	8023ada <_strtod_l+0x1fa>
 8023b34:	2b08      	cmp	r3, #8
 8023b36:	dc04      	bgt.n	8023b42 <_strtod_l+0x262>
 8023b38:	9e07      	ldr	r6, [sp, #28]
 8023b3a:	434e      	muls	r6, r1
 8023b3c:	9607      	str	r6, [sp, #28]
 8023b3e:	3301      	adds	r3, #1
 8023b40:	e7e2      	b.n	8023b08 <_strtod_l+0x228>
 8023b42:	f103 0c01 	add.w	ip, r3, #1
 8023b46:	f1bc 0f10 	cmp.w	ip, #16
 8023b4a:	bfd8      	it	le
 8023b4c:	fb01 f909 	mulle.w	r9, r1, r9
 8023b50:	e7f5      	b.n	8023b3e <_strtod_l+0x25e>
 8023b52:	2d10      	cmp	r5, #16
 8023b54:	bfdc      	itt	le
 8023b56:	230a      	movle	r3, #10
 8023b58:	fb03 2909 	mlale	r9, r3, r9, r2
 8023b5c:	e7e1      	b.n	8023b22 <_strtod_l+0x242>
 8023b5e:	2300      	movs	r3, #0
 8023b60:	9305      	str	r3, [sp, #20]
 8023b62:	2301      	movs	r3, #1
 8023b64:	e77c      	b.n	8023a60 <_strtod_l+0x180>
 8023b66:	f04f 0c00 	mov.w	ip, #0
 8023b6a:	f108 0202 	add.w	r2, r8, #2
 8023b6e:	9217      	str	r2, [sp, #92]	; 0x5c
 8023b70:	f898 2002 	ldrb.w	r2, [r8, #2]
 8023b74:	e785      	b.n	8023a82 <_strtod_l+0x1a2>
 8023b76:	f04f 0c01 	mov.w	ip, #1
 8023b7a:	e7f6      	b.n	8023b6a <_strtod_l+0x28a>
 8023b7c:	08029654 	.word	0x08029654
 8023b80:	080293a8 	.word	0x080293a8
 8023b84:	7ff00000 	.word	0x7ff00000
 8023b88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8023b8a:	1c51      	adds	r1, r2, #1
 8023b8c:	9117      	str	r1, [sp, #92]	; 0x5c
 8023b8e:	7852      	ldrb	r2, [r2, #1]
 8023b90:	2a30      	cmp	r2, #48	; 0x30
 8023b92:	d0f9      	beq.n	8023b88 <_strtod_l+0x2a8>
 8023b94:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8023b98:	2908      	cmp	r1, #8
 8023b9a:	f63f af79 	bhi.w	8023a90 <_strtod_l+0x1b0>
 8023b9e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8023ba2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8023ba4:	9206      	str	r2, [sp, #24]
 8023ba6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8023ba8:	1c51      	adds	r1, r2, #1
 8023baa:	9117      	str	r1, [sp, #92]	; 0x5c
 8023bac:	7852      	ldrb	r2, [r2, #1]
 8023bae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8023bb2:	2e09      	cmp	r6, #9
 8023bb4:	d937      	bls.n	8023c26 <_strtod_l+0x346>
 8023bb6:	9e06      	ldr	r6, [sp, #24]
 8023bb8:	1b89      	subs	r1, r1, r6
 8023bba:	2908      	cmp	r1, #8
 8023bbc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8023bc0:	dc02      	bgt.n	8023bc8 <_strtod_l+0x2e8>
 8023bc2:	4576      	cmp	r6, lr
 8023bc4:	bfa8      	it	ge
 8023bc6:	4676      	movge	r6, lr
 8023bc8:	f1bc 0f00 	cmp.w	ip, #0
 8023bcc:	d000      	beq.n	8023bd0 <_strtod_l+0x2f0>
 8023bce:	4276      	negs	r6, r6
 8023bd0:	2d00      	cmp	r5, #0
 8023bd2:	d14d      	bne.n	8023c70 <_strtod_l+0x390>
 8023bd4:	9904      	ldr	r1, [sp, #16]
 8023bd6:	4301      	orrs	r1, r0
 8023bd8:	f47f aec6 	bne.w	8023968 <_strtod_l+0x88>
 8023bdc:	2b00      	cmp	r3, #0
 8023bde:	f47f aee1 	bne.w	80239a4 <_strtod_l+0xc4>
 8023be2:	2a69      	cmp	r2, #105	; 0x69
 8023be4:	d027      	beq.n	8023c36 <_strtod_l+0x356>
 8023be6:	dc24      	bgt.n	8023c32 <_strtod_l+0x352>
 8023be8:	2a49      	cmp	r2, #73	; 0x49
 8023bea:	d024      	beq.n	8023c36 <_strtod_l+0x356>
 8023bec:	2a4e      	cmp	r2, #78	; 0x4e
 8023bee:	f47f aed9 	bne.w	80239a4 <_strtod_l+0xc4>
 8023bf2:	499f      	ldr	r1, [pc, #636]	; (8023e70 <_strtod_l+0x590>)
 8023bf4:	a817      	add	r0, sp, #92	; 0x5c
 8023bf6:	f002 f857 	bl	8025ca8 <__match>
 8023bfa:	2800      	cmp	r0, #0
 8023bfc:	f43f aed2 	beq.w	80239a4 <_strtod_l+0xc4>
 8023c00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023c02:	781b      	ldrb	r3, [r3, #0]
 8023c04:	2b28      	cmp	r3, #40	; 0x28
 8023c06:	d12d      	bne.n	8023c64 <_strtod_l+0x384>
 8023c08:	499a      	ldr	r1, [pc, #616]	; (8023e74 <_strtod_l+0x594>)
 8023c0a:	aa1a      	add	r2, sp, #104	; 0x68
 8023c0c:	a817      	add	r0, sp, #92	; 0x5c
 8023c0e:	f002 f85f 	bl	8025cd0 <__hexnan>
 8023c12:	2805      	cmp	r0, #5
 8023c14:	d126      	bne.n	8023c64 <_strtod_l+0x384>
 8023c16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023c18:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8023c1c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8023c20:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8023c24:	e6a0      	b.n	8023968 <_strtod_l+0x88>
 8023c26:	210a      	movs	r1, #10
 8023c28:	fb01 2e0e 	mla	lr, r1, lr, r2
 8023c2c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8023c30:	e7b9      	b.n	8023ba6 <_strtod_l+0x2c6>
 8023c32:	2a6e      	cmp	r2, #110	; 0x6e
 8023c34:	e7db      	b.n	8023bee <_strtod_l+0x30e>
 8023c36:	4990      	ldr	r1, [pc, #576]	; (8023e78 <_strtod_l+0x598>)
 8023c38:	a817      	add	r0, sp, #92	; 0x5c
 8023c3a:	f002 f835 	bl	8025ca8 <__match>
 8023c3e:	2800      	cmp	r0, #0
 8023c40:	f43f aeb0 	beq.w	80239a4 <_strtod_l+0xc4>
 8023c44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023c46:	498d      	ldr	r1, [pc, #564]	; (8023e7c <_strtod_l+0x59c>)
 8023c48:	3b01      	subs	r3, #1
 8023c4a:	a817      	add	r0, sp, #92	; 0x5c
 8023c4c:	9317      	str	r3, [sp, #92]	; 0x5c
 8023c4e:	f002 f82b 	bl	8025ca8 <__match>
 8023c52:	b910      	cbnz	r0, 8023c5a <_strtod_l+0x37a>
 8023c54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023c56:	3301      	adds	r3, #1
 8023c58:	9317      	str	r3, [sp, #92]	; 0x5c
 8023c5a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8023e8c <_strtod_l+0x5ac>
 8023c5e:	f04f 0a00 	mov.w	sl, #0
 8023c62:	e681      	b.n	8023968 <_strtod_l+0x88>
 8023c64:	4886      	ldr	r0, [pc, #536]	; (8023e80 <_strtod_l+0x5a0>)
 8023c66:	f7fe fda7 	bl	80227b8 <nan>
 8023c6a:	ec5b ab10 	vmov	sl, fp, d0
 8023c6e:	e67b      	b.n	8023968 <_strtod_l+0x88>
 8023c70:	9b05      	ldr	r3, [sp, #20]
 8023c72:	9807      	ldr	r0, [sp, #28]
 8023c74:	1af3      	subs	r3, r6, r3
 8023c76:	2f00      	cmp	r7, #0
 8023c78:	bf08      	it	eq
 8023c7a:	462f      	moveq	r7, r5
 8023c7c:	2d10      	cmp	r5, #16
 8023c7e:	9306      	str	r3, [sp, #24]
 8023c80:	46a8      	mov	r8, r5
 8023c82:	bfa8      	it	ge
 8023c84:	f04f 0810 	movge.w	r8, #16
 8023c88:	f7dc fc46 	bl	8000518 <__aeabi_ui2d>
 8023c8c:	2d09      	cmp	r5, #9
 8023c8e:	4682      	mov	sl, r0
 8023c90:	468b      	mov	fp, r1
 8023c92:	dd13      	ble.n	8023cbc <_strtod_l+0x3dc>
 8023c94:	4b7b      	ldr	r3, [pc, #492]	; (8023e84 <_strtod_l+0x5a4>)
 8023c96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8023c9a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8023c9e:	f7dc fcb5 	bl	800060c <__aeabi_dmul>
 8023ca2:	4682      	mov	sl, r0
 8023ca4:	4648      	mov	r0, r9
 8023ca6:	468b      	mov	fp, r1
 8023ca8:	f7dc fc36 	bl	8000518 <__aeabi_ui2d>
 8023cac:	4602      	mov	r2, r0
 8023cae:	460b      	mov	r3, r1
 8023cb0:	4650      	mov	r0, sl
 8023cb2:	4659      	mov	r1, fp
 8023cb4:	f7dc faf4 	bl	80002a0 <__adddf3>
 8023cb8:	4682      	mov	sl, r0
 8023cba:	468b      	mov	fp, r1
 8023cbc:	2d0f      	cmp	r5, #15
 8023cbe:	dc38      	bgt.n	8023d32 <_strtod_l+0x452>
 8023cc0:	9b06      	ldr	r3, [sp, #24]
 8023cc2:	2b00      	cmp	r3, #0
 8023cc4:	f43f ae50 	beq.w	8023968 <_strtod_l+0x88>
 8023cc8:	dd24      	ble.n	8023d14 <_strtod_l+0x434>
 8023cca:	2b16      	cmp	r3, #22
 8023ccc:	dc0b      	bgt.n	8023ce6 <_strtod_l+0x406>
 8023cce:	496d      	ldr	r1, [pc, #436]	; (8023e84 <_strtod_l+0x5a4>)
 8023cd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8023cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023cd8:	4652      	mov	r2, sl
 8023cda:	465b      	mov	r3, fp
 8023cdc:	f7dc fc96 	bl	800060c <__aeabi_dmul>
 8023ce0:	4682      	mov	sl, r0
 8023ce2:	468b      	mov	fp, r1
 8023ce4:	e640      	b.n	8023968 <_strtod_l+0x88>
 8023ce6:	9a06      	ldr	r2, [sp, #24]
 8023ce8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8023cec:	4293      	cmp	r3, r2
 8023cee:	db20      	blt.n	8023d32 <_strtod_l+0x452>
 8023cf0:	4c64      	ldr	r4, [pc, #400]	; (8023e84 <_strtod_l+0x5a4>)
 8023cf2:	f1c5 050f 	rsb	r5, r5, #15
 8023cf6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8023cfa:	4652      	mov	r2, sl
 8023cfc:	465b      	mov	r3, fp
 8023cfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023d02:	f7dc fc83 	bl	800060c <__aeabi_dmul>
 8023d06:	9b06      	ldr	r3, [sp, #24]
 8023d08:	1b5d      	subs	r5, r3, r5
 8023d0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8023d0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8023d12:	e7e3      	b.n	8023cdc <_strtod_l+0x3fc>
 8023d14:	9b06      	ldr	r3, [sp, #24]
 8023d16:	3316      	adds	r3, #22
 8023d18:	db0b      	blt.n	8023d32 <_strtod_l+0x452>
 8023d1a:	9b05      	ldr	r3, [sp, #20]
 8023d1c:	1b9e      	subs	r6, r3, r6
 8023d1e:	4b59      	ldr	r3, [pc, #356]	; (8023e84 <_strtod_l+0x5a4>)
 8023d20:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8023d24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8023d28:	4650      	mov	r0, sl
 8023d2a:	4659      	mov	r1, fp
 8023d2c:	f7dc fd98 	bl	8000860 <__aeabi_ddiv>
 8023d30:	e7d6      	b.n	8023ce0 <_strtod_l+0x400>
 8023d32:	9b06      	ldr	r3, [sp, #24]
 8023d34:	eba5 0808 	sub.w	r8, r5, r8
 8023d38:	4498      	add	r8, r3
 8023d3a:	f1b8 0f00 	cmp.w	r8, #0
 8023d3e:	dd74      	ble.n	8023e2a <_strtod_l+0x54a>
 8023d40:	f018 030f 	ands.w	r3, r8, #15
 8023d44:	d00a      	beq.n	8023d5c <_strtod_l+0x47c>
 8023d46:	494f      	ldr	r1, [pc, #316]	; (8023e84 <_strtod_l+0x5a4>)
 8023d48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8023d4c:	4652      	mov	r2, sl
 8023d4e:	465b      	mov	r3, fp
 8023d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023d54:	f7dc fc5a 	bl	800060c <__aeabi_dmul>
 8023d58:	4682      	mov	sl, r0
 8023d5a:	468b      	mov	fp, r1
 8023d5c:	f038 080f 	bics.w	r8, r8, #15
 8023d60:	d04f      	beq.n	8023e02 <_strtod_l+0x522>
 8023d62:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8023d66:	dd22      	ble.n	8023dae <_strtod_l+0x4ce>
 8023d68:	2500      	movs	r5, #0
 8023d6a:	462e      	mov	r6, r5
 8023d6c:	9507      	str	r5, [sp, #28]
 8023d6e:	9505      	str	r5, [sp, #20]
 8023d70:	2322      	movs	r3, #34	; 0x22
 8023d72:	f8df b118 	ldr.w	fp, [pc, #280]	; 8023e8c <_strtod_l+0x5ac>
 8023d76:	6023      	str	r3, [r4, #0]
 8023d78:	f04f 0a00 	mov.w	sl, #0
 8023d7c:	9b07      	ldr	r3, [sp, #28]
 8023d7e:	2b00      	cmp	r3, #0
 8023d80:	f43f adf2 	beq.w	8023968 <_strtod_l+0x88>
 8023d84:	9918      	ldr	r1, [sp, #96]	; 0x60
 8023d86:	4620      	mov	r0, r4
 8023d88:	f002 f906 	bl	8025f98 <_Bfree>
 8023d8c:	9905      	ldr	r1, [sp, #20]
 8023d8e:	4620      	mov	r0, r4
 8023d90:	f002 f902 	bl	8025f98 <_Bfree>
 8023d94:	4631      	mov	r1, r6
 8023d96:	4620      	mov	r0, r4
 8023d98:	f002 f8fe 	bl	8025f98 <_Bfree>
 8023d9c:	9907      	ldr	r1, [sp, #28]
 8023d9e:	4620      	mov	r0, r4
 8023da0:	f002 f8fa 	bl	8025f98 <_Bfree>
 8023da4:	4629      	mov	r1, r5
 8023da6:	4620      	mov	r0, r4
 8023da8:	f002 f8f6 	bl	8025f98 <_Bfree>
 8023dac:	e5dc      	b.n	8023968 <_strtod_l+0x88>
 8023dae:	4b36      	ldr	r3, [pc, #216]	; (8023e88 <_strtod_l+0x5a8>)
 8023db0:	9304      	str	r3, [sp, #16]
 8023db2:	2300      	movs	r3, #0
 8023db4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8023db8:	4650      	mov	r0, sl
 8023dba:	4659      	mov	r1, fp
 8023dbc:	4699      	mov	r9, r3
 8023dbe:	f1b8 0f01 	cmp.w	r8, #1
 8023dc2:	dc21      	bgt.n	8023e08 <_strtod_l+0x528>
 8023dc4:	b10b      	cbz	r3, 8023dca <_strtod_l+0x4ea>
 8023dc6:	4682      	mov	sl, r0
 8023dc8:	468b      	mov	fp, r1
 8023dca:	4b2f      	ldr	r3, [pc, #188]	; (8023e88 <_strtod_l+0x5a8>)
 8023dcc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8023dd0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8023dd4:	4652      	mov	r2, sl
 8023dd6:	465b      	mov	r3, fp
 8023dd8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8023ddc:	f7dc fc16 	bl	800060c <__aeabi_dmul>
 8023de0:	4b2a      	ldr	r3, [pc, #168]	; (8023e8c <_strtod_l+0x5ac>)
 8023de2:	460a      	mov	r2, r1
 8023de4:	400b      	ands	r3, r1
 8023de6:	492a      	ldr	r1, [pc, #168]	; (8023e90 <_strtod_l+0x5b0>)
 8023de8:	428b      	cmp	r3, r1
 8023dea:	4682      	mov	sl, r0
 8023dec:	d8bc      	bhi.n	8023d68 <_strtod_l+0x488>
 8023dee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8023df2:	428b      	cmp	r3, r1
 8023df4:	bf86      	itte	hi
 8023df6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8023e94 <_strtod_l+0x5b4>
 8023dfa:	f04f 3aff 	movhi.w	sl, #4294967295
 8023dfe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8023e02:	2300      	movs	r3, #0
 8023e04:	9304      	str	r3, [sp, #16]
 8023e06:	e084      	b.n	8023f12 <_strtod_l+0x632>
 8023e08:	f018 0f01 	tst.w	r8, #1
 8023e0c:	d005      	beq.n	8023e1a <_strtod_l+0x53a>
 8023e0e:	9b04      	ldr	r3, [sp, #16]
 8023e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e14:	f7dc fbfa 	bl	800060c <__aeabi_dmul>
 8023e18:	2301      	movs	r3, #1
 8023e1a:	9a04      	ldr	r2, [sp, #16]
 8023e1c:	3208      	adds	r2, #8
 8023e1e:	f109 0901 	add.w	r9, r9, #1
 8023e22:	ea4f 0868 	mov.w	r8, r8, asr #1
 8023e26:	9204      	str	r2, [sp, #16]
 8023e28:	e7c9      	b.n	8023dbe <_strtod_l+0x4de>
 8023e2a:	d0ea      	beq.n	8023e02 <_strtod_l+0x522>
 8023e2c:	f1c8 0800 	rsb	r8, r8, #0
 8023e30:	f018 020f 	ands.w	r2, r8, #15
 8023e34:	d00a      	beq.n	8023e4c <_strtod_l+0x56c>
 8023e36:	4b13      	ldr	r3, [pc, #76]	; (8023e84 <_strtod_l+0x5a4>)
 8023e38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8023e3c:	4650      	mov	r0, sl
 8023e3e:	4659      	mov	r1, fp
 8023e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e44:	f7dc fd0c 	bl	8000860 <__aeabi_ddiv>
 8023e48:	4682      	mov	sl, r0
 8023e4a:	468b      	mov	fp, r1
 8023e4c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8023e50:	d0d7      	beq.n	8023e02 <_strtod_l+0x522>
 8023e52:	f1b8 0f1f 	cmp.w	r8, #31
 8023e56:	dd1f      	ble.n	8023e98 <_strtod_l+0x5b8>
 8023e58:	2500      	movs	r5, #0
 8023e5a:	462e      	mov	r6, r5
 8023e5c:	9507      	str	r5, [sp, #28]
 8023e5e:	9505      	str	r5, [sp, #20]
 8023e60:	2322      	movs	r3, #34	; 0x22
 8023e62:	f04f 0a00 	mov.w	sl, #0
 8023e66:	f04f 0b00 	mov.w	fp, #0
 8023e6a:	6023      	str	r3, [r4, #0]
 8023e6c:	e786      	b.n	8023d7c <_strtod_l+0x49c>
 8023e6e:	bf00      	nop
 8023e70:	0802937e 	.word	0x0802937e
 8023e74:	080293bc 	.word	0x080293bc
 8023e78:	08029376 	.word	0x08029376
 8023e7c:	080294fc 	.word	0x080294fc
 8023e80:	0802935b 	.word	0x0802935b
 8023e84:	080296f0 	.word	0x080296f0
 8023e88:	080296c8 	.word	0x080296c8
 8023e8c:	7ff00000 	.word	0x7ff00000
 8023e90:	7ca00000 	.word	0x7ca00000
 8023e94:	7fefffff 	.word	0x7fefffff
 8023e98:	f018 0310 	ands.w	r3, r8, #16
 8023e9c:	bf18      	it	ne
 8023e9e:	236a      	movne	r3, #106	; 0x6a
 8023ea0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8024250 <_strtod_l+0x970>
 8023ea4:	9304      	str	r3, [sp, #16]
 8023ea6:	4650      	mov	r0, sl
 8023ea8:	4659      	mov	r1, fp
 8023eaa:	2300      	movs	r3, #0
 8023eac:	f018 0f01 	tst.w	r8, #1
 8023eb0:	d004      	beq.n	8023ebc <_strtod_l+0x5dc>
 8023eb2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8023eb6:	f7dc fba9 	bl	800060c <__aeabi_dmul>
 8023eba:	2301      	movs	r3, #1
 8023ebc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8023ec0:	f109 0908 	add.w	r9, r9, #8
 8023ec4:	d1f2      	bne.n	8023eac <_strtod_l+0x5cc>
 8023ec6:	b10b      	cbz	r3, 8023ecc <_strtod_l+0x5ec>
 8023ec8:	4682      	mov	sl, r0
 8023eca:	468b      	mov	fp, r1
 8023ecc:	9b04      	ldr	r3, [sp, #16]
 8023ece:	b1c3      	cbz	r3, 8023f02 <_strtod_l+0x622>
 8023ed0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8023ed4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8023ed8:	2b00      	cmp	r3, #0
 8023eda:	4659      	mov	r1, fp
 8023edc:	dd11      	ble.n	8023f02 <_strtod_l+0x622>
 8023ede:	2b1f      	cmp	r3, #31
 8023ee0:	f340 8124 	ble.w	802412c <_strtod_l+0x84c>
 8023ee4:	2b34      	cmp	r3, #52	; 0x34
 8023ee6:	bfde      	ittt	le
 8023ee8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8023eec:	f04f 33ff 	movle.w	r3, #4294967295
 8023ef0:	fa03 f202 	lslle.w	r2, r3, r2
 8023ef4:	f04f 0a00 	mov.w	sl, #0
 8023ef8:	bfcc      	ite	gt
 8023efa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8023efe:	ea02 0b01 	andle.w	fp, r2, r1
 8023f02:	2200      	movs	r2, #0
 8023f04:	2300      	movs	r3, #0
 8023f06:	4650      	mov	r0, sl
 8023f08:	4659      	mov	r1, fp
 8023f0a:	f7dc fde7 	bl	8000adc <__aeabi_dcmpeq>
 8023f0e:	2800      	cmp	r0, #0
 8023f10:	d1a2      	bne.n	8023e58 <_strtod_l+0x578>
 8023f12:	9b07      	ldr	r3, [sp, #28]
 8023f14:	9300      	str	r3, [sp, #0]
 8023f16:	9908      	ldr	r1, [sp, #32]
 8023f18:	462b      	mov	r3, r5
 8023f1a:	463a      	mov	r2, r7
 8023f1c:	4620      	mov	r0, r4
 8023f1e:	f002 f8a3 	bl	8026068 <__s2b>
 8023f22:	9007      	str	r0, [sp, #28]
 8023f24:	2800      	cmp	r0, #0
 8023f26:	f43f af1f 	beq.w	8023d68 <_strtod_l+0x488>
 8023f2a:	9b05      	ldr	r3, [sp, #20]
 8023f2c:	1b9e      	subs	r6, r3, r6
 8023f2e:	9b06      	ldr	r3, [sp, #24]
 8023f30:	2b00      	cmp	r3, #0
 8023f32:	bfb4      	ite	lt
 8023f34:	4633      	movlt	r3, r6
 8023f36:	2300      	movge	r3, #0
 8023f38:	930c      	str	r3, [sp, #48]	; 0x30
 8023f3a:	9b06      	ldr	r3, [sp, #24]
 8023f3c:	2500      	movs	r5, #0
 8023f3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023f42:	9312      	str	r3, [sp, #72]	; 0x48
 8023f44:	462e      	mov	r6, r5
 8023f46:	9b07      	ldr	r3, [sp, #28]
 8023f48:	4620      	mov	r0, r4
 8023f4a:	6859      	ldr	r1, [r3, #4]
 8023f4c:	f001 ffe4 	bl	8025f18 <_Balloc>
 8023f50:	9005      	str	r0, [sp, #20]
 8023f52:	2800      	cmp	r0, #0
 8023f54:	f43f af0c 	beq.w	8023d70 <_strtod_l+0x490>
 8023f58:	9b07      	ldr	r3, [sp, #28]
 8023f5a:	691a      	ldr	r2, [r3, #16]
 8023f5c:	3202      	adds	r2, #2
 8023f5e:	f103 010c 	add.w	r1, r3, #12
 8023f62:	0092      	lsls	r2, r2, #2
 8023f64:	300c      	adds	r0, #12
 8023f66:	f7fe fd4b 	bl	8022a00 <memcpy>
 8023f6a:	ec4b ab10 	vmov	d0, sl, fp
 8023f6e:	aa1a      	add	r2, sp, #104	; 0x68
 8023f70:	a919      	add	r1, sp, #100	; 0x64
 8023f72:	4620      	mov	r0, r4
 8023f74:	f002 fbbe 	bl	80266f4 <__d2b>
 8023f78:	ec4b ab18 	vmov	d8, sl, fp
 8023f7c:	9018      	str	r0, [sp, #96]	; 0x60
 8023f7e:	2800      	cmp	r0, #0
 8023f80:	f43f aef6 	beq.w	8023d70 <_strtod_l+0x490>
 8023f84:	2101      	movs	r1, #1
 8023f86:	4620      	mov	r0, r4
 8023f88:	f002 f908 	bl	802619c <__i2b>
 8023f8c:	4606      	mov	r6, r0
 8023f8e:	2800      	cmp	r0, #0
 8023f90:	f43f aeee 	beq.w	8023d70 <_strtod_l+0x490>
 8023f94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023f96:	9904      	ldr	r1, [sp, #16]
 8023f98:	2b00      	cmp	r3, #0
 8023f9a:	bfab      	itete	ge
 8023f9c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8023f9e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8023fa0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8023fa2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8023fa6:	bfac      	ite	ge
 8023fa8:	eb03 0902 	addge.w	r9, r3, r2
 8023fac:	1ad7      	sublt	r7, r2, r3
 8023fae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8023fb0:	eba3 0801 	sub.w	r8, r3, r1
 8023fb4:	4490      	add	r8, r2
 8023fb6:	4ba1      	ldr	r3, [pc, #644]	; (802423c <_strtod_l+0x95c>)
 8023fb8:	f108 38ff 	add.w	r8, r8, #4294967295
 8023fbc:	4598      	cmp	r8, r3
 8023fbe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8023fc2:	f280 80c7 	bge.w	8024154 <_strtod_l+0x874>
 8023fc6:	eba3 0308 	sub.w	r3, r3, r8
 8023fca:	2b1f      	cmp	r3, #31
 8023fcc:	eba2 0203 	sub.w	r2, r2, r3
 8023fd0:	f04f 0101 	mov.w	r1, #1
 8023fd4:	f300 80b1 	bgt.w	802413a <_strtod_l+0x85a>
 8023fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8023fdc:	930d      	str	r3, [sp, #52]	; 0x34
 8023fde:	2300      	movs	r3, #0
 8023fe0:	9308      	str	r3, [sp, #32]
 8023fe2:	eb09 0802 	add.w	r8, r9, r2
 8023fe6:	9b04      	ldr	r3, [sp, #16]
 8023fe8:	45c1      	cmp	r9, r8
 8023fea:	4417      	add	r7, r2
 8023fec:	441f      	add	r7, r3
 8023fee:	464b      	mov	r3, r9
 8023ff0:	bfa8      	it	ge
 8023ff2:	4643      	movge	r3, r8
 8023ff4:	42bb      	cmp	r3, r7
 8023ff6:	bfa8      	it	ge
 8023ff8:	463b      	movge	r3, r7
 8023ffa:	2b00      	cmp	r3, #0
 8023ffc:	bfc2      	ittt	gt
 8023ffe:	eba8 0803 	subgt.w	r8, r8, r3
 8024002:	1aff      	subgt	r7, r7, r3
 8024004:	eba9 0903 	subgt.w	r9, r9, r3
 8024008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802400a:	2b00      	cmp	r3, #0
 802400c:	dd17      	ble.n	802403e <_strtod_l+0x75e>
 802400e:	4631      	mov	r1, r6
 8024010:	461a      	mov	r2, r3
 8024012:	4620      	mov	r0, r4
 8024014:	f002 f982 	bl	802631c <__pow5mult>
 8024018:	4606      	mov	r6, r0
 802401a:	2800      	cmp	r0, #0
 802401c:	f43f aea8 	beq.w	8023d70 <_strtod_l+0x490>
 8024020:	4601      	mov	r1, r0
 8024022:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8024024:	4620      	mov	r0, r4
 8024026:	f002 f8cf 	bl	80261c8 <__multiply>
 802402a:	900b      	str	r0, [sp, #44]	; 0x2c
 802402c:	2800      	cmp	r0, #0
 802402e:	f43f ae9f 	beq.w	8023d70 <_strtod_l+0x490>
 8024032:	9918      	ldr	r1, [sp, #96]	; 0x60
 8024034:	4620      	mov	r0, r4
 8024036:	f001 ffaf 	bl	8025f98 <_Bfree>
 802403a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802403c:	9318      	str	r3, [sp, #96]	; 0x60
 802403e:	f1b8 0f00 	cmp.w	r8, #0
 8024042:	f300 808c 	bgt.w	802415e <_strtod_l+0x87e>
 8024046:	9b06      	ldr	r3, [sp, #24]
 8024048:	2b00      	cmp	r3, #0
 802404a:	dd08      	ble.n	802405e <_strtod_l+0x77e>
 802404c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802404e:	9905      	ldr	r1, [sp, #20]
 8024050:	4620      	mov	r0, r4
 8024052:	f002 f963 	bl	802631c <__pow5mult>
 8024056:	9005      	str	r0, [sp, #20]
 8024058:	2800      	cmp	r0, #0
 802405a:	f43f ae89 	beq.w	8023d70 <_strtod_l+0x490>
 802405e:	2f00      	cmp	r7, #0
 8024060:	dd08      	ble.n	8024074 <_strtod_l+0x794>
 8024062:	9905      	ldr	r1, [sp, #20]
 8024064:	463a      	mov	r2, r7
 8024066:	4620      	mov	r0, r4
 8024068:	f002 f9b2 	bl	80263d0 <__lshift>
 802406c:	9005      	str	r0, [sp, #20]
 802406e:	2800      	cmp	r0, #0
 8024070:	f43f ae7e 	beq.w	8023d70 <_strtod_l+0x490>
 8024074:	f1b9 0f00 	cmp.w	r9, #0
 8024078:	dd08      	ble.n	802408c <_strtod_l+0x7ac>
 802407a:	4631      	mov	r1, r6
 802407c:	464a      	mov	r2, r9
 802407e:	4620      	mov	r0, r4
 8024080:	f002 f9a6 	bl	80263d0 <__lshift>
 8024084:	4606      	mov	r6, r0
 8024086:	2800      	cmp	r0, #0
 8024088:	f43f ae72 	beq.w	8023d70 <_strtod_l+0x490>
 802408c:	9a05      	ldr	r2, [sp, #20]
 802408e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8024090:	4620      	mov	r0, r4
 8024092:	f002 fa29 	bl	80264e8 <__mdiff>
 8024096:	4605      	mov	r5, r0
 8024098:	2800      	cmp	r0, #0
 802409a:	f43f ae69 	beq.w	8023d70 <_strtod_l+0x490>
 802409e:	68c3      	ldr	r3, [r0, #12]
 80240a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80240a2:	2300      	movs	r3, #0
 80240a4:	60c3      	str	r3, [r0, #12]
 80240a6:	4631      	mov	r1, r6
 80240a8:	f002 fa02 	bl	80264b0 <__mcmp>
 80240ac:	2800      	cmp	r0, #0
 80240ae:	da60      	bge.n	8024172 <_strtod_l+0x892>
 80240b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80240b2:	ea53 030a 	orrs.w	r3, r3, sl
 80240b6:	f040 8082 	bne.w	80241be <_strtod_l+0x8de>
 80240ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80240be:	2b00      	cmp	r3, #0
 80240c0:	d17d      	bne.n	80241be <_strtod_l+0x8de>
 80240c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80240c6:	0d1b      	lsrs	r3, r3, #20
 80240c8:	051b      	lsls	r3, r3, #20
 80240ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80240ce:	d976      	bls.n	80241be <_strtod_l+0x8de>
 80240d0:	696b      	ldr	r3, [r5, #20]
 80240d2:	b913      	cbnz	r3, 80240da <_strtod_l+0x7fa>
 80240d4:	692b      	ldr	r3, [r5, #16]
 80240d6:	2b01      	cmp	r3, #1
 80240d8:	dd71      	ble.n	80241be <_strtod_l+0x8de>
 80240da:	4629      	mov	r1, r5
 80240dc:	2201      	movs	r2, #1
 80240de:	4620      	mov	r0, r4
 80240e0:	f002 f976 	bl	80263d0 <__lshift>
 80240e4:	4631      	mov	r1, r6
 80240e6:	4605      	mov	r5, r0
 80240e8:	f002 f9e2 	bl	80264b0 <__mcmp>
 80240ec:	2800      	cmp	r0, #0
 80240ee:	dd66      	ble.n	80241be <_strtod_l+0x8de>
 80240f0:	9904      	ldr	r1, [sp, #16]
 80240f2:	4a53      	ldr	r2, [pc, #332]	; (8024240 <_strtod_l+0x960>)
 80240f4:	465b      	mov	r3, fp
 80240f6:	2900      	cmp	r1, #0
 80240f8:	f000 8081 	beq.w	80241fe <_strtod_l+0x91e>
 80240fc:	ea02 010b 	and.w	r1, r2, fp
 8024100:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8024104:	dc7b      	bgt.n	80241fe <_strtod_l+0x91e>
 8024106:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802410a:	f77f aea9 	ble.w	8023e60 <_strtod_l+0x580>
 802410e:	4b4d      	ldr	r3, [pc, #308]	; (8024244 <_strtod_l+0x964>)
 8024110:	4650      	mov	r0, sl
 8024112:	4659      	mov	r1, fp
 8024114:	2200      	movs	r2, #0
 8024116:	f7dc fa79 	bl	800060c <__aeabi_dmul>
 802411a:	460b      	mov	r3, r1
 802411c:	4303      	orrs	r3, r0
 802411e:	bf08      	it	eq
 8024120:	2322      	moveq	r3, #34	; 0x22
 8024122:	4682      	mov	sl, r0
 8024124:	468b      	mov	fp, r1
 8024126:	bf08      	it	eq
 8024128:	6023      	streq	r3, [r4, #0]
 802412a:	e62b      	b.n	8023d84 <_strtod_l+0x4a4>
 802412c:	f04f 32ff 	mov.w	r2, #4294967295
 8024130:	fa02 f303 	lsl.w	r3, r2, r3
 8024134:	ea03 0a0a 	and.w	sl, r3, sl
 8024138:	e6e3      	b.n	8023f02 <_strtod_l+0x622>
 802413a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 802413e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8024142:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8024146:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 802414a:	fa01 f308 	lsl.w	r3, r1, r8
 802414e:	9308      	str	r3, [sp, #32]
 8024150:	910d      	str	r1, [sp, #52]	; 0x34
 8024152:	e746      	b.n	8023fe2 <_strtod_l+0x702>
 8024154:	2300      	movs	r3, #0
 8024156:	9308      	str	r3, [sp, #32]
 8024158:	2301      	movs	r3, #1
 802415a:	930d      	str	r3, [sp, #52]	; 0x34
 802415c:	e741      	b.n	8023fe2 <_strtod_l+0x702>
 802415e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8024160:	4642      	mov	r2, r8
 8024162:	4620      	mov	r0, r4
 8024164:	f002 f934 	bl	80263d0 <__lshift>
 8024168:	9018      	str	r0, [sp, #96]	; 0x60
 802416a:	2800      	cmp	r0, #0
 802416c:	f47f af6b 	bne.w	8024046 <_strtod_l+0x766>
 8024170:	e5fe      	b.n	8023d70 <_strtod_l+0x490>
 8024172:	465f      	mov	r7, fp
 8024174:	d16e      	bne.n	8024254 <_strtod_l+0x974>
 8024176:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024178:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802417c:	b342      	cbz	r2, 80241d0 <_strtod_l+0x8f0>
 802417e:	4a32      	ldr	r2, [pc, #200]	; (8024248 <_strtod_l+0x968>)
 8024180:	4293      	cmp	r3, r2
 8024182:	d128      	bne.n	80241d6 <_strtod_l+0x8f6>
 8024184:	9b04      	ldr	r3, [sp, #16]
 8024186:	4651      	mov	r1, sl
 8024188:	b1eb      	cbz	r3, 80241c6 <_strtod_l+0x8e6>
 802418a:	4b2d      	ldr	r3, [pc, #180]	; (8024240 <_strtod_l+0x960>)
 802418c:	403b      	ands	r3, r7
 802418e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8024192:	f04f 32ff 	mov.w	r2, #4294967295
 8024196:	d819      	bhi.n	80241cc <_strtod_l+0x8ec>
 8024198:	0d1b      	lsrs	r3, r3, #20
 802419a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802419e:	fa02 f303 	lsl.w	r3, r2, r3
 80241a2:	4299      	cmp	r1, r3
 80241a4:	d117      	bne.n	80241d6 <_strtod_l+0x8f6>
 80241a6:	4b29      	ldr	r3, [pc, #164]	; (802424c <_strtod_l+0x96c>)
 80241a8:	429f      	cmp	r7, r3
 80241aa:	d102      	bne.n	80241b2 <_strtod_l+0x8d2>
 80241ac:	3101      	adds	r1, #1
 80241ae:	f43f addf 	beq.w	8023d70 <_strtod_l+0x490>
 80241b2:	4b23      	ldr	r3, [pc, #140]	; (8024240 <_strtod_l+0x960>)
 80241b4:	403b      	ands	r3, r7
 80241b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80241ba:	f04f 0a00 	mov.w	sl, #0
 80241be:	9b04      	ldr	r3, [sp, #16]
 80241c0:	2b00      	cmp	r3, #0
 80241c2:	d1a4      	bne.n	802410e <_strtod_l+0x82e>
 80241c4:	e5de      	b.n	8023d84 <_strtod_l+0x4a4>
 80241c6:	f04f 33ff 	mov.w	r3, #4294967295
 80241ca:	e7ea      	b.n	80241a2 <_strtod_l+0x8c2>
 80241cc:	4613      	mov	r3, r2
 80241ce:	e7e8      	b.n	80241a2 <_strtod_l+0x8c2>
 80241d0:	ea53 030a 	orrs.w	r3, r3, sl
 80241d4:	d08c      	beq.n	80240f0 <_strtod_l+0x810>
 80241d6:	9b08      	ldr	r3, [sp, #32]
 80241d8:	b1db      	cbz	r3, 8024212 <_strtod_l+0x932>
 80241da:	423b      	tst	r3, r7
 80241dc:	d0ef      	beq.n	80241be <_strtod_l+0x8de>
 80241de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80241e0:	9a04      	ldr	r2, [sp, #16]
 80241e2:	4650      	mov	r0, sl
 80241e4:	4659      	mov	r1, fp
 80241e6:	b1c3      	cbz	r3, 802421a <_strtod_l+0x93a>
 80241e8:	f7ff fb5c 	bl	80238a4 <sulp>
 80241ec:	4602      	mov	r2, r0
 80241ee:	460b      	mov	r3, r1
 80241f0:	ec51 0b18 	vmov	r0, r1, d8
 80241f4:	f7dc f854 	bl	80002a0 <__adddf3>
 80241f8:	4682      	mov	sl, r0
 80241fa:	468b      	mov	fp, r1
 80241fc:	e7df      	b.n	80241be <_strtod_l+0x8de>
 80241fe:	4013      	ands	r3, r2
 8024200:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8024204:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8024208:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802420c:	f04f 3aff 	mov.w	sl, #4294967295
 8024210:	e7d5      	b.n	80241be <_strtod_l+0x8de>
 8024212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024214:	ea13 0f0a 	tst.w	r3, sl
 8024218:	e7e0      	b.n	80241dc <_strtod_l+0x8fc>
 802421a:	f7ff fb43 	bl	80238a4 <sulp>
 802421e:	4602      	mov	r2, r0
 8024220:	460b      	mov	r3, r1
 8024222:	ec51 0b18 	vmov	r0, r1, d8
 8024226:	f7dc f839 	bl	800029c <__aeabi_dsub>
 802422a:	2200      	movs	r2, #0
 802422c:	2300      	movs	r3, #0
 802422e:	4682      	mov	sl, r0
 8024230:	468b      	mov	fp, r1
 8024232:	f7dc fc53 	bl	8000adc <__aeabi_dcmpeq>
 8024236:	2800      	cmp	r0, #0
 8024238:	d0c1      	beq.n	80241be <_strtod_l+0x8de>
 802423a:	e611      	b.n	8023e60 <_strtod_l+0x580>
 802423c:	fffffc02 	.word	0xfffffc02
 8024240:	7ff00000 	.word	0x7ff00000
 8024244:	39500000 	.word	0x39500000
 8024248:	000fffff 	.word	0x000fffff
 802424c:	7fefffff 	.word	0x7fefffff
 8024250:	080293d0 	.word	0x080293d0
 8024254:	4631      	mov	r1, r6
 8024256:	4628      	mov	r0, r5
 8024258:	f002 faa8 	bl	80267ac <__ratio>
 802425c:	ec59 8b10 	vmov	r8, r9, d0
 8024260:	ee10 0a10 	vmov	r0, s0
 8024264:	2200      	movs	r2, #0
 8024266:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802426a:	4649      	mov	r1, r9
 802426c:	f7dc fc4a 	bl	8000b04 <__aeabi_dcmple>
 8024270:	2800      	cmp	r0, #0
 8024272:	d07a      	beq.n	802436a <_strtod_l+0xa8a>
 8024274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024276:	2b00      	cmp	r3, #0
 8024278:	d04a      	beq.n	8024310 <_strtod_l+0xa30>
 802427a:	4b95      	ldr	r3, [pc, #596]	; (80244d0 <_strtod_l+0xbf0>)
 802427c:	2200      	movs	r2, #0
 802427e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8024282:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80244d0 <_strtod_l+0xbf0>
 8024286:	f04f 0800 	mov.w	r8, #0
 802428a:	4b92      	ldr	r3, [pc, #584]	; (80244d4 <_strtod_l+0xbf4>)
 802428c:	403b      	ands	r3, r7
 802428e:	930d      	str	r3, [sp, #52]	; 0x34
 8024290:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024292:	4b91      	ldr	r3, [pc, #580]	; (80244d8 <_strtod_l+0xbf8>)
 8024294:	429a      	cmp	r2, r3
 8024296:	f040 80b0 	bne.w	80243fa <_strtod_l+0xb1a>
 802429a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802429e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80242a2:	ec4b ab10 	vmov	d0, sl, fp
 80242a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80242aa:	f002 f9a7 	bl	80265fc <__ulp>
 80242ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80242b2:	ec53 2b10 	vmov	r2, r3, d0
 80242b6:	f7dc f9a9 	bl	800060c <__aeabi_dmul>
 80242ba:	4652      	mov	r2, sl
 80242bc:	465b      	mov	r3, fp
 80242be:	f7db ffef 	bl	80002a0 <__adddf3>
 80242c2:	460b      	mov	r3, r1
 80242c4:	4983      	ldr	r1, [pc, #524]	; (80244d4 <_strtod_l+0xbf4>)
 80242c6:	4a85      	ldr	r2, [pc, #532]	; (80244dc <_strtod_l+0xbfc>)
 80242c8:	4019      	ands	r1, r3
 80242ca:	4291      	cmp	r1, r2
 80242cc:	4682      	mov	sl, r0
 80242ce:	d960      	bls.n	8024392 <_strtod_l+0xab2>
 80242d0:	ee18 3a90 	vmov	r3, s17
 80242d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80242d8:	4293      	cmp	r3, r2
 80242da:	d104      	bne.n	80242e6 <_strtod_l+0xa06>
 80242dc:	ee18 3a10 	vmov	r3, s16
 80242e0:	3301      	adds	r3, #1
 80242e2:	f43f ad45 	beq.w	8023d70 <_strtod_l+0x490>
 80242e6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80244e8 <_strtod_l+0xc08>
 80242ea:	f04f 3aff 	mov.w	sl, #4294967295
 80242ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80242f0:	4620      	mov	r0, r4
 80242f2:	f001 fe51 	bl	8025f98 <_Bfree>
 80242f6:	9905      	ldr	r1, [sp, #20]
 80242f8:	4620      	mov	r0, r4
 80242fa:	f001 fe4d 	bl	8025f98 <_Bfree>
 80242fe:	4631      	mov	r1, r6
 8024300:	4620      	mov	r0, r4
 8024302:	f001 fe49 	bl	8025f98 <_Bfree>
 8024306:	4629      	mov	r1, r5
 8024308:	4620      	mov	r0, r4
 802430a:	f001 fe45 	bl	8025f98 <_Bfree>
 802430e:	e61a      	b.n	8023f46 <_strtod_l+0x666>
 8024310:	f1ba 0f00 	cmp.w	sl, #0
 8024314:	d11b      	bne.n	802434e <_strtod_l+0xa6e>
 8024316:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802431a:	b9f3      	cbnz	r3, 802435a <_strtod_l+0xa7a>
 802431c:	4b6c      	ldr	r3, [pc, #432]	; (80244d0 <_strtod_l+0xbf0>)
 802431e:	2200      	movs	r2, #0
 8024320:	4640      	mov	r0, r8
 8024322:	4649      	mov	r1, r9
 8024324:	f7dc fbe4 	bl	8000af0 <__aeabi_dcmplt>
 8024328:	b9d0      	cbnz	r0, 8024360 <_strtod_l+0xa80>
 802432a:	4640      	mov	r0, r8
 802432c:	4649      	mov	r1, r9
 802432e:	4b6c      	ldr	r3, [pc, #432]	; (80244e0 <_strtod_l+0xc00>)
 8024330:	2200      	movs	r2, #0
 8024332:	f7dc f96b 	bl	800060c <__aeabi_dmul>
 8024336:	4680      	mov	r8, r0
 8024338:	4689      	mov	r9, r1
 802433a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 802433e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8024342:	9315      	str	r3, [sp, #84]	; 0x54
 8024344:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8024348:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802434c:	e79d      	b.n	802428a <_strtod_l+0x9aa>
 802434e:	f1ba 0f01 	cmp.w	sl, #1
 8024352:	d102      	bne.n	802435a <_strtod_l+0xa7a>
 8024354:	2f00      	cmp	r7, #0
 8024356:	f43f ad83 	beq.w	8023e60 <_strtod_l+0x580>
 802435a:	4b62      	ldr	r3, [pc, #392]	; (80244e4 <_strtod_l+0xc04>)
 802435c:	2200      	movs	r2, #0
 802435e:	e78e      	b.n	802427e <_strtod_l+0x99e>
 8024360:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80244e0 <_strtod_l+0xc00>
 8024364:	f04f 0800 	mov.w	r8, #0
 8024368:	e7e7      	b.n	802433a <_strtod_l+0xa5a>
 802436a:	4b5d      	ldr	r3, [pc, #372]	; (80244e0 <_strtod_l+0xc00>)
 802436c:	4640      	mov	r0, r8
 802436e:	4649      	mov	r1, r9
 8024370:	2200      	movs	r2, #0
 8024372:	f7dc f94b 	bl	800060c <__aeabi_dmul>
 8024376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024378:	4680      	mov	r8, r0
 802437a:	4689      	mov	r9, r1
 802437c:	b933      	cbnz	r3, 802438c <_strtod_l+0xaac>
 802437e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024382:	900e      	str	r0, [sp, #56]	; 0x38
 8024384:	930f      	str	r3, [sp, #60]	; 0x3c
 8024386:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 802438a:	e7dd      	b.n	8024348 <_strtod_l+0xa68>
 802438c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8024390:	e7f9      	b.n	8024386 <_strtod_l+0xaa6>
 8024392:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8024396:	9b04      	ldr	r3, [sp, #16]
 8024398:	2b00      	cmp	r3, #0
 802439a:	d1a8      	bne.n	80242ee <_strtod_l+0xa0e>
 802439c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80243a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80243a2:	0d1b      	lsrs	r3, r3, #20
 80243a4:	051b      	lsls	r3, r3, #20
 80243a6:	429a      	cmp	r2, r3
 80243a8:	d1a1      	bne.n	80242ee <_strtod_l+0xa0e>
 80243aa:	4640      	mov	r0, r8
 80243ac:	4649      	mov	r1, r9
 80243ae:	f7dc fcdd 	bl	8000d6c <__aeabi_d2lz>
 80243b2:	f7dc f8fd 	bl	80005b0 <__aeabi_l2d>
 80243b6:	4602      	mov	r2, r0
 80243b8:	460b      	mov	r3, r1
 80243ba:	4640      	mov	r0, r8
 80243bc:	4649      	mov	r1, r9
 80243be:	f7db ff6d 	bl	800029c <__aeabi_dsub>
 80243c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80243c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80243c8:	ea43 030a 	orr.w	r3, r3, sl
 80243cc:	4313      	orrs	r3, r2
 80243ce:	4680      	mov	r8, r0
 80243d0:	4689      	mov	r9, r1
 80243d2:	d055      	beq.n	8024480 <_strtod_l+0xba0>
 80243d4:	a336      	add	r3, pc, #216	; (adr r3, 80244b0 <_strtod_l+0xbd0>)
 80243d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243da:	f7dc fb89 	bl	8000af0 <__aeabi_dcmplt>
 80243de:	2800      	cmp	r0, #0
 80243e0:	f47f acd0 	bne.w	8023d84 <_strtod_l+0x4a4>
 80243e4:	a334      	add	r3, pc, #208	; (adr r3, 80244b8 <_strtod_l+0xbd8>)
 80243e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243ea:	4640      	mov	r0, r8
 80243ec:	4649      	mov	r1, r9
 80243ee:	f7dc fb9d 	bl	8000b2c <__aeabi_dcmpgt>
 80243f2:	2800      	cmp	r0, #0
 80243f4:	f43f af7b 	beq.w	80242ee <_strtod_l+0xa0e>
 80243f8:	e4c4      	b.n	8023d84 <_strtod_l+0x4a4>
 80243fa:	9b04      	ldr	r3, [sp, #16]
 80243fc:	b333      	cbz	r3, 802444c <_strtod_l+0xb6c>
 80243fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024400:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8024404:	d822      	bhi.n	802444c <_strtod_l+0xb6c>
 8024406:	a32e      	add	r3, pc, #184	; (adr r3, 80244c0 <_strtod_l+0xbe0>)
 8024408:	e9d3 2300 	ldrd	r2, r3, [r3]
 802440c:	4640      	mov	r0, r8
 802440e:	4649      	mov	r1, r9
 8024410:	f7dc fb78 	bl	8000b04 <__aeabi_dcmple>
 8024414:	b1a0      	cbz	r0, 8024440 <_strtod_l+0xb60>
 8024416:	4649      	mov	r1, r9
 8024418:	4640      	mov	r0, r8
 802441a:	f7dc fbcf 	bl	8000bbc <__aeabi_d2uiz>
 802441e:	2801      	cmp	r0, #1
 8024420:	bf38      	it	cc
 8024422:	2001      	movcc	r0, #1
 8024424:	f7dc f878 	bl	8000518 <__aeabi_ui2d>
 8024428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802442a:	4680      	mov	r8, r0
 802442c:	4689      	mov	r9, r1
 802442e:	bb23      	cbnz	r3, 802447a <_strtod_l+0xb9a>
 8024430:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024434:	9010      	str	r0, [sp, #64]	; 0x40
 8024436:	9311      	str	r3, [sp, #68]	; 0x44
 8024438:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802443c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8024440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024442:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024444:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8024448:	1a9b      	subs	r3, r3, r2
 802444a:	9309      	str	r3, [sp, #36]	; 0x24
 802444c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8024450:	eeb0 0a48 	vmov.f32	s0, s16
 8024454:	eef0 0a68 	vmov.f32	s1, s17
 8024458:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802445c:	f002 f8ce 	bl	80265fc <__ulp>
 8024460:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8024464:	ec53 2b10 	vmov	r2, r3, d0
 8024468:	f7dc f8d0 	bl	800060c <__aeabi_dmul>
 802446c:	ec53 2b18 	vmov	r2, r3, d8
 8024470:	f7db ff16 	bl	80002a0 <__adddf3>
 8024474:	4682      	mov	sl, r0
 8024476:	468b      	mov	fp, r1
 8024478:	e78d      	b.n	8024396 <_strtod_l+0xab6>
 802447a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 802447e:	e7db      	b.n	8024438 <_strtod_l+0xb58>
 8024480:	a311      	add	r3, pc, #68	; (adr r3, 80244c8 <_strtod_l+0xbe8>)
 8024482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024486:	f7dc fb33 	bl	8000af0 <__aeabi_dcmplt>
 802448a:	e7b2      	b.n	80243f2 <_strtod_l+0xb12>
 802448c:	2300      	movs	r3, #0
 802448e:	930a      	str	r3, [sp, #40]	; 0x28
 8024490:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8024492:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024494:	6013      	str	r3, [r2, #0]
 8024496:	f7ff ba6b 	b.w	8023970 <_strtod_l+0x90>
 802449a:	2a65      	cmp	r2, #101	; 0x65
 802449c:	f43f ab5f 	beq.w	8023b5e <_strtod_l+0x27e>
 80244a0:	2a45      	cmp	r2, #69	; 0x45
 80244a2:	f43f ab5c 	beq.w	8023b5e <_strtod_l+0x27e>
 80244a6:	2301      	movs	r3, #1
 80244a8:	f7ff bb94 	b.w	8023bd4 <_strtod_l+0x2f4>
 80244ac:	f3af 8000 	nop.w
 80244b0:	94a03595 	.word	0x94a03595
 80244b4:	3fdfffff 	.word	0x3fdfffff
 80244b8:	35afe535 	.word	0x35afe535
 80244bc:	3fe00000 	.word	0x3fe00000
 80244c0:	ffc00000 	.word	0xffc00000
 80244c4:	41dfffff 	.word	0x41dfffff
 80244c8:	94a03595 	.word	0x94a03595
 80244cc:	3fcfffff 	.word	0x3fcfffff
 80244d0:	3ff00000 	.word	0x3ff00000
 80244d4:	7ff00000 	.word	0x7ff00000
 80244d8:	7fe00000 	.word	0x7fe00000
 80244dc:	7c9fffff 	.word	0x7c9fffff
 80244e0:	3fe00000 	.word	0x3fe00000
 80244e4:	bff00000 	.word	0xbff00000
 80244e8:	7fefffff 	.word	0x7fefffff

080244ec <strtod>:
 80244ec:	460a      	mov	r2, r1
 80244ee:	4601      	mov	r1, r0
 80244f0:	4802      	ldr	r0, [pc, #8]	; (80244fc <strtod+0x10>)
 80244f2:	4b03      	ldr	r3, [pc, #12]	; (8024500 <strtod+0x14>)
 80244f4:	6800      	ldr	r0, [r0, #0]
 80244f6:	f7ff b9f3 	b.w	80238e0 <_strtod_l>
 80244fa:	bf00      	nop
 80244fc:	20000288 	.word	0x20000288
 8024500:	200002f0 	.word	0x200002f0

08024504 <_vsiprintf_r>:
 8024504:	b500      	push	{lr}
 8024506:	b09b      	sub	sp, #108	; 0x6c
 8024508:	9100      	str	r1, [sp, #0]
 802450a:	9104      	str	r1, [sp, #16]
 802450c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024510:	9105      	str	r1, [sp, #20]
 8024512:	9102      	str	r1, [sp, #8]
 8024514:	4905      	ldr	r1, [pc, #20]	; (802452c <_vsiprintf_r+0x28>)
 8024516:	9103      	str	r1, [sp, #12]
 8024518:	4669      	mov	r1, sp
 802451a:	f002 fa49 	bl	80269b0 <_svfiprintf_r>
 802451e:	9b00      	ldr	r3, [sp, #0]
 8024520:	2200      	movs	r2, #0
 8024522:	701a      	strb	r2, [r3, #0]
 8024524:	b01b      	add	sp, #108	; 0x6c
 8024526:	f85d fb04 	ldr.w	pc, [sp], #4
 802452a:	bf00      	nop
 802452c:	ffff0208 	.word	0xffff0208

08024530 <vsiprintf>:
 8024530:	4613      	mov	r3, r2
 8024532:	460a      	mov	r2, r1
 8024534:	4601      	mov	r1, r0
 8024536:	4802      	ldr	r0, [pc, #8]	; (8024540 <vsiprintf+0x10>)
 8024538:	6800      	ldr	r0, [r0, #0]
 802453a:	f7ff bfe3 	b.w	8024504 <_vsiprintf_r>
 802453e:	bf00      	nop
 8024540:	20000288 	.word	0x20000288

08024544 <__swbuf_r>:
 8024544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024546:	460e      	mov	r6, r1
 8024548:	4614      	mov	r4, r2
 802454a:	4605      	mov	r5, r0
 802454c:	b118      	cbz	r0, 8024556 <__swbuf_r+0x12>
 802454e:	6983      	ldr	r3, [r0, #24]
 8024550:	b90b      	cbnz	r3, 8024556 <__swbuf_r+0x12>
 8024552:	f001 f84d 	bl	80255f0 <__sinit>
 8024556:	4b21      	ldr	r3, [pc, #132]	; (80245dc <__swbuf_r+0x98>)
 8024558:	429c      	cmp	r4, r3
 802455a:	d12b      	bne.n	80245b4 <__swbuf_r+0x70>
 802455c:	686c      	ldr	r4, [r5, #4]
 802455e:	69a3      	ldr	r3, [r4, #24]
 8024560:	60a3      	str	r3, [r4, #8]
 8024562:	89a3      	ldrh	r3, [r4, #12]
 8024564:	071a      	lsls	r2, r3, #28
 8024566:	d52f      	bpl.n	80245c8 <__swbuf_r+0x84>
 8024568:	6923      	ldr	r3, [r4, #16]
 802456a:	b36b      	cbz	r3, 80245c8 <__swbuf_r+0x84>
 802456c:	6923      	ldr	r3, [r4, #16]
 802456e:	6820      	ldr	r0, [r4, #0]
 8024570:	1ac0      	subs	r0, r0, r3
 8024572:	6963      	ldr	r3, [r4, #20]
 8024574:	b2f6      	uxtb	r6, r6
 8024576:	4283      	cmp	r3, r0
 8024578:	4637      	mov	r7, r6
 802457a:	dc04      	bgt.n	8024586 <__swbuf_r+0x42>
 802457c:	4621      	mov	r1, r4
 802457e:	4628      	mov	r0, r5
 8024580:	f000 ffa2 	bl	80254c8 <_fflush_r>
 8024584:	bb30      	cbnz	r0, 80245d4 <__swbuf_r+0x90>
 8024586:	68a3      	ldr	r3, [r4, #8]
 8024588:	3b01      	subs	r3, #1
 802458a:	60a3      	str	r3, [r4, #8]
 802458c:	6823      	ldr	r3, [r4, #0]
 802458e:	1c5a      	adds	r2, r3, #1
 8024590:	6022      	str	r2, [r4, #0]
 8024592:	701e      	strb	r6, [r3, #0]
 8024594:	6963      	ldr	r3, [r4, #20]
 8024596:	3001      	adds	r0, #1
 8024598:	4283      	cmp	r3, r0
 802459a:	d004      	beq.n	80245a6 <__swbuf_r+0x62>
 802459c:	89a3      	ldrh	r3, [r4, #12]
 802459e:	07db      	lsls	r3, r3, #31
 80245a0:	d506      	bpl.n	80245b0 <__swbuf_r+0x6c>
 80245a2:	2e0a      	cmp	r6, #10
 80245a4:	d104      	bne.n	80245b0 <__swbuf_r+0x6c>
 80245a6:	4621      	mov	r1, r4
 80245a8:	4628      	mov	r0, r5
 80245aa:	f000 ff8d 	bl	80254c8 <_fflush_r>
 80245ae:	b988      	cbnz	r0, 80245d4 <__swbuf_r+0x90>
 80245b0:	4638      	mov	r0, r7
 80245b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80245b4:	4b0a      	ldr	r3, [pc, #40]	; (80245e0 <__swbuf_r+0x9c>)
 80245b6:	429c      	cmp	r4, r3
 80245b8:	d101      	bne.n	80245be <__swbuf_r+0x7a>
 80245ba:	68ac      	ldr	r4, [r5, #8]
 80245bc:	e7cf      	b.n	802455e <__swbuf_r+0x1a>
 80245be:	4b09      	ldr	r3, [pc, #36]	; (80245e4 <__swbuf_r+0xa0>)
 80245c0:	429c      	cmp	r4, r3
 80245c2:	bf08      	it	eq
 80245c4:	68ec      	ldreq	r4, [r5, #12]
 80245c6:	e7ca      	b.n	802455e <__swbuf_r+0x1a>
 80245c8:	4621      	mov	r1, r4
 80245ca:	4628      	mov	r0, r5
 80245cc:	f000 f80c 	bl	80245e8 <__swsetup_r>
 80245d0:	2800      	cmp	r0, #0
 80245d2:	d0cb      	beq.n	802456c <__swbuf_r+0x28>
 80245d4:	f04f 37ff 	mov.w	r7, #4294967295
 80245d8:	e7ea      	b.n	80245b0 <__swbuf_r+0x6c>
 80245da:	bf00      	nop
 80245dc:	080295ac 	.word	0x080295ac
 80245e0:	080295cc 	.word	0x080295cc
 80245e4:	0802958c 	.word	0x0802958c

080245e8 <__swsetup_r>:
 80245e8:	4b32      	ldr	r3, [pc, #200]	; (80246b4 <__swsetup_r+0xcc>)
 80245ea:	b570      	push	{r4, r5, r6, lr}
 80245ec:	681d      	ldr	r5, [r3, #0]
 80245ee:	4606      	mov	r6, r0
 80245f0:	460c      	mov	r4, r1
 80245f2:	b125      	cbz	r5, 80245fe <__swsetup_r+0x16>
 80245f4:	69ab      	ldr	r3, [r5, #24]
 80245f6:	b913      	cbnz	r3, 80245fe <__swsetup_r+0x16>
 80245f8:	4628      	mov	r0, r5
 80245fa:	f000 fff9 	bl	80255f0 <__sinit>
 80245fe:	4b2e      	ldr	r3, [pc, #184]	; (80246b8 <__swsetup_r+0xd0>)
 8024600:	429c      	cmp	r4, r3
 8024602:	d10f      	bne.n	8024624 <__swsetup_r+0x3c>
 8024604:	686c      	ldr	r4, [r5, #4]
 8024606:	89a3      	ldrh	r3, [r4, #12]
 8024608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802460c:	0719      	lsls	r1, r3, #28
 802460e:	d42c      	bmi.n	802466a <__swsetup_r+0x82>
 8024610:	06dd      	lsls	r5, r3, #27
 8024612:	d411      	bmi.n	8024638 <__swsetup_r+0x50>
 8024614:	2309      	movs	r3, #9
 8024616:	6033      	str	r3, [r6, #0]
 8024618:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802461c:	81a3      	strh	r3, [r4, #12]
 802461e:	f04f 30ff 	mov.w	r0, #4294967295
 8024622:	e03e      	b.n	80246a2 <__swsetup_r+0xba>
 8024624:	4b25      	ldr	r3, [pc, #148]	; (80246bc <__swsetup_r+0xd4>)
 8024626:	429c      	cmp	r4, r3
 8024628:	d101      	bne.n	802462e <__swsetup_r+0x46>
 802462a:	68ac      	ldr	r4, [r5, #8]
 802462c:	e7eb      	b.n	8024606 <__swsetup_r+0x1e>
 802462e:	4b24      	ldr	r3, [pc, #144]	; (80246c0 <__swsetup_r+0xd8>)
 8024630:	429c      	cmp	r4, r3
 8024632:	bf08      	it	eq
 8024634:	68ec      	ldreq	r4, [r5, #12]
 8024636:	e7e6      	b.n	8024606 <__swsetup_r+0x1e>
 8024638:	0758      	lsls	r0, r3, #29
 802463a:	d512      	bpl.n	8024662 <__swsetup_r+0x7a>
 802463c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802463e:	b141      	cbz	r1, 8024652 <__swsetup_r+0x6a>
 8024640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024644:	4299      	cmp	r1, r3
 8024646:	d002      	beq.n	802464e <__swsetup_r+0x66>
 8024648:	4630      	mov	r0, r6
 802464a:	f7fe fa1f 	bl	8022a8c <_free_r>
 802464e:	2300      	movs	r3, #0
 8024650:	6363      	str	r3, [r4, #52]	; 0x34
 8024652:	89a3      	ldrh	r3, [r4, #12]
 8024654:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024658:	81a3      	strh	r3, [r4, #12]
 802465a:	2300      	movs	r3, #0
 802465c:	6063      	str	r3, [r4, #4]
 802465e:	6923      	ldr	r3, [r4, #16]
 8024660:	6023      	str	r3, [r4, #0]
 8024662:	89a3      	ldrh	r3, [r4, #12]
 8024664:	f043 0308 	orr.w	r3, r3, #8
 8024668:	81a3      	strh	r3, [r4, #12]
 802466a:	6923      	ldr	r3, [r4, #16]
 802466c:	b94b      	cbnz	r3, 8024682 <__swsetup_r+0x9a>
 802466e:	89a3      	ldrh	r3, [r4, #12]
 8024670:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024678:	d003      	beq.n	8024682 <__swsetup_r+0x9a>
 802467a:	4621      	mov	r1, r4
 802467c:	4630      	mov	r0, r6
 802467e:	f001 fbed 	bl	8025e5c <__smakebuf_r>
 8024682:	89a0      	ldrh	r0, [r4, #12]
 8024684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024688:	f010 0301 	ands.w	r3, r0, #1
 802468c:	d00a      	beq.n	80246a4 <__swsetup_r+0xbc>
 802468e:	2300      	movs	r3, #0
 8024690:	60a3      	str	r3, [r4, #8]
 8024692:	6963      	ldr	r3, [r4, #20]
 8024694:	425b      	negs	r3, r3
 8024696:	61a3      	str	r3, [r4, #24]
 8024698:	6923      	ldr	r3, [r4, #16]
 802469a:	b943      	cbnz	r3, 80246ae <__swsetup_r+0xc6>
 802469c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80246a0:	d1ba      	bne.n	8024618 <__swsetup_r+0x30>
 80246a2:	bd70      	pop	{r4, r5, r6, pc}
 80246a4:	0781      	lsls	r1, r0, #30
 80246a6:	bf58      	it	pl
 80246a8:	6963      	ldrpl	r3, [r4, #20]
 80246aa:	60a3      	str	r3, [r4, #8]
 80246ac:	e7f4      	b.n	8024698 <__swsetup_r+0xb0>
 80246ae:	2000      	movs	r0, #0
 80246b0:	e7f7      	b.n	80246a2 <__swsetup_r+0xba>
 80246b2:	bf00      	nop
 80246b4:	20000288 	.word	0x20000288
 80246b8:	080295ac 	.word	0x080295ac
 80246bc:	080295cc 	.word	0x080295cc
 80246c0:	0802958c 	.word	0x0802958c

080246c4 <quorem>:
 80246c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246c8:	6903      	ldr	r3, [r0, #16]
 80246ca:	690c      	ldr	r4, [r1, #16]
 80246cc:	42a3      	cmp	r3, r4
 80246ce:	4607      	mov	r7, r0
 80246d0:	f2c0 8081 	blt.w	80247d6 <quorem+0x112>
 80246d4:	3c01      	subs	r4, #1
 80246d6:	f101 0814 	add.w	r8, r1, #20
 80246da:	f100 0514 	add.w	r5, r0, #20
 80246de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80246e2:	9301      	str	r3, [sp, #4]
 80246e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80246e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80246ec:	3301      	adds	r3, #1
 80246ee:	429a      	cmp	r2, r3
 80246f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80246f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80246f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80246fc:	d331      	bcc.n	8024762 <quorem+0x9e>
 80246fe:	f04f 0e00 	mov.w	lr, #0
 8024702:	4640      	mov	r0, r8
 8024704:	46ac      	mov	ip, r5
 8024706:	46f2      	mov	sl, lr
 8024708:	f850 2b04 	ldr.w	r2, [r0], #4
 802470c:	b293      	uxth	r3, r2
 802470e:	fb06 e303 	mla	r3, r6, r3, lr
 8024712:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8024716:	b29b      	uxth	r3, r3
 8024718:	ebaa 0303 	sub.w	r3, sl, r3
 802471c:	f8dc a000 	ldr.w	sl, [ip]
 8024720:	0c12      	lsrs	r2, r2, #16
 8024722:	fa13 f38a 	uxtah	r3, r3, sl
 8024726:	fb06 e202 	mla	r2, r6, r2, lr
 802472a:	9300      	str	r3, [sp, #0]
 802472c:	9b00      	ldr	r3, [sp, #0]
 802472e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8024732:	b292      	uxth	r2, r2
 8024734:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8024738:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802473c:	f8bd 3000 	ldrh.w	r3, [sp]
 8024740:	4581      	cmp	r9, r0
 8024742:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8024746:	f84c 3b04 	str.w	r3, [ip], #4
 802474a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802474e:	d2db      	bcs.n	8024708 <quorem+0x44>
 8024750:	f855 300b 	ldr.w	r3, [r5, fp]
 8024754:	b92b      	cbnz	r3, 8024762 <quorem+0x9e>
 8024756:	9b01      	ldr	r3, [sp, #4]
 8024758:	3b04      	subs	r3, #4
 802475a:	429d      	cmp	r5, r3
 802475c:	461a      	mov	r2, r3
 802475e:	d32e      	bcc.n	80247be <quorem+0xfa>
 8024760:	613c      	str	r4, [r7, #16]
 8024762:	4638      	mov	r0, r7
 8024764:	f001 fea4 	bl	80264b0 <__mcmp>
 8024768:	2800      	cmp	r0, #0
 802476a:	db24      	blt.n	80247b6 <quorem+0xf2>
 802476c:	3601      	adds	r6, #1
 802476e:	4628      	mov	r0, r5
 8024770:	f04f 0c00 	mov.w	ip, #0
 8024774:	f858 2b04 	ldr.w	r2, [r8], #4
 8024778:	f8d0 e000 	ldr.w	lr, [r0]
 802477c:	b293      	uxth	r3, r2
 802477e:	ebac 0303 	sub.w	r3, ip, r3
 8024782:	0c12      	lsrs	r2, r2, #16
 8024784:	fa13 f38e 	uxtah	r3, r3, lr
 8024788:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 802478c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8024790:	b29b      	uxth	r3, r3
 8024792:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8024796:	45c1      	cmp	r9, r8
 8024798:	f840 3b04 	str.w	r3, [r0], #4
 802479c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80247a0:	d2e8      	bcs.n	8024774 <quorem+0xb0>
 80247a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80247a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80247aa:	b922      	cbnz	r2, 80247b6 <quorem+0xf2>
 80247ac:	3b04      	subs	r3, #4
 80247ae:	429d      	cmp	r5, r3
 80247b0:	461a      	mov	r2, r3
 80247b2:	d30a      	bcc.n	80247ca <quorem+0x106>
 80247b4:	613c      	str	r4, [r7, #16]
 80247b6:	4630      	mov	r0, r6
 80247b8:	b003      	add	sp, #12
 80247ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247be:	6812      	ldr	r2, [r2, #0]
 80247c0:	3b04      	subs	r3, #4
 80247c2:	2a00      	cmp	r2, #0
 80247c4:	d1cc      	bne.n	8024760 <quorem+0x9c>
 80247c6:	3c01      	subs	r4, #1
 80247c8:	e7c7      	b.n	802475a <quorem+0x96>
 80247ca:	6812      	ldr	r2, [r2, #0]
 80247cc:	3b04      	subs	r3, #4
 80247ce:	2a00      	cmp	r2, #0
 80247d0:	d1f0      	bne.n	80247b4 <quorem+0xf0>
 80247d2:	3c01      	subs	r4, #1
 80247d4:	e7eb      	b.n	80247ae <quorem+0xea>
 80247d6:	2000      	movs	r0, #0
 80247d8:	e7ee      	b.n	80247b8 <quorem+0xf4>
 80247da:	0000      	movs	r0, r0
 80247dc:	0000      	movs	r0, r0
	...

080247e0 <_dtoa_r>:
 80247e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247e4:	ed2d 8b04 	vpush	{d8-d9}
 80247e8:	ec57 6b10 	vmov	r6, r7, d0
 80247ec:	b093      	sub	sp, #76	; 0x4c
 80247ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80247f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80247f4:	9106      	str	r1, [sp, #24]
 80247f6:	ee10 aa10 	vmov	sl, s0
 80247fa:	4604      	mov	r4, r0
 80247fc:	9209      	str	r2, [sp, #36]	; 0x24
 80247fe:	930c      	str	r3, [sp, #48]	; 0x30
 8024800:	46bb      	mov	fp, r7
 8024802:	b975      	cbnz	r5, 8024822 <_dtoa_r+0x42>
 8024804:	2010      	movs	r0, #16
 8024806:	f7fe f8eb 	bl	80229e0 <malloc>
 802480a:	4602      	mov	r2, r0
 802480c:	6260      	str	r0, [r4, #36]	; 0x24
 802480e:	b920      	cbnz	r0, 802481a <_dtoa_r+0x3a>
 8024810:	4ba7      	ldr	r3, [pc, #668]	; (8024ab0 <_dtoa_r+0x2d0>)
 8024812:	21ea      	movs	r1, #234	; 0xea
 8024814:	48a7      	ldr	r0, [pc, #668]	; (8024ab4 <_dtoa_r+0x2d4>)
 8024816:	f7fe f879 	bl	802290c <__assert_func>
 802481a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802481e:	6005      	str	r5, [r0, #0]
 8024820:	60c5      	str	r5, [r0, #12]
 8024822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024824:	6819      	ldr	r1, [r3, #0]
 8024826:	b151      	cbz	r1, 802483e <_dtoa_r+0x5e>
 8024828:	685a      	ldr	r2, [r3, #4]
 802482a:	604a      	str	r2, [r1, #4]
 802482c:	2301      	movs	r3, #1
 802482e:	4093      	lsls	r3, r2
 8024830:	608b      	str	r3, [r1, #8]
 8024832:	4620      	mov	r0, r4
 8024834:	f001 fbb0 	bl	8025f98 <_Bfree>
 8024838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802483a:	2200      	movs	r2, #0
 802483c:	601a      	str	r2, [r3, #0]
 802483e:	1e3b      	subs	r3, r7, #0
 8024840:	bfaa      	itet	ge
 8024842:	2300      	movge	r3, #0
 8024844:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8024848:	f8c8 3000 	strge.w	r3, [r8]
 802484c:	4b9a      	ldr	r3, [pc, #616]	; (8024ab8 <_dtoa_r+0x2d8>)
 802484e:	bfbc      	itt	lt
 8024850:	2201      	movlt	r2, #1
 8024852:	f8c8 2000 	strlt.w	r2, [r8]
 8024856:	ea33 030b 	bics.w	r3, r3, fp
 802485a:	d11b      	bne.n	8024894 <_dtoa_r+0xb4>
 802485c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802485e:	f242 730f 	movw	r3, #9999	; 0x270f
 8024862:	6013      	str	r3, [r2, #0]
 8024864:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8024868:	4333      	orrs	r3, r6
 802486a:	f000 8592 	beq.w	8025392 <_dtoa_r+0xbb2>
 802486e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024870:	b963      	cbnz	r3, 802488c <_dtoa_r+0xac>
 8024872:	4b92      	ldr	r3, [pc, #584]	; (8024abc <_dtoa_r+0x2dc>)
 8024874:	e022      	b.n	80248bc <_dtoa_r+0xdc>
 8024876:	4b92      	ldr	r3, [pc, #584]	; (8024ac0 <_dtoa_r+0x2e0>)
 8024878:	9301      	str	r3, [sp, #4]
 802487a:	3308      	adds	r3, #8
 802487c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802487e:	6013      	str	r3, [r2, #0]
 8024880:	9801      	ldr	r0, [sp, #4]
 8024882:	b013      	add	sp, #76	; 0x4c
 8024884:	ecbd 8b04 	vpop	{d8-d9}
 8024888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802488c:	4b8b      	ldr	r3, [pc, #556]	; (8024abc <_dtoa_r+0x2dc>)
 802488e:	9301      	str	r3, [sp, #4]
 8024890:	3303      	adds	r3, #3
 8024892:	e7f3      	b.n	802487c <_dtoa_r+0x9c>
 8024894:	2200      	movs	r2, #0
 8024896:	2300      	movs	r3, #0
 8024898:	4650      	mov	r0, sl
 802489a:	4659      	mov	r1, fp
 802489c:	f7dc f91e 	bl	8000adc <__aeabi_dcmpeq>
 80248a0:	ec4b ab19 	vmov	d9, sl, fp
 80248a4:	4680      	mov	r8, r0
 80248a6:	b158      	cbz	r0, 80248c0 <_dtoa_r+0xe0>
 80248a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80248aa:	2301      	movs	r3, #1
 80248ac:	6013      	str	r3, [r2, #0]
 80248ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80248b0:	2b00      	cmp	r3, #0
 80248b2:	f000 856b 	beq.w	802538c <_dtoa_r+0xbac>
 80248b6:	4883      	ldr	r0, [pc, #524]	; (8024ac4 <_dtoa_r+0x2e4>)
 80248b8:	6018      	str	r0, [r3, #0]
 80248ba:	1e43      	subs	r3, r0, #1
 80248bc:	9301      	str	r3, [sp, #4]
 80248be:	e7df      	b.n	8024880 <_dtoa_r+0xa0>
 80248c0:	ec4b ab10 	vmov	d0, sl, fp
 80248c4:	aa10      	add	r2, sp, #64	; 0x40
 80248c6:	a911      	add	r1, sp, #68	; 0x44
 80248c8:	4620      	mov	r0, r4
 80248ca:	f001 ff13 	bl	80266f4 <__d2b>
 80248ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80248d2:	ee08 0a10 	vmov	s16, r0
 80248d6:	2d00      	cmp	r5, #0
 80248d8:	f000 8084 	beq.w	80249e4 <_dtoa_r+0x204>
 80248dc:	ee19 3a90 	vmov	r3, s19
 80248e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80248e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80248e8:	4656      	mov	r6, sl
 80248ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80248ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80248f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80248f6:	4b74      	ldr	r3, [pc, #464]	; (8024ac8 <_dtoa_r+0x2e8>)
 80248f8:	2200      	movs	r2, #0
 80248fa:	4630      	mov	r0, r6
 80248fc:	4639      	mov	r1, r7
 80248fe:	f7db fccd 	bl	800029c <__aeabi_dsub>
 8024902:	a365      	add	r3, pc, #404	; (adr r3, 8024a98 <_dtoa_r+0x2b8>)
 8024904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024908:	f7db fe80 	bl	800060c <__aeabi_dmul>
 802490c:	a364      	add	r3, pc, #400	; (adr r3, 8024aa0 <_dtoa_r+0x2c0>)
 802490e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024912:	f7db fcc5 	bl	80002a0 <__adddf3>
 8024916:	4606      	mov	r6, r0
 8024918:	4628      	mov	r0, r5
 802491a:	460f      	mov	r7, r1
 802491c:	f7db fe0c 	bl	8000538 <__aeabi_i2d>
 8024920:	a361      	add	r3, pc, #388	; (adr r3, 8024aa8 <_dtoa_r+0x2c8>)
 8024922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024926:	f7db fe71 	bl	800060c <__aeabi_dmul>
 802492a:	4602      	mov	r2, r0
 802492c:	460b      	mov	r3, r1
 802492e:	4630      	mov	r0, r6
 8024930:	4639      	mov	r1, r7
 8024932:	f7db fcb5 	bl	80002a0 <__adddf3>
 8024936:	4606      	mov	r6, r0
 8024938:	460f      	mov	r7, r1
 802493a:	f7dc f917 	bl	8000b6c <__aeabi_d2iz>
 802493e:	2200      	movs	r2, #0
 8024940:	9000      	str	r0, [sp, #0]
 8024942:	2300      	movs	r3, #0
 8024944:	4630      	mov	r0, r6
 8024946:	4639      	mov	r1, r7
 8024948:	f7dc f8d2 	bl	8000af0 <__aeabi_dcmplt>
 802494c:	b150      	cbz	r0, 8024964 <_dtoa_r+0x184>
 802494e:	9800      	ldr	r0, [sp, #0]
 8024950:	f7db fdf2 	bl	8000538 <__aeabi_i2d>
 8024954:	4632      	mov	r2, r6
 8024956:	463b      	mov	r3, r7
 8024958:	f7dc f8c0 	bl	8000adc <__aeabi_dcmpeq>
 802495c:	b910      	cbnz	r0, 8024964 <_dtoa_r+0x184>
 802495e:	9b00      	ldr	r3, [sp, #0]
 8024960:	3b01      	subs	r3, #1
 8024962:	9300      	str	r3, [sp, #0]
 8024964:	9b00      	ldr	r3, [sp, #0]
 8024966:	2b16      	cmp	r3, #22
 8024968:	d85a      	bhi.n	8024a20 <_dtoa_r+0x240>
 802496a:	9a00      	ldr	r2, [sp, #0]
 802496c:	4b57      	ldr	r3, [pc, #348]	; (8024acc <_dtoa_r+0x2ec>)
 802496e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8024972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024976:	ec51 0b19 	vmov	r0, r1, d9
 802497a:	f7dc f8b9 	bl	8000af0 <__aeabi_dcmplt>
 802497e:	2800      	cmp	r0, #0
 8024980:	d050      	beq.n	8024a24 <_dtoa_r+0x244>
 8024982:	9b00      	ldr	r3, [sp, #0]
 8024984:	3b01      	subs	r3, #1
 8024986:	9300      	str	r3, [sp, #0]
 8024988:	2300      	movs	r3, #0
 802498a:	930b      	str	r3, [sp, #44]	; 0x2c
 802498c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802498e:	1b5d      	subs	r5, r3, r5
 8024990:	1e6b      	subs	r3, r5, #1
 8024992:	9305      	str	r3, [sp, #20]
 8024994:	bf45      	ittet	mi
 8024996:	f1c5 0301 	rsbmi	r3, r5, #1
 802499a:	9304      	strmi	r3, [sp, #16]
 802499c:	2300      	movpl	r3, #0
 802499e:	2300      	movmi	r3, #0
 80249a0:	bf4c      	ite	mi
 80249a2:	9305      	strmi	r3, [sp, #20]
 80249a4:	9304      	strpl	r3, [sp, #16]
 80249a6:	9b00      	ldr	r3, [sp, #0]
 80249a8:	2b00      	cmp	r3, #0
 80249aa:	db3d      	blt.n	8024a28 <_dtoa_r+0x248>
 80249ac:	9b05      	ldr	r3, [sp, #20]
 80249ae:	9a00      	ldr	r2, [sp, #0]
 80249b0:	920a      	str	r2, [sp, #40]	; 0x28
 80249b2:	4413      	add	r3, r2
 80249b4:	9305      	str	r3, [sp, #20]
 80249b6:	2300      	movs	r3, #0
 80249b8:	9307      	str	r3, [sp, #28]
 80249ba:	9b06      	ldr	r3, [sp, #24]
 80249bc:	2b09      	cmp	r3, #9
 80249be:	f200 8089 	bhi.w	8024ad4 <_dtoa_r+0x2f4>
 80249c2:	2b05      	cmp	r3, #5
 80249c4:	bfc4      	itt	gt
 80249c6:	3b04      	subgt	r3, #4
 80249c8:	9306      	strgt	r3, [sp, #24]
 80249ca:	9b06      	ldr	r3, [sp, #24]
 80249cc:	f1a3 0302 	sub.w	r3, r3, #2
 80249d0:	bfcc      	ite	gt
 80249d2:	2500      	movgt	r5, #0
 80249d4:	2501      	movle	r5, #1
 80249d6:	2b03      	cmp	r3, #3
 80249d8:	f200 8087 	bhi.w	8024aea <_dtoa_r+0x30a>
 80249dc:	e8df f003 	tbb	[pc, r3]
 80249e0:	59383a2d 	.word	0x59383a2d
 80249e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80249e8:	441d      	add	r5, r3
 80249ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80249ee:	2b20      	cmp	r3, #32
 80249f0:	bfc1      	itttt	gt
 80249f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80249f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80249fa:	fa0b f303 	lslgt.w	r3, fp, r3
 80249fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8024a02:	bfda      	itte	le
 8024a04:	f1c3 0320 	rsble	r3, r3, #32
 8024a08:	fa06 f003 	lslle.w	r0, r6, r3
 8024a0c:	4318      	orrgt	r0, r3
 8024a0e:	f7db fd83 	bl	8000518 <__aeabi_ui2d>
 8024a12:	2301      	movs	r3, #1
 8024a14:	4606      	mov	r6, r0
 8024a16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8024a1a:	3d01      	subs	r5, #1
 8024a1c:	930e      	str	r3, [sp, #56]	; 0x38
 8024a1e:	e76a      	b.n	80248f6 <_dtoa_r+0x116>
 8024a20:	2301      	movs	r3, #1
 8024a22:	e7b2      	b.n	802498a <_dtoa_r+0x1aa>
 8024a24:	900b      	str	r0, [sp, #44]	; 0x2c
 8024a26:	e7b1      	b.n	802498c <_dtoa_r+0x1ac>
 8024a28:	9b04      	ldr	r3, [sp, #16]
 8024a2a:	9a00      	ldr	r2, [sp, #0]
 8024a2c:	1a9b      	subs	r3, r3, r2
 8024a2e:	9304      	str	r3, [sp, #16]
 8024a30:	4253      	negs	r3, r2
 8024a32:	9307      	str	r3, [sp, #28]
 8024a34:	2300      	movs	r3, #0
 8024a36:	930a      	str	r3, [sp, #40]	; 0x28
 8024a38:	e7bf      	b.n	80249ba <_dtoa_r+0x1da>
 8024a3a:	2300      	movs	r3, #0
 8024a3c:	9308      	str	r3, [sp, #32]
 8024a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a40:	2b00      	cmp	r3, #0
 8024a42:	dc55      	bgt.n	8024af0 <_dtoa_r+0x310>
 8024a44:	2301      	movs	r3, #1
 8024a46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8024a4a:	461a      	mov	r2, r3
 8024a4c:	9209      	str	r2, [sp, #36]	; 0x24
 8024a4e:	e00c      	b.n	8024a6a <_dtoa_r+0x28a>
 8024a50:	2301      	movs	r3, #1
 8024a52:	e7f3      	b.n	8024a3c <_dtoa_r+0x25c>
 8024a54:	2300      	movs	r3, #0
 8024a56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024a58:	9308      	str	r3, [sp, #32]
 8024a5a:	9b00      	ldr	r3, [sp, #0]
 8024a5c:	4413      	add	r3, r2
 8024a5e:	9302      	str	r3, [sp, #8]
 8024a60:	3301      	adds	r3, #1
 8024a62:	2b01      	cmp	r3, #1
 8024a64:	9303      	str	r3, [sp, #12]
 8024a66:	bfb8      	it	lt
 8024a68:	2301      	movlt	r3, #1
 8024a6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8024a6c:	2200      	movs	r2, #0
 8024a6e:	6042      	str	r2, [r0, #4]
 8024a70:	2204      	movs	r2, #4
 8024a72:	f102 0614 	add.w	r6, r2, #20
 8024a76:	429e      	cmp	r6, r3
 8024a78:	6841      	ldr	r1, [r0, #4]
 8024a7a:	d93d      	bls.n	8024af8 <_dtoa_r+0x318>
 8024a7c:	4620      	mov	r0, r4
 8024a7e:	f001 fa4b 	bl	8025f18 <_Balloc>
 8024a82:	9001      	str	r0, [sp, #4]
 8024a84:	2800      	cmp	r0, #0
 8024a86:	d13b      	bne.n	8024b00 <_dtoa_r+0x320>
 8024a88:	4b11      	ldr	r3, [pc, #68]	; (8024ad0 <_dtoa_r+0x2f0>)
 8024a8a:	4602      	mov	r2, r0
 8024a8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8024a90:	e6c0      	b.n	8024814 <_dtoa_r+0x34>
 8024a92:	2301      	movs	r3, #1
 8024a94:	e7df      	b.n	8024a56 <_dtoa_r+0x276>
 8024a96:	bf00      	nop
 8024a98:	636f4361 	.word	0x636f4361
 8024a9c:	3fd287a7 	.word	0x3fd287a7
 8024aa0:	8b60c8b3 	.word	0x8b60c8b3
 8024aa4:	3fc68a28 	.word	0x3fc68a28
 8024aa8:	509f79fb 	.word	0x509f79fb
 8024aac:	3fd34413 	.word	0x3fd34413
 8024ab0:	08029506 	.word	0x08029506
 8024ab4:	0802951d 	.word	0x0802951d
 8024ab8:	7ff00000 	.word	0x7ff00000
 8024abc:	08029502 	.word	0x08029502
 8024ac0:	080294f9 	.word	0x080294f9
 8024ac4:	08029382 	.word	0x08029382
 8024ac8:	3ff80000 	.word	0x3ff80000
 8024acc:	080296f0 	.word	0x080296f0
 8024ad0:	08029578 	.word	0x08029578
 8024ad4:	2501      	movs	r5, #1
 8024ad6:	2300      	movs	r3, #0
 8024ad8:	9306      	str	r3, [sp, #24]
 8024ada:	9508      	str	r5, [sp, #32]
 8024adc:	f04f 33ff 	mov.w	r3, #4294967295
 8024ae0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8024ae4:	2200      	movs	r2, #0
 8024ae6:	2312      	movs	r3, #18
 8024ae8:	e7b0      	b.n	8024a4c <_dtoa_r+0x26c>
 8024aea:	2301      	movs	r3, #1
 8024aec:	9308      	str	r3, [sp, #32]
 8024aee:	e7f5      	b.n	8024adc <_dtoa_r+0x2fc>
 8024af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024af2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8024af6:	e7b8      	b.n	8024a6a <_dtoa_r+0x28a>
 8024af8:	3101      	adds	r1, #1
 8024afa:	6041      	str	r1, [r0, #4]
 8024afc:	0052      	lsls	r2, r2, #1
 8024afe:	e7b8      	b.n	8024a72 <_dtoa_r+0x292>
 8024b00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024b02:	9a01      	ldr	r2, [sp, #4]
 8024b04:	601a      	str	r2, [r3, #0]
 8024b06:	9b03      	ldr	r3, [sp, #12]
 8024b08:	2b0e      	cmp	r3, #14
 8024b0a:	f200 809d 	bhi.w	8024c48 <_dtoa_r+0x468>
 8024b0e:	2d00      	cmp	r5, #0
 8024b10:	f000 809a 	beq.w	8024c48 <_dtoa_r+0x468>
 8024b14:	9b00      	ldr	r3, [sp, #0]
 8024b16:	2b00      	cmp	r3, #0
 8024b18:	dd32      	ble.n	8024b80 <_dtoa_r+0x3a0>
 8024b1a:	4ab7      	ldr	r2, [pc, #732]	; (8024df8 <_dtoa_r+0x618>)
 8024b1c:	f003 030f 	and.w	r3, r3, #15
 8024b20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8024b24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8024b28:	9b00      	ldr	r3, [sp, #0]
 8024b2a:	05d8      	lsls	r0, r3, #23
 8024b2c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8024b30:	d516      	bpl.n	8024b60 <_dtoa_r+0x380>
 8024b32:	4bb2      	ldr	r3, [pc, #712]	; (8024dfc <_dtoa_r+0x61c>)
 8024b34:	ec51 0b19 	vmov	r0, r1, d9
 8024b38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8024b3c:	f7db fe90 	bl	8000860 <__aeabi_ddiv>
 8024b40:	f007 070f 	and.w	r7, r7, #15
 8024b44:	4682      	mov	sl, r0
 8024b46:	468b      	mov	fp, r1
 8024b48:	2503      	movs	r5, #3
 8024b4a:	4eac      	ldr	r6, [pc, #688]	; (8024dfc <_dtoa_r+0x61c>)
 8024b4c:	b957      	cbnz	r7, 8024b64 <_dtoa_r+0x384>
 8024b4e:	4642      	mov	r2, r8
 8024b50:	464b      	mov	r3, r9
 8024b52:	4650      	mov	r0, sl
 8024b54:	4659      	mov	r1, fp
 8024b56:	f7db fe83 	bl	8000860 <__aeabi_ddiv>
 8024b5a:	4682      	mov	sl, r0
 8024b5c:	468b      	mov	fp, r1
 8024b5e:	e028      	b.n	8024bb2 <_dtoa_r+0x3d2>
 8024b60:	2502      	movs	r5, #2
 8024b62:	e7f2      	b.n	8024b4a <_dtoa_r+0x36a>
 8024b64:	07f9      	lsls	r1, r7, #31
 8024b66:	d508      	bpl.n	8024b7a <_dtoa_r+0x39a>
 8024b68:	4640      	mov	r0, r8
 8024b6a:	4649      	mov	r1, r9
 8024b6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8024b70:	f7db fd4c 	bl	800060c <__aeabi_dmul>
 8024b74:	3501      	adds	r5, #1
 8024b76:	4680      	mov	r8, r0
 8024b78:	4689      	mov	r9, r1
 8024b7a:	107f      	asrs	r7, r7, #1
 8024b7c:	3608      	adds	r6, #8
 8024b7e:	e7e5      	b.n	8024b4c <_dtoa_r+0x36c>
 8024b80:	f000 809b 	beq.w	8024cba <_dtoa_r+0x4da>
 8024b84:	9b00      	ldr	r3, [sp, #0]
 8024b86:	4f9d      	ldr	r7, [pc, #628]	; (8024dfc <_dtoa_r+0x61c>)
 8024b88:	425e      	negs	r6, r3
 8024b8a:	4b9b      	ldr	r3, [pc, #620]	; (8024df8 <_dtoa_r+0x618>)
 8024b8c:	f006 020f 	and.w	r2, r6, #15
 8024b90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8024b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b98:	ec51 0b19 	vmov	r0, r1, d9
 8024b9c:	f7db fd36 	bl	800060c <__aeabi_dmul>
 8024ba0:	1136      	asrs	r6, r6, #4
 8024ba2:	4682      	mov	sl, r0
 8024ba4:	468b      	mov	fp, r1
 8024ba6:	2300      	movs	r3, #0
 8024ba8:	2502      	movs	r5, #2
 8024baa:	2e00      	cmp	r6, #0
 8024bac:	d17a      	bne.n	8024ca4 <_dtoa_r+0x4c4>
 8024bae:	2b00      	cmp	r3, #0
 8024bb0:	d1d3      	bne.n	8024b5a <_dtoa_r+0x37a>
 8024bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024bb4:	2b00      	cmp	r3, #0
 8024bb6:	f000 8082 	beq.w	8024cbe <_dtoa_r+0x4de>
 8024bba:	4b91      	ldr	r3, [pc, #580]	; (8024e00 <_dtoa_r+0x620>)
 8024bbc:	2200      	movs	r2, #0
 8024bbe:	4650      	mov	r0, sl
 8024bc0:	4659      	mov	r1, fp
 8024bc2:	f7db ff95 	bl	8000af0 <__aeabi_dcmplt>
 8024bc6:	2800      	cmp	r0, #0
 8024bc8:	d079      	beq.n	8024cbe <_dtoa_r+0x4de>
 8024bca:	9b03      	ldr	r3, [sp, #12]
 8024bcc:	2b00      	cmp	r3, #0
 8024bce:	d076      	beq.n	8024cbe <_dtoa_r+0x4de>
 8024bd0:	9b02      	ldr	r3, [sp, #8]
 8024bd2:	2b00      	cmp	r3, #0
 8024bd4:	dd36      	ble.n	8024c44 <_dtoa_r+0x464>
 8024bd6:	9b00      	ldr	r3, [sp, #0]
 8024bd8:	4650      	mov	r0, sl
 8024bda:	4659      	mov	r1, fp
 8024bdc:	1e5f      	subs	r7, r3, #1
 8024bde:	2200      	movs	r2, #0
 8024be0:	4b88      	ldr	r3, [pc, #544]	; (8024e04 <_dtoa_r+0x624>)
 8024be2:	f7db fd13 	bl	800060c <__aeabi_dmul>
 8024be6:	9e02      	ldr	r6, [sp, #8]
 8024be8:	4682      	mov	sl, r0
 8024bea:	468b      	mov	fp, r1
 8024bec:	3501      	adds	r5, #1
 8024bee:	4628      	mov	r0, r5
 8024bf0:	f7db fca2 	bl	8000538 <__aeabi_i2d>
 8024bf4:	4652      	mov	r2, sl
 8024bf6:	465b      	mov	r3, fp
 8024bf8:	f7db fd08 	bl	800060c <__aeabi_dmul>
 8024bfc:	4b82      	ldr	r3, [pc, #520]	; (8024e08 <_dtoa_r+0x628>)
 8024bfe:	2200      	movs	r2, #0
 8024c00:	f7db fb4e 	bl	80002a0 <__adddf3>
 8024c04:	46d0      	mov	r8, sl
 8024c06:	46d9      	mov	r9, fp
 8024c08:	4682      	mov	sl, r0
 8024c0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8024c0e:	2e00      	cmp	r6, #0
 8024c10:	d158      	bne.n	8024cc4 <_dtoa_r+0x4e4>
 8024c12:	4b7e      	ldr	r3, [pc, #504]	; (8024e0c <_dtoa_r+0x62c>)
 8024c14:	2200      	movs	r2, #0
 8024c16:	4640      	mov	r0, r8
 8024c18:	4649      	mov	r1, r9
 8024c1a:	f7db fb3f 	bl	800029c <__aeabi_dsub>
 8024c1e:	4652      	mov	r2, sl
 8024c20:	465b      	mov	r3, fp
 8024c22:	4680      	mov	r8, r0
 8024c24:	4689      	mov	r9, r1
 8024c26:	f7db ff81 	bl	8000b2c <__aeabi_dcmpgt>
 8024c2a:	2800      	cmp	r0, #0
 8024c2c:	f040 8295 	bne.w	802515a <_dtoa_r+0x97a>
 8024c30:	4652      	mov	r2, sl
 8024c32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8024c36:	4640      	mov	r0, r8
 8024c38:	4649      	mov	r1, r9
 8024c3a:	f7db ff59 	bl	8000af0 <__aeabi_dcmplt>
 8024c3e:	2800      	cmp	r0, #0
 8024c40:	f040 8289 	bne.w	8025156 <_dtoa_r+0x976>
 8024c44:	ec5b ab19 	vmov	sl, fp, d9
 8024c48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024c4a:	2b00      	cmp	r3, #0
 8024c4c:	f2c0 8148 	blt.w	8024ee0 <_dtoa_r+0x700>
 8024c50:	9a00      	ldr	r2, [sp, #0]
 8024c52:	2a0e      	cmp	r2, #14
 8024c54:	f300 8144 	bgt.w	8024ee0 <_dtoa_r+0x700>
 8024c58:	4b67      	ldr	r3, [pc, #412]	; (8024df8 <_dtoa_r+0x618>)
 8024c5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8024c5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8024c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c64:	2b00      	cmp	r3, #0
 8024c66:	f280 80d5 	bge.w	8024e14 <_dtoa_r+0x634>
 8024c6a:	9b03      	ldr	r3, [sp, #12]
 8024c6c:	2b00      	cmp	r3, #0
 8024c6e:	f300 80d1 	bgt.w	8024e14 <_dtoa_r+0x634>
 8024c72:	f040 826f 	bne.w	8025154 <_dtoa_r+0x974>
 8024c76:	4b65      	ldr	r3, [pc, #404]	; (8024e0c <_dtoa_r+0x62c>)
 8024c78:	2200      	movs	r2, #0
 8024c7a:	4640      	mov	r0, r8
 8024c7c:	4649      	mov	r1, r9
 8024c7e:	f7db fcc5 	bl	800060c <__aeabi_dmul>
 8024c82:	4652      	mov	r2, sl
 8024c84:	465b      	mov	r3, fp
 8024c86:	f7db ff47 	bl	8000b18 <__aeabi_dcmpge>
 8024c8a:	9e03      	ldr	r6, [sp, #12]
 8024c8c:	4637      	mov	r7, r6
 8024c8e:	2800      	cmp	r0, #0
 8024c90:	f040 8245 	bne.w	802511e <_dtoa_r+0x93e>
 8024c94:	9d01      	ldr	r5, [sp, #4]
 8024c96:	2331      	movs	r3, #49	; 0x31
 8024c98:	f805 3b01 	strb.w	r3, [r5], #1
 8024c9c:	9b00      	ldr	r3, [sp, #0]
 8024c9e:	3301      	adds	r3, #1
 8024ca0:	9300      	str	r3, [sp, #0]
 8024ca2:	e240      	b.n	8025126 <_dtoa_r+0x946>
 8024ca4:	07f2      	lsls	r2, r6, #31
 8024ca6:	d505      	bpl.n	8024cb4 <_dtoa_r+0x4d4>
 8024ca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8024cac:	f7db fcae 	bl	800060c <__aeabi_dmul>
 8024cb0:	3501      	adds	r5, #1
 8024cb2:	2301      	movs	r3, #1
 8024cb4:	1076      	asrs	r6, r6, #1
 8024cb6:	3708      	adds	r7, #8
 8024cb8:	e777      	b.n	8024baa <_dtoa_r+0x3ca>
 8024cba:	2502      	movs	r5, #2
 8024cbc:	e779      	b.n	8024bb2 <_dtoa_r+0x3d2>
 8024cbe:	9f00      	ldr	r7, [sp, #0]
 8024cc0:	9e03      	ldr	r6, [sp, #12]
 8024cc2:	e794      	b.n	8024bee <_dtoa_r+0x40e>
 8024cc4:	9901      	ldr	r1, [sp, #4]
 8024cc6:	4b4c      	ldr	r3, [pc, #304]	; (8024df8 <_dtoa_r+0x618>)
 8024cc8:	4431      	add	r1, r6
 8024cca:	910d      	str	r1, [sp, #52]	; 0x34
 8024ccc:	9908      	ldr	r1, [sp, #32]
 8024cce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8024cd2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8024cd6:	2900      	cmp	r1, #0
 8024cd8:	d043      	beq.n	8024d62 <_dtoa_r+0x582>
 8024cda:	494d      	ldr	r1, [pc, #308]	; (8024e10 <_dtoa_r+0x630>)
 8024cdc:	2000      	movs	r0, #0
 8024cde:	f7db fdbf 	bl	8000860 <__aeabi_ddiv>
 8024ce2:	4652      	mov	r2, sl
 8024ce4:	465b      	mov	r3, fp
 8024ce6:	f7db fad9 	bl	800029c <__aeabi_dsub>
 8024cea:	9d01      	ldr	r5, [sp, #4]
 8024cec:	4682      	mov	sl, r0
 8024cee:	468b      	mov	fp, r1
 8024cf0:	4649      	mov	r1, r9
 8024cf2:	4640      	mov	r0, r8
 8024cf4:	f7db ff3a 	bl	8000b6c <__aeabi_d2iz>
 8024cf8:	4606      	mov	r6, r0
 8024cfa:	f7db fc1d 	bl	8000538 <__aeabi_i2d>
 8024cfe:	4602      	mov	r2, r0
 8024d00:	460b      	mov	r3, r1
 8024d02:	4640      	mov	r0, r8
 8024d04:	4649      	mov	r1, r9
 8024d06:	f7db fac9 	bl	800029c <__aeabi_dsub>
 8024d0a:	3630      	adds	r6, #48	; 0x30
 8024d0c:	f805 6b01 	strb.w	r6, [r5], #1
 8024d10:	4652      	mov	r2, sl
 8024d12:	465b      	mov	r3, fp
 8024d14:	4680      	mov	r8, r0
 8024d16:	4689      	mov	r9, r1
 8024d18:	f7db feea 	bl	8000af0 <__aeabi_dcmplt>
 8024d1c:	2800      	cmp	r0, #0
 8024d1e:	d163      	bne.n	8024de8 <_dtoa_r+0x608>
 8024d20:	4642      	mov	r2, r8
 8024d22:	464b      	mov	r3, r9
 8024d24:	4936      	ldr	r1, [pc, #216]	; (8024e00 <_dtoa_r+0x620>)
 8024d26:	2000      	movs	r0, #0
 8024d28:	f7db fab8 	bl	800029c <__aeabi_dsub>
 8024d2c:	4652      	mov	r2, sl
 8024d2e:	465b      	mov	r3, fp
 8024d30:	f7db fede 	bl	8000af0 <__aeabi_dcmplt>
 8024d34:	2800      	cmp	r0, #0
 8024d36:	f040 80b5 	bne.w	8024ea4 <_dtoa_r+0x6c4>
 8024d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024d3c:	429d      	cmp	r5, r3
 8024d3e:	d081      	beq.n	8024c44 <_dtoa_r+0x464>
 8024d40:	4b30      	ldr	r3, [pc, #192]	; (8024e04 <_dtoa_r+0x624>)
 8024d42:	2200      	movs	r2, #0
 8024d44:	4650      	mov	r0, sl
 8024d46:	4659      	mov	r1, fp
 8024d48:	f7db fc60 	bl	800060c <__aeabi_dmul>
 8024d4c:	4b2d      	ldr	r3, [pc, #180]	; (8024e04 <_dtoa_r+0x624>)
 8024d4e:	4682      	mov	sl, r0
 8024d50:	468b      	mov	fp, r1
 8024d52:	4640      	mov	r0, r8
 8024d54:	4649      	mov	r1, r9
 8024d56:	2200      	movs	r2, #0
 8024d58:	f7db fc58 	bl	800060c <__aeabi_dmul>
 8024d5c:	4680      	mov	r8, r0
 8024d5e:	4689      	mov	r9, r1
 8024d60:	e7c6      	b.n	8024cf0 <_dtoa_r+0x510>
 8024d62:	4650      	mov	r0, sl
 8024d64:	4659      	mov	r1, fp
 8024d66:	f7db fc51 	bl	800060c <__aeabi_dmul>
 8024d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024d6c:	9d01      	ldr	r5, [sp, #4]
 8024d6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8024d70:	4682      	mov	sl, r0
 8024d72:	468b      	mov	fp, r1
 8024d74:	4649      	mov	r1, r9
 8024d76:	4640      	mov	r0, r8
 8024d78:	f7db fef8 	bl	8000b6c <__aeabi_d2iz>
 8024d7c:	4606      	mov	r6, r0
 8024d7e:	f7db fbdb 	bl	8000538 <__aeabi_i2d>
 8024d82:	3630      	adds	r6, #48	; 0x30
 8024d84:	4602      	mov	r2, r0
 8024d86:	460b      	mov	r3, r1
 8024d88:	4640      	mov	r0, r8
 8024d8a:	4649      	mov	r1, r9
 8024d8c:	f7db fa86 	bl	800029c <__aeabi_dsub>
 8024d90:	f805 6b01 	strb.w	r6, [r5], #1
 8024d94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024d96:	429d      	cmp	r5, r3
 8024d98:	4680      	mov	r8, r0
 8024d9a:	4689      	mov	r9, r1
 8024d9c:	f04f 0200 	mov.w	r2, #0
 8024da0:	d124      	bne.n	8024dec <_dtoa_r+0x60c>
 8024da2:	4b1b      	ldr	r3, [pc, #108]	; (8024e10 <_dtoa_r+0x630>)
 8024da4:	4650      	mov	r0, sl
 8024da6:	4659      	mov	r1, fp
 8024da8:	f7db fa7a 	bl	80002a0 <__adddf3>
 8024dac:	4602      	mov	r2, r0
 8024dae:	460b      	mov	r3, r1
 8024db0:	4640      	mov	r0, r8
 8024db2:	4649      	mov	r1, r9
 8024db4:	f7db feba 	bl	8000b2c <__aeabi_dcmpgt>
 8024db8:	2800      	cmp	r0, #0
 8024dba:	d173      	bne.n	8024ea4 <_dtoa_r+0x6c4>
 8024dbc:	4652      	mov	r2, sl
 8024dbe:	465b      	mov	r3, fp
 8024dc0:	4913      	ldr	r1, [pc, #76]	; (8024e10 <_dtoa_r+0x630>)
 8024dc2:	2000      	movs	r0, #0
 8024dc4:	f7db fa6a 	bl	800029c <__aeabi_dsub>
 8024dc8:	4602      	mov	r2, r0
 8024dca:	460b      	mov	r3, r1
 8024dcc:	4640      	mov	r0, r8
 8024dce:	4649      	mov	r1, r9
 8024dd0:	f7db fe8e 	bl	8000af0 <__aeabi_dcmplt>
 8024dd4:	2800      	cmp	r0, #0
 8024dd6:	f43f af35 	beq.w	8024c44 <_dtoa_r+0x464>
 8024dda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024ddc:	1e6b      	subs	r3, r5, #1
 8024dde:	930f      	str	r3, [sp, #60]	; 0x3c
 8024de0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8024de4:	2b30      	cmp	r3, #48	; 0x30
 8024de6:	d0f8      	beq.n	8024dda <_dtoa_r+0x5fa>
 8024de8:	9700      	str	r7, [sp, #0]
 8024dea:	e049      	b.n	8024e80 <_dtoa_r+0x6a0>
 8024dec:	4b05      	ldr	r3, [pc, #20]	; (8024e04 <_dtoa_r+0x624>)
 8024dee:	f7db fc0d 	bl	800060c <__aeabi_dmul>
 8024df2:	4680      	mov	r8, r0
 8024df4:	4689      	mov	r9, r1
 8024df6:	e7bd      	b.n	8024d74 <_dtoa_r+0x594>
 8024df8:	080296f0 	.word	0x080296f0
 8024dfc:	080296c8 	.word	0x080296c8
 8024e00:	3ff00000 	.word	0x3ff00000
 8024e04:	40240000 	.word	0x40240000
 8024e08:	401c0000 	.word	0x401c0000
 8024e0c:	40140000 	.word	0x40140000
 8024e10:	3fe00000 	.word	0x3fe00000
 8024e14:	9d01      	ldr	r5, [sp, #4]
 8024e16:	4656      	mov	r6, sl
 8024e18:	465f      	mov	r7, fp
 8024e1a:	4642      	mov	r2, r8
 8024e1c:	464b      	mov	r3, r9
 8024e1e:	4630      	mov	r0, r6
 8024e20:	4639      	mov	r1, r7
 8024e22:	f7db fd1d 	bl	8000860 <__aeabi_ddiv>
 8024e26:	f7db fea1 	bl	8000b6c <__aeabi_d2iz>
 8024e2a:	4682      	mov	sl, r0
 8024e2c:	f7db fb84 	bl	8000538 <__aeabi_i2d>
 8024e30:	4642      	mov	r2, r8
 8024e32:	464b      	mov	r3, r9
 8024e34:	f7db fbea 	bl	800060c <__aeabi_dmul>
 8024e38:	4602      	mov	r2, r0
 8024e3a:	460b      	mov	r3, r1
 8024e3c:	4630      	mov	r0, r6
 8024e3e:	4639      	mov	r1, r7
 8024e40:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8024e44:	f7db fa2a 	bl	800029c <__aeabi_dsub>
 8024e48:	f805 6b01 	strb.w	r6, [r5], #1
 8024e4c:	9e01      	ldr	r6, [sp, #4]
 8024e4e:	9f03      	ldr	r7, [sp, #12]
 8024e50:	1bae      	subs	r6, r5, r6
 8024e52:	42b7      	cmp	r7, r6
 8024e54:	4602      	mov	r2, r0
 8024e56:	460b      	mov	r3, r1
 8024e58:	d135      	bne.n	8024ec6 <_dtoa_r+0x6e6>
 8024e5a:	f7db fa21 	bl	80002a0 <__adddf3>
 8024e5e:	4642      	mov	r2, r8
 8024e60:	464b      	mov	r3, r9
 8024e62:	4606      	mov	r6, r0
 8024e64:	460f      	mov	r7, r1
 8024e66:	f7db fe61 	bl	8000b2c <__aeabi_dcmpgt>
 8024e6a:	b9d0      	cbnz	r0, 8024ea2 <_dtoa_r+0x6c2>
 8024e6c:	4642      	mov	r2, r8
 8024e6e:	464b      	mov	r3, r9
 8024e70:	4630      	mov	r0, r6
 8024e72:	4639      	mov	r1, r7
 8024e74:	f7db fe32 	bl	8000adc <__aeabi_dcmpeq>
 8024e78:	b110      	cbz	r0, 8024e80 <_dtoa_r+0x6a0>
 8024e7a:	f01a 0f01 	tst.w	sl, #1
 8024e7e:	d110      	bne.n	8024ea2 <_dtoa_r+0x6c2>
 8024e80:	4620      	mov	r0, r4
 8024e82:	ee18 1a10 	vmov	r1, s16
 8024e86:	f001 f887 	bl	8025f98 <_Bfree>
 8024e8a:	2300      	movs	r3, #0
 8024e8c:	9800      	ldr	r0, [sp, #0]
 8024e8e:	702b      	strb	r3, [r5, #0]
 8024e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024e92:	3001      	adds	r0, #1
 8024e94:	6018      	str	r0, [r3, #0]
 8024e96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024e98:	2b00      	cmp	r3, #0
 8024e9a:	f43f acf1 	beq.w	8024880 <_dtoa_r+0xa0>
 8024e9e:	601d      	str	r5, [r3, #0]
 8024ea0:	e4ee      	b.n	8024880 <_dtoa_r+0xa0>
 8024ea2:	9f00      	ldr	r7, [sp, #0]
 8024ea4:	462b      	mov	r3, r5
 8024ea6:	461d      	mov	r5, r3
 8024ea8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8024eac:	2a39      	cmp	r2, #57	; 0x39
 8024eae:	d106      	bne.n	8024ebe <_dtoa_r+0x6de>
 8024eb0:	9a01      	ldr	r2, [sp, #4]
 8024eb2:	429a      	cmp	r2, r3
 8024eb4:	d1f7      	bne.n	8024ea6 <_dtoa_r+0x6c6>
 8024eb6:	9901      	ldr	r1, [sp, #4]
 8024eb8:	2230      	movs	r2, #48	; 0x30
 8024eba:	3701      	adds	r7, #1
 8024ebc:	700a      	strb	r2, [r1, #0]
 8024ebe:	781a      	ldrb	r2, [r3, #0]
 8024ec0:	3201      	adds	r2, #1
 8024ec2:	701a      	strb	r2, [r3, #0]
 8024ec4:	e790      	b.n	8024de8 <_dtoa_r+0x608>
 8024ec6:	4ba6      	ldr	r3, [pc, #664]	; (8025160 <_dtoa_r+0x980>)
 8024ec8:	2200      	movs	r2, #0
 8024eca:	f7db fb9f 	bl	800060c <__aeabi_dmul>
 8024ece:	2200      	movs	r2, #0
 8024ed0:	2300      	movs	r3, #0
 8024ed2:	4606      	mov	r6, r0
 8024ed4:	460f      	mov	r7, r1
 8024ed6:	f7db fe01 	bl	8000adc <__aeabi_dcmpeq>
 8024eda:	2800      	cmp	r0, #0
 8024edc:	d09d      	beq.n	8024e1a <_dtoa_r+0x63a>
 8024ede:	e7cf      	b.n	8024e80 <_dtoa_r+0x6a0>
 8024ee0:	9a08      	ldr	r2, [sp, #32]
 8024ee2:	2a00      	cmp	r2, #0
 8024ee4:	f000 80d7 	beq.w	8025096 <_dtoa_r+0x8b6>
 8024ee8:	9a06      	ldr	r2, [sp, #24]
 8024eea:	2a01      	cmp	r2, #1
 8024eec:	f300 80ba 	bgt.w	8025064 <_dtoa_r+0x884>
 8024ef0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024ef2:	2a00      	cmp	r2, #0
 8024ef4:	f000 80b2 	beq.w	802505c <_dtoa_r+0x87c>
 8024ef8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8024efc:	9e07      	ldr	r6, [sp, #28]
 8024efe:	9d04      	ldr	r5, [sp, #16]
 8024f00:	9a04      	ldr	r2, [sp, #16]
 8024f02:	441a      	add	r2, r3
 8024f04:	9204      	str	r2, [sp, #16]
 8024f06:	9a05      	ldr	r2, [sp, #20]
 8024f08:	2101      	movs	r1, #1
 8024f0a:	441a      	add	r2, r3
 8024f0c:	4620      	mov	r0, r4
 8024f0e:	9205      	str	r2, [sp, #20]
 8024f10:	f001 f944 	bl	802619c <__i2b>
 8024f14:	4607      	mov	r7, r0
 8024f16:	2d00      	cmp	r5, #0
 8024f18:	dd0c      	ble.n	8024f34 <_dtoa_r+0x754>
 8024f1a:	9b05      	ldr	r3, [sp, #20]
 8024f1c:	2b00      	cmp	r3, #0
 8024f1e:	dd09      	ble.n	8024f34 <_dtoa_r+0x754>
 8024f20:	42ab      	cmp	r3, r5
 8024f22:	9a04      	ldr	r2, [sp, #16]
 8024f24:	bfa8      	it	ge
 8024f26:	462b      	movge	r3, r5
 8024f28:	1ad2      	subs	r2, r2, r3
 8024f2a:	9204      	str	r2, [sp, #16]
 8024f2c:	9a05      	ldr	r2, [sp, #20]
 8024f2e:	1aed      	subs	r5, r5, r3
 8024f30:	1ad3      	subs	r3, r2, r3
 8024f32:	9305      	str	r3, [sp, #20]
 8024f34:	9b07      	ldr	r3, [sp, #28]
 8024f36:	b31b      	cbz	r3, 8024f80 <_dtoa_r+0x7a0>
 8024f38:	9b08      	ldr	r3, [sp, #32]
 8024f3a:	2b00      	cmp	r3, #0
 8024f3c:	f000 80af 	beq.w	802509e <_dtoa_r+0x8be>
 8024f40:	2e00      	cmp	r6, #0
 8024f42:	dd13      	ble.n	8024f6c <_dtoa_r+0x78c>
 8024f44:	4639      	mov	r1, r7
 8024f46:	4632      	mov	r2, r6
 8024f48:	4620      	mov	r0, r4
 8024f4a:	f001 f9e7 	bl	802631c <__pow5mult>
 8024f4e:	ee18 2a10 	vmov	r2, s16
 8024f52:	4601      	mov	r1, r0
 8024f54:	4607      	mov	r7, r0
 8024f56:	4620      	mov	r0, r4
 8024f58:	f001 f936 	bl	80261c8 <__multiply>
 8024f5c:	ee18 1a10 	vmov	r1, s16
 8024f60:	4680      	mov	r8, r0
 8024f62:	4620      	mov	r0, r4
 8024f64:	f001 f818 	bl	8025f98 <_Bfree>
 8024f68:	ee08 8a10 	vmov	s16, r8
 8024f6c:	9b07      	ldr	r3, [sp, #28]
 8024f6e:	1b9a      	subs	r2, r3, r6
 8024f70:	d006      	beq.n	8024f80 <_dtoa_r+0x7a0>
 8024f72:	ee18 1a10 	vmov	r1, s16
 8024f76:	4620      	mov	r0, r4
 8024f78:	f001 f9d0 	bl	802631c <__pow5mult>
 8024f7c:	ee08 0a10 	vmov	s16, r0
 8024f80:	2101      	movs	r1, #1
 8024f82:	4620      	mov	r0, r4
 8024f84:	f001 f90a 	bl	802619c <__i2b>
 8024f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024f8a:	2b00      	cmp	r3, #0
 8024f8c:	4606      	mov	r6, r0
 8024f8e:	f340 8088 	ble.w	80250a2 <_dtoa_r+0x8c2>
 8024f92:	461a      	mov	r2, r3
 8024f94:	4601      	mov	r1, r0
 8024f96:	4620      	mov	r0, r4
 8024f98:	f001 f9c0 	bl	802631c <__pow5mult>
 8024f9c:	9b06      	ldr	r3, [sp, #24]
 8024f9e:	2b01      	cmp	r3, #1
 8024fa0:	4606      	mov	r6, r0
 8024fa2:	f340 8081 	ble.w	80250a8 <_dtoa_r+0x8c8>
 8024fa6:	f04f 0800 	mov.w	r8, #0
 8024faa:	6933      	ldr	r3, [r6, #16]
 8024fac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8024fb0:	6918      	ldr	r0, [r3, #16]
 8024fb2:	f001 f8a3 	bl	80260fc <__hi0bits>
 8024fb6:	f1c0 0020 	rsb	r0, r0, #32
 8024fba:	9b05      	ldr	r3, [sp, #20]
 8024fbc:	4418      	add	r0, r3
 8024fbe:	f010 001f 	ands.w	r0, r0, #31
 8024fc2:	f000 8092 	beq.w	80250ea <_dtoa_r+0x90a>
 8024fc6:	f1c0 0320 	rsb	r3, r0, #32
 8024fca:	2b04      	cmp	r3, #4
 8024fcc:	f340 808a 	ble.w	80250e4 <_dtoa_r+0x904>
 8024fd0:	f1c0 001c 	rsb	r0, r0, #28
 8024fd4:	9b04      	ldr	r3, [sp, #16]
 8024fd6:	4403      	add	r3, r0
 8024fd8:	9304      	str	r3, [sp, #16]
 8024fda:	9b05      	ldr	r3, [sp, #20]
 8024fdc:	4403      	add	r3, r0
 8024fde:	4405      	add	r5, r0
 8024fe0:	9305      	str	r3, [sp, #20]
 8024fe2:	9b04      	ldr	r3, [sp, #16]
 8024fe4:	2b00      	cmp	r3, #0
 8024fe6:	dd07      	ble.n	8024ff8 <_dtoa_r+0x818>
 8024fe8:	ee18 1a10 	vmov	r1, s16
 8024fec:	461a      	mov	r2, r3
 8024fee:	4620      	mov	r0, r4
 8024ff0:	f001 f9ee 	bl	80263d0 <__lshift>
 8024ff4:	ee08 0a10 	vmov	s16, r0
 8024ff8:	9b05      	ldr	r3, [sp, #20]
 8024ffa:	2b00      	cmp	r3, #0
 8024ffc:	dd05      	ble.n	802500a <_dtoa_r+0x82a>
 8024ffe:	4631      	mov	r1, r6
 8025000:	461a      	mov	r2, r3
 8025002:	4620      	mov	r0, r4
 8025004:	f001 f9e4 	bl	80263d0 <__lshift>
 8025008:	4606      	mov	r6, r0
 802500a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802500c:	2b00      	cmp	r3, #0
 802500e:	d06e      	beq.n	80250ee <_dtoa_r+0x90e>
 8025010:	ee18 0a10 	vmov	r0, s16
 8025014:	4631      	mov	r1, r6
 8025016:	f001 fa4b 	bl	80264b0 <__mcmp>
 802501a:	2800      	cmp	r0, #0
 802501c:	da67      	bge.n	80250ee <_dtoa_r+0x90e>
 802501e:	9b00      	ldr	r3, [sp, #0]
 8025020:	3b01      	subs	r3, #1
 8025022:	ee18 1a10 	vmov	r1, s16
 8025026:	9300      	str	r3, [sp, #0]
 8025028:	220a      	movs	r2, #10
 802502a:	2300      	movs	r3, #0
 802502c:	4620      	mov	r0, r4
 802502e:	f000 ffd5 	bl	8025fdc <__multadd>
 8025032:	9b08      	ldr	r3, [sp, #32]
 8025034:	ee08 0a10 	vmov	s16, r0
 8025038:	2b00      	cmp	r3, #0
 802503a:	f000 81b1 	beq.w	80253a0 <_dtoa_r+0xbc0>
 802503e:	2300      	movs	r3, #0
 8025040:	4639      	mov	r1, r7
 8025042:	220a      	movs	r2, #10
 8025044:	4620      	mov	r0, r4
 8025046:	f000 ffc9 	bl	8025fdc <__multadd>
 802504a:	9b02      	ldr	r3, [sp, #8]
 802504c:	2b00      	cmp	r3, #0
 802504e:	4607      	mov	r7, r0
 8025050:	f300 808e 	bgt.w	8025170 <_dtoa_r+0x990>
 8025054:	9b06      	ldr	r3, [sp, #24]
 8025056:	2b02      	cmp	r3, #2
 8025058:	dc51      	bgt.n	80250fe <_dtoa_r+0x91e>
 802505a:	e089      	b.n	8025170 <_dtoa_r+0x990>
 802505c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802505e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8025062:	e74b      	b.n	8024efc <_dtoa_r+0x71c>
 8025064:	9b03      	ldr	r3, [sp, #12]
 8025066:	1e5e      	subs	r6, r3, #1
 8025068:	9b07      	ldr	r3, [sp, #28]
 802506a:	42b3      	cmp	r3, r6
 802506c:	bfbf      	itttt	lt
 802506e:	9b07      	ldrlt	r3, [sp, #28]
 8025070:	9607      	strlt	r6, [sp, #28]
 8025072:	1af2      	sublt	r2, r6, r3
 8025074:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8025076:	bfb6      	itet	lt
 8025078:	189b      	addlt	r3, r3, r2
 802507a:	1b9e      	subge	r6, r3, r6
 802507c:	930a      	strlt	r3, [sp, #40]	; 0x28
 802507e:	9b03      	ldr	r3, [sp, #12]
 8025080:	bfb8      	it	lt
 8025082:	2600      	movlt	r6, #0
 8025084:	2b00      	cmp	r3, #0
 8025086:	bfb7      	itett	lt
 8025088:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 802508c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8025090:	1a9d      	sublt	r5, r3, r2
 8025092:	2300      	movlt	r3, #0
 8025094:	e734      	b.n	8024f00 <_dtoa_r+0x720>
 8025096:	9e07      	ldr	r6, [sp, #28]
 8025098:	9d04      	ldr	r5, [sp, #16]
 802509a:	9f08      	ldr	r7, [sp, #32]
 802509c:	e73b      	b.n	8024f16 <_dtoa_r+0x736>
 802509e:	9a07      	ldr	r2, [sp, #28]
 80250a0:	e767      	b.n	8024f72 <_dtoa_r+0x792>
 80250a2:	9b06      	ldr	r3, [sp, #24]
 80250a4:	2b01      	cmp	r3, #1
 80250a6:	dc18      	bgt.n	80250da <_dtoa_r+0x8fa>
 80250a8:	f1ba 0f00 	cmp.w	sl, #0
 80250ac:	d115      	bne.n	80250da <_dtoa_r+0x8fa>
 80250ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80250b2:	b993      	cbnz	r3, 80250da <_dtoa_r+0x8fa>
 80250b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80250b8:	0d1b      	lsrs	r3, r3, #20
 80250ba:	051b      	lsls	r3, r3, #20
 80250bc:	b183      	cbz	r3, 80250e0 <_dtoa_r+0x900>
 80250be:	9b04      	ldr	r3, [sp, #16]
 80250c0:	3301      	adds	r3, #1
 80250c2:	9304      	str	r3, [sp, #16]
 80250c4:	9b05      	ldr	r3, [sp, #20]
 80250c6:	3301      	adds	r3, #1
 80250c8:	9305      	str	r3, [sp, #20]
 80250ca:	f04f 0801 	mov.w	r8, #1
 80250ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80250d0:	2b00      	cmp	r3, #0
 80250d2:	f47f af6a 	bne.w	8024faa <_dtoa_r+0x7ca>
 80250d6:	2001      	movs	r0, #1
 80250d8:	e76f      	b.n	8024fba <_dtoa_r+0x7da>
 80250da:	f04f 0800 	mov.w	r8, #0
 80250de:	e7f6      	b.n	80250ce <_dtoa_r+0x8ee>
 80250e0:	4698      	mov	r8, r3
 80250e2:	e7f4      	b.n	80250ce <_dtoa_r+0x8ee>
 80250e4:	f43f af7d 	beq.w	8024fe2 <_dtoa_r+0x802>
 80250e8:	4618      	mov	r0, r3
 80250ea:	301c      	adds	r0, #28
 80250ec:	e772      	b.n	8024fd4 <_dtoa_r+0x7f4>
 80250ee:	9b03      	ldr	r3, [sp, #12]
 80250f0:	2b00      	cmp	r3, #0
 80250f2:	dc37      	bgt.n	8025164 <_dtoa_r+0x984>
 80250f4:	9b06      	ldr	r3, [sp, #24]
 80250f6:	2b02      	cmp	r3, #2
 80250f8:	dd34      	ble.n	8025164 <_dtoa_r+0x984>
 80250fa:	9b03      	ldr	r3, [sp, #12]
 80250fc:	9302      	str	r3, [sp, #8]
 80250fe:	9b02      	ldr	r3, [sp, #8]
 8025100:	b96b      	cbnz	r3, 802511e <_dtoa_r+0x93e>
 8025102:	4631      	mov	r1, r6
 8025104:	2205      	movs	r2, #5
 8025106:	4620      	mov	r0, r4
 8025108:	f000 ff68 	bl	8025fdc <__multadd>
 802510c:	4601      	mov	r1, r0
 802510e:	4606      	mov	r6, r0
 8025110:	ee18 0a10 	vmov	r0, s16
 8025114:	f001 f9cc 	bl	80264b0 <__mcmp>
 8025118:	2800      	cmp	r0, #0
 802511a:	f73f adbb 	bgt.w	8024c94 <_dtoa_r+0x4b4>
 802511e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025120:	9d01      	ldr	r5, [sp, #4]
 8025122:	43db      	mvns	r3, r3
 8025124:	9300      	str	r3, [sp, #0]
 8025126:	f04f 0800 	mov.w	r8, #0
 802512a:	4631      	mov	r1, r6
 802512c:	4620      	mov	r0, r4
 802512e:	f000 ff33 	bl	8025f98 <_Bfree>
 8025132:	2f00      	cmp	r7, #0
 8025134:	f43f aea4 	beq.w	8024e80 <_dtoa_r+0x6a0>
 8025138:	f1b8 0f00 	cmp.w	r8, #0
 802513c:	d005      	beq.n	802514a <_dtoa_r+0x96a>
 802513e:	45b8      	cmp	r8, r7
 8025140:	d003      	beq.n	802514a <_dtoa_r+0x96a>
 8025142:	4641      	mov	r1, r8
 8025144:	4620      	mov	r0, r4
 8025146:	f000 ff27 	bl	8025f98 <_Bfree>
 802514a:	4639      	mov	r1, r7
 802514c:	4620      	mov	r0, r4
 802514e:	f000 ff23 	bl	8025f98 <_Bfree>
 8025152:	e695      	b.n	8024e80 <_dtoa_r+0x6a0>
 8025154:	2600      	movs	r6, #0
 8025156:	4637      	mov	r7, r6
 8025158:	e7e1      	b.n	802511e <_dtoa_r+0x93e>
 802515a:	9700      	str	r7, [sp, #0]
 802515c:	4637      	mov	r7, r6
 802515e:	e599      	b.n	8024c94 <_dtoa_r+0x4b4>
 8025160:	40240000 	.word	0x40240000
 8025164:	9b08      	ldr	r3, [sp, #32]
 8025166:	2b00      	cmp	r3, #0
 8025168:	f000 80ca 	beq.w	8025300 <_dtoa_r+0xb20>
 802516c:	9b03      	ldr	r3, [sp, #12]
 802516e:	9302      	str	r3, [sp, #8]
 8025170:	2d00      	cmp	r5, #0
 8025172:	dd05      	ble.n	8025180 <_dtoa_r+0x9a0>
 8025174:	4639      	mov	r1, r7
 8025176:	462a      	mov	r2, r5
 8025178:	4620      	mov	r0, r4
 802517a:	f001 f929 	bl	80263d0 <__lshift>
 802517e:	4607      	mov	r7, r0
 8025180:	f1b8 0f00 	cmp.w	r8, #0
 8025184:	d05b      	beq.n	802523e <_dtoa_r+0xa5e>
 8025186:	6879      	ldr	r1, [r7, #4]
 8025188:	4620      	mov	r0, r4
 802518a:	f000 fec5 	bl	8025f18 <_Balloc>
 802518e:	4605      	mov	r5, r0
 8025190:	b928      	cbnz	r0, 802519e <_dtoa_r+0x9be>
 8025192:	4b87      	ldr	r3, [pc, #540]	; (80253b0 <_dtoa_r+0xbd0>)
 8025194:	4602      	mov	r2, r0
 8025196:	f240 21ea 	movw	r1, #746	; 0x2ea
 802519a:	f7ff bb3b 	b.w	8024814 <_dtoa_r+0x34>
 802519e:	693a      	ldr	r2, [r7, #16]
 80251a0:	3202      	adds	r2, #2
 80251a2:	0092      	lsls	r2, r2, #2
 80251a4:	f107 010c 	add.w	r1, r7, #12
 80251a8:	300c      	adds	r0, #12
 80251aa:	f7fd fc29 	bl	8022a00 <memcpy>
 80251ae:	2201      	movs	r2, #1
 80251b0:	4629      	mov	r1, r5
 80251b2:	4620      	mov	r0, r4
 80251b4:	f001 f90c 	bl	80263d0 <__lshift>
 80251b8:	9b01      	ldr	r3, [sp, #4]
 80251ba:	f103 0901 	add.w	r9, r3, #1
 80251be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80251c2:	4413      	add	r3, r2
 80251c4:	9305      	str	r3, [sp, #20]
 80251c6:	f00a 0301 	and.w	r3, sl, #1
 80251ca:	46b8      	mov	r8, r7
 80251cc:	9304      	str	r3, [sp, #16]
 80251ce:	4607      	mov	r7, r0
 80251d0:	4631      	mov	r1, r6
 80251d2:	ee18 0a10 	vmov	r0, s16
 80251d6:	f7ff fa75 	bl	80246c4 <quorem>
 80251da:	4641      	mov	r1, r8
 80251dc:	9002      	str	r0, [sp, #8]
 80251de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80251e2:	ee18 0a10 	vmov	r0, s16
 80251e6:	f001 f963 	bl	80264b0 <__mcmp>
 80251ea:	463a      	mov	r2, r7
 80251ec:	9003      	str	r0, [sp, #12]
 80251ee:	4631      	mov	r1, r6
 80251f0:	4620      	mov	r0, r4
 80251f2:	f001 f979 	bl	80264e8 <__mdiff>
 80251f6:	68c2      	ldr	r2, [r0, #12]
 80251f8:	f109 3bff 	add.w	fp, r9, #4294967295
 80251fc:	4605      	mov	r5, r0
 80251fe:	bb02      	cbnz	r2, 8025242 <_dtoa_r+0xa62>
 8025200:	4601      	mov	r1, r0
 8025202:	ee18 0a10 	vmov	r0, s16
 8025206:	f001 f953 	bl	80264b0 <__mcmp>
 802520a:	4602      	mov	r2, r0
 802520c:	4629      	mov	r1, r5
 802520e:	4620      	mov	r0, r4
 8025210:	9207      	str	r2, [sp, #28]
 8025212:	f000 fec1 	bl	8025f98 <_Bfree>
 8025216:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 802521a:	ea43 0102 	orr.w	r1, r3, r2
 802521e:	9b04      	ldr	r3, [sp, #16]
 8025220:	430b      	orrs	r3, r1
 8025222:	464d      	mov	r5, r9
 8025224:	d10f      	bne.n	8025246 <_dtoa_r+0xa66>
 8025226:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802522a:	d02a      	beq.n	8025282 <_dtoa_r+0xaa2>
 802522c:	9b03      	ldr	r3, [sp, #12]
 802522e:	2b00      	cmp	r3, #0
 8025230:	dd02      	ble.n	8025238 <_dtoa_r+0xa58>
 8025232:	9b02      	ldr	r3, [sp, #8]
 8025234:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8025238:	f88b a000 	strb.w	sl, [fp]
 802523c:	e775      	b.n	802512a <_dtoa_r+0x94a>
 802523e:	4638      	mov	r0, r7
 8025240:	e7ba      	b.n	80251b8 <_dtoa_r+0x9d8>
 8025242:	2201      	movs	r2, #1
 8025244:	e7e2      	b.n	802520c <_dtoa_r+0xa2c>
 8025246:	9b03      	ldr	r3, [sp, #12]
 8025248:	2b00      	cmp	r3, #0
 802524a:	db04      	blt.n	8025256 <_dtoa_r+0xa76>
 802524c:	9906      	ldr	r1, [sp, #24]
 802524e:	430b      	orrs	r3, r1
 8025250:	9904      	ldr	r1, [sp, #16]
 8025252:	430b      	orrs	r3, r1
 8025254:	d122      	bne.n	802529c <_dtoa_r+0xabc>
 8025256:	2a00      	cmp	r2, #0
 8025258:	ddee      	ble.n	8025238 <_dtoa_r+0xa58>
 802525a:	ee18 1a10 	vmov	r1, s16
 802525e:	2201      	movs	r2, #1
 8025260:	4620      	mov	r0, r4
 8025262:	f001 f8b5 	bl	80263d0 <__lshift>
 8025266:	4631      	mov	r1, r6
 8025268:	ee08 0a10 	vmov	s16, r0
 802526c:	f001 f920 	bl	80264b0 <__mcmp>
 8025270:	2800      	cmp	r0, #0
 8025272:	dc03      	bgt.n	802527c <_dtoa_r+0xa9c>
 8025274:	d1e0      	bne.n	8025238 <_dtoa_r+0xa58>
 8025276:	f01a 0f01 	tst.w	sl, #1
 802527a:	d0dd      	beq.n	8025238 <_dtoa_r+0xa58>
 802527c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8025280:	d1d7      	bne.n	8025232 <_dtoa_r+0xa52>
 8025282:	2339      	movs	r3, #57	; 0x39
 8025284:	f88b 3000 	strb.w	r3, [fp]
 8025288:	462b      	mov	r3, r5
 802528a:	461d      	mov	r5, r3
 802528c:	3b01      	subs	r3, #1
 802528e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8025292:	2a39      	cmp	r2, #57	; 0x39
 8025294:	d071      	beq.n	802537a <_dtoa_r+0xb9a>
 8025296:	3201      	adds	r2, #1
 8025298:	701a      	strb	r2, [r3, #0]
 802529a:	e746      	b.n	802512a <_dtoa_r+0x94a>
 802529c:	2a00      	cmp	r2, #0
 802529e:	dd07      	ble.n	80252b0 <_dtoa_r+0xad0>
 80252a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80252a4:	d0ed      	beq.n	8025282 <_dtoa_r+0xaa2>
 80252a6:	f10a 0301 	add.w	r3, sl, #1
 80252aa:	f88b 3000 	strb.w	r3, [fp]
 80252ae:	e73c      	b.n	802512a <_dtoa_r+0x94a>
 80252b0:	9b05      	ldr	r3, [sp, #20]
 80252b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80252b6:	4599      	cmp	r9, r3
 80252b8:	d047      	beq.n	802534a <_dtoa_r+0xb6a>
 80252ba:	ee18 1a10 	vmov	r1, s16
 80252be:	2300      	movs	r3, #0
 80252c0:	220a      	movs	r2, #10
 80252c2:	4620      	mov	r0, r4
 80252c4:	f000 fe8a 	bl	8025fdc <__multadd>
 80252c8:	45b8      	cmp	r8, r7
 80252ca:	ee08 0a10 	vmov	s16, r0
 80252ce:	f04f 0300 	mov.w	r3, #0
 80252d2:	f04f 020a 	mov.w	r2, #10
 80252d6:	4641      	mov	r1, r8
 80252d8:	4620      	mov	r0, r4
 80252da:	d106      	bne.n	80252ea <_dtoa_r+0xb0a>
 80252dc:	f000 fe7e 	bl	8025fdc <__multadd>
 80252e0:	4680      	mov	r8, r0
 80252e2:	4607      	mov	r7, r0
 80252e4:	f109 0901 	add.w	r9, r9, #1
 80252e8:	e772      	b.n	80251d0 <_dtoa_r+0x9f0>
 80252ea:	f000 fe77 	bl	8025fdc <__multadd>
 80252ee:	4639      	mov	r1, r7
 80252f0:	4680      	mov	r8, r0
 80252f2:	2300      	movs	r3, #0
 80252f4:	220a      	movs	r2, #10
 80252f6:	4620      	mov	r0, r4
 80252f8:	f000 fe70 	bl	8025fdc <__multadd>
 80252fc:	4607      	mov	r7, r0
 80252fe:	e7f1      	b.n	80252e4 <_dtoa_r+0xb04>
 8025300:	9b03      	ldr	r3, [sp, #12]
 8025302:	9302      	str	r3, [sp, #8]
 8025304:	9d01      	ldr	r5, [sp, #4]
 8025306:	ee18 0a10 	vmov	r0, s16
 802530a:	4631      	mov	r1, r6
 802530c:	f7ff f9da 	bl	80246c4 <quorem>
 8025310:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8025314:	9b01      	ldr	r3, [sp, #4]
 8025316:	f805 ab01 	strb.w	sl, [r5], #1
 802531a:	1aea      	subs	r2, r5, r3
 802531c:	9b02      	ldr	r3, [sp, #8]
 802531e:	4293      	cmp	r3, r2
 8025320:	dd09      	ble.n	8025336 <_dtoa_r+0xb56>
 8025322:	ee18 1a10 	vmov	r1, s16
 8025326:	2300      	movs	r3, #0
 8025328:	220a      	movs	r2, #10
 802532a:	4620      	mov	r0, r4
 802532c:	f000 fe56 	bl	8025fdc <__multadd>
 8025330:	ee08 0a10 	vmov	s16, r0
 8025334:	e7e7      	b.n	8025306 <_dtoa_r+0xb26>
 8025336:	9b02      	ldr	r3, [sp, #8]
 8025338:	2b00      	cmp	r3, #0
 802533a:	bfc8      	it	gt
 802533c:	461d      	movgt	r5, r3
 802533e:	9b01      	ldr	r3, [sp, #4]
 8025340:	bfd8      	it	le
 8025342:	2501      	movle	r5, #1
 8025344:	441d      	add	r5, r3
 8025346:	f04f 0800 	mov.w	r8, #0
 802534a:	ee18 1a10 	vmov	r1, s16
 802534e:	2201      	movs	r2, #1
 8025350:	4620      	mov	r0, r4
 8025352:	f001 f83d 	bl	80263d0 <__lshift>
 8025356:	4631      	mov	r1, r6
 8025358:	ee08 0a10 	vmov	s16, r0
 802535c:	f001 f8a8 	bl	80264b0 <__mcmp>
 8025360:	2800      	cmp	r0, #0
 8025362:	dc91      	bgt.n	8025288 <_dtoa_r+0xaa8>
 8025364:	d102      	bne.n	802536c <_dtoa_r+0xb8c>
 8025366:	f01a 0f01 	tst.w	sl, #1
 802536a:	d18d      	bne.n	8025288 <_dtoa_r+0xaa8>
 802536c:	462b      	mov	r3, r5
 802536e:	461d      	mov	r5, r3
 8025370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025374:	2a30      	cmp	r2, #48	; 0x30
 8025376:	d0fa      	beq.n	802536e <_dtoa_r+0xb8e>
 8025378:	e6d7      	b.n	802512a <_dtoa_r+0x94a>
 802537a:	9a01      	ldr	r2, [sp, #4]
 802537c:	429a      	cmp	r2, r3
 802537e:	d184      	bne.n	802528a <_dtoa_r+0xaaa>
 8025380:	9b00      	ldr	r3, [sp, #0]
 8025382:	3301      	adds	r3, #1
 8025384:	9300      	str	r3, [sp, #0]
 8025386:	2331      	movs	r3, #49	; 0x31
 8025388:	7013      	strb	r3, [r2, #0]
 802538a:	e6ce      	b.n	802512a <_dtoa_r+0x94a>
 802538c:	4b09      	ldr	r3, [pc, #36]	; (80253b4 <_dtoa_r+0xbd4>)
 802538e:	f7ff ba95 	b.w	80248bc <_dtoa_r+0xdc>
 8025392:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025394:	2b00      	cmp	r3, #0
 8025396:	f47f aa6e 	bne.w	8024876 <_dtoa_r+0x96>
 802539a:	4b07      	ldr	r3, [pc, #28]	; (80253b8 <_dtoa_r+0xbd8>)
 802539c:	f7ff ba8e 	b.w	80248bc <_dtoa_r+0xdc>
 80253a0:	9b02      	ldr	r3, [sp, #8]
 80253a2:	2b00      	cmp	r3, #0
 80253a4:	dcae      	bgt.n	8025304 <_dtoa_r+0xb24>
 80253a6:	9b06      	ldr	r3, [sp, #24]
 80253a8:	2b02      	cmp	r3, #2
 80253aa:	f73f aea8 	bgt.w	80250fe <_dtoa_r+0x91e>
 80253ae:	e7a9      	b.n	8025304 <_dtoa_r+0xb24>
 80253b0:	08029578 	.word	0x08029578
 80253b4:	08029381 	.word	0x08029381
 80253b8:	080294f9 	.word	0x080294f9

080253bc <__sflush_r>:
 80253bc:	898a      	ldrh	r2, [r1, #12]
 80253be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80253c2:	4605      	mov	r5, r0
 80253c4:	0710      	lsls	r0, r2, #28
 80253c6:	460c      	mov	r4, r1
 80253c8:	d458      	bmi.n	802547c <__sflush_r+0xc0>
 80253ca:	684b      	ldr	r3, [r1, #4]
 80253cc:	2b00      	cmp	r3, #0
 80253ce:	dc05      	bgt.n	80253dc <__sflush_r+0x20>
 80253d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80253d2:	2b00      	cmp	r3, #0
 80253d4:	dc02      	bgt.n	80253dc <__sflush_r+0x20>
 80253d6:	2000      	movs	r0, #0
 80253d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80253dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80253de:	2e00      	cmp	r6, #0
 80253e0:	d0f9      	beq.n	80253d6 <__sflush_r+0x1a>
 80253e2:	2300      	movs	r3, #0
 80253e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80253e8:	682f      	ldr	r7, [r5, #0]
 80253ea:	602b      	str	r3, [r5, #0]
 80253ec:	d032      	beq.n	8025454 <__sflush_r+0x98>
 80253ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80253f0:	89a3      	ldrh	r3, [r4, #12]
 80253f2:	075a      	lsls	r2, r3, #29
 80253f4:	d505      	bpl.n	8025402 <__sflush_r+0x46>
 80253f6:	6863      	ldr	r3, [r4, #4]
 80253f8:	1ac0      	subs	r0, r0, r3
 80253fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80253fc:	b10b      	cbz	r3, 8025402 <__sflush_r+0x46>
 80253fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025400:	1ac0      	subs	r0, r0, r3
 8025402:	2300      	movs	r3, #0
 8025404:	4602      	mov	r2, r0
 8025406:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025408:	6a21      	ldr	r1, [r4, #32]
 802540a:	4628      	mov	r0, r5
 802540c:	47b0      	blx	r6
 802540e:	1c43      	adds	r3, r0, #1
 8025410:	89a3      	ldrh	r3, [r4, #12]
 8025412:	d106      	bne.n	8025422 <__sflush_r+0x66>
 8025414:	6829      	ldr	r1, [r5, #0]
 8025416:	291d      	cmp	r1, #29
 8025418:	d82c      	bhi.n	8025474 <__sflush_r+0xb8>
 802541a:	4a2a      	ldr	r2, [pc, #168]	; (80254c4 <__sflush_r+0x108>)
 802541c:	40ca      	lsrs	r2, r1
 802541e:	07d6      	lsls	r6, r2, #31
 8025420:	d528      	bpl.n	8025474 <__sflush_r+0xb8>
 8025422:	2200      	movs	r2, #0
 8025424:	6062      	str	r2, [r4, #4]
 8025426:	04d9      	lsls	r1, r3, #19
 8025428:	6922      	ldr	r2, [r4, #16]
 802542a:	6022      	str	r2, [r4, #0]
 802542c:	d504      	bpl.n	8025438 <__sflush_r+0x7c>
 802542e:	1c42      	adds	r2, r0, #1
 8025430:	d101      	bne.n	8025436 <__sflush_r+0x7a>
 8025432:	682b      	ldr	r3, [r5, #0]
 8025434:	b903      	cbnz	r3, 8025438 <__sflush_r+0x7c>
 8025436:	6560      	str	r0, [r4, #84]	; 0x54
 8025438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802543a:	602f      	str	r7, [r5, #0]
 802543c:	2900      	cmp	r1, #0
 802543e:	d0ca      	beq.n	80253d6 <__sflush_r+0x1a>
 8025440:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025444:	4299      	cmp	r1, r3
 8025446:	d002      	beq.n	802544e <__sflush_r+0x92>
 8025448:	4628      	mov	r0, r5
 802544a:	f7fd fb1f 	bl	8022a8c <_free_r>
 802544e:	2000      	movs	r0, #0
 8025450:	6360      	str	r0, [r4, #52]	; 0x34
 8025452:	e7c1      	b.n	80253d8 <__sflush_r+0x1c>
 8025454:	6a21      	ldr	r1, [r4, #32]
 8025456:	2301      	movs	r3, #1
 8025458:	4628      	mov	r0, r5
 802545a:	47b0      	blx	r6
 802545c:	1c41      	adds	r1, r0, #1
 802545e:	d1c7      	bne.n	80253f0 <__sflush_r+0x34>
 8025460:	682b      	ldr	r3, [r5, #0]
 8025462:	2b00      	cmp	r3, #0
 8025464:	d0c4      	beq.n	80253f0 <__sflush_r+0x34>
 8025466:	2b1d      	cmp	r3, #29
 8025468:	d001      	beq.n	802546e <__sflush_r+0xb2>
 802546a:	2b16      	cmp	r3, #22
 802546c:	d101      	bne.n	8025472 <__sflush_r+0xb6>
 802546e:	602f      	str	r7, [r5, #0]
 8025470:	e7b1      	b.n	80253d6 <__sflush_r+0x1a>
 8025472:	89a3      	ldrh	r3, [r4, #12]
 8025474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025478:	81a3      	strh	r3, [r4, #12]
 802547a:	e7ad      	b.n	80253d8 <__sflush_r+0x1c>
 802547c:	690f      	ldr	r7, [r1, #16]
 802547e:	2f00      	cmp	r7, #0
 8025480:	d0a9      	beq.n	80253d6 <__sflush_r+0x1a>
 8025482:	0793      	lsls	r3, r2, #30
 8025484:	680e      	ldr	r6, [r1, #0]
 8025486:	bf08      	it	eq
 8025488:	694b      	ldreq	r3, [r1, #20]
 802548a:	600f      	str	r7, [r1, #0]
 802548c:	bf18      	it	ne
 802548e:	2300      	movne	r3, #0
 8025490:	eba6 0807 	sub.w	r8, r6, r7
 8025494:	608b      	str	r3, [r1, #8]
 8025496:	f1b8 0f00 	cmp.w	r8, #0
 802549a:	dd9c      	ble.n	80253d6 <__sflush_r+0x1a>
 802549c:	6a21      	ldr	r1, [r4, #32]
 802549e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80254a0:	4643      	mov	r3, r8
 80254a2:	463a      	mov	r2, r7
 80254a4:	4628      	mov	r0, r5
 80254a6:	47b0      	blx	r6
 80254a8:	2800      	cmp	r0, #0
 80254aa:	dc06      	bgt.n	80254ba <__sflush_r+0xfe>
 80254ac:	89a3      	ldrh	r3, [r4, #12]
 80254ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80254b2:	81a3      	strh	r3, [r4, #12]
 80254b4:	f04f 30ff 	mov.w	r0, #4294967295
 80254b8:	e78e      	b.n	80253d8 <__sflush_r+0x1c>
 80254ba:	4407      	add	r7, r0
 80254bc:	eba8 0800 	sub.w	r8, r8, r0
 80254c0:	e7e9      	b.n	8025496 <__sflush_r+0xda>
 80254c2:	bf00      	nop
 80254c4:	20400001 	.word	0x20400001

080254c8 <_fflush_r>:
 80254c8:	b538      	push	{r3, r4, r5, lr}
 80254ca:	690b      	ldr	r3, [r1, #16]
 80254cc:	4605      	mov	r5, r0
 80254ce:	460c      	mov	r4, r1
 80254d0:	b913      	cbnz	r3, 80254d8 <_fflush_r+0x10>
 80254d2:	2500      	movs	r5, #0
 80254d4:	4628      	mov	r0, r5
 80254d6:	bd38      	pop	{r3, r4, r5, pc}
 80254d8:	b118      	cbz	r0, 80254e2 <_fflush_r+0x1a>
 80254da:	6983      	ldr	r3, [r0, #24]
 80254dc:	b90b      	cbnz	r3, 80254e2 <_fflush_r+0x1a>
 80254de:	f000 f887 	bl	80255f0 <__sinit>
 80254e2:	4b14      	ldr	r3, [pc, #80]	; (8025534 <_fflush_r+0x6c>)
 80254e4:	429c      	cmp	r4, r3
 80254e6:	d11b      	bne.n	8025520 <_fflush_r+0x58>
 80254e8:	686c      	ldr	r4, [r5, #4]
 80254ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80254ee:	2b00      	cmp	r3, #0
 80254f0:	d0ef      	beq.n	80254d2 <_fflush_r+0xa>
 80254f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80254f4:	07d0      	lsls	r0, r2, #31
 80254f6:	d404      	bmi.n	8025502 <_fflush_r+0x3a>
 80254f8:	0599      	lsls	r1, r3, #22
 80254fa:	d402      	bmi.n	8025502 <_fflush_r+0x3a>
 80254fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80254fe:	f7fd fa6c 	bl	80229da <__retarget_lock_acquire_recursive>
 8025502:	4628      	mov	r0, r5
 8025504:	4621      	mov	r1, r4
 8025506:	f7ff ff59 	bl	80253bc <__sflush_r>
 802550a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802550c:	07da      	lsls	r2, r3, #31
 802550e:	4605      	mov	r5, r0
 8025510:	d4e0      	bmi.n	80254d4 <_fflush_r+0xc>
 8025512:	89a3      	ldrh	r3, [r4, #12]
 8025514:	059b      	lsls	r3, r3, #22
 8025516:	d4dd      	bmi.n	80254d4 <_fflush_r+0xc>
 8025518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802551a:	f7fd fa5f 	bl	80229dc <__retarget_lock_release_recursive>
 802551e:	e7d9      	b.n	80254d4 <_fflush_r+0xc>
 8025520:	4b05      	ldr	r3, [pc, #20]	; (8025538 <_fflush_r+0x70>)
 8025522:	429c      	cmp	r4, r3
 8025524:	d101      	bne.n	802552a <_fflush_r+0x62>
 8025526:	68ac      	ldr	r4, [r5, #8]
 8025528:	e7df      	b.n	80254ea <_fflush_r+0x22>
 802552a:	4b04      	ldr	r3, [pc, #16]	; (802553c <_fflush_r+0x74>)
 802552c:	429c      	cmp	r4, r3
 802552e:	bf08      	it	eq
 8025530:	68ec      	ldreq	r4, [r5, #12]
 8025532:	e7da      	b.n	80254ea <_fflush_r+0x22>
 8025534:	080295ac 	.word	0x080295ac
 8025538:	080295cc 	.word	0x080295cc
 802553c:	0802958c 	.word	0x0802958c

08025540 <std>:
 8025540:	2300      	movs	r3, #0
 8025542:	b510      	push	{r4, lr}
 8025544:	4604      	mov	r4, r0
 8025546:	e9c0 3300 	strd	r3, r3, [r0]
 802554a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802554e:	6083      	str	r3, [r0, #8]
 8025550:	8181      	strh	r1, [r0, #12]
 8025552:	6643      	str	r3, [r0, #100]	; 0x64
 8025554:	81c2      	strh	r2, [r0, #14]
 8025556:	6183      	str	r3, [r0, #24]
 8025558:	4619      	mov	r1, r3
 802555a:	2208      	movs	r2, #8
 802555c:	305c      	adds	r0, #92	; 0x5c
 802555e:	f7fd fa77 	bl	8022a50 <memset>
 8025562:	4b05      	ldr	r3, [pc, #20]	; (8025578 <std+0x38>)
 8025564:	6263      	str	r3, [r4, #36]	; 0x24
 8025566:	4b05      	ldr	r3, [pc, #20]	; (802557c <std+0x3c>)
 8025568:	62a3      	str	r3, [r4, #40]	; 0x28
 802556a:	4b05      	ldr	r3, [pc, #20]	; (8025580 <std+0x40>)
 802556c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802556e:	4b05      	ldr	r3, [pc, #20]	; (8025584 <std+0x44>)
 8025570:	6224      	str	r4, [r4, #32]
 8025572:	6323      	str	r3, [r4, #48]	; 0x30
 8025574:	bd10      	pop	{r4, pc}
 8025576:	bf00      	nop
 8025578:	08026bb1 	.word	0x08026bb1
 802557c:	08026bd3 	.word	0x08026bd3
 8025580:	08026c0b 	.word	0x08026c0b
 8025584:	08026c2f 	.word	0x08026c2f

08025588 <_cleanup_r>:
 8025588:	4901      	ldr	r1, [pc, #4]	; (8025590 <_cleanup_r+0x8>)
 802558a:	f000 b8af 	b.w	80256ec <_fwalk_reent>
 802558e:	bf00      	nop
 8025590:	080254c9 	.word	0x080254c9

08025594 <__sfmoreglue>:
 8025594:	b570      	push	{r4, r5, r6, lr}
 8025596:	2268      	movs	r2, #104	; 0x68
 8025598:	1e4d      	subs	r5, r1, #1
 802559a:	4355      	muls	r5, r2
 802559c:	460e      	mov	r6, r1
 802559e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80255a2:	f7fd fadf 	bl	8022b64 <_malloc_r>
 80255a6:	4604      	mov	r4, r0
 80255a8:	b140      	cbz	r0, 80255bc <__sfmoreglue+0x28>
 80255aa:	2100      	movs	r1, #0
 80255ac:	e9c0 1600 	strd	r1, r6, [r0]
 80255b0:	300c      	adds	r0, #12
 80255b2:	60a0      	str	r0, [r4, #8]
 80255b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80255b8:	f7fd fa4a 	bl	8022a50 <memset>
 80255bc:	4620      	mov	r0, r4
 80255be:	bd70      	pop	{r4, r5, r6, pc}

080255c0 <__sfp_lock_acquire>:
 80255c0:	4801      	ldr	r0, [pc, #4]	; (80255c8 <__sfp_lock_acquire+0x8>)
 80255c2:	f7fd ba0a 	b.w	80229da <__retarget_lock_acquire_recursive>
 80255c6:	bf00      	nop
 80255c8:	20002745 	.word	0x20002745

080255cc <__sfp_lock_release>:
 80255cc:	4801      	ldr	r0, [pc, #4]	; (80255d4 <__sfp_lock_release+0x8>)
 80255ce:	f7fd ba05 	b.w	80229dc <__retarget_lock_release_recursive>
 80255d2:	bf00      	nop
 80255d4:	20002745 	.word	0x20002745

080255d8 <__sinit_lock_acquire>:
 80255d8:	4801      	ldr	r0, [pc, #4]	; (80255e0 <__sinit_lock_acquire+0x8>)
 80255da:	f7fd b9fe 	b.w	80229da <__retarget_lock_acquire_recursive>
 80255de:	bf00      	nop
 80255e0:	20002746 	.word	0x20002746

080255e4 <__sinit_lock_release>:
 80255e4:	4801      	ldr	r0, [pc, #4]	; (80255ec <__sinit_lock_release+0x8>)
 80255e6:	f7fd b9f9 	b.w	80229dc <__retarget_lock_release_recursive>
 80255ea:	bf00      	nop
 80255ec:	20002746 	.word	0x20002746

080255f0 <__sinit>:
 80255f0:	b510      	push	{r4, lr}
 80255f2:	4604      	mov	r4, r0
 80255f4:	f7ff fff0 	bl	80255d8 <__sinit_lock_acquire>
 80255f8:	69a3      	ldr	r3, [r4, #24]
 80255fa:	b11b      	cbz	r3, 8025604 <__sinit+0x14>
 80255fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025600:	f7ff bff0 	b.w	80255e4 <__sinit_lock_release>
 8025604:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8025608:	6523      	str	r3, [r4, #80]	; 0x50
 802560a:	4b13      	ldr	r3, [pc, #76]	; (8025658 <__sinit+0x68>)
 802560c:	4a13      	ldr	r2, [pc, #76]	; (802565c <__sinit+0x6c>)
 802560e:	681b      	ldr	r3, [r3, #0]
 8025610:	62a2      	str	r2, [r4, #40]	; 0x28
 8025612:	42a3      	cmp	r3, r4
 8025614:	bf04      	itt	eq
 8025616:	2301      	moveq	r3, #1
 8025618:	61a3      	streq	r3, [r4, #24]
 802561a:	4620      	mov	r0, r4
 802561c:	f000 f820 	bl	8025660 <__sfp>
 8025620:	6060      	str	r0, [r4, #4]
 8025622:	4620      	mov	r0, r4
 8025624:	f000 f81c 	bl	8025660 <__sfp>
 8025628:	60a0      	str	r0, [r4, #8]
 802562a:	4620      	mov	r0, r4
 802562c:	f000 f818 	bl	8025660 <__sfp>
 8025630:	2200      	movs	r2, #0
 8025632:	60e0      	str	r0, [r4, #12]
 8025634:	2104      	movs	r1, #4
 8025636:	6860      	ldr	r0, [r4, #4]
 8025638:	f7ff ff82 	bl	8025540 <std>
 802563c:	68a0      	ldr	r0, [r4, #8]
 802563e:	2201      	movs	r2, #1
 8025640:	2109      	movs	r1, #9
 8025642:	f7ff ff7d 	bl	8025540 <std>
 8025646:	68e0      	ldr	r0, [r4, #12]
 8025648:	2202      	movs	r2, #2
 802564a:	2112      	movs	r1, #18
 802564c:	f7ff ff78 	bl	8025540 <std>
 8025650:	2301      	movs	r3, #1
 8025652:	61a3      	str	r3, [r4, #24]
 8025654:	e7d2      	b.n	80255fc <__sinit+0xc>
 8025656:	bf00      	nop
 8025658:	0802935c 	.word	0x0802935c
 802565c:	08025589 	.word	0x08025589

08025660 <__sfp>:
 8025660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025662:	4607      	mov	r7, r0
 8025664:	f7ff ffac 	bl	80255c0 <__sfp_lock_acquire>
 8025668:	4b1e      	ldr	r3, [pc, #120]	; (80256e4 <__sfp+0x84>)
 802566a:	681e      	ldr	r6, [r3, #0]
 802566c:	69b3      	ldr	r3, [r6, #24]
 802566e:	b913      	cbnz	r3, 8025676 <__sfp+0x16>
 8025670:	4630      	mov	r0, r6
 8025672:	f7ff ffbd 	bl	80255f0 <__sinit>
 8025676:	3648      	adds	r6, #72	; 0x48
 8025678:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802567c:	3b01      	subs	r3, #1
 802567e:	d503      	bpl.n	8025688 <__sfp+0x28>
 8025680:	6833      	ldr	r3, [r6, #0]
 8025682:	b30b      	cbz	r3, 80256c8 <__sfp+0x68>
 8025684:	6836      	ldr	r6, [r6, #0]
 8025686:	e7f7      	b.n	8025678 <__sfp+0x18>
 8025688:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802568c:	b9d5      	cbnz	r5, 80256c4 <__sfp+0x64>
 802568e:	4b16      	ldr	r3, [pc, #88]	; (80256e8 <__sfp+0x88>)
 8025690:	60e3      	str	r3, [r4, #12]
 8025692:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025696:	6665      	str	r5, [r4, #100]	; 0x64
 8025698:	f7fd f99e 	bl	80229d8 <__retarget_lock_init_recursive>
 802569c:	f7ff ff96 	bl	80255cc <__sfp_lock_release>
 80256a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80256a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80256a8:	6025      	str	r5, [r4, #0]
 80256aa:	61a5      	str	r5, [r4, #24]
 80256ac:	2208      	movs	r2, #8
 80256ae:	4629      	mov	r1, r5
 80256b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80256b4:	f7fd f9cc 	bl	8022a50 <memset>
 80256b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80256bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80256c0:	4620      	mov	r0, r4
 80256c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80256c4:	3468      	adds	r4, #104	; 0x68
 80256c6:	e7d9      	b.n	802567c <__sfp+0x1c>
 80256c8:	2104      	movs	r1, #4
 80256ca:	4638      	mov	r0, r7
 80256cc:	f7ff ff62 	bl	8025594 <__sfmoreglue>
 80256d0:	4604      	mov	r4, r0
 80256d2:	6030      	str	r0, [r6, #0]
 80256d4:	2800      	cmp	r0, #0
 80256d6:	d1d5      	bne.n	8025684 <__sfp+0x24>
 80256d8:	f7ff ff78 	bl	80255cc <__sfp_lock_release>
 80256dc:	230c      	movs	r3, #12
 80256de:	603b      	str	r3, [r7, #0]
 80256e0:	e7ee      	b.n	80256c0 <__sfp+0x60>
 80256e2:	bf00      	nop
 80256e4:	0802935c 	.word	0x0802935c
 80256e8:	ffff0001 	.word	0xffff0001

080256ec <_fwalk_reent>:
 80256ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80256f0:	4606      	mov	r6, r0
 80256f2:	4688      	mov	r8, r1
 80256f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80256f8:	2700      	movs	r7, #0
 80256fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80256fe:	f1b9 0901 	subs.w	r9, r9, #1
 8025702:	d505      	bpl.n	8025710 <_fwalk_reent+0x24>
 8025704:	6824      	ldr	r4, [r4, #0]
 8025706:	2c00      	cmp	r4, #0
 8025708:	d1f7      	bne.n	80256fa <_fwalk_reent+0xe>
 802570a:	4638      	mov	r0, r7
 802570c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025710:	89ab      	ldrh	r3, [r5, #12]
 8025712:	2b01      	cmp	r3, #1
 8025714:	d907      	bls.n	8025726 <_fwalk_reent+0x3a>
 8025716:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802571a:	3301      	adds	r3, #1
 802571c:	d003      	beq.n	8025726 <_fwalk_reent+0x3a>
 802571e:	4629      	mov	r1, r5
 8025720:	4630      	mov	r0, r6
 8025722:	47c0      	blx	r8
 8025724:	4307      	orrs	r7, r0
 8025726:	3568      	adds	r5, #104	; 0x68
 8025728:	e7e9      	b.n	80256fe <_fwalk_reent+0x12>

0802572a <rshift>:
 802572a:	6903      	ldr	r3, [r0, #16]
 802572c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8025730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025734:	ea4f 1261 	mov.w	r2, r1, asr #5
 8025738:	f100 0414 	add.w	r4, r0, #20
 802573c:	dd45      	ble.n	80257ca <rshift+0xa0>
 802573e:	f011 011f 	ands.w	r1, r1, #31
 8025742:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8025746:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 802574a:	d10c      	bne.n	8025766 <rshift+0x3c>
 802574c:	f100 0710 	add.w	r7, r0, #16
 8025750:	4629      	mov	r1, r5
 8025752:	42b1      	cmp	r1, r6
 8025754:	d334      	bcc.n	80257c0 <rshift+0x96>
 8025756:	1a9b      	subs	r3, r3, r2
 8025758:	009b      	lsls	r3, r3, #2
 802575a:	1eea      	subs	r2, r5, #3
 802575c:	4296      	cmp	r6, r2
 802575e:	bf38      	it	cc
 8025760:	2300      	movcc	r3, #0
 8025762:	4423      	add	r3, r4
 8025764:	e015      	b.n	8025792 <rshift+0x68>
 8025766:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 802576a:	f1c1 0820 	rsb	r8, r1, #32
 802576e:	40cf      	lsrs	r7, r1
 8025770:	f105 0e04 	add.w	lr, r5, #4
 8025774:	46a1      	mov	r9, r4
 8025776:	4576      	cmp	r6, lr
 8025778:	46f4      	mov	ip, lr
 802577a:	d815      	bhi.n	80257a8 <rshift+0x7e>
 802577c:	1a9a      	subs	r2, r3, r2
 802577e:	0092      	lsls	r2, r2, #2
 8025780:	3a04      	subs	r2, #4
 8025782:	3501      	adds	r5, #1
 8025784:	42ae      	cmp	r6, r5
 8025786:	bf38      	it	cc
 8025788:	2200      	movcc	r2, #0
 802578a:	18a3      	adds	r3, r4, r2
 802578c:	50a7      	str	r7, [r4, r2]
 802578e:	b107      	cbz	r7, 8025792 <rshift+0x68>
 8025790:	3304      	adds	r3, #4
 8025792:	1b1a      	subs	r2, r3, r4
 8025794:	42a3      	cmp	r3, r4
 8025796:	ea4f 02a2 	mov.w	r2, r2, asr #2
 802579a:	bf08      	it	eq
 802579c:	2300      	moveq	r3, #0
 802579e:	6102      	str	r2, [r0, #16]
 80257a0:	bf08      	it	eq
 80257a2:	6143      	streq	r3, [r0, #20]
 80257a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80257a8:	f8dc c000 	ldr.w	ip, [ip]
 80257ac:	fa0c fc08 	lsl.w	ip, ip, r8
 80257b0:	ea4c 0707 	orr.w	r7, ip, r7
 80257b4:	f849 7b04 	str.w	r7, [r9], #4
 80257b8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80257bc:	40cf      	lsrs	r7, r1
 80257be:	e7da      	b.n	8025776 <rshift+0x4c>
 80257c0:	f851 cb04 	ldr.w	ip, [r1], #4
 80257c4:	f847 cf04 	str.w	ip, [r7, #4]!
 80257c8:	e7c3      	b.n	8025752 <rshift+0x28>
 80257ca:	4623      	mov	r3, r4
 80257cc:	e7e1      	b.n	8025792 <rshift+0x68>

080257ce <__hexdig_fun>:
 80257ce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80257d2:	2b09      	cmp	r3, #9
 80257d4:	d802      	bhi.n	80257dc <__hexdig_fun+0xe>
 80257d6:	3820      	subs	r0, #32
 80257d8:	b2c0      	uxtb	r0, r0
 80257da:	4770      	bx	lr
 80257dc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80257e0:	2b05      	cmp	r3, #5
 80257e2:	d801      	bhi.n	80257e8 <__hexdig_fun+0x1a>
 80257e4:	3847      	subs	r0, #71	; 0x47
 80257e6:	e7f7      	b.n	80257d8 <__hexdig_fun+0xa>
 80257e8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80257ec:	2b05      	cmp	r3, #5
 80257ee:	d801      	bhi.n	80257f4 <__hexdig_fun+0x26>
 80257f0:	3827      	subs	r0, #39	; 0x27
 80257f2:	e7f1      	b.n	80257d8 <__hexdig_fun+0xa>
 80257f4:	2000      	movs	r0, #0
 80257f6:	4770      	bx	lr

080257f8 <__gethex>:
 80257f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80257fc:	ed2d 8b02 	vpush	{d8}
 8025800:	b089      	sub	sp, #36	; 0x24
 8025802:	ee08 0a10 	vmov	s16, r0
 8025806:	9304      	str	r3, [sp, #16]
 8025808:	4bb4      	ldr	r3, [pc, #720]	; (8025adc <__gethex+0x2e4>)
 802580a:	681b      	ldr	r3, [r3, #0]
 802580c:	9301      	str	r3, [sp, #4]
 802580e:	4618      	mov	r0, r3
 8025810:	468b      	mov	fp, r1
 8025812:	4690      	mov	r8, r2
 8025814:	f7da fd36 	bl	8000284 <strlen>
 8025818:	9b01      	ldr	r3, [sp, #4]
 802581a:	f8db 2000 	ldr.w	r2, [fp]
 802581e:	4403      	add	r3, r0
 8025820:	4682      	mov	sl, r0
 8025822:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8025826:	9305      	str	r3, [sp, #20]
 8025828:	1c93      	adds	r3, r2, #2
 802582a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 802582e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8025832:	32fe      	adds	r2, #254	; 0xfe
 8025834:	18d1      	adds	r1, r2, r3
 8025836:	461f      	mov	r7, r3
 8025838:	f813 0b01 	ldrb.w	r0, [r3], #1
 802583c:	9100      	str	r1, [sp, #0]
 802583e:	2830      	cmp	r0, #48	; 0x30
 8025840:	d0f8      	beq.n	8025834 <__gethex+0x3c>
 8025842:	f7ff ffc4 	bl	80257ce <__hexdig_fun>
 8025846:	4604      	mov	r4, r0
 8025848:	2800      	cmp	r0, #0
 802584a:	d13a      	bne.n	80258c2 <__gethex+0xca>
 802584c:	9901      	ldr	r1, [sp, #4]
 802584e:	4652      	mov	r2, sl
 8025850:	4638      	mov	r0, r7
 8025852:	f7fe f813 	bl	802387c <strncmp>
 8025856:	4605      	mov	r5, r0
 8025858:	2800      	cmp	r0, #0
 802585a:	d168      	bne.n	802592e <__gethex+0x136>
 802585c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8025860:	eb07 060a 	add.w	r6, r7, sl
 8025864:	f7ff ffb3 	bl	80257ce <__hexdig_fun>
 8025868:	2800      	cmp	r0, #0
 802586a:	d062      	beq.n	8025932 <__gethex+0x13a>
 802586c:	4633      	mov	r3, r6
 802586e:	7818      	ldrb	r0, [r3, #0]
 8025870:	2830      	cmp	r0, #48	; 0x30
 8025872:	461f      	mov	r7, r3
 8025874:	f103 0301 	add.w	r3, r3, #1
 8025878:	d0f9      	beq.n	802586e <__gethex+0x76>
 802587a:	f7ff ffa8 	bl	80257ce <__hexdig_fun>
 802587e:	2301      	movs	r3, #1
 8025880:	fab0 f480 	clz	r4, r0
 8025884:	0964      	lsrs	r4, r4, #5
 8025886:	4635      	mov	r5, r6
 8025888:	9300      	str	r3, [sp, #0]
 802588a:	463a      	mov	r2, r7
 802588c:	4616      	mov	r6, r2
 802588e:	3201      	adds	r2, #1
 8025890:	7830      	ldrb	r0, [r6, #0]
 8025892:	f7ff ff9c 	bl	80257ce <__hexdig_fun>
 8025896:	2800      	cmp	r0, #0
 8025898:	d1f8      	bne.n	802588c <__gethex+0x94>
 802589a:	9901      	ldr	r1, [sp, #4]
 802589c:	4652      	mov	r2, sl
 802589e:	4630      	mov	r0, r6
 80258a0:	f7fd ffec 	bl	802387c <strncmp>
 80258a4:	b980      	cbnz	r0, 80258c8 <__gethex+0xd0>
 80258a6:	b94d      	cbnz	r5, 80258bc <__gethex+0xc4>
 80258a8:	eb06 050a 	add.w	r5, r6, sl
 80258ac:	462a      	mov	r2, r5
 80258ae:	4616      	mov	r6, r2
 80258b0:	3201      	adds	r2, #1
 80258b2:	7830      	ldrb	r0, [r6, #0]
 80258b4:	f7ff ff8b 	bl	80257ce <__hexdig_fun>
 80258b8:	2800      	cmp	r0, #0
 80258ba:	d1f8      	bne.n	80258ae <__gethex+0xb6>
 80258bc:	1bad      	subs	r5, r5, r6
 80258be:	00ad      	lsls	r5, r5, #2
 80258c0:	e004      	b.n	80258cc <__gethex+0xd4>
 80258c2:	2400      	movs	r4, #0
 80258c4:	4625      	mov	r5, r4
 80258c6:	e7e0      	b.n	802588a <__gethex+0x92>
 80258c8:	2d00      	cmp	r5, #0
 80258ca:	d1f7      	bne.n	80258bc <__gethex+0xc4>
 80258cc:	7833      	ldrb	r3, [r6, #0]
 80258ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80258d2:	2b50      	cmp	r3, #80	; 0x50
 80258d4:	d13b      	bne.n	802594e <__gethex+0x156>
 80258d6:	7873      	ldrb	r3, [r6, #1]
 80258d8:	2b2b      	cmp	r3, #43	; 0x2b
 80258da:	d02c      	beq.n	8025936 <__gethex+0x13e>
 80258dc:	2b2d      	cmp	r3, #45	; 0x2d
 80258de:	d02e      	beq.n	802593e <__gethex+0x146>
 80258e0:	1c71      	adds	r1, r6, #1
 80258e2:	f04f 0900 	mov.w	r9, #0
 80258e6:	7808      	ldrb	r0, [r1, #0]
 80258e8:	f7ff ff71 	bl	80257ce <__hexdig_fun>
 80258ec:	1e43      	subs	r3, r0, #1
 80258ee:	b2db      	uxtb	r3, r3
 80258f0:	2b18      	cmp	r3, #24
 80258f2:	d82c      	bhi.n	802594e <__gethex+0x156>
 80258f4:	f1a0 0210 	sub.w	r2, r0, #16
 80258f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80258fc:	f7ff ff67 	bl	80257ce <__hexdig_fun>
 8025900:	1e43      	subs	r3, r0, #1
 8025902:	b2db      	uxtb	r3, r3
 8025904:	2b18      	cmp	r3, #24
 8025906:	d91d      	bls.n	8025944 <__gethex+0x14c>
 8025908:	f1b9 0f00 	cmp.w	r9, #0
 802590c:	d000      	beq.n	8025910 <__gethex+0x118>
 802590e:	4252      	negs	r2, r2
 8025910:	4415      	add	r5, r2
 8025912:	f8cb 1000 	str.w	r1, [fp]
 8025916:	b1e4      	cbz	r4, 8025952 <__gethex+0x15a>
 8025918:	9b00      	ldr	r3, [sp, #0]
 802591a:	2b00      	cmp	r3, #0
 802591c:	bf14      	ite	ne
 802591e:	2700      	movne	r7, #0
 8025920:	2706      	moveq	r7, #6
 8025922:	4638      	mov	r0, r7
 8025924:	b009      	add	sp, #36	; 0x24
 8025926:	ecbd 8b02 	vpop	{d8}
 802592a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802592e:	463e      	mov	r6, r7
 8025930:	4625      	mov	r5, r4
 8025932:	2401      	movs	r4, #1
 8025934:	e7ca      	b.n	80258cc <__gethex+0xd4>
 8025936:	f04f 0900 	mov.w	r9, #0
 802593a:	1cb1      	adds	r1, r6, #2
 802593c:	e7d3      	b.n	80258e6 <__gethex+0xee>
 802593e:	f04f 0901 	mov.w	r9, #1
 8025942:	e7fa      	b.n	802593a <__gethex+0x142>
 8025944:	230a      	movs	r3, #10
 8025946:	fb03 0202 	mla	r2, r3, r2, r0
 802594a:	3a10      	subs	r2, #16
 802594c:	e7d4      	b.n	80258f8 <__gethex+0x100>
 802594e:	4631      	mov	r1, r6
 8025950:	e7df      	b.n	8025912 <__gethex+0x11a>
 8025952:	1bf3      	subs	r3, r6, r7
 8025954:	3b01      	subs	r3, #1
 8025956:	4621      	mov	r1, r4
 8025958:	2b07      	cmp	r3, #7
 802595a:	dc0b      	bgt.n	8025974 <__gethex+0x17c>
 802595c:	ee18 0a10 	vmov	r0, s16
 8025960:	f000 fada 	bl	8025f18 <_Balloc>
 8025964:	4604      	mov	r4, r0
 8025966:	b940      	cbnz	r0, 802597a <__gethex+0x182>
 8025968:	4b5d      	ldr	r3, [pc, #372]	; (8025ae0 <__gethex+0x2e8>)
 802596a:	4602      	mov	r2, r0
 802596c:	21de      	movs	r1, #222	; 0xde
 802596e:	485d      	ldr	r0, [pc, #372]	; (8025ae4 <__gethex+0x2ec>)
 8025970:	f7fc ffcc 	bl	802290c <__assert_func>
 8025974:	3101      	adds	r1, #1
 8025976:	105b      	asrs	r3, r3, #1
 8025978:	e7ee      	b.n	8025958 <__gethex+0x160>
 802597a:	f100 0914 	add.w	r9, r0, #20
 802597e:	f04f 0b00 	mov.w	fp, #0
 8025982:	f1ca 0301 	rsb	r3, sl, #1
 8025986:	f8cd 9008 	str.w	r9, [sp, #8]
 802598a:	f8cd b000 	str.w	fp, [sp]
 802598e:	9306      	str	r3, [sp, #24]
 8025990:	42b7      	cmp	r7, r6
 8025992:	d340      	bcc.n	8025a16 <__gethex+0x21e>
 8025994:	9802      	ldr	r0, [sp, #8]
 8025996:	9b00      	ldr	r3, [sp, #0]
 8025998:	f840 3b04 	str.w	r3, [r0], #4
 802599c:	eba0 0009 	sub.w	r0, r0, r9
 80259a0:	1080      	asrs	r0, r0, #2
 80259a2:	0146      	lsls	r6, r0, #5
 80259a4:	6120      	str	r0, [r4, #16]
 80259a6:	4618      	mov	r0, r3
 80259a8:	f000 fba8 	bl	80260fc <__hi0bits>
 80259ac:	1a30      	subs	r0, r6, r0
 80259ae:	f8d8 6000 	ldr.w	r6, [r8]
 80259b2:	42b0      	cmp	r0, r6
 80259b4:	dd63      	ble.n	8025a7e <__gethex+0x286>
 80259b6:	1b87      	subs	r7, r0, r6
 80259b8:	4639      	mov	r1, r7
 80259ba:	4620      	mov	r0, r4
 80259bc:	f000 ff4c 	bl	8026858 <__any_on>
 80259c0:	4682      	mov	sl, r0
 80259c2:	b1a8      	cbz	r0, 80259f0 <__gethex+0x1f8>
 80259c4:	1e7b      	subs	r3, r7, #1
 80259c6:	1159      	asrs	r1, r3, #5
 80259c8:	f003 021f 	and.w	r2, r3, #31
 80259cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80259d0:	f04f 0a01 	mov.w	sl, #1
 80259d4:	fa0a f202 	lsl.w	r2, sl, r2
 80259d8:	420a      	tst	r2, r1
 80259da:	d009      	beq.n	80259f0 <__gethex+0x1f8>
 80259dc:	4553      	cmp	r3, sl
 80259de:	dd05      	ble.n	80259ec <__gethex+0x1f4>
 80259e0:	1eb9      	subs	r1, r7, #2
 80259e2:	4620      	mov	r0, r4
 80259e4:	f000 ff38 	bl	8026858 <__any_on>
 80259e8:	2800      	cmp	r0, #0
 80259ea:	d145      	bne.n	8025a78 <__gethex+0x280>
 80259ec:	f04f 0a02 	mov.w	sl, #2
 80259f0:	4639      	mov	r1, r7
 80259f2:	4620      	mov	r0, r4
 80259f4:	f7ff fe99 	bl	802572a <rshift>
 80259f8:	443d      	add	r5, r7
 80259fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80259fe:	42ab      	cmp	r3, r5
 8025a00:	da4c      	bge.n	8025a9c <__gethex+0x2a4>
 8025a02:	ee18 0a10 	vmov	r0, s16
 8025a06:	4621      	mov	r1, r4
 8025a08:	f000 fac6 	bl	8025f98 <_Bfree>
 8025a0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025a0e:	2300      	movs	r3, #0
 8025a10:	6013      	str	r3, [r2, #0]
 8025a12:	27a3      	movs	r7, #163	; 0xa3
 8025a14:	e785      	b.n	8025922 <__gethex+0x12a>
 8025a16:	1e73      	subs	r3, r6, #1
 8025a18:	9a05      	ldr	r2, [sp, #20]
 8025a1a:	9303      	str	r3, [sp, #12]
 8025a1c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8025a20:	4293      	cmp	r3, r2
 8025a22:	d019      	beq.n	8025a58 <__gethex+0x260>
 8025a24:	f1bb 0f20 	cmp.w	fp, #32
 8025a28:	d107      	bne.n	8025a3a <__gethex+0x242>
 8025a2a:	9b02      	ldr	r3, [sp, #8]
 8025a2c:	9a00      	ldr	r2, [sp, #0]
 8025a2e:	f843 2b04 	str.w	r2, [r3], #4
 8025a32:	9302      	str	r3, [sp, #8]
 8025a34:	2300      	movs	r3, #0
 8025a36:	9300      	str	r3, [sp, #0]
 8025a38:	469b      	mov	fp, r3
 8025a3a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8025a3e:	f7ff fec6 	bl	80257ce <__hexdig_fun>
 8025a42:	9b00      	ldr	r3, [sp, #0]
 8025a44:	f000 000f 	and.w	r0, r0, #15
 8025a48:	fa00 f00b 	lsl.w	r0, r0, fp
 8025a4c:	4303      	orrs	r3, r0
 8025a4e:	9300      	str	r3, [sp, #0]
 8025a50:	f10b 0b04 	add.w	fp, fp, #4
 8025a54:	9b03      	ldr	r3, [sp, #12]
 8025a56:	e00d      	b.n	8025a74 <__gethex+0x27c>
 8025a58:	9b03      	ldr	r3, [sp, #12]
 8025a5a:	9a06      	ldr	r2, [sp, #24]
 8025a5c:	4413      	add	r3, r2
 8025a5e:	42bb      	cmp	r3, r7
 8025a60:	d3e0      	bcc.n	8025a24 <__gethex+0x22c>
 8025a62:	4618      	mov	r0, r3
 8025a64:	9901      	ldr	r1, [sp, #4]
 8025a66:	9307      	str	r3, [sp, #28]
 8025a68:	4652      	mov	r2, sl
 8025a6a:	f7fd ff07 	bl	802387c <strncmp>
 8025a6e:	9b07      	ldr	r3, [sp, #28]
 8025a70:	2800      	cmp	r0, #0
 8025a72:	d1d7      	bne.n	8025a24 <__gethex+0x22c>
 8025a74:	461e      	mov	r6, r3
 8025a76:	e78b      	b.n	8025990 <__gethex+0x198>
 8025a78:	f04f 0a03 	mov.w	sl, #3
 8025a7c:	e7b8      	b.n	80259f0 <__gethex+0x1f8>
 8025a7e:	da0a      	bge.n	8025a96 <__gethex+0x29e>
 8025a80:	1a37      	subs	r7, r6, r0
 8025a82:	4621      	mov	r1, r4
 8025a84:	ee18 0a10 	vmov	r0, s16
 8025a88:	463a      	mov	r2, r7
 8025a8a:	f000 fca1 	bl	80263d0 <__lshift>
 8025a8e:	1bed      	subs	r5, r5, r7
 8025a90:	4604      	mov	r4, r0
 8025a92:	f100 0914 	add.w	r9, r0, #20
 8025a96:	f04f 0a00 	mov.w	sl, #0
 8025a9a:	e7ae      	b.n	80259fa <__gethex+0x202>
 8025a9c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8025aa0:	42a8      	cmp	r0, r5
 8025aa2:	dd72      	ble.n	8025b8a <__gethex+0x392>
 8025aa4:	1b45      	subs	r5, r0, r5
 8025aa6:	42ae      	cmp	r6, r5
 8025aa8:	dc36      	bgt.n	8025b18 <__gethex+0x320>
 8025aaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8025aae:	2b02      	cmp	r3, #2
 8025ab0:	d02a      	beq.n	8025b08 <__gethex+0x310>
 8025ab2:	2b03      	cmp	r3, #3
 8025ab4:	d02c      	beq.n	8025b10 <__gethex+0x318>
 8025ab6:	2b01      	cmp	r3, #1
 8025ab8:	d11c      	bne.n	8025af4 <__gethex+0x2fc>
 8025aba:	42ae      	cmp	r6, r5
 8025abc:	d11a      	bne.n	8025af4 <__gethex+0x2fc>
 8025abe:	2e01      	cmp	r6, #1
 8025ac0:	d112      	bne.n	8025ae8 <__gethex+0x2f0>
 8025ac2:	9a04      	ldr	r2, [sp, #16]
 8025ac4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8025ac8:	6013      	str	r3, [r2, #0]
 8025aca:	2301      	movs	r3, #1
 8025acc:	6123      	str	r3, [r4, #16]
 8025ace:	f8c9 3000 	str.w	r3, [r9]
 8025ad2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025ad4:	2762      	movs	r7, #98	; 0x62
 8025ad6:	601c      	str	r4, [r3, #0]
 8025ad8:	e723      	b.n	8025922 <__gethex+0x12a>
 8025ada:	bf00      	nop
 8025adc:	08029654 	.word	0x08029654
 8025ae0:	08029578 	.word	0x08029578
 8025ae4:	080295ec 	.word	0x080295ec
 8025ae8:	1e71      	subs	r1, r6, #1
 8025aea:	4620      	mov	r0, r4
 8025aec:	f000 feb4 	bl	8026858 <__any_on>
 8025af0:	2800      	cmp	r0, #0
 8025af2:	d1e6      	bne.n	8025ac2 <__gethex+0x2ca>
 8025af4:	ee18 0a10 	vmov	r0, s16
 8025af8:	4621      	mov	r1, r4
 8025afa:	f000 fa4d 	bl	8025f98 <_Bfree>
 8025afe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025b00:	2300      	movs	r3, #0
 8025b02:	6013      	str	r3, [r2, #0]
 8025b04:	2750      	movs	r7, #80	; 0x50
 8025b06:	e70c      	b.n	8025922 <__gethex+0x12a>
 8025b08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8025b0a:	2b00      	cmp	r3, #0
 8025b0c:	d1f2      	bne.n	8025af4 <__gethex+0x2fc>
 8025b0e:	e7d8      	b.n	8025ac2 <__gethex+0x2ca>
 8025b10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8025b12:	2b00      	cmp	r3, #0
 8025b14:	d1d5      	bne.n	8025ac2 <__gethex+0x2ca>
 8025b16:	e7ed      	b.n	8025af4 <__gethex+0x2fc>
 8025b18:	1e6f      	subs	r7, r5, #1
 8025b1a:	f1ba 0f00 	cmp.w	sl, #0
 8025b1e:	d131      	bne.n	8025b84 <__gethex+0x38c>
 8025b20:	b127      	cbz	r7, 8025b2c <__gethex+0x334>
 8025b22:	4639      	mov	r1, r7
 8025b24:	4620      	mov	r0, r4
 8025b26:	f000 fe97 	bl	8026858 <__any_on>
 8025b2a:	4682      	mov	sl, r0
 8025b2c:	117b      	asrs	r3, r7, #5
 8025b2e:	2101      	movs	r1, #1
 8025b30:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8025b34:	f007 071f 	and.w	r7, r7, #31
 8025b38:	fa01 f707 	lsl.w	r7, r1, r7
 8025b3c:	421f      	tst	r7, r3
 8025b3e:	4629      	mov	r1, r5
 8025b40:	4620      	mov	r0, r4
 8025b42:	bf18      	it	ne
 8025b44:	f04a 0a02 	orrne.w	sl, sl, #2
 8025b48:	1b76      	subs	r6, r6, r5
 8025b4a:	f7ff fdee 	bl	802572a <rshift>
 8025b4e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8025b52:	2702      	movs	r7, #2
 8025b54:	f1ba 0f00 	cmp.w	sl, #0
 8025b58:	d048      	beq.n	8025bec <__gethex+0x3f4>
 8025b5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8025b5e:	2b02      	cmp	r3, #2
 8025b60:	d015      	beq.n	8025b8e <__gethex+0x396>
 8025b62:	2b03      	cmp	r3, #3
 8025b64:	d017      	beq.n	8025b96 <__gethex+0x39e>
 8025b66:	2b01      	cmp	r3, #1
 8025b68:	d109      	bne.n	8025b7e <__gethex+0x386>
 8025b6a:	f01a 0f02 	tst.w	sl, #2
 8025b6e:	d006      	beq.n	8025b7e <__gethex+0x386>
 8025b70:	f8d9 0000 	ldr.w	r0, [r9]
 8025b74:	ea4a 0a00 	orr.w	sl, sl, r0
 8025b78:	f01a 0f01 	tst.w	sl, #1
 8025b7c:	d10e      	bne.n	8025b9c <__gethex+0x3a4>
 8025b7e:	f047 0710 	orr.w	r7, r7, #16
 8025b82:	e033      	b.n	8025bec <__gethex+0x3f4>
 8025b84:	f04f 0a01 	mov.w	sl, #1
 8025b88:	e7d0      	b.n	8025b2c <__gethex+0x334>
 8025b8a:	2701      	movs	r7, #1
 8025b8c:	e7e2      	b.n	8025b54 <__gethex+0x35c>
 8025b8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8025b90:	f1c3 0301 	rsb	r3, r3, #1
 8025b94:	9315      	str	r3, [sp, #84]	; 0x54
 8025b96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8025b98:	2b00      	cmp	r3, #0
 8025b9a:	d0f0      	beq.n	8025b7e <__gethex+0x386>
 8025b9c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8025ba0:	f104 0314 	add.w	r3, r4, #20
 8025ba4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8025ba8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8025bac:	f04f 0c00 	mov.w	ip, #0
 8025bb0:	4618      	mov	r0, r3
 8025bb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8025bb6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8025bba:	d01c      	beq.n	8025bf6 <__gethex+0x3fe>
 8025bbc:	3201      	adds	r2, #1
 8025bbe:	6002      	str	r2, [r0, #0]
 8025bc0:	2f02      	cmp	r7, #2
 8025bc2:	f104 0314 	add.w	r3, r4, #20
 8025bc6:	d13f      	bne.n	8025c48 <__gethex+0x450>
 8025bc8:	f8d8 2000 	ldr.w	r2, [r8]
 8025bcc:	3a01      	subs	r2, #1
 8025bce:	42b2      	cmp	r2, r6
 8025bd0:	d10a      	bne.n	8025be8 <__gethex+0x3f0>
 8025bd2:	1171      	asrs	r1, r6, #5
 8025bd4:	2201      	movs	r2, #1
 8025bd6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8025bda:	f006 061f 	and.w	r6, r6, #31
 8025bde:	fa02 f606 	lsl.w	r6, r2, r6
 8025be2:	421e      	tst	r6, r3
 8025be4:	bf18      	it	ne
 8025be6:	4617      	movne	r7, r2
 8025be8:	f047 0720 	orr.w	r7, r7, #32
 8025bec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025bee:	601c      	str	r4, [r3, #0]
 8025bf0:	9b04      	ldr	r3, [sp, #16]
 8025bf2:	601d      	str	r5, [r3, #0]
 8025bf4:	e695      	b.n	8025922 <__gethex+0x12a>
 8025bf6:	4299      	cmp	r1, r3
 8025bf8:	f843 cc04 	str.w	ip, [r3, #-4]
 8025bfc:	d8d8      	bhi.n	8025bb0 <__gethex+0x3b8>
 8025bfe:	68a3      	ldr	r3, [r4, #8]
 8025c00:	459b      	cmp	fp, r3
 8025c02:	db19      	blt.n	8025c38 <__gethex+0x440>
 8025c04:	6861      	ldr	r1, [r4, #4]
 8025c06:	ee18 0a10 	vmov	r0, s16
 8025c0a:	3101      	adds	r1, #1
 8025c0c:	f000 f984 	bl	8025f18 <_Balloc>
 8025c10:	4681      	mov	r9, r0
 8025c12:	b918      	cbnz	r0, 8025c1c <__gethex+0x424>
 8025c14:	4b1a      	ldr	r3, [pc, #104]	; (8025c80 <__gethex+0x488>)
 8025c16:	4602      	mov	r2, r0
 8025c18:	2184      	movs	r1, #132	; 0x84
 8025c1a:	e6a8      	b.n	802596e <__gethex+0x176>
 8025c1c:	6922      	ldr	r2, [r4, #16]
 8025c1e:	3202      	adds	r2, #2
 8025c20:	f104 010c 	add.w	r1, r4, #12
 8025c24:	0092      	lsls	r2, r2, #2
 8025c26:	300c      	adds	r0, #12
 8025c28:	f7fc feea 	bl	8022a00 <memcpy>
 8025c2c:	4621      	mov	r1, r4
 8025c2e:	ee18 0a10 	vmov	r0, s16
 8025c32:	f000 f9b1 	bl	8025f98 <_Bfree>
 8025c36:	464c      	mov	r4, r9
 8025c38:	6923      	ldr	r3, [r4, #16]
 8025c3a:	1c5a      	adds	r2, r3, #1
 8025c3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8025c40:	6122      	str	r2, [r4, #16]
 8025c42:	2201      	movs	r2, #1
 8025c44:	615a      	str	r2, [r3, #20]
 8025c46:	e7bb      	b.n	8025bc0 <__gethex+0x3c8>
 8025c48:	6922      	ldr	r2, [r4, #16]
 8025c4a:	455a      	cmp	r2, fp
 8025c4c:	dd0b      	ble.n	8025c66 <__gethex+0x46e>
 8025c4e:	2101      	movs	r1, #1
 8025c50:	4620      	mov	r0, r4
 8025c52:	f7ff fd6a 	bl	802572a <rshift>
 8025c56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8025c5a:	3501      	adds	r5, #1
 8025c5c:	42ab      	cmp	r3, r5
 8025c5e:	f6ff aed0 	blt.w	8025a02 <__gethex+0x20a>
 8025c62:	2701      	movs	r7, #1
 8025c64:	e7c0      	b.n	8025be8 <__gethex+0x3f0>
 8025c66:	f016 061f 	ands.w	r6, r6, #31
 8025c6a:	d0fa      	beq.n	8025c62 <__gethex+0x46a>
 8025c6c:	4453      	add	r3, sl
 8025c6e:	f1c6 0620 	rsb	r6, r6, #32
 8025c72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8025c76:	f000 fa41 	bl	80260fc <__hi0bits>
 8025c7a:	42b0      	cmp	r0, r6
 8025c7c:	dbe7      	blt.n	8025c4e <__gethex+0x456>
 8025c7e:	e7f0      	b.n	8025c62 <__gethex+0x46a>
 8025c80:	08029578 	.word	0x08029578

08025c84 <L_shift>:
 8025c84:	f1c2 0208 	rsb	r2, r2, #8
 8025c88:	0092      	lsls	r2, r2, #2
 8025c8a:	b570      	push	{r4, r5, r6, lr}
 8025c8c:	f1c2 0620 	rsb	r6, r2, #32
 8025c90:	6843      	ldr	r3, [r0, #4]
 8025c92:	6804      	ldr	r4, [r0, #0]
 8025c94:	fa03 f506 	lsl.w	r5, r3, r6
 8025c98:	432c      	orrs	r4, r5
 8025c9a:	40d3      	lsrs	r3, r2
 8025c9c:	6004      	str	r4, [r0, #0]
 8025c9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8025ca2:	4288      	cmp	r0, r1
 8025ca4:	d3f4      	bcc.n	8025c90 <L_shift+0xc>
 8025ca6:	bd70      	pop	{r4, r5, r6, pc}

08025ca8 <__match>:
 8025ca8:	b530      	push	{r4, r5, lr}
 8025caa:	6803      	ldr	r3, [r0, #0]
 8025cac:	3301      	adds	r3, #1
 8025cae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025cb2:	b914      	cbnz	r4, 8025cba <__match+0x12>
 8025cb4:	6003      	str	r3, [r0, #0]
 8025cb6:	2001      	movs	r0, #1
 8025cb8:	bd30      	pop	{r4, r5, pc}
 8025cba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025cbe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8025cc2:	2d19      	cmp	r5, #25
 8025cc4:	bf98      	it	ls
 8025cc6:	3220      	addls	r2, #32
 8025cc8:	42a2      	cmp	r2, r4
 8025cca:	d0f0      	beq.n	8025cae <__match+0x6>
 8025ccc:	2000      	movs	r0, #0
 8025cce:	e7f3      	b.n	8025cb8 <__match+0x10>

08025cd0 <__hexnan>:
 8025cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025cd4:	680b      	ldr	r3, [r1, #0]
 8025cd6:	115e      	asrs	r6, r3, #5
 8025cd8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8025cdc:	f013 031f 	ands.w	r3, r3, #31
 8025ce0:	b087      	sub	sp, #28
 8025ce2:	bf18      	it	ne
 8025ce4:	3604      	addne	r6, #4
 8025ce6:	2500      	movs	r5, #0
 8025ce8:	1f37      	subs	r7, r6, #4
 8025cea:	4690      	mov	r8, r2
 8025cec:	6802      	ldr	r2, [r0, #0]
 8025cee:	9301      	str	r3, [sp, #4]
 8025cf0:	4682      	mov	sl, r0
 8025cf2:	f846 5c04 	str.w	r5, [r6, #-4]
 8025cf6:	46b9      	mov	r9, r7
 8025cf8:	463c      	mov	r4, r7
 8025cfa:	9502      	str	r5, [sp, #8]
 8025cfc:	46ab      	mov	fp, r5
 8025cfe:	7851      	ldrb	r1, [r2, #1]
 8025d00:	1c53      	adds	r3, r2, #1
 8025d02:	9303      	str	r3, [sp, #12]
 8025d04:	b341      	cbz	r1, 8025d58 <__hexnan+0x88>
 8025d06:	4608      	mov	r0, r1
 8025d08:	9205      	str	r2, [sp, #20]
 8025d0a:	9104      	str	r1, [sp, #16]
 8025d0c:	f7ff fd5f 	bl	80257ce <__hexdig_fun>
 8025d10:	2800      	cmp	r0, #0
 8025d12:	d14f      	bne.n	8025db4 <__hexnan+0xe4>
 8025d14:	9904      	ldr	r1, [sp, #16]
 8025d16:	9a05      	ldr	r2, [sp, #20]
 8025d18:	2920      	cmp	r1, #32
 8025d1a:	d818      	bhi.n	8025d4e <__hexnan+0x7e>
 8025d1c:	9b02      	ldr	r3, [sp, #8]
 8025d1e:	459b      	cmp	fp, r3
 8025d20:	dd13      	ble.n	8025d4a <__hexnan+0x7a>
 8025d22:	454c      	cmp	r4, r9
 8025d24:	d206      	bcs.n	8025d34 <__hexnan+0x64>
 8025d26:	2d07      	cmp	r5, #7
 8025d28:	dc04      	bgt.n	8025d34 <__hexnan+0x64>
 8025d2a:	462a      	mov	r2, r5
 8025d2c:	4649      	mov	r1, r9
 8025d2e:	4620      	mov	r0, r4
 8025d30:	f7ff ffa8 	bl	8025c84 <L_shift>
 8025d34:	4544      	cmp	r4, r8
 8025d36:	d950      	bls.n	8025dda <__hexnan+0x10a>
 8025d38:	2300      	movs	r3, #0
 8025d3a:	f1a4 0904 	sub.w	r9, r4, #4
 8025d3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8025d42:	f8cd b008 	str.w	fp, [sp, #8]
 8025d46:	464c      	mov	r4, r9
 8025d48:	461d      	mov	r5, r3
 8025d4a:	9a03      	ldr	r2, [sp, #12]
 8025d4c:	e7d7      	b.n	8025cfe <__hexnan+0x2e>
 8025d4e:	2929      	cmp	r1, #41	; 0x29
 8025d50:	d156      	bne.n	8025e00 <__hexnan+0x130>
 8025d52:	3202      	adds	r2, #2
 8025d54:	f8ca 2000 	str.w	r2, [sl]
 8025d58:	f1bb 0f00 	cmp.w	fp, #0
 8025d5c:	d050      	beq.n	8025e00 <__hexnan+0x130>
 8025d5e:	454c      	cmp	r4, r9
 8025d60:	d206      	bcs.n	8025d70 <__hexnan+0xa0>
 8025d62:	2d07      	cmp	r5, #7
 8025d64:	dc04      	bgt.n	8025d70 <__hexnan+0xa0>
 8025d66:	462a      	mov	r2, r5
 8025d68:	4649      	mov	r1, r9
 8025d6a:	4620      	mov	r0, r4
 8025d6c:	f7ff ff8a 	bl	8025c84 <L_shift>
 8025d70:	4544      	cmp	r4, r8
 8025d72:	d934      	bls.n	8025dde <__hexnan+0x10e>
 8025d74:	f1a8 0204 	sub.w	r2, r8, #4
 8025d78:	4623      	mov	r3, r4
 8025d7a:	f853 1b04 	ldr.w	r1, [r3], #4
 8025d7e:	f842 1f04 	str.w	r1, [r2, #4]!
 8025d82:	429f      	cmp	r7, r3
 8025d84:	d2f9      	bcs.n	8025d7a <__hexnan+0xaa>
 8025d86:	1b3b      	subs	r3, r7, r4
 8025d88:	f023 0303 	bic.w	r3, r3, #3
 8025d8c:	3304      	adds	r3, #4
 8025d8e:	3401      	adds	r4, #1
 8025d90:	3e03      	subs	r6, #3
 8025d92:	42b4      	cmp	r4, r6
 8025d94:	bf88      	it	hi
 8025d96:	2304      	movhi	r3, #4
 8025d98:	4443      	add	r3, r8
 8025d9a:	2200      	movs	r2, #0
 8025d9c:	f843 2b04 	str.w	r2, [r3], #4
 8025da0:	429f      	cmp	r7, r3
 8025da2:	d2fb      	bcs.n	8025d9c <__hexnan+0xcc>
 8025da4:	683b      	ldr	r3, [r7, #0]
 8025da6:	b91b      	cbnz	r3, 8025db0 <__hexnan+0xe0>
 8025da8:	4547      	cmp	r7, r8
 8025daa:	d127      	bne.n	8025dfc <__hexnan+0x12c>
 8025dac:	2301      	movs	r3, #1
 8025dae:	603b      	str	r3, [r7, #0]
 8025db0:	2005      	movs	r0, #5
 8025db2:	e026      	b.n	8025e02 <__hexnan+0x132>
 8025db4:	3501      	adds	r5, #1
 8025db6:	2d08      	cmp	r5, #8
 8025db8:	f10b 0b01 	add.w	fp, fp, #1
 8025dbc:	dd06      	ble.n	8025dcc <__hexnan+0xfc>
 8025dbe:	4544      	cmp	r4, r8
 8025dc0:	d9c3      	bls.n	8025d4a <__hexnan+0x7a>
 8025dc2:	2300      	movs	r3, #0
 8025dc4:	f844 3c04 	str.w	r3, [r4, #-4]
 8025dc8:	2501      	movs	r5, #1
 8025dca:	3c04      	subs	r4, #4
 8025dcc:	6822      	ldr	r2, [r4, #0]
 8025dce:	f000 000f 	and.w	r0, r0, #15
 8025dd2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8025dd6:	6022      	str	r2, [r4, #0]
 8025dd8:	e7b7      	b.n	8025d4a <__hexnan+0x7a>
 8025dda:	2508      	movs	r5, #8
 8025ddc:	e7b5      	b.n	8025d4a <__hexnan+0x7a>
 8025dde:	9b01      	ldr	r3, [sp, #4]
 8025de0:	2b00      	cmp	r3, #0
 8025de2:	d0df      	beq.n	8025da4 <__hexnan+0xd4>
 8025de4:	f04f 32ff 	mov.w	r2, #4294967295
 8025de8:	f1c3 0320 	rsb	r3, r3, #32
 8025dec:	fa22 f303 	lsr.w	r3, r2, r3
 8025df0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8025df4:	401a      	ands	r2, r3
 8025df6:	f846 2c04 	str.w	r2, [r6, #-4]
 8025dfa:	e7d3      	b.n	8025da4 <__hexnan+0xd4>
 8025dfc:	3f04      	subs	r7, #4
 8025dfe:	e7d1      	b.n	8025da4 <__hexnan+0xd4>
 8025e00:	2004      	movs	r0, #4
 8025e02:	b007      	add	sp, #28
 8025e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025e08 <_localeconv_r>:
 8025e08:	4800      	ldr	r0, [pc, #0]	; (8025e0c <_localeconv_r+0x4>)
 8025e0a:	4770      	bx	lr
 8025e0c:	200003e0 	.word	0x200003e0

08025e10 <__swhatbuf_r>:
 8025e10:	b570      	push	{r4, r5, r6, lr}
 8025e12:	460e      	mov	r6, r1
 8025e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025e18:	2900      	cmp	r1, #0
 8025e1a:	b096      	sub	sp, #88	; 0x58
 8025e1c:	4614      	mov	r4, r2
 8025e1e:	461d      	mov	r5, r3
 8025e20:	da08      	bge.n	8025e34 <__swhatbuf_r+0x24>
 8025e22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8025e26:	2200      	movs	r2, #0
 8025e28:	602a      	str	r2, [r5, #0]
 8025e2a:	061a      	lsls	r2, r3, #24
 8025e2c:	d410      	bmi.n	8025e50 <__swhatbuf_r+0x40>
 8025e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025e32:	e00e      	b.n	8025e52 <__swhatbuf_r+0x42>
 8025e34:	466a      	mov	r2, sp
 8025e36:	f000 ff2d 	bl	8026c94 <_fstat_r>
 8025e3a:	2800      	cmp	r0, #0
 8025e3c:	dbf1      	blt.n	8025e22 <__swhatbuf_r+0x12>
 8025e3e:	9a01      	ldr	r2, [sp, #4]
 8025e40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025e44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025e48:	425a      	negs	r2, r3
 8025e4a:	415a      	adcs	r2, r3
 8025e4c:	602a      	str	r2, [r5, #0]
 8025e4e:	e7ee      	b.n	8025e2e <__swhatbuf_r+0x1e>
 8025e50:	2340      	movs	r3, #64	; 0x40
 8025e52:	2000      	movs	r0, #0
 8025e54:	6023      	str	r3, [r4, #0]
 8025e56:	b016      	add	sp, #88	; 0x58
 8025e58:	bd70      	pop	{r4, r5, r6, pc}
	...

08025e5c <__smakebuf_r>:
 8025e5c:	898b      	ldrh	r3, [r1, #12]
 8025e5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025e60:	079d      	lsls	r5, r3, #30
 8025e62:	4606      	mov	r6, r0
 8025e64:	460c      	mov	r4, r1
 8025e66:	d507      	bpl.n	8025e78 <__smakebuf_r+0x1c>
 8025e68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025e6c:	6023      	str	r3, [r4, #0]
 8025e6e:	6123      	str	r3, [r4, #16]
 8025e70:	2301      	movs	r3, #1
 8025e72:	6163      	str	r3, [r4, #20]
 8025e74:	b002      	add	sp, #8
 8025e76:	bd70      	pop	{r4, r5, r6, pc}
 8025e78:	ab01      	add	r3, sp, #4
 8025e7a:	466a      	mov	r2, sp
 8025e7c:	f7ff ffc8 	bl	8025e10 <__swhatbuf_r>
 8025e80:	9900      	ldr	r1, [sp, #0]
 8025e82:	4605      	mov	r5, r0
 8025e84:	4630      	mov	r0, r6
 8025e86:	f7fc fe6d 	bl	8022b64 <_malloc_r>
 8025e8a:	b948      	cbnz	r0, 8025ea0 <__smakebuf_r+0x44>
 8025e8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025e90:	059a      	lsls	r2, r3, #22
 8025e92:	d4ef      	bmi.n	8025e74 <__smakebuf_r+0x18>
 8025e94:	f023 0303 	bic.w	r3, r3, #3
 8025e98:	f043 0302 	orr.w	r3, r3, #2
 8025e9c:	81a3      	strh	r3, [r4, #12]
 8025e9e:	e7e3      	b.n	8025e68 <__smakebuf_r+0xc>
 8025ea0:	4b0d      	ldr	r3, [pc, #52]	; (8025ed8 <__smakebuf_r+0x7c>)
 8025ea2:	62b3      	str	r3, [r6, #40]	; 0x28
 8025ea4:	89a3      	ldrh	r3, [r4, #12]
 8025ea6:	6020      	str	r0, [r4, #0]
 8025ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025eac:	81a3      	strh	r3, [r4, #12]
 8025eae:	9b00      	ldr	r3, [sp, #0]
 8025eb0:	6163      	str	r3, [r4, #20]
 8025eb2:	9b01      	ldr	r3, [sp, #4]
 8025eb4:	6120      	str	r0, [r4, #16]
 8025eb6:	b15b      	cbz	r3, 8025ed0 <__smakebuf_r+0x74>
 8025eb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025ebc:	4630      	mov	r0, r6
 8025ebe:	f000 fefb 	bl	8026cb8 <_isatty_r>
 8025ec2:	b128      	cbz	r0, 8025ed0 <__smakebuf_r+0x74>
 8025ec4:	89a3      	ldrh	r3, [r4, #12]
 8025ec6:	f023 0303 	bic.w	r3, r3, #3
 8025eca:	f043 0301 	orr.w	r3, r3, #1
 8025ece:	81a3      	strh	r3, [r4, #12]
 8025ed0:	89a0      	ldrh	r0, [r4, #12]
 8025ed2:	4305      	orrs	r5, r0
 8025ed4:	81a5      	strh	r5, [r4, #12]
 8025ed6:	e7cd      	b.n	8025e74 <__smakebuf_r+0x18>
 8025ed8:	08025589 	.word	0x08025589

08025edc <__ascii_mbtowc>:
 8025edc:	b082      	sub	sp, #8
 8025ede:	b901      	cbnz	r1, 8025ee2 <__ascii_mbtowc+0x6>
 8025ee0:	a901      	add	r1, sp, #4
 8025ee2:	b142      	cbz	r2, 8025ef6 <__ascii_mbtowc+0x1a>
 8025ee4:	b14b      	cbz	r3, 8025efa <__ascii_mbtowc+0x1e>
 8025ee6:	7813      	ldrb	r3, [r2, #0]
 8025ee8:	600b      	str	r3, [r1, #0]
 8025eea:	7812      	ldrb	r2, [r2, #0]
 8025eec:	1e10      	subs	r0, r2, #0
 8025eee:	bf18      	it	ne
 8025ef0:	2001      	movne	r0, #1
 8025ef2:	b002      	add	sp, #8
 8025ef4:	4770      	bx	lr
 8025ef6:	4610      	mov	r0, r2
 8025ef8:	e7fb      	b.n	8025ef2 <__ascii_mbtowc+0x16>
 8025efa:	f06f 0001 	mvn.w	r0, #1
 8025efe:	e7f8      	b.n	8025ef2 <__ascii_mbtowc+0x16>

08025f00 <__malloc_lock>:
 8025f00:	4801      	ldr	r0, [pc, #4]	; (8025f08 <__malloc_lock+0x8>)
 8025f02:	f7fc bd6a 	b.w	80229da <__retarget_lock_acquire_recursive>
 8025f06:	bf00      	nop
 8025f08:	20002744 	.word	0x20002744

08025f0c <__malloc_unlock>:
 8025f0c:	4801      	ldr	r0, [pc, #4]	; (8025f14 <__malloc_unlock+0x8>)
 8025f0e:	f7fc bd65 	b.w	80229dc <__retarget_lock_release_recursive>
 8025f12:	bf00      	nop
 8025f14:	20002744 	.word	0x20002744

08025f18 <_Balloc>:
 8025f18:	b570      	push	{r4, r5, r6, lr}
 8025f1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8025f1c:	4604      	mov	r4, r0
 8025f1e:	460d      	mov	r5, r1
 8025f20:	b976      	cbnz	r6, 8025f40 <_Balloc+0x28>
 8025f22:	2010      	movs	r0, #16
 8025f24:	f7fc fd5c 	bl	80229e0 <malloc>
 8025f28:	4602      	mov	r2, r0
 8025f2a:	6260      	str	r0, [r4, #36]	; 0x24
 8025f2c:	b920      	cbnz	r0, 8025f38 <_Balloc+0x20>
 8025f2e:	4b18      	ldr	r3, [pc, #96]	; (8025f90 <_Balloc+0x78>)
 8025f30:	4818      	ldr	r0, [pc, #96]	; (8025f94 <_Balloc+0x7c>)
 8025f32:	2166      	movs	r1, #102	; 0x66
 8025f34:	f7fc fcea 	bl	802290c <__assert_func>
 8025f38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025f3c:	6006      	str	r6, [r0, #0]
 8025f3e:	60c6      	str	r6, [r0, #12]
 8025f40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8025f42:	68f3      	ldr	r3, [r6, #12]
 8025f44:	b183      	cbz	r3, 8025f68 <_Balloc+0x50>
 8025f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025f48:	68db      	ldr	r3, [r3, #12]
 8025f4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8025f4e:	b9b8      	cbnz	r0, 8025f80 <_Balloc+0x68>
 8025f50:	2101      	movs	r1, #1
 8025f52:	fa01 f605 	lsl.w	r6, r1, r5
 8025f56:	1d72      	adds	r2, r6, #5
 8025f58:	0092      	lsls	r2, r2, #2
 8025f5a:	4620      	mov	r0, r4
 8025f5c:	f7fc fd80 	bl	8022a60 <_calloc_r>
 8025f60:	b160      	cbz	r0, 8025f7c <_Balloc+0x64>
 8025f62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8025f66:	e00e      	b.n	8025f86 <_Balloc+0x6e>
 8025f68:	2221      	movs	r2, #33	; 0x21
 8025f6a:	2104      	movs	r1, #4
 8025f6c:	4620      	mov	r0, r4
 8025f6e:	f7fc fd77 	bl	8022a60 <_calloc_r>
 8025f72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025f74:	60f0      	str	r0, [r6, #12]
 8025f76:	68db      	ldr	r3, [r3, #12]
 8025f78:	2b00      	cmp	r3, #0
 8025f7a:	d1e4      	bne.n	8025f46 <_Balloc+0x2e>
 8025f7c:	2000      	movs	r0, #0
 8025f7e:	bd70      	pop	{r4, r5, r6, pc}
 8025f80:	6802      	ldr	r2, [r0, #0]
 8025f82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8025f86:	2300      	movs	r3, #0
 8025f88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8025f8c:	e7f7      	b.n	8025f7e <_Balloc+0x66>
 8025f8e:	bf00      	nop
 8025f90:	08029506 	.word	0x08029506
 8025f94:	08029668 	.word	0x08029668

08025f98 <_Bfree>:
 8025f98:	b570      	push	{r4, r5, r6, lr}
 8025f9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8025f9c:	4605      	mov	r5, r0
 8025f9e:	460c      	mov	r4, r1
 8025fa0:	b976      	cbnz	r6, 8025fc0 <_Bfree+0x28>
 8025fa2:	2010      	movs	r0, #16
 8025fa4:	f7fc fd1c 	bl	80229e0 <malloc>
 8025fa8:	4602      	mov	r2, r0
 8025faa:	6268      	str	r0, [r5, #36]	; 0x24
 8025fac:	b920      	cbnz	r0, 8025fb8 <_Bfree+0x20>
 8025fae:	4b09      	ldr	r3, [pc, #36]	; (8025fd4 <_Bfree+0x3c>)
 8025fb0:	4809      	ldr	r0, [pc, #36]	; (8025fd8 <_Bfree+0x40>)
 8025fb2:	218a      	movs	r1, #138	; 0x8a
 8025fb4:	f7fc fcaa 	bl	802290c <__assert_func>
 8025fb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025fbc:	6006      	str	r6, [r0, #0]
 8025fbe:	60c6      	str	r6, [r0, #12]
 8025fc0:	b13c      	cbz	r4, 8025fd2 <_Bfree+0x3a>
 8025fc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8025fc4:	6862      	ldr	r2, [r4, #4]
 8025fc6:	68db      	ldr	r3, [r3, #12]
 8025fc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025fcc:	6021      	str	r1, [r4, #0]
 8025fce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8025fd2:	bd70      	pop	{r4, r5, r6, pc}
 8025fd4:	08029506 	.word	0x08029506
 8025fd8:	08029668 	.word	0x08029668

08025fdc <__multadd>:
 8025fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025fe0:	690d      	ldr	r5, [r1, #16]
 8025fe2:	4607      	mov	r7, r0
 8025fe4:	460c      	mov	r4, r1
 8025fe6:	461e      	mov	r6, r3
 8025fe8:	f101 0c14 	add.w	ip, r1, #20
 8025fec:	2000      	movs	r0, #0
 8025fee:	f8dc 3000 	ldr.w	r3, [ip]
 8025ff2:	b299      	uxth	r1, r3
 8025ff4:	fb02 6101 	mla	r1, r2, r1, r6
 8025ff8:	0c1e      	lsrs	r6, r3, #16
 8025ffa:	0c0b      	lsrs	r3, r1, #16
 8025ffc:	fb02 3306 	mla	r3, r2, r6, r3
 8026000:	b289      	uxth	r1, r1
 8026002:	3001      	adds	r0, #1
 8026004:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8026008:	4285      	cmp	r5, r0
 802600a:	f84c 1b04 	str.w	r1, [ip], #4
 802600e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8026012:	dcec      	bgt.n	8025fee <__multadd+0x12>
 8026014:	b30e      	cbz	r6, 802605a <__multadd+0x7e>
 8026016:	68a3      	ldr	r3, [r4, #8]
 8026018:	42ab      	cmp	r3, r5
 802601a:	dc19      	bgt.n	8026050 <__multadd+0x74>
 802601c:	6861      	ldr	r1, [r4, #4]
 802601e:	4638      	mov	r0, r7
 8026020:	3101      	adds	r1, #1
 8026022:	f7ff ff79 	bl	8025f18 <_Balloc>
 8026026:	4680      	mov	r8, r0
 8026028:	b928      	cbnz	r0, 8026036 <__multadd+0x5a>
 802602a:	4602      	mov	r2, r0
 802602c:	4b0c      	ldr	r3, [pc, #48]	; (8026060 <__multadd+0x84>)
 802602e:	480d      	ldr	r0, [pc, #52]	; (8026064 <__multadd+0x88>)
 8026030:	21b5      	movs	r1, #181	; 0xb5
 8026032:	f7fc fc6b 	bl	802290c <__assert_func>
 8026036:	6922      	ldr	r2, [r4, #16]
 8026038:	3202      	adds	r2, #2
 802603a:	f104 010c 	add.w	r1, r4, #12
 802603e:	0092      	lsls	r2, r2, #2
 8026040:	300c      	adds	r0, #12
 8026042:	f7fc fcdd 	bl	8022a00 <memcpy>
 8026046:	4621      	mov	r1, r4
 8026048:	4638      	mov	r0, r7
 802604a:	f7ff ffa5 	bl	8025f98 <_Bfree>
 802604e:	4644      	mov	r4, r8
 8026050:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8026054:	3501      	adds	r5, #1
 8026056:	615e      	str	r6, [r3, #20]
 8026058:	6125      	str	r5, [r4, #16]
 802605a:	4620      	mov	r0, r4
 802605c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026060:	08029578 	.word	0x08029578
 8026064:	08029668 	.word	0x08029668

08026068 <__s2b>:
 8026068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802606c:	460c      	mov	r4, r1
 802606e:	4615      	mov	r5, r2
 8026070:	461f      	mov	r7, r3
 8026072:	2209      	movs	r2, #9
 8026074:	3308      	adds	r3, #8
 8026076:	4606      	mov	r6, r0
 8026078:	fb93 f3f2 	sdiv	r3, r3, r2
 802607c:	2100      	movs	r1, #0
 802607e:	2201      	movs	r2, #1
 8026080:	429a      	cmp	r2, r3
 8026082:	db09      	blt.n	8026098 <__s2b+0x30>
 8026084:	4630      	mov	r0, r6
 8026086:	f7ff ff47 	bl	8025f18 <_Balloc>
 802608a:	b940      	cbnz	r0, 802609e <__s2b+0x36>
 802608c:	4602      	mov	r2, r0
 802608e:	4b19      	ldr	r3, [pc, #100]	; (80260f4 <__s2b+0x8c>)
 8026090:	4819      	ldr	r0, [pc, #100]	; (80260f8 <__s2b+0x90>)
 8026092:	21ce      	movs	r1, #206	; 0xce
 8026094:	f7fc fc3a 	bl	802290c <__assert_func>
 8026098:	0052      	lsls	r2, r2, #1
 802609a:	3101      	adds	r1, #1
 802609c:	e7f0      	b.n	8026080 <__s2b+0x18>
 802609e:	9b08      	ldr	r3, [sp, #32]
 80260a0:	6143      	str	r3, [r0, #20]
 80260a2:	2d09      	cmp	r5, #9
 80260a4:	f04f 0301 	mov.w	r3, #1
 80260a8:	6103      	str	r3, [r0, #16]
 80260aa:	dd16      	ble.n	80260da <__s2b+0x72>
 80260ac:	f104 0909 	add.w	r9, r4, #9
 80260b0:	46c8      	mov	r8, r9
 80260b2:	442c      	add	r4, r5
 80260b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80260b8:	4601      	mov	r1, r0
 80260ba:	3b30      	subs	r3, #48	; 0x30
 80260bc:	220a      	movs	r2, #10
 80260be:	4630      	mov	r0, r6
 80260c0:	f7ff ff8c 	bl	8025fdc <__multadd>
 80260c4:	45a0      	cmp	r8, r4
 80260c6:	d1f5      	bne.n	80260b4 <__s2b+0x4c>
 80260c8:	f1a5 0408 	sub.w	r4, r5, #8
 80260cc:	444c      	add	r4, r9
 80260ce:	1b2d      	subs	r5, r5, r4
 80260d0:	1963      	adds	r3, r4, r5
 80260d2:	42bb      	cmp	r3, r7
 80260d4:	db04      	blt.n	80260e0 <__s2b+0x78>
 80260d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80260da:	340a      	adds	r4, #10
 80260dc:	2509      	movs	r5, #9
 80260de:	e7f6      	b.n	80260ce <__s2b+0x66>
 80260e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80260e4:	4601      	mov	r1, r0
 80260e6:	3b30      	subs	r3, #48	; 0x30
 80260e8:	220a      	movs	r2, #10
 80260ea:	4630      	mov	r0, r6
 80260ec:	f7ff ff76 	bl	8025fdc <__multadd>
 80260f0:	e7ee      	b.n	80260d0 <__s2b+0x68>
 80260f2:	bf00      	nop
 80260f4:	08029578 	.word	0x08029578
 80260f8:	08029668 	.word	0x08029668

080260fc <__hi0bits>:
 80260fc:	0c03      	lsrs	r3, r0, #16
 80260fe:	041b      	lsls	r3, r3, #16
 8026100:	b9d3      	cbnz	r3, 8026138 <__hi0bits+0x3c>
 8026102:	0400      	lsls	r0, r0, #16
 8026104:	2310      	movs	r3, #16
 8026106:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802610a:	bf04      	itt	eq
 802610c:	0200      	lsleq	r0, r0, #8
 802610e:	3308      	addeq	r3, #8
 8026110:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8026114:	bf04      	itt	eq
 8026116:	0100      	lsleq	r0, r0, #4
 8026118:	3304      	addeq	r3, #4
 802611a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802611e:	bf04      	itt	eq
 8026120:	0080      	lsleq	r0, r0, #2
 8026122:	3302      	addeq	r3, #2
 8026124:	2800      	cmp	r0, #0
 8026126:	db05      	blt.n	8026134 <__hi0bits+0x38>
 8026128:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802612c:	f103 0301 	add.w	r3, r3, #1
 8026130:	bf08      	it	eq
 8026132:	2320      	moveq	r3, #32
 8026134:	4618      	mov	r0, r3
 8026136:	4770      	bx	lr
 8026138:	2300      	movs	r3, #0
 802613a:	e7e4      	b.n	8026106 <__hi0bits+0xa>

0802613c <__lo0bits>:
 802613c:	6803      	ldr	r3, [r0, #0]
 802613e:	f013 0207 	ands.w	r2, r3, #7
 8026142:	4601      	mov	r1, r0
 8026144:	d00b      	beq.n	802615e <__lo0bits+0x22>
 8026146:	07da      	lsls	r2, r3, #31
 8026148:	d423      	bmi.n	8026192 <__lo0bits+0x56>
 802614a:	0798      	lsls	r0, r3, #30
 802614c:	bf49      	itett	mi
 802614e:	085b      	lsrmi	r3, r3, #1
 8026150:	089b      	lsrpl	r3, r3, #2
 8026152:	2001      	movmi	r0, #1
 8026154:	600b      	strmi	r3, [r1, #0]
 8026156:	bf5c      	itt	pl
 8026158:	600b      	strpl	r3, [r1, #0]
 802615a:	2002      	movpl	r0, #2
 802615c:	4770      	bx	lr
 802615e:	b298      	uxth	r0, r3
 8026160:	b9a8      	cbnz	r0, 802618e <__lo0bits+0x52>
 8026162:	0c1b      	lsrs	r3, r3, #16
 8026164:	2010      	movs	r0, #16
 8026166:	b2da      	uxtb	r2, r3
 8026168:	b90a      	cbnz	r2, 802616e <__lo0bits+0x32>
 802616a:	3008      	adds	r0, #8
 802616c:	0a1b      	lsrs	r3, r3, #8
 802616e:	071a      	lsls	r2, r3, #28
 8026170:	bf04      	itt	eq
 8026172:	091b      	lsreq	r3, r3, #4
 8026174:	3004      	addeq	r0, #4
 8026176:	079a      	lsls	r2, r3, #30
 8026178:	bf04      	itt	eq
 802617a:	089b      	lsreq	r3, r3, #2
 802617c:	3002      	addeq	r0, #2
 802617e:	07da      	lsls	r2, r3, #31
 8026180:	d403      	bmi.n	802618a <__lo0bits+0x4e>
 8026182:	085b      	lsrs	r3, r3, #1
 8026184:	f100 0001 	add.w	r0, r0, #1
 8026188:	d005      	beq.n	8026196 <__lo0bits+0x5a>
 802618a:	600b      	str	r3, [r1, #0]
 802618c:	4770      	bx	lr
 802618e:	4610      	mov	r0, r2
 8026190:	e7e9      	b.n	8026166 <__lo0bits+0x2a>
 8026192:	2000      	movs	r0, #0
 8026194:	4770      	bx	lr
 8026196:	2020      	movs	r0, #32
 8026198:	4770      	bx	lr
	...

0802619c <__i2b>:
 802619c:	b510      	push	{r4, lr}
 802619e:	460c      	mov	r4, r1
 80261a0:	2101      	movs	r1, #1
 80261a2:	f7ff feb9 	bl	8025f18 <_Balloc>
 80261a6:	4602      	mov	r2, r0
 80261a8:	b928      	cbnz	r0, 80261b6 <__i2b+0x1a>
 80261aa:	4b05      	ldr	r3, [pc, #20]	; (80261c0 <__i2b+0x24>)
 80261ac:	4805      	ldr	r0, [pc, #20]	; (80261c4 <__i2b+0x28>)
 80261ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80261b2:	f7fc fbab 	bl	802290c <__assert_func>
 80261b6:	2301      	movs	r3, #1
 80261b8:	6144      	str	r4, [r0, #20]
 80261ba:	6103      	str	r3, [r0, #16]
 80261bc:	bd10      	pop	{r4, pc}
 80261be:	bf00      	nop
 80261c0:	08029578 	.word	0x08029578
 80261c4:	08029668 	.word	0x08029668

080261c8 <__multiply>:
 80261c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261cc:	4691      	mov	r9, r2
 80261ce:	690a      	ldr	r2, [r1, #16]
 80261d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80261d4:	429a      	cmp	r2, r3
 80261d6:	bfb8      	it	lt
 80261d8:	460b      	movlt	r3, r1
 80261da:	460c      	mov	r4, r1
 80261dc:	bfbc      	itt	lt
 80261de:	464c      	movlt	r4, r9
 80261e0:	4699      	movlt	r9, r3
 80261e2:	6927      	ldr	r7, [r4, #16]
 80261e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80261e8:	68a3      	ldr	r3, [r4, #8]
 80261ea:	6861      	ldr	r1, [r4, #4]
 80261ec:	eb07 060a 	add.w	r6, r7, sl
 80261f0:	42b3      	cmp	r3, r6
 80261f2:	b085      	sub	sp, #20
 80261f4:	bfb8      	it	lt
 80261f6:	3101      	addlt	r1, #1
 80261f8:	f7ff fe8e 	bl	8025f18 <_Balloc>
 80261fc:	b930      	cbnz	r0, 802620c <__multiply+0x44>
 80261fe:	4602      	mov	r2, r0
 8026200:	4b44      	ldr	r3, [pc, #272]	; (8026314 <__multiply+0x14c>)
 8026202:	4845      	ldr	r0, [pc, #276]	; (8026318 <__multiply+0x150>)
 8026204:	f240 115d 	movw	r1, #349	; 0x15d
 8026208:	f7fc fb80 	bl	802290c <__assert_func>
 802620c:	f100 0514 	add.w	r5, r0, #20
 8026210:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8026214:	462b      	mov	r3, r5
 8026216:	2200      	movs	r2, #0
 8026218:	4543      	cmp	r3, r8
 802621a:	d321      	bcc.n	8026260 <__multiply+0x98>
 802621c:	f104 0314 	add.w	r3, r4, #20
 8026220:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8026224:	f109 0314 	add.w	r3, r9, #20
 8026228:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802622c:	9202      	str	r2, [sp, #8]
 802622e:	1b3a      	subs	r2, r7, r4
 8026230:	3a15      	subs	r2, #21
 8026232:	f022 0203 	bic.w	r2, r2, #3
 8026236:	3204      	adds	r2, #4
 8026238:	f104 0115 	add.w	r1, r4, #21
 802623c:	428f      	cmp	r7, r1
 802623e:	bf38      	it	cc
 8026240:	2204      	movcc	r2, #4
 8026242:	9201      	str	r2, [sp, #4]
 8026244:	9a02      	ldr	r2, [sp, #8]
 8026246:	9303      	str	r3, [sp, #12]
 8026248:	429a      	cmp	r2, r3
 802624a:	d80c      	bhi.n	8026266 <__multiply+0x9e>
 802624c:	2e00      	cmp	r6, #0
 802624e:	dd03      	ble.n	8026258 <__multiply+0x90>
 8026250:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8026254:	2b00      	cmp	r3, #0
 8026256:	d05a      	beq.n	802630e <__multiply+0x146>
 8026258:	6106      	str	r6, [r0, #16]
 802625a:	b005      	add	sp, #20
 802625c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026260:	f843 2b04 	str.w	r2, [r3], #4
 8026264:	e7d8      	b.n	8026218 <__multiply+0x50>
 8026266:	f8b3 a000 	ldrh.w	sl, [r3]
 802626a:	f1ba 0f00 	cmp.w	sl, #0
 802626e:	d024      	beq.n	80262ba <__multiply+0xf2>
 8026270:	f104 0e14 	add.w	lr, r4, #20
 8026274:	46a9      	mov	r9, r5
 8026276:	f04f 0c00 	mov.w	ip, #0
 802627a:	f85e 2b04 	ldr.w	r2, [lr], #4
 802627e:	f8d9 1000 	ldr.w	r1, [r9]
 8026282:	fa1f fb82 	uxth.w	fp, r2
 8026286:	b289      	uxth	r1, r1
 8026288:	fb0a 110b 	mla	r1, sl, fp, r1
 802628c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8026290:	f8d9 2000 	ldr.w	r2, [r9]
 8026294:	4461      	add	r1, ip
 8026296:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802629a:	fb0a c20b 	mla	r2, sl, fp, ip
 802629e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80262a2:	b289      	uxth	r1, r1
 80262a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80262a8:	4577      	cmp	r7, lr
 80262aa:	f849 1b04 	str.w	r1, [r9], #4
 80262ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80262b2:	d8e2      	bhi.n	802627a <__multiply+0xb2>
 80262b4:	9a01      	ldr	r2, [sp, #4]
 80262b6:	f845 c002 	str.w	ip, [r5, r2]
 80262ba:	9a03      	ldr	r2, [sp, #12]
 80262bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80262c0:	3304      	adds	r3, #4
 80262c2:	f1b9 0f00 	cmp.w	r9, #0
 80262c6:	d020      	beq.n	802630a <__multiply+0x142>
 80262c8:	6829      	ldr	r1, [r5, #0]
 80262ca:	f104 0c14 	add.w	ip, r4, #20
 80262ce:	46ae      	mov	lr, r5
 80262d0:	f04f 0a00 	mov.w	sl, #0
 80262d4:	f8bc b000 	ldrh.w	fp, [ip]
 80262d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80262dc:	fb09 220b 	mla	r2, r9, fp, r2
 80262e0:	4492      	add	sl, r2
 80262e2:	b289      	uxth	r1, r1
 80262e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80262e8:	f84e 1b04 	str.w	r1, [lr], #4
 80262ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80262f0:	f8be 1000 	ldrh.w	r1, [lr]
 80262f4:	0c12      	lsrs	r2, r2, #16
 80262f6:	fb09 1102 	mla	r1, r9, r2, r1
 80262fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80262fe:	4567      	cmp	r7, ip
 8026300:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8026304:	d8e6      	bhi.n	80262d4 <__multiply+0x10c>
 8026306:	9a01      	ldr	r2, [sp, #4]
 8026308:	50a9      	str	r1, [r5, r2]
 802630a:	3504      	adds	r5, #4
 802630c:	e79a      	b.n	8026244 <__multiply+0x7c>
 802630e:	3e01      	subs	r6, #1
 8026310:	e79c      	b.n	802624c <__multiply+0x84>
 8026312:	bf00      	nop
 8026314:	08029578 	.word	0x08029578
 8026318:	08029668 	.word	0x08029668

0802631c <__pow5mult>:
 802631c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026320:	4615      	mov	r5, r2
 8026322:	f012 0203 	ands.w	r2, r2, #3
 8026326:	4606      	mov	r6, r0
 8026328:	460f      	mov	r7, r1
 802632a:	d007      	beq.n	802633c <__pow5mult+0x20>
 802632c:	4c25      	ldr	r4, [pc, #148]	; (80263c4 <__pow5mult+0xa8>)
 802632e:	3a01      	subs	r2, #1
 8026330:	2300      	movs	r3, #0
 8026332:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8026336:	f7ff fe51 	bl	8025fdc <__multadd>
 802633a:	4607      	mov	r7, r0
 802633c:	10ad      	asrs	r5, r5, #2
 802633e:	d03d      	beq.n	80263bc <__pow5mult+0xa0>
 8026340:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8026342:	b97c      	cbnz	r4, 8026364 <__pow5mult+0x48>
 8026344:	2010      	movs	r0, #16
 8026346:	f7fc fb4b 	bl	80229e0 <malloc>
 802634a:	4602      	mov	r2, r0
 802634c:	6270      	str	r0, [r6, #36]	; 0x24
 802634e:	b928      	cbnz	r0, 802635c <__pow5mult+0x40>
 8026350:	4b1d      	ldr	r3, [pc, #116]	; (80263c8 <__pow5mult+0xac>)
 8026352:	481e      	ldr	r0, [pc, #120]	; (80263cc <__pow5mult+0xb0>)
 8026354:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8026358:	f7fc fad8 	bl	802290c <__assert_func>
 802635c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8026360:	6004      	str	r4, [r0, #0]
 8026362:	60c4      	str	r4, [r0, #12]
 8026364:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8026368:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802636c:	b94c      	cbnz	r4, 8026382 <__pow5mult+0x66>
 802636e:	f240 2171 	movw	r1, #625	; 0x271
 8026372:	4630      	mov	r0, r6
 8026374:	f7ff ff12 	bl	802619c <__i2b>
 8026378:	2300      	movs	r3, #0
 802637a:	f8c8 0008 	str.w	r0, [r8, #8]
 802637e:	4604      	mov	r4, r0
 8026380:	6003      	str	r3, [r0, #0]
 8026382:	f04f 0900 	mov.w	r9, #0
 8026386:	07eb      	lsls	r3, r5, #31
 8026388:	d50a      	bpl.n	80263a0 <__pow5mult+0x84>
 802638a:	4639      	mov	r1, r7
 802638c:	4622      	mov	r2, r4
 802638e:	4630      	mov	r0, r6
 8026390:	f7ff ff1a 	bl	80261c8 <__multiply>
 8026394:	4639      	mov	r1, r7
 8026396:	4680      	mov	r8, r0
 8026398:	4630      	mov	r0, r6
 802639a:	f7ff fdfd 	bl	8025f98 <_Bfree>
 802639e:	4647      	mov	r7, r8
 80263a0:	106d      	asrs	r5, r5, #1
 80263a2:	d00b      	beq.n	80263bc <__pow5mult+0xa0>
 80263a4:	6820      	ldr	r0, [r4, #0]
 80263a6:	b938      	cbnz	r0, 80263b8 <__pow5mult+0x9c>
 80263a8:	4622      	mov	r2, r4
 80263aa:	4621      	mov	r1, r4
 80263ac:	4630      	mov	r0, r6
 80263ae:	f7ff ff0b 	bl	80261c8 <__multiply>
 80263b2:	6020      	str	r0, [r4, #0]
 80263b4:	f8c0 9000 	str.w	r9, [r0]
 80263b8:	4604      	mov	r4, r0
 80263ba:	e7e4      	b.n	8026386 <__pow5mult+0x6a>
 80263bc:	4638      	mov	r0, r7
 80263be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80263c2:	bf00      	nop
 80263c4:	080297b8 	.word	0x080297b8
 80263c8:	08029506 	.word	0x08029506
 80263cc:	08029668 	.word	0x08029668

080263d0 <__lshift>:
 80263d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80263d4:	460c      	mov	r4, r1
 80263d6:	6849      	ldr	r1, [r1, #4]
 80263d8:	6923      	ldr	r3, [r4, #16]
 80263da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80263de:	68a3      	ldr	r3, [r4, #8]
 80263e0:	4607      	mov	r7, r0
 80263e2:	4691      	mov	r9, r2
 80263e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80263e8:	f108 0601 	add.w	r6, r8, #1
 80263ec:	42b3      	cmp	r3, r6
 80263ee:	db0b      	blt.n	8026408 <__lshift+0x38>
 80263f0:	4638      	mov	r0, r7
 80263f2:	f7ff fd91 	bl	8025f18 <_Balloc>
 80263f6:	4605      	mov	r5, r0
 80263f8:	b948      	cbnz	r0, 802640e <__lshift+0x3e>
 80263fa:	4602      	mov	r2, r0
 80263fc:	4b2a      	ldr	r3, [pc, #168]	; (80264a8 <__lshift+0xd8>)
 80263fe:	482b      	ldr	r0, [pc, #172]	; (80264ac <__lshift+0xdc>)
 8026400:	f240 11d9 	movw	r1, #473	; 0x1d9
 8026404:	f7fc fa82 	bl	802290c <__assert_func>
 8026408:	3101      	adds	r1, #1
 802640a:	005b      	lsls	r3, r3, #1
 802640c:	e7ee      	b.n	80263ec <__lshift+0x1c>
 802640e:	2300      	movs	r3, #0
 8026410:	f100 0114 	add.w	r1, r0, #20
 8026414:	f100 0210 	add.w	r2, r0, #16
 8026418:	4618      	mov	r0, r3
 802641a:	4553      	cmp	r3, sl
 802641c:	db37      	blt.n	802648e <__lshift+0xbe>
 802641e:	6920      	ldr	r0, [r4, #16]
 8026420:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8026424:	f104 0314 	add.w	r3, r4, #20
 8026428:	f019 091f 	ands.w	r9, r9, #31
 802642c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8026430:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8026434:	d02f      	beq.n	8026496 <__lshift+0xc6>
 8026436:	f1c9 0e20 	rsb	lr, r9, #32
 802643a:	468a      	mov	sl, r1
 802643c:	f04f 0c00 	mov.w	ip, #0
 8026440:	681a      	ldr	r2, [r3, #0]
 8026442:	fa02 f209 	lsl.w	r2, r2, r9
 8026446:	ea42 020c 	orr.w	r2, r2, ip
 802644a:	f84a 2b04 	str.w	r2, [sl], #4
 802644e:	f853 2b04 	ldr.w	r2, [r3], #4
 8026452:	4298      	cmp	r0, r3
 8026454:	fa22 fc0e 	lsr.w	ip, r2, lr
 8026458:	d8f2      	bhi.n	8026440 <__lshift+0x70>
 802645a:	1b03      	subs	r3, r0, r4
 802645c:	3b15      	subs	r3, #21
 802645e:	f023 0303 	bic.w	r3, r3, #3
 8026462:	3304      	adds	r3, #4
 8026464:	f104 0215 	add.w	r2, r4, #21
 8026468:	4290      	cmp	r0, r2
 802646a:	bf38      	it	cc
 802646c:	2304      	movcc	r3, #4
 802646e:	f841 c003 	str.w	ip, [r1, r3]
 8026472:	f1bc 0f00 	cmp.w	ip, #0
 8026476:	d001      	beq.n	802647c <__lshift+0xac>
 8026478:	f108 0602 	add.w	r6, r8, #2
 802647c:	3e01      	subs	r6, #1
 802647e:	4638      	mov	r0, r7
 8026480:	612e      	str	r6, [r5, #16]
 8026482:	4621      	mov	r1, r4
 8026484:	f7ff fd88 	bl	8025f98 <_Bfree>
 8026488:	4628      	mov	r0, r5
 802648a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802648e:	f842 0f04 	str.w	r0, [r2, #4]!
 8026492:	3301      	adds	r3, #1
 8026494:	e7c1      	b.n	802641a <__lshift+0x4a>
 8026496:	3904      	subs	r1, #4
 8026498:	f853 2b04 	ldr.w	r2, [r3], #4
 802649c:	f841 2f04 	str.w	r2, [r1, #4]!
 80264a0:	4298      	cmp	r0, r3
 80264a2:	d8f9      	bhi.n	8026498 <__lshift+0xc8>
 80264a4:	e7ea      	b.n	802647c <__lshift+0xac>
 80264a6:	bf00      	nop
 80264a8:	08029578 	.word	0x08029578
 80264ac:	08029668 	.word	0x08029668

080264b0 <__mcmp>:
 80264b0:	b530      	push	{r4, r5, lr}
 80264b2:	6902      	ldr	r2, [r0, #16]
 80264b4:	690c      	ldr	r4, [r1, #16]
 80264b6:	1b12      	subs	r2, r2, r4
 80264b8:	d10e      	bne.n	80264d8 <__mcmp+0x28>
 80264ba:	f100 0314 	add.w	r3, r0, #20
 80264be:	3114      	adds	r1, #20
 80264c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80264c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80264c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80264cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80264d0:	42a5      	cmp	r5, r4
 80264d2:	d003      	beq.n	80264dc <__mcmp+0x2c>
 80264d4:	d305      	bcc.n	80264e2 <__mcmp+0x32>
 80264d6:	2201      	movs	r2, #1
 80264d8:	4610      	mov	r0, r2
 80264da:	bd30      	pop	{r4, r5, pc}
 80264dc:	4283      	cmp	r3, r0
 80264de:	d3f3      	bcc.n	80264c8 <__mcmp+0x18>
 80264e0:	e7fa      	b.n	80264d8 <__mcmp+0x28>
 80264e2:	f04f 32ff 	mov.w	r2, #4294967295
 80264e6:	e7f7      	b.n	80264d8 <__mcmp+0x28>

080264e8 <__mdiff>:
 80264e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264ec:	460c      	mov	r4, r1
 80264ee:	4606      	mov	r6, r0
 80264f0:	4611      	mov	r1, r2
 80264f2:	4620      	mov	r0, r4
 80264f4:	4690      	mov	r8, r2
 80264f6:	f7ff ffdb 	bl	80264b0 <__mcmp>
 80264fa:	1e05      	subs	r5, r0, #0
 80264fc:	d110      	bne.n	8026520 <__mdiff+0x38>
 80264fe:	4629      	mov	r1, r5
 8026500:	4630      	mov	r0, r6
 8026502:	f7ff fd09 	bl	8025f18 <_Balloc>
 8026506:	b930      	cbnz	r0, 8026516 <__mdiff+0x2e>
 8026508:	4b3a      	ldr	r3, [pc, #232]	; (80265f4 <__mdiff+0x10c>)
 802650a:	4602      	mov	r2, r0
 802650c:	f240 2132 	movw	r1, #562	; 0x232
 8026510:	4839      	ldr	r0, [pc, #228]	; (80265f8 <__mdiff+0x110>)
 8026512:	f7fc f9fb 	bl	802290c <__assert_func>
 8026516:	2301      	movs	r3, #1
 8026518:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802651c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026520:	bfa4      	itt	ge
 8026522:	4643      	movge	r3, r8
 8026524:	46a0      	movge	r8, r4
 8026526:	4630      	mov	r0, r6
 8026528:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802652c:	bfa6      	itte	ge
 802652e:	461c      	movge	r4, r3
 8026530:	2500      	movge	r5, #0
 8026532:	2501      	movlt	r5, #1
 8026534:	f7ff fcf0 	bl	8025f18 <_Balloc>
 8026538:	b920      	cbnz	r0, 8026544 <__mdiff+0x5c>
 802653a:	4b2e      	ldr	r3, [pc, #184]	; (80265f4 <__mdiff+0x10c>)
 802653c:	4602      	mov	r2, r0
 802653e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8026542:	e7e5      	b.n	8026510 <__mdiff+0x28>
 8026544:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8026548:	6926      	ldr	r6, [r4, #16]
 802654a:	60c5      	str	r5, [r0, #12]
 802654c:	f104 0914 	add.w	r9, r4, #20
 8026550:	f108 0514 	add.w	r5, r8, #20
 8026554:	f100 0e14 	add.w	lr, r0, #20
 8026558:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802655c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8026560:	f108 0210 	add.w	r2, r8, #16
 8026564:	46f2      	mov	sl, lr
 8026566:	2100      	movs	r1, #0
 8026568:	f859 3b04 	ldr.w	r3, [r9], #4
 802656c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8026570:	fa1f f883 	uxth.w	r8, r3
 8026574:	fa11 f18b 	uxtah	r1, r1, fp
 8026578:	0c1b      	lsrs	r3, r3, #16
 802657a:	eba1 0808 	sub.w	r8, r1, r8
 802657e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8026582:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8026586:	fa1f f888 	uxth.w	r8, r8
 802658a:	1419      	asrs	r1, r3, #16
 802658c:	454e      	cmp	r6, r9
 802658e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8026592:	f84a 3b04 	str.w	r3, [sl], #4
 8026596:	d8e7      	bhi.n	8026568 <__mdiff+0x80>
 8026598:	1b33      	subs	r3, r6, r4
 802659a:	3b15      	subs	r3, #21
 802659c:	f023 0303 	bic.w	r3, r3, #3
 80265a0:	3304      	adds	r3, #4
 80265a2:	3415      	adds	r4, #21
 80265a4:	42a6      	cmp	r6, r4
 80265a6:	bf38      	it	cc
 80265a8:	2304      	movcc	r3, #4
 80265aa:	441d      	add	r5, r3
 80265ac:	4473      	add	r3, lr
 80265ae:	469e      	mov	lr, r3
 80265b0:	462e      	mov	r6, r5
 80265b2:	4566      	cmp	r6, ip
 80265b4:	d30e      	bcc.n	80265d4 <__mdiff+0xec>
 80265b6:	f10c 0203 	add.w	r2, ip, #3
 80265ba:	1b52      	subs	r2, r2, r5
 80265bc:	f022 0203 	bic.w	r2, r2, #3
 80265c0:	3d03      	subs	r5, #3
 80265c2:	45ac      	cmp	ip, r5
 80265c4:	bf38      	it	cc
 80265c6:	2200      	movcc	r2, #0
 80265c8:	441a      	add	r2, r3
 80265ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80265ce:	b17b      	cbz	r3, 80265f0 <__mdiff+0x108>
 80265d0:	6107      	str	r7, [r0, #16]
 80265d2:	e7a3      	b.n	802651c <__mdiff+0x34>
 80265d4:	f856 8b04 	ldr.w	r8, [r6], #4
 80265d8:	fa11 f288 	uxtah	r2, r1, r8
 80265dc:	1414      	asrs	r4, r2, #16
 80265de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80265e2:	b292      	uxth	r2, r2
 80265e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80265e8:	f84e 2b04 	str.w	r2, [lr], #4
 80265ec:	1421      	asrs	r1, r4, #16
 80265ee:	e7e0      	b.n	80265b2 <__mdiff+0xca>
 80265f0:	3f01      	subs	r7, #1
 80265f2:	e7ea      	b.n	80265ca <__mdiff+0xe2>
 80265f4:	08029578 	.word	0x08029578
 80265f8:	08029668 	.word	0x08029668

080265fc <__ulp>:
 80265fc:	b082      	sub	sp, #8
 80265fe:	ed8d 0b00 	vstr	d0, [sp]
 8026602:	9b01      	ldr	r3, [sp, #4]
 8026604:	4912      	ldr	r1, [pc, #72]	; (8026650 <__ulp+0x54>)
 8026606:	4019      	ands	r1, r3
 8026608:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 802660c:	2900      	cmp	r1, #0
 802660e:	dd05      	ble.n	802661c <__ulp+0x20>
 8026610:	2200      	movs	r2, #0
 8026612:	460b      	mov	r3, r1
 8026614:	ec43 2b10 	vmov	d0, r2, r3
 8026618:	b002      	add	sp, #8
 802661a:	4770      	bx	lr
 802661c:	4249      	negs	r1, r1
 802661e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8026622:	ea4f 5021 	mov.w	r0, r1, asr #20
 8026626:	f04f 0200 	mov.w	r2, #0
 802662a:	f04f 0300 	mov.w	r3, #0
 802662e:	da04      	bge.n	802663a <__ulp+0x3e>
 8026630:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8026634:	fa41 f300 	asr.w	r3, r1, r0
 8026638:	e7ec      	b.n	8026614 <__ulp+0x18>
 802663a:	f1a0 0114 	sub.w	r1, r0, #20
 802663e:	291e      	cmp	r1, #30
 8026640:	bfda      	itte	le
 8026642:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8026646:	fa20 f101 	lsrle.w	r1, r0, r1
 802664a:	2101      	movgt	r1, #1
 802664c:	460a      	mov	r2, r1
 802664e:	e7e1      	b.n	8026614 <__ulp+0x18>
 8026650:	7ff00000 	.word	0x7ff00000

08026654 <__b2d>:
 8026654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026656:	6905      	ldr	r5, [r0, #16]
 8026658:	f100 0714 	add.w	r7, r0, #20
 802665c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8026660:	1f2e      	subs	r6, r5, #4
 8026662:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8026666:	4620      	mov	r0, r4
 8026668:	f7ff fd48 	bl	80260fc <__hi0bits>
 802666c:	f1c0 0320 	rsb	r3, r0, #32
 8026670:	280a      	cmp	r0, #10
 8026672:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80266f0 <__b2d+0x9c>
 8026676:	600b      	str	r3, [r1, #0]
 8026678:	dc14      	bgt.n	80266a4 <__b2d+0x50>
 802667a:	f1c0 0e0b 	rsb	lr, r0, #11
 802667e:	fa24 f10e 	lsr.w	r1, r4, lr
 8026682:	42b7      	cmp	r7, r6
 8026684:	ea41 030c 	orr.w	r3, r1, ip
 8026688:	bf34      	ite	cc
 802668a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802668e:	2100      	movcs	r1, #0
 8026690:	3015      	adds	r0, #21
 8026692:	fa04 f000 	lsl.w	r0, r4, r0
 8026696:	fa21 f10e 	lsr.w	r1, r1, lr
 802669a:	ea40 0201 	orr.w	r2, r0, r1
 802669e:	ec43 2b10 	vmov	d0, r2, r3
 80266a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80266a4:	42b7      	cmp	r7, r6
 80266a6:	bf3a      	itte	cc
 80266a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80266ac:	f1a5 0608 	subcc.w	r6, r5, #8
 80266b0:	2100      	movcs	r1, #0
 80266b2:	380b      	subs	r0, #11
 80266b4:	d017      	beq.n	80266e6 <__b2d+0x92>
 80266b6:	f1c0 0c20 	rsb	ip, r0, #32
 80266ba:	fa04 f500 	lsl.w	r5, r4, r0
 80266be:	42be      	cmp	r6, r7
 80266c0:	fa21 f40c 	lsr.w	r4, r1, ip
 80266c4:	ea45 0504 	orr.w	r5, r5, r4
 80266c8:	bf8c      	ite	hi
 80266ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80266ce:	2400      	movls	r4, #0
 80266d0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80266d4:	fa01 f000 	lsl.w	r0, r1, r0
 80266d8:	fa24 f40c 	lsr.w	r4, r4, ip
 80266dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80266e0:	ea40 0204 	orr.w	r2, r0, r4
 80266e4:	e7db      	b.n	802669e <__b2d+0x4a>
 80266e6:	ea44 030c 	orr.w	r3, r4, ip
 80266ea:	460a      	mov	r2, r1
 80266ec:	e7d7      	b.n	802669e <__b2d+0x4a>
 80266ee:	bf00      	nop
 80266f0:	3ff00000 	.word	0x3ff00000

080266f4 <__d2b>:
 80266f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80266f8:	4689      	mov	r9, r1
 80266fa:	2101      	movs	r1, #1
 80266fc:	ec57 6b10 	vmov	r6, r7, d0
 8026700:	4690      	mov	r8, r2
 8026702:	f7ff fc09 	bl	8025f18 <_Balloc>
 8026706:	4604      	mov	r4, r0
 8026708:	b930      	cbnz	r0, 8026718 <__d2b+0x24>
 802670a:	4602      	mov	r2, r0
 802670c:	4b25      	ldr	r3, [pc, #148]	; (80267a4 <__d2b+0xb0>)
 802670e:	4826      	ldr	r0, [pc, #152]	; (80267a8 <__d2b+0xb4>)
 8026710:	f240 310a 	movw	r1, #778	; 0x30a
 8026714:	f7fc f8fa 	bl	802290c <__assert_func>
 8026718:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802671c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8026720:	bb35      	cbnz	r5, 8026770 <__d2b+0x7c>
 8026722:	2e00      	cmp	r6, #0
 8026724:	9301      	str	r3, [sp, #4]
 8026726:	d028      	beq.n	802677a <__d2b+0x86>
 8026728:	4668      	mov	r0, sp
 802672a:	9600      	str	r6, [sp, #0]
 802672c:	f7ff fd06 	bl	802613c <__lo0bits>
 8026730:	9900      	ldr	r1, [sp, #0]
 8026732:	b300      	cbz	r0, 8026776 <__d2b+0x82>
 8026734:	9a01      	ldr	r2, [sp, #4]
 8026736:	f1c0 0320 	rsb	r3, r0, #32
 802673a:	fa02 f303 	lsl.w	r3, r2, r3
 802673e:	430b      	orrs	r3, r1
 8026740:	40c2      	lsrs	r2, r0
 8026742:	6163      	str	r3, [r4, #20]
 8026744:	9201      	str	r2, [sp, #4]
 8026746:	9b01      	ldr	r3, [sp, #4]
 8026748:	61a3      	str	r3, [r4, #24]
 802674a:	2b00      	cmp	r3, #0
 802674c:	bf14      	ite	ne
 802674e:	2202      	movne	r2, #2
 8026750:	2201      	moveq	r2, #1
 8026752:	6122      	str	r2, [r4, #16]
 8026754:	b1d5      	cbz	r5, 802678c <__d2b+0x98>
 8026756:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802675a:	4405      	add	r5, r0
 802675c:	f8c9 5000 	str.w	r5, [r9]
 8026760:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8026764:	f8c8 0000 	str.w	r0, [r8]
 8026768:	4620      	mov	r0, r4
 802676a:	b003      	add	sp, #12
 802676c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026770:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8026774:	e7d5      	b.n	8026722 <__d2b+0x2e>
 8026776:	6161      	str	r1, [r4, #20]
 8026778:	e7e5      	b.n	8026746 <__d2b+0x52>
 802677a:	a801      	add	r0, sp, #4
 802677c:	f7ff fcde 	bl	802613c <__lo0bits>
 8026780:	9b01      	ldr	r3, [sp, #4]
 8026782:	6163      	str	r3, [r4, #20]
 8026784:	2201      	movs	r2, #1
 8026786:	6122      	str	r2, [r4, #16]
 8026788:	3020      	adds	r0, #32
 802678a:	e7e3      	b.n	8026754 <__d2b+0x60>
 802678c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8026790:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8026794:	f8c9 0000 	str.w	r0, [r9]
 8026798:	6918      	ldr	r0, [r3, #16]
 802679a:	f7ff fcaf 	bl	80260fc <__hi0bits>
 802679e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80267a2:	e7df      	b.n	8026764 <__d2b+0x70>
 80267a4:	08029578 	.word	0x08029578
 80267a8:	08029668 	.word	0x08029668

080267ac <__ratio>:
 80267ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80267b0:	4688      	mov	r8, r1
 80267b2:	4669      	mov	r1, sp
 80267b4:	4681      	mov	r9, r0
 80267b6:	f7ff ff4d 	bl	8026654 <__b2d>
 80267ba:	a901      	add	r1, sp, #4
 80267bc:	4640      	mov	r0, r8
 80267be:	ec55 4b10 	vmov	r4, r5, d0
 80267c2:	f7ff ff47 	bl	8026654 <__b2d>
 80267c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80267ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80267ce:	eba3 0c02 	sub.w	ip, r3, r2
 80267d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80267d6:	1a9b      	subs	r3, r3, r2
 80267d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80267dc:	ec51 0b10 	vmov	r0, r1, d0
 80267e0:	2b00      	cmp	r3, #0
 80267e2:	bfd6      	itet	le
 80267e4:	460a      	movle	r2, r1
 80267e6:	462a      	movgt	r2, r5
 80267e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80267ec:	468b      	mov	fp, r1
 80267ee:	462f      	mov	r7, r5
 80267f0:	bfd4      	ite	le
 80267f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80267f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80267fa:	4620      	mov	r0, r4
 80267fc:	ee10 2a10 	vmov	r2, s0
 8026800:	465b      	mov	r3, fp
 8026802:	4639      	mov	r1, r7
 8026804:	f7da f82c 	bl	8000860 <__aeabi_ddiv>
 8026808:	ec41 0b10 	vmov	d0, r0, r1
 802680c:	b003      	add	sp, #12
 802680e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026812 <__copybits>:
 8026812:	3901      	subs	r1, #1
 8026814:	b570      	push	{r4, r5, r6, lr}
 8026816:	1149      	asrs	r1, r1, #5
 8026818:	6914      	ldr	r4, [r2, #16]
 802681a:	3101      	adds	r1, #1
 802681c:	f102 0314 	add.w	r3, r2, #20
 8026820:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8026824:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8026828:	1f05      	subs	r5, r0, #4
 802682a:	42a3      	cmp	r3, r4
 802682c:	d30c      	bcc.n	8026848 <__copybits+0x36>
 802682e:	1aa3      	subs	r3, r4, r2
 8026830:	3b11      	subs	r3, #17
 8026832:	f023 0303 	bic.w	r3, r3, #3
 8026836:	3211      	adds	r2, #17
 8026838:	42a2      	cmp	r2, r4
 802683a:	bf88      	it	hi
 802683c:	2300      	movhi	r3, #0
 802683e:	4418      	add	r0, r3
 8026840:	2300      	movs	r3, #0
 8026842:	4288      	cmp	r0, r1
 8026844:	d305      	bcc.n	8026852 <__copybits+0x40>
 8026846:	bd70      	pop	{r4, r5, r6, pc}
 8026848:	f853 6b04 	ldr.w	r6, [r3], #4
 802684c:	f845 6f04 	str.w	r6, [r5, #4]!
 8026850:	e7eb      	b.n	802682a <__copybits+0x18>
 8026852:	f840 3b04 	str.w	r3, [r0], #4
 8026856:	e7f4      	b.n	8026842 <__copybits+0x30>

08026858 <__any_on>:
 8026858:	f100 0214 	add.w	r2, r0, #20
 802685c:	6900      	ldr	r0, [r0, #16]
 802685e:	114b      	asrs	r3, r1, #5
 8026860:	4298      	cmp	r0, r3
 8026862:	b510      	push	{r4, lr}
 8026864:	db11      	blt.n	802688a <__any_on+0x32>
 8026866:	dd0a      	ble.n	802687e <__any_on+0x26>
 8026868:	f011 011f 	ands.w	r1, r1, #31
 802686c:	d007      	beq.n	802687e <__any_on+0x26>
 802686e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8026872:	fa24 f001 	lsr.w	r0, r4, r1
 8026876:	fa00 f101 	lsl.w	r1, r0, r1
 802687a:	428c      	cmp	r4, r1
 802687c:	d10b      	bne.n	8026896 <__any_on+0x3e>
 802687e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026882:	4293      	cmp	r3, r2
 8026884:	d803      	bhi.n	802688e <__any_on+0x36>
 8026886:	2000      	movs	r0, #0
 8026888:	bd10      	pop	{r4, pc}
 802688a:	4603      	mov	r3, r0
 802688c:	e7f7      	b.n	802687e <__any_on+0x26>
 802688e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8026892:	2900      	cmp	r1, #0
 8026894:	d0f5      	beq.n	8026882 <__any_on+0x2a>
 8026896:	2001      	movs	r0, #1
 8026898:	e7f6      	b.n	8026888 <__any_on+0x30>

0802689a <_realloc_r>:
 802689a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802689e:	4680      	mov	r8, r0
 80268a0:	4614      	mov	r4, r2
 80268a2:	460e      	mov	r6, r1
 80268a4:	b921      	cbnz	r1, 80268b0 <_realloc_r+0x16>
 80268a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80268aa:	4611      	mov	r1, r2
 80268ac:	f7fc b95a 	b.w	8022b64 <_malloc_r>
 80268b0:	b92a      	cbnz	r2, 80268be <_realloc_r+0x24>
 80268b2:	f7fc f8eb 	bl	8022a8c <_free_r>
 80268b6:	4625      	mov	r5, r4
 80268b8:	4628      	mov	r0, r5
 80268ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80268be:	f000 fa1d 	bl	8026cfc <_malloc_usable_size_r>
 80268c2:	4284      	cmp	r4, r0
 80268c4:	4607      	mov	r7, r0
 80268c6:	d802      	bhi.n	80268ce <_realloc_r+0x34>
 80268c8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80268cc:	d812      	bhi.n	80268f4 <_realloc_r+0x5a>
 80268ce:	4621      	mov	r1, r4
 80268d0:	4640      	mov	r0, r8
 80268d2:	f7fc f947 	bl	8022b64 <_malloc_r>
 80268d6:	4605      	mov	r5, r0
 80268d8:	2800      	cmp	r0, #0
 80268da:	d0ed      	beq.n	80268b8 <_realloc_r+0x1e>
 80268dc:	42bc      	cmp	r4, r7
 80268de:	4622      	mov	r2, r4
 80268e0:	4631      	mov	r1, r6
 80268e2:	bf28      	it	cs
 80268e4:	463a      	movcs	r2, r7
 80268e6:	f7fc f88b 	bl	8022a00 <memcpy>
 80268ea:	4631      	mov	r1, r6
 80268ec:	4640      	mov	r0, r8
 80268ee:	f7fc f8cd 	bl	8022a8c <_free_r>
 80268f2:	e7e1      	b.n	80268b8 <_realloc_r+0x1e>
 80268f4:	4635      	mov	r5, r6
 80268f6:	e7df      	b.n	80268b8 <_realloc_r+0x1e>

080268f8 <__ssputs_r>:
 80268f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80268fc:	688e      	ldr	r6, [r1, #8]
 80268fe:	429e      	cmp	r6, r3
 8026900:	4682      	mov	sl, r0
 8026902:	460c      	mov	r4, r1
 8026904:	4690      	mov	r8, r2
 8026906:	461f      	mov	r7, r3
 8026908:	d838      	bhi.n	802697c <__ssputs_r+0x84>
 802690a:	898a      	ldrh	r2, [r1, #12]
 802690c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8026910:	d032      	beq.n	8026978 <__ssputs_r+0x80>
 8026912:	6825      	ldr	r5, [r4, #0]
 8026914:	6909      	ldr	r1, [r1, #16]
 8026916:	eba5 0901 	sub.w	r9, r5, r1
 802691a:	6965      	ldr	r5, [r4, #20]
 802691c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026920:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8026924:	3301      	adds	r3, #1
 8026926:	444b      	add	r3, r9
 8026928:	106d      	asrs	r5, r5, #1
 802692a:	429d      	cmp	r5, r3
 802692c:	bf38      	it	cc
 802692e:	461d      	movcc	r5, r3
 8026930:	0553      	lsls	r3, r2, #21
 8026932:	d531      	bpl.n	8026998 <__ssputs_r+0xa0>
 8026934:	4629      	mov	r1, r5
 8026936:	f7fc f915 	bl	8022b64 <_malloc_r>
 802693a:	4606      	mov	r6, r0
 802693c:	b950      	cbnz	r0, 8026954 <__ssputs_r+0x5c>
 802693e:	230c      	movs	r3, #12
 8026940:	f8ca 3000 	str.w	r3, [sl]
 8026944:	89a3      	ldrh	r3, [r4, #12]
 8026946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802694a:	81a3      	strh	r3, [r4, #12]
 802694c:	f04f 30ff 	mov.w	r0, #4294967295
 8026950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026954:	6921      	ldr	r1, [r4, #16]
 8026956:	464a      	mov	r2, r9
 8026958:	f7fc f852 	bl	8022a00 <memcpy>
 802695c:	89a3      	ldrh	r3, [r4, #12]
 802695e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8026962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026966:	81a3      	strh	r3, [r4, #12]
 8026968:	6126      	str	r6, [r4, #16]
 802696a:	6165      	str	r5, [r4, #20]
 802696c:	444e      	add	r6, r9
 802696e:	eba5 0509 	sub.w	r5, r5, r9
 8026972:	6026      	str	r6, [r4, #0]
 8026974:	60a5      	str	r5, [r4, #8]
 8026976:	463e      	mov	r6, r7
 8026978:	42be      	cmp	r6, r7
 802697a:	d900      	bls.n	802697e <__ssputs_r+0x86>
 802697c:	463e      	mov	r6, r7
 802697e:	6820      	ldr	r0, [r4, #0]
 8026980:	4632      	mov	r2, r6
 8026982:	4641      	mov	r1, r8
 8026984:	f7fc f84a 	bl	8022a1c <memmove>
 8026988:	68a3      	ldr	r3, [r4, #8]
 802698a:	1b9b      	subs	r3, r3, r6
 802698c:	60a3      	str	r3, [r4, #8]
 802698e:	6823      	ldr	r3, [r4, #0]
 8026990:	4433      	add	r3, r6
 8026992:	6023      	str	r3, [r4, #0]
 8026994:	2000      	movs	r0, #0
 8026996:	e7db      	b.n	8026950 <__ssputs_r+0x58>
 8026998:	462a      	mov	r2, r5
 802699a:	f7ff ff7e 	bl	802689a <_realloc_r>
 802699e:	4606      	mov	r6, r0
 80269a0:	2800      	cmp	r0, #0
 80269a2:	d1e1      	bne.n	8026968 <__ssputs_r+0x70>
 80269a4:	6921      	ldr	r1, [r4, #16]
 80269a6:	4650      	mov	r0, sl
 80269a8:	f7fc f870 	bl	8022a8c <_free_r>
 80269ac:	e7c7      	b.n	802693e <__ssputs_r+0x46>
	...

080269b0 <_svfiprintf_r>:
 80269b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80269b4:	4698      	mov	r8, r3
 80269b6:	898b      	ldrh	r3, [r1, #12]
 80269b8:	061b      	lsls	r3, r3, #24
 80269ba:	b09d      	sub	sp, #116	; 0x74
 80269bc:	4607      	mov	r7, r0
 80269be:	460d      	mov	r5, r1
 80269c0:	4614      	mov	r4, r2
 80269c2:	d50e      	bpl.n	80269e2 <_svfiprintf_r+0x32>
 80269c4:	690b      	ldr	r3, [r1, #16]
 80269c6:	b963      	cbnz	r3, 80269e2 <_svfiprintf_r+0x32>
 80269c8:	2140      	movs	r1, #64	; 0x40
 80269ca:	f7fc f8cb 	bl	8022b64 <_malloc_r>
 80269ce:	6028      	str	r0, [r5, #0]
 80269d0:	6128      	str	r0, [r5, #16]
 80269d2:	b920      	cbnz	r0, 80269de <_svfiprintf_r+0x2e>
 80269d4:	230c      	movs	r3, #12
 80269d6:	603b      	str	r3, [r7, #0]
 80269d8:	f04f 30ff 	mov.w	r0, #4294967295
 80269dc:	e0d1      	b.n	8026b82 <_svfiprintf_r+0x1d2>
 80269de:	2340      	movs	r3, #64	; 0x40
 80269e0:	616b      	str	r3, [r5, #20]
 80269e2:	2300      	movs	r3, #0
 80269e4:	9309      	str	r3, [sp, #36]	; 0x24
 80269e6:	2320      	movs	r3, #32
 80269e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80269ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80269f0:	2330      	movs	r3, #48	; 0x30
 80269f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8026b9c <_svfiprintf_r+0x1ec>
 80269f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80269fa:	f04f 0901 	mov.w	r9, #1
 80269fe:	4623      	mov	r3, r4
 8026a00:	469a      	mov	sl, r3
 8026a02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026a06:	b10a      	cbz	r2, 8026a0c <_svfiprintf_r+0x5c>
 8026a08:	2a25      	cmp	r2, #37	; 0x25
 8026a0a:	d1f9      	bne.n	8026a00 <_svfiprintf_r+0x50>
 8026a0c:	ebba 0b04 	subs.w	fp, sl, r4
 8026a10:	d00b      	beq.n	8026a2a <_svfiprintf_r+0x7a>
 8026a12:	465b      	mov	r3, fp
 8026a14:	4622      	mov	r2, r4
 8026a16:	4629      	mov	r1, r5
 8026a18:	4638      	mov	r0, r7
 8026a1a:	f7ff ff6d 	bl	80268f8 <__ssputs_r>
 8026a1e:	3001      	adds	r0, #1
 8026a20:	f000 80aa 	beq.w	8026b78 <_svfiprintf_r+0x1c8>
 8026a24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026a26:	445a      	add	r2, fp
 8026a28:	9209      	str	r2, [sp, #36]	; 0x24
 8026a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8026a2e:	2b00      	cmp	r3, #0
 8026a30:	f000 80a2 	beq.w	8026b78 <_svfiprintf_r+0x1c8>
 8026a34:	2300      	movs	r3, #0
 8026a36:	f04f 32ff 	mov.w	r2, #4294967295
 8026a3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026a3e:	f10a 0a01 	add.w	sl, sl, #1
 8026a42:	9304      	str	r3, [sp, #16]
 8026a44:	9307      	str	r3, [sp, #28]
 8026a46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026a4a:	931a      	str	r3, [sp, #104]	; 0x68
 8026a4c:	4654      	mov	r4, sl
 8026a4e:	2205      	movs	r2, #5
 8026a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026a54:	4851      	ldr	r0, [pc, #324]	; (8026b9c <_svfiprintf_r+0x1ec>)
 8026a56:	f7d9 fbbb 	bl	80001d0 <memchr>
 8026a5a:	9a04      	ldr	r2, [sp, #16]
 8026a5c:	b9d8      	cbnz	r0, 8026a96 <_svfiprintf_r+0xe6>
 8026a5e:	06d0      	lsls	r0, r2, #27
 8026a60:	bf44      	itt	mi
 8026a62:	2320      	movmi	r3, #32
 8026a64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026a68:	0711      	lsls	r1, r2, #28
 8026a6a:	bf44      	itt	mi
 8026a6c:	232b      	movmi	r3, #43	; 0x2b
 8026a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026a72:	f89a 3000 	ldrb.w	r3, [sl]
 8026a76:	2b2a      	cmp	r3, #42	; 0x2a
 8026a78:	d015      	beq.n	8026aa6 <_svfiprintf_r+0xf6>
 8026a7a:	9a07      	ldr	r2, [sp, #28]
 8026a7c:	4654      	mov	r4, sl
 8026a7e:	2000      	movs	r0, #0
 8026a80:	f04f 0c0a 	mov.w	ip, #10
 8026a84:	4621      	mov	r1, r4
 8026a86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026a8a:	3b30      	subs	r3, #48	; 0x30
 8026a8c:	2b09      	cmp	r3, #9
 8026a8e:	d94e      	bls.n	8026b2e <_svfiprintf_r+0x17e>
 8026a90:	b1b0      	cbz	r0, 8026ac0 <_svfiprintf_r+0x110>
 8026a92:	9207      	str	r2, [sp, #28]
 8026a94:	e014      	b.n	8026ac0 <_svfiprintf_r+0x110>
 8026a96:	eba0 0308 	sub.w	r3, r0, r8
 8026a9a:	fa09 f303 	lsl.w	r3, r9, r3
 8026a9e:	4313      	orrs	r3, r2
 8026aa0:	9304      	str	r3, [sp, #16]
 8026aa2:	46a2      	mov	sl, r4
 8026aa4:	e7d2      	b.n	8026a4c <_svfiprintf_r+0x9c>
 8026aa6:	9b03      	ldr	r3, [sp, #12]
 8026aa8:	1d19      	adds	r1, r3, #4
 8026aaa:	681b      	ldr	r3, [r3, #0]
 8026aac:	9103      	str	r1, [sp, #12]
 8026aae:	2b00      	cmp	r3, #0
 8026ab0:	bfbb      	ittet	lt
 8026ab2:	425b      	neglt	r3, r3
 8026ab4:	f042 0202 	orrlt.w	r2, r2, #2
 8026ab8:	9307      	strge	r3, [sp, #28]
 8026aba:	9307      	strlt	r3, [sp, #28]
 8026abc:	bfb8      	it	lt
 8026abe:	9204      	strlt	r2, [sp, #16]
 8026ac0:	7823      	ldrb	r3, [r4, #0]
 8026ac2:	2b2e      	cmp	r3, #46	; 0x2e
 8026ac4:	d10c      	bne.n	8026ae0 <_svfiprintf_r+0x130>
 8026ac6:	7863      	ldrb	r3, [r4, #1]
 8026ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8026aca:	d135      	bne.n	8026b38 <_svfiprintf_r+0x188>
 8026acc:	9b03      	ldr	r3, [sp, #12]
 8026ace:	1d1a      	adds	r2, r3, #4
 8026ad0:	681b      	ldr	r3, [r3, #0]
 8026ad2:	9203      	str	r2, [sp, #12]
 8026ad4:	2b00      	cmp	r3, #0
 8026ad6:	bfb8      	it	lt
 8026ad8:	f04f 33ff 	movlt.w	r3, #4294967295
 8026adc:	3402      	adds	r4, #2
 8026ade:	9305      	str	r3, [sp, #20]
 8026ae0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8026bac <_svfiprintf_r+0x1fc>
 8026ae4:	7821      	ldrb	r1, [r4, #0]
 8026ae6:	2203      	movs	r2, #3
 8026ae8:	4650      	mov	r0, sl
 8026aea:	f7d9 fb71 	bl	80001d0 <memchr>
 8026aee:	b140      	cbz	r0, 8026b02 <_svfiprintf_r+0x152>
 8026af0:	2340      	movs	r3, #64	; 0x40
 8026af2:	eba0 000a 	sub.w	r0, r0, sl
 8026af6:	fa03 f000 	lsl.w	r0, r3, r0
 8026afa:	9b04      	ldr	r3, [sp, #16]
 8026afc:	4303      	orrs	r3, r0
 8026afe:	3401      	adds	r4, #1
 8026b00:	9304      	str	r3, [sp, #16]
 8026b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026b06:	4826      	ldr	r0, [pc, #152]	; (8026ba0 <_svfiprintf_r+0x1f0>)
 8026b08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026b0c:	2206      	movs	r2, #6
 8026b0e:	f7d9 fb5f 	bl	80001d0 <memchr>
 8026b12:	2800      	cmp	r0, #0
 8026b14:	d038      	beq.n	8026b88 <_svfiprintf_r+0x1d8>
 8026b16:	4b23      	ldr	r3, [pc, #140]	; (8026ba4 <_svfiprintf_r+0x1f4>)
 8026b18:	bb1b      	cbnz	r3, 8026b62 <_svfiprintf_r+0x1b2>
 8026b1a:	9b03      	ldr	r3, [sp, #12]
 8026b1c:	3307      	adds	r3, #7
 8026b1e:	f023 0307 	bic.w	r3, r3, #7
 8026b22:	3308      	adds	r3, #8
 8026b24:	9303      	str	r3, [sp, #12]
 8026b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026b28:	4433      	add	r3, r6
 8026b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8026b2c:	e767      	b.n	80269fe <_svfiprintf_r+0x4e>
 8026b2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8026b32:	460c      	mov	r4, r1
 8026b34:	2001      	movs	r0, #1
 8026b36:	e7a5      	b.n	8026a84 <_svfiprintf_r+0xd4>
 8026b38:	2300      	movs	r3, #0
 8026b3a:	3401      	adds	r4, #1
 8026b3c:	9305      	str	r3, [sp, #20]
 8026b3e:	4619      	mov	r1, r3
 8026b40:	f04f 0c0a 	mov.w	ip, #10
 8026b44:	4620      	mov	r0, r4
 8026b46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026b4a:	3a30      	subs	r2, #48	; 0x30
 8026b4c:	2a09      	cmp	r2, #9
 8026b4e:	d903      	bls.n	8026b58 <_svfiprintf_r+0x1a8>
 8026b50:	2b00      	cmp	r3, #0
 8026b52:	d0c5      	beq.n	8026ae0 <_svfiprintf_r+0x130>
 8026b54:	9105      	str	r1, [sp, #20]
 8026b56:	e7c3      	b.n	8026ae0 <_svfiprintf_r+0x130>
 8026b58:	fb0c 2101 	mla	r1, ip, r1, r2
 8026b5c:	4604      	mov	r4, r0
 8026b5e:	2301      	movs	r3, #1
 8026b60:	e7f0      	b.n	8026b44 <_svfiprintf_r+0x194>
 8026b62:	ab03      	add	r3, sp, #12
 8026b64:	9300      	str	r3, [sp, #0]
 8026b66:	462a      	mov	r2, r5
 8026b68:	4b0f      	ldr	r3, [pc, #60]	; (8026ba8 <_svfiprintf_r+0x1f8>)
 8026b6a:	a904      	add	r1, sp, #16
 8026b6c:	4638      	mov	r0, r7
 8026b6e:	f7fc fa67 	bl	8023040 <_printf_float>
 8026b72:	1c42      	adds	r2, r0, #1
 8026b74:	4606      	mov	r6, r0
 8026b76:	d1d6      	bne.n	8026b26 <_svfiprintf_r+0x176>
 8026b78:	89ab      	ldrh	r3, [r5, #12]
 8026b7a:	065b      	lsls	r3, r3, #25
 8026b7c:	f53f af2c 	bmi.w	80269d8 <_svfiprintf_r+0x28>
 8026b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026b82:	b01d      	add	sp, #116	; 0x74
 8026b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026b88:	ab03      	add	r3, sp, #12
 8026b8a:	9300      	str	r3, [sp, #0]
 8026b8c:	462a      	mov	r2, r5
 8026b8e:	4b06      	ldr	r3, [pc, #24]	; (8026ba8 <_svfiprintf_r+0x1f8>)
 8026b90:	a904      	add	r1, sp, #16
 8026b92:	4638      	mov	r0, r7
 8026b94:	f7fc fcf8 	bl	8023588 <_printf_i>
 8026b98:	e7eb      	b.n	8026b72 <_svfiprintf_r+0x1c2>
 8026b9a:	bf00      	nop
 8026b9c:	08029360 	.word	0x08029360
 8026ba0:	0802936a 	.word	0x0802936a
 8026ba4:	08023041 	.word	0x08023041
 8026ba8:	080268f9 	.word	0x080268f9
 8026bac:	08029366 	.word	0x08029366

08026bb0 <__sread>:
 8026bb0:	b510      	push	{r4, lr}
 8026bb2:	460c      	mov	r4, r1
 8026bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026bb8:	f000 f8a8 	bl	8026d0c <_read_r>
 8026bbc:	2800      	cmp	r0, #0
 8026bbe:	bfab      	itete	ge
 8026bc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8026bc4:	181b      	addge	r3, r3, r0
 8026bc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026bca:	bfac      	ite	ge
 8026bcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8026bce:	81a3      	strhlt	r3, [r4, #12]
 8026bd0:	bd10      	pop	{r4, pc}

08026bd2 <__swrite>:
 8026bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026bd6:	461f      	mov	r7, r3
 8026bd8:	898b      	ldrh	r3, [r1, #12]
 8026bda:	05db      	lsls	r3, r3, #23
 8026bdc:	4605      	mov	r5, r0
 8026bde:	460c      	mov	r4, r1
 8026be0:	4616      	mov	r6, r2
 8026be2:	d505      	bpl.n	8026bf0 <__swrite+0x1e>
 8026be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026be8:	2302      	movs	r3, #2
 8026bea:	2200      	movs	r2, #0
 8026bec:	f000 f874 	bl	8026cd8 <_lseek_r>
 8026bf0:	89a3      	ldrh	r3, [r4, #12]
 8026bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026bf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026bfa:	81a3      	strh	r3, [r4, #12]
 8026bfc:	4632      	mov	r2, r6
 8026bfe:	463b      	mov	r3, r7
 8026c00:	4628      	mov	r0, r5
 8026c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026c06:	f000 b823 	b.w	8026c50 <_write_r>

08026c0a <__sseek>:
 8026c0a:	b510      	push	{r4, lr}
 8026c0c:	460c      	mov	r4, r1
 8026c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026c12:	f000 f861 	bl	8026cd8 <_lseek_r>
 8026c16:	1c43      	adds	r3, r0, #1
 8026c18:	89a3      	ldrh	r3, [r4, #12]
 8026c1a:	bf15      	itete	ne
 8026c1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8026c1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026c22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026c26:	81a3      	strheq	r3, [r4, #12]
 8026c28:	bf18      	it	ne
 8026c2a:	81a3      	strhne	r3, [r4, #12]
 8026c2c:	bd10      	pop	{r4, pc}

08026c2e <__sclose>:
 8026c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026c32:	f000 b81f 	b.w	8026c74 <_close_r>

08026c36 <__ascii_wctomb>:
 8026c36:	b149      	cbz	r1, 8026c4c <__ascii_wctomb+0x16>
 8026c38:	2aff      	cmp	r2, #255	; 0xff
 8026c3a:	bf85      	ittet	hi
 8026c3c:	238a      	movhi	r3, #138	; 0x8a
 8026c3e:	6003      	strhi	r3, [r0, #0]
 8026c40:	700a      	strbls	r2, [r1, #0]
 8026c42:	f04f 30ff 	movhi.w	r0, #4294967295
 8026c46:	bf98      	it	ls
 8026c48:	2001      	movls	r0, #1
 8026c4a:	4770      	bx	lr
 8026c4c:	4608      	mov	r0, r1
 8026c4e:	4770      	bx	lr

08026c50 <_write_r>:
 8026c50:	b538      	push	{r3, r4, r5, lr}
 8026c52:	4d07      	ldr	r5, [pc, #28]	; (8026c70 <_write_r+0x20>)
 8026c54:	4604      	mov	r4, r0
 8026c56:	4608      	mov	r0, r1
 8026c58:	4611      	mov	r1, r2
 8026c5a:	2200      	movs	r2, #0
 8026c5c:	602a      	str	r2, [r5, #0]
 8026c5e:	461a      	mov	r2, r3
 8026c60:	f7e2 f82b 	bl	8008cba <_write>
 8026c64:	1c43      	adds	r3, r0, #1
 8026c66:	d102      	bne.n	8026c6e <_write_r+0x1e>
 8026c68:	682b      	ldr	r3, [r5, #0]
 8026c6a:	b103      	cbz	r3, 8026c6e <_write_r+0x1e>
 8026c6c:	6023      	str	r3, [r4, #0]
 8026c6e:	bd38      	pop	{r3, r4, r5, pc}
 8026c70:	20002750 	.word	0x20002750

08026c74 <_close_r>:
 8026c74:	b538      	push	{r3, r4, r5, lr}
 8026c76:	4d06      	ldr	r5, [pc, #24]	; (8026c90 <_close_r+0x1c>)
 8026c78:	2300      	movs	r3, #0
 8026c7a:	4604      	mov	r4, r0
 8026c7c:	4608      	mov	r0, r1
 8026c7e:	602b      	str	r3, [r5, #0]
 8026c80:	f7e2 f837 	bl	8008cf2 <_close>
 8026c84:	1c43      	adds	r3, r0, #1
 8026c86:	d102      	bne.n	8026c8e <_close_r+0x1a>
 8026c88:	682b      	ldr	r3, [r5, #0]
 8026c8a:	b103      	cbz	r3, 8026c8e <_close_r+0x1a>
 8026c8c:	6023      	str	r3, [r4, #0]
 8026c8e:	bd38      	pop	{r3, r4, r5, pc}
 8026c90:	20002750 	.word	0x20002750

08026c94 <_fstat_r>:
 8026c94:	b538      	push	{r3, r4, r5, lr}
 8026c96:	4d07      	ldr	r5, [pc, #28]	; (8026cb4 <_fstat_r+0x20>)
 8026c98:	2300      	movs	r3, #0
 8026c9a:	4604      	mov	r4, r0
 8026c9c:	4608      	mov	r0, r1
 8026c9e:	4611      	mov	r1, r2
 8026ca0:	602b      	str	r3, [r5, #0]
 8026ca2:	f7e2 f832 	bl	8008d0a <_fstat>
 8026ca6:	1c43      	adds	r3, r0, #1
 8026ca8:	d102      	bne.n	8026cb0 <_fstat_r+0x1c>
 8026caa:	682b      	ldr	r3, [r5, #0]
 8026cac:	b103      	cbz	r3, 8026cb0 <_fstat_r+0x1c>
 8026cae:	6023      	str	r3, [r4, #0]
 8026cb0:	bd38      	pop	{r3, r4, r5, pc}
 8026cb2:	bf00      	nop
 8026cb4:	20002750 	.word	0x20002750

08026cb8 <_isatty_r>:
 8026cb8:	b538      	push	{r3, r4, r5, lr}
 8026cba:	4d06      	ldr	r5, [pc, #24]	; (8026cd4 <_isatty_r+0x1c>)
 8026cbc:	2300      	movs	r3, #0
 8026cbe:	4604      	mov	r4, r0
 8026cc0:	4608      	mov	r0, r1
 8026cc2:	602b      	str	r3, [r5, #0]
 8026cc4:	f7e2 f831 	bl	8008d2a <_isatty>
 8026cc8:	1c43      	adds	r3, r0, #1
 8026cca:	d102      	bne.n	8026cd2 <_isatty_r+0x1a>
 8026ccc:	682b      	ldr	r3, [r5, #0]
 8026cce:	b103      	cbz	r3, 8026cd2 <_isatty_r+0x1a>
 8026cd0:	6023      	str	r3, [r4, #0]
 8026cd2:	bd38      	pop	{r3, r4, r5, pc}
 8026cd4:	20002750 	.word	0x20002750

08026cd8 <_lseek_r>:
 8026cd8:	b538      	push	{r3, r4, r5, lr}
 8026cda:	4d07      	ldr	r5, [pc, #28]	; (8026cf8 <_lseek_r+0x20>)
 8026cdc:	4604      	mov	r4, r0
 8026cde:	4608      	mov	r0, r1
 8026ce0:	4611      	mov	r1, r2
 8026ce2:	2200      	movs	r2, #0
 8026ce4:	602a      	str	r2, [r5, #0]
 8026ce6:	461a      	mov	r2, r3
 8026ce8:	f7e2 f82a 	bl	8008d40 <_lseek>
 8026cec:	1c43      	adds	r3, r0, #1
 8026cee:	d102      	bne.n	8026cf6 <_lseek_r+0x1e>
 8026cf0:	682b      	ldr	r3, [r5, #0]
 8026cf2:	b103      	cbz	r3, 8026cf6 <_lseek_r+0x1e>
 8026cf4:	6023      	str	r3, [r4, #0]
 8026cf6:	bd38      	pop	{r3, r4, r5, pc}
 8026cf8:	20002750 	.word	0x20002750

08026cfc <_malloc_usable_size_r>:
 8026cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026d00:	1f18      	subs	r0, r3, #4
 8026d02:	2b00      	cmp	r3, #0
 8026d04:	bfbc      	itt	lt
 8026d06:	580b      	ldrlt	r3, [r1, r0]
 8026d08:	18c0      	addlt	r0, r0, r3
 8026d0a:	4770      	bx	lr

08026d0c <_read_r>:
 8026d0c:	b538      	push	{r3, r4, r5, lr}
 8026d0e:	4d07      	ldr	r5, [pc, #28]	; (8026d2c <_read_r+0x20>)
 8026d10:	4604      	mov	r4, r0
 8026d12:	4608      	mov	r0, r1
 8026d14:	4611      	mov	r1, r2
 8026d16:	2200      	movs	r2, #0
 8026d18:	602a      	str	r2, [r5, #0]
 8026d1a:	461a      	mov	r2, r3
 8026d1c:	f7e1 ffb0 	bl	8008c80 <_read>
 8026d20:	1c43      	adds	r3, r0, #1
 8026d22:	d102      	bne.n	8026d2a <_read_r+0x1e>
 8026d24:	682b      	ldr	r3, [r5, #0]
 8026d26:	b103      	cbz	r3, 8026d2a <_read_r+0x1e>
 8026d28:	6023      	str	r3, [r4, #0]
 8026d2a:	bd38      	pop	{r3, r4, r5, pc}
 8026d2c:	20002750 	.word	0x20002750

08026d30 <_init>:
 8026d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026d32:	bf00      	nop
 8026d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026d36:	bc08      	pop	{r3}
 8026d38:	469e      	mov	lr, r3
 8026d3a:	4770      	bx	lr

08026d3c <_fini>:
 8026d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026d3e:	bf00      	nop
 8026d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026d42:	bc08      	pop	{r3}
 8026d44:	469e      	mov	lr, r3
 8026d46:	4770      	bx	lr
